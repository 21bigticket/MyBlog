{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/RecentPlaces.lnk","path":"RecentPlaces.lnk","modified":0,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0},{"_id":"source/resources/alipay-reward-image1.png","path":"resources/alipay-reward-image1.png","modified":0,"renderable":0},{"_id":"source/resources/android-svn-attention-20160403130946.png","path":"resources/android-svn-attention-20160403130946.png","modified":0,"renderable":0},{"_id":"source/resources/greenvpn.gif","path":"resources/greenvpn.gif","modified":0,"renderable":0},{"_id":"source/resources/volley-demo-20160326012642.png","path":"resources/volley-demo-20160326012642.png","modified":0,"renderable":0},{"_id":"source/resources/wechat-reward-image1.png","path":"resources/wechat-reward-image1.png","modified":0,"renderable":0},{"_id":"source/resources/alipay-reward-image.JPG","path":"resources/alipay-reward-image.JPG","modified":0,"renderable":0},{"_id":"source/resources/coding-standards-1.png","path":"resources/coding-standards-1.png","modified":0,"renderable":0},{"_id":"source/resources/coding-standards-2.1.png","path":"resources/coding-standards-2.1.png","modified":0,"renderable":0},{"_id":"source/resources/alipay-reward-image.png","path":"resources/alipay-reward-image.png","modified":0,"renderable":0},{"_id":"source/resources/coding-standards-2.2.png","path":"resources/coding-standards-2.2.png","modified":0,"renderable":0},{"_id":"source/resources/eclipse-tips-20151107221921217.png","path":"resources/eclipse-tips-20151107221921217.png","modified":0,"renderable":0},{"_id":"source/resources/coding-standards-3.png","path":"resources/coding-standards-3.png","modified":0,"renderable":0},{"_id":"source/resources/iov-1.png","path":"resources/iov-1.png","modified":0,"renderable":0},{"_id":"source/resources/iov-3.png","path":"resources/iov-3.png","modified":0,"renderable":0},{"_id":"source/resources/iov-4.png","path":"resources/iov-4.png","modified":0,"renderable":0},{"_id":"source/resources/iov-5.png","path":"resources/iov-5.png","modified":0,"renderable":0},{"_id":"source/resources/wechat-reward-image.png","path":"resources/wechat-reward-image.png","modified":0,"renderable":0},{"_id":"source/resources/wechat-reward-image.JPG","path":"resources/wechat-reward-image.JPG","modified":0,"renderable":0},{"_id":"source/resources/iov-2.png","path":"resources/iov-2.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"7885d7072e8a7ce48b20d0f810fedd3acdaf9ec8","modified":1497340525000},{"_id":"source/RecentPlaces.lnk","hash":"dd6573fab586cdd35010f43fa5570efc7c9fc854","modified":1496758107000},{"_id":"source/favicon.png","hash":"c92b43e2292f6f98c200628d1fa1ff2522f24864","modified":1496758107000},{"_id":"source/resume.md","hash":"4dacc335a9559ad7c9910fd9a02de82f1193ec70","modified":1522143143373},{"_id":"source/the-gift-for-hy.md","hash":"ef3f791220f5cb22ee6a8e9c2e4d5be8a3d78c5c","modified":1501122477000},{"_id":"source/.DS_Store","hash":"cb0f7e200dc223f253e37a18b675746743fa19d8","modified":1548062963687},{"_id":"source/404/index.md","hash":"bab2d830974ce536c22bb789fdcea7d32c2af7bd","modified":1548063219416},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1490291568000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1490291568000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1490291568000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1490291568000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1490291568000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1490291568000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1490291568000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1490291568000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1490291568000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1490291568000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1490291568000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1490291568000},{"_id":"themes/next/_config.yml","hash":"20223c9adabcf2945afa7e41e36147b55e8dde8c","modified":1523962011000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1490291568000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1490291568000},{"_id":"themes/next/.DS_Store","hash":"a570bea4df8f992d85b822b4a10553c68aa9e01f","modified":1543892491640},{"_id":"source/_posts/2016-03-21.helloworld.md","hash":"26fa115ed843a19e005653b1c494034b27d552a2","modified":1496758107000},{"_id":"source/_posts/2016-03-24.ubuntu-15.04-install-jdk.md","hash":"826b1dde48d57a9e4d88fb14e616d715a5ad91ad","modified":1548062608451},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1539050813641},{"_id":"source/_posts/2016-03-26.first-use-volley-demo.md","hash":"2a31b3172f9f6b7c70b468c534ebed88fcf42a88","modified":1496758107000},{"_id":"source/_posts/2016-03-27.eclipse-tips-variable.md","hash":"3f188a0cf34f32320eb6f89489cbaaba4240e0d6","modified":1496758107000},{"_id":"source/_posts/2016-03-28.lanqiao-exam.md","hash":"48f0dbdea658daddb568e85f1c502dd3f6c1540f","modified":1496758107000},{"_id":"source/_posts/2016-04-03.android-svn-attention.md","hash":"609eb16bbbf3abb6db324e271a32ad95705b155b","modified":1496758107000},{"_id":"source/_posts/2016-04-05.coding-standards.md","hash":"d9c67ce0c84e95ff67275888f194944be54ff198","modified":1496758107000},{"_id":"source/_posts/2016-08-31.server-install-centos6.md","hash":"4fc06ee906eeb5ca8a56f56639ed3e93ec78a92a","modified":1548062574197},{"_id":"source/_posts/2016-12-13.elasticsearch-get-start.md","hash":"e55aa7af51da287c5652c65dfd746c2296130719","modified":1548062563997},{"_id":"source/_posts/2017-01-06.connect-oracle11g-rac-url.md","hash":"47186e6d68d3cda9ac7aa6f40729974dc546f15f","modified":1548062550325},{"_id":"source/_posts/2017-07-12.jdk-map-source-explore.md","hash":"c1ca9096ff36ea94225d261664c4febf94752313","modified":1548062544190},{"_id":"source/_posts/2017-07-18.win10-download.md","hash":"d4de7d06986ec8d9853f5a8097c89abc908ceeed","modified":1501117890000},{"_id":"source/_posts/2017-07-19.spring-boot-mybatis-logback.md","hash":"e75191684c05070d70ac0000e5488e6a8abd44f3","modified":1515636932578},{"_id":"source/_posts/2017-08-02.customize-blocked-queue.md","hash":"7436332578120cbc363a9f6d4fe0b8cc31c723ec","modified":1548062524559},{"_id":"source/_posts/2017-08-31.mysql-start-error.md","hash":"a60320dfe954de34284827833ddf7ca5c2293df2","modified":1548062515823},{"_id":"source/_posts/2017-11-08.dubbo-admin-install.md","hash":"c90166cfb7b6af097db6998ef421566bd7165b20","modified":1523961573952},{"_id":"source/_posts/2017-11-01.zookeeper-cluster.md","hash":"73bcdfb67d9762068d76a2ecd8eb641c0b1ecfc5","modified":1548062510025},{"_id":"source/_posts/2017-11-10.druid-oracle-pscache.md","hash":"4e4224b4c21a671068c31a95098338fa488197c8","modified":1515636884005},{"_id":"source/_posts/2017-11-14.mysql-chinese-character-encoding.md","hash":"b42957bdcdee5a660a4ae76c2b0cb8cf0947960c","modified":1515636893222},{"_id":"source/_posts/2017-12-05.redux-and-mobx-first.md","hash":"da9bb51dc09ca659b548ab728048226182b78e0b","modified":1548062492641},{"_id":"source/_posts/.DS_Store","hash":"4fb6c4fffc991e407a52ec163ad07e674aca4c24","modified":1547522831554},{"_id":"source/_posts/2018-01-03.devops-gitlab.md","hash":"a35e0222e79845f0d05e2b623a73a6853c394bf8","modified":1548062471551},{"_id":"source/_posts/2017-12-11.tips-for-improve-java-skill.md","hash":"4972cdadb68129dddc94f142b6399531952f66eb","modified":1512970389581},{"_id":"source/_posts/2018-01-04.devops-jenkins.md","hash":"ee5cb5c43c8b4846f2cbddf633b69a228cfe92c3","modified":1548062465778},{"_id":"source/_posts/2018-01-11.camelcase-underline-transform.md","hash":"11c85cf79fc0702c4f5ab87d06e09f33ce68699e","modified":1548062454477},{"_id":"source/_posts/2018-01-12.elasticsearch-note.md","hash":"5eeaa106ab99164ccc1d0720558c1e61975f98e9","modified":1548062437151},{"_id":"source/_posts/2018-01-16.db-page-sqls.md","hash":"8dc63ae9791cb1a078491adcd78948ba1c2b03a1","modified":1548062428617},{"_id":"source/_posts/2018-02-05.osx-software-lists.md","hash":"88e614fe780641f6ee4939234d2834b6b61bd2f3","modified":1518170831758},{"_id":"source/_posts/2018-02-07.regular-expression-list.md","hash":"ebb80c5fc6d69732c850c88d1f634c551d1d5524","modified":1548062418089},{"_id":"source/about/index.md","hash":"d4390e6169137461e314acb3a99bb4ac120312f6","modified":1532934623704},{"_id":"source/_posts/2018-09-18.how-to-update-the-fork-project.md","hash":"2f2ed74f430a878567bf47ac30249ea92b2a7919","modified":1537236829382},{"_id":"source/_posts/2018-09-20.query-language-differences-between-neo4j-and-mysql.md","hash":"411c717eaae59d5403023f2153fe4245c23a0d50","modified":1537423525352},{"_id":"source/_posts/2018-09-28.run-node-service-in-background.md","hash":"c7b76a66717d1eb8a75acbef59005a9452b9762a","modified":1538099961540},{"_id":"source/_posts/2019-01-14.solve-mac-install-minikube-problem.md","hash":"183e70e523eeae490043977eb20cb70a4e6b310a","modified":1547451026514},{"_id":"source/_posts/2019-01-17.solve-nginx-413-problem.md","hash":"80bb1be8698e229e016ca269c885a85e5d9bf385","modified":1547693783812},{"_id":"source/_posts/2019-01-01.bye2018-hello2019.md","hash":"11d99b64d1b86fbe5e675bb33bfc070140d8f818","modified":1547522228657},{"_id":"source/_posts/2019-01-21.modify-git-commit-timestamp.md","hash":"d59c373909f908aa78252beaef3d00c18cc3166f","modified":1548062702646},{"_id":"source/categories/index.md","hash":"e24e174f7a4d065243732368d969f5cf9b42fc79","modified":1496758107000},{"_id":"source/about/.DS_Store","hash":"64dc80f95f42dbf12ce9ef6d86358c25c2d86d25","modified":1521382053886},{"_id":"source/_posts/2018-11-07.spring-boot-start.md","hash":"5957df5c2c2100aa57b2a0dfabe61c8a6bee0ebe","modified":1541643148061},{"_id":"source/_posts/2018-08-20.spring-boot-global-exception-handler.md","hash":"4e02f49cb12c7d0dfcdc3b9b688e7abac57b69e2","modified":1534844090922},{"_id":"source/resources/alipay-reward-image1.png","hash":"69804a3cab7198c09c8e08564bf6abc43f606a25","modified":1496758107000},{"_id":"source/resources/android-svn-attention-20160403130946.png","hash":"418f523a2f12955fe0f3e27ea80f655a28a6f88a","modified":1496758107000},{"_id":"source/resources/.DS_Store","hash":"13ab0299520a605b716a9549df1f5613e5a57dfb","modified":1496991313000},{"_id":"source/resources/greenvpn.gif","hash":"bab361440f0c5c019c0e6e96c6415860101e2ec2","modified":1496758107000},{"_id":"source/resources/volley-demo-20160326012642.png","hash":"771756eaf6a88b547cde29ce18bf09c04912471d","modified":1496758107000},{"_id":"source/resources/wechat-reward-image1.png","hash":"9f04dffed817d26b6a877eb66316e91061b3370f","modified":1496758107000},{"_id":"source/tags/index.md","hash":"bd0b3623e2a659ec9dccf9e0d4a855680d114b5f","modified":1496758107000},{"_id":"source/_posts/2018-07-30.java8-learning.md","hash":"9d9db440bbc3b4713f646ada85f83f43f08edf46","modified":1534729266814},{"_id":"source/resources/alipay-reward-image.JPG","hash":"385700f7a9c84d0dfa0981d58518032d33f5efbc","modified":1496991129000},{"_id":"source/resources/coding-standards-1.png","hash":"3c177f7731ee427046e4945050243c2602211b5e","modified":1496758107000},{"_id":"source/resources/coding-standards-2.1.png","hash":"a07a4a5b6526459aa46e3258e63748f8c329dd50","modified":1496758107000},{"_id":"source/resources/alipay-reward-image.png","hash":"fbc0c9d1f2ba3b21a40be7a790cbaf2f8fec31cf","modified":1496996418000},{"_id":"source/resources/coding-standards-2.2.png","hash":"7c4116dab84985f42b21b89d86290490661a85b7","modified":1496758107000},{"_id":"source/resources/eclipse-tips-20151107221921217.png","hash":"ea374fb4a25ccc451d62cd5f2833415574ed34b8","modified":1496758107000},{"_id":"source/resources/coding-standards-3.png","hash":"2e88043e2b1589bfdcc797984c64af9ccbd48670","modified":1496758107000},{"_id":"source/resources/iov-1.png","hash":"2bd45837b8ca10f00f16bc44f3a1a45d1ae2494f","modified":1496758107000},{"_id":"source/resources/iov-3.png","hash":"9f70c52de5a52d8ede5d69a8dcdd75c0a08c6715","modified":1496758107000},{"_id":"source/resources/iov-4.png","hash":"81de480993f1cc268e037294b9686b37010b2720","modified":1496758107000},{"_id":"source/resources/iov-5.png","hash":"b3a1349c2dccd31f518c432bf2b51f645dc82b75","modified":1496758107000},{"_id":"source/resources/wechat-reward-image.png","hash":"e90f11ea9c039308436b099c53664a9fc949643d","modified":1496996513000},{"_id":"source/resources/wechat-reward-image.JPG","hash":"0d3cf76121d64d0d564a37671b7ce2f2aa5c8ecd","modified":1496991129000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1490291568000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1490291568000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1490291568000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1490291568000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1490291568000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1490291568000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1490291568000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1490291568000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1490291568000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1490291568000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1490291568000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1490291568000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1490291568000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1490291568000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1490291568000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1490291568000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1490291568000},{"_id":"themes/next/source/.DS_Store","hash":"70d244b1c4247d29cc560a1a475033db3cb34702","modified":1501049441000},{"_id":"themes/next/layout/_layout.swig","hash":"909d68b164227fe7601d82e2303bf574eb754172","modified":1490291568000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1490291568000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1490291568000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1490291568000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1490291568000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1490291568000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1490291568000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1490291568000},{"_id":"themes/next/layout/.DS_Store","hash":"a7b9b07f946abb8d2fec064a1972117c8878b4f7","modified":1501303540000},{"_id":"source/_posts/2016-03-25.android-open-project.md","hash":"de07a2e5d425c400c2fc783a48b828fd35e31fd3","modified":1496758107000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1490291568000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1490291568000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1490291568000},{"_id":"source/resources/iov-2.png","hash":"24df15a48ab9f3ea61945870dec8c0ad892c4d65","modified":1496758107000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490291568000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1490291568000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1490291568000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1490291568000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1490291568000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1490291568000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1490291568000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1490291568000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1490291568000},{"_id":"themes/next/source/images/.DS_Store","hash":"8522482b5c66925675234d32e4cad5b2dcac974d","modified":1497056400000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490291568000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1490291568000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1490291568000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1490291568000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1490291568000},{"_id":"themes/next/source/images/avatar.png","hash":"3eb50b625afd10829ee715e65f5b194d3743e5cc","modified":1496988721000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1490291568000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490291568000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1490291568000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490291568000},{"_id":"themes/next/source/images/favicon.png","hash":"c92b43e2292f6f98c200628d1fa1ff2522f24864","modified":1496988721000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1490291568000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1490291568000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490291568000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1490291568000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490291568000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490291568000},{"_id":"themes/next/source/css/.DS_Store","hash":"43527113ba6d27dcab4d985936bded8f4fff069f","modified":1501049455000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1490291568000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1490291568000},{"_id":"themes/next/layout/_macro/post.swig","hash":"d6ef07edb0a95182a41b8d6257d928dabdab9e39","modified":1500514986000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1490291568000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1490291568000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1490291568000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1490291568000},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"cd34da866991324947c7fc11ec07c5a8755375b0","modified":1501300781000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d5b11bfbdcada289511ee0b2f3feb9caa3e81353","modified":1543889496225},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1490291568000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1490291568000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1490291568000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1490291568000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1490291568000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1490291568000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1490291568000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1490291568000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1490291568000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1490291568000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1490291568000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1490291568000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490291568000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490291568000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490291568000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490291568000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490291568000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490291568000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1490291568000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1490291568000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1490291568000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1490291568000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"c0646065703604d5458ecfcdb0f6b6dc2a655b64","modified":1501049541000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1490291568000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1490291568000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1490291568000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1490291568000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1490291568000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1490291568000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1490291568000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1490291568000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1490291568000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1490291568000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1490291568000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1490291568000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490291568000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1490291568000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1490291568000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1490291568000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1490291568000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1490291568000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1490291568000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1490291568000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1490291568000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1490291568000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1490291568000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1490291568000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1490291568000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1490291568000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1490291568000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1490291568000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1490291568000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1490291568000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1490291568000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1490291568000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1490291568000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1490291568000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1490291568000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1490291568000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1490291568000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1490291568000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1490291568000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1490291568000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1490291568000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1490291568000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1490291568000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1490291568000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1490291568000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1490291568000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1490291568000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1490291568000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1490291568000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1490291568000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1490291568000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1490291568000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1490291568000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1490291568000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1490291568000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1490291568000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1490291568000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1490291568000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1490291568000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1490291568000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1490291568000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490291568000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1490291568000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490291568000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1490291568000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1490291568000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1490291568000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1490291568000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1490291568000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1490291568000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490291568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1490291568000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1490291568000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1490291568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1490291568000},{"_id":"public/search.xml","hash":"bd727de49254213b7126f4fd5254455eed7e6d10","modified":1548062792769},{"_id":"public/atom.xml","hash":"2b725cf60e77506b22da48a556f178938cd38061","modified":1548062792819},{"_id":"public/resume.html","hash":"25ce8268c22e29817dfec257a6043dd1ec9fe8c3","modified":1548062793488},{"_id":"public/the-gift-for-hy.html","hash":"4bc16c7c7419509af20b9b8bfa0fea5b540858fc","modified":1548062793489},{"_id":"public/404.html","hash":"6a42853e7171bb115ae23826eda3f6c829e03d08","modified":1548063293036},{"_id":"public/about/index.html","hash":"2e2b6485b8cc46ce9a97e1d7e41c9a6db447b27f","modified":1548062793489},{"_id":"public/categories/index.html","hash":"c4b08bc0b5439206a87eb13f9b8dea23f77924ed","modified":1548062793489},{"_id":"public/tags/index.html","hash":"ca2850dc17e704943c211c3da42068a82db920d9","modified":1548062793489},{"_id":"public/2019/01/17/solve-nginx-413-problem.html","hash":"dab5028159314bde4791edb3955f7bd004c347d6","modified":1548062793489},{"_id":"public/2019/01/14/solve-mac-install-minikube-problem.html","hash":"48f5260913d5f23e7c0ddf8030b09d398540431a","modified":1548062793489},{"_id":"public/2019/01/01/bye2018-hello2019.html","hash":"97122fc09805c8b536a0a0c6ce4d765e00c477a0","modified":1548062793489},{"_id":"public/2018/11/07/spring-boot-start.html","hash":"96aef203369d4e2ce155e16fb1a0b8773ef28c66","modified":1548062793490},{"_id":"public/2018/09/28/run-node-service-in-background.html","hash":"a16f07248ffe930952c652521098a370732a4dac","modified":1548062793490},{"_id":"public/2018/09/20/query-language-differences-between-neo4j-and-mysql.html","hash":"2cf4e11ce0ce7e8fa4041c9c3c5c929edf8affb5","modified":1548062793490},{"_id":"public/2018/09/18/how-to-update-the-fork-project.html","hash":"700b8f9708c77be041705daf9315975a7a42c6f1","modified":1548062793490},{"_id":"public/2018/08/20/spring-boot-global-exception-handler.html","hash":"7c4827f4dd67045668238cd5f49c85d6ae485e3f","modified":1548062793490},{"_id":"public/2018/07/30/java8-learning.html","hash":"b3d22aa5e7e992b75ca804c2cefd13c00a77d7ec","modified":1548062793490},{"_id":"public/2018/02/07/regular-expression-list.html","hash":"3e3cfba9b96ce5cc915c5d8cc00d975df05b6aea","modified":1548062793490},{"_id":"public/2018/02/05/osx-software-lists.html","hash":"1717d5943edda6b9d7d988e4813254504bf8653b","modified":1548062793490},{"_id":"public/2018/01/16/db-page-sqls.html","hash":"d9ec4da01cc153b746446f661cf4dd109803be91","modified":1548062793490},{"_id":"public/2018/01/12/elasticsearch_note.html","hash":"700e9e7c0bbb4141a648b5c4b9149b1679337893","modified":1548062793490},{"_id":"public/2018/01/11/camelcase-underline-transform.html","hash":"5487265a142ee0a157d79380201aeb15888365a5","modified":1548062793490},{"_id":"public/2018/01/04/devops-jenkins.html","hash":"6c2bdc796a2b4ec9d3ca08b16b9a335448d711d4","modified":1548062793490},{"_id":"public/2018/01/03/devops-gitlab.html","hash":"4637398b6edeb75d69b1fe862336f345275f5c87","modified":1548062793491},{"_id":"public/2017/12/11/tips-for-improve-java-skill.html","hash":"39a234f52ee1d53701a9438f9c7412683295984c","modified":1548062793491},{"_id":"public/2017/12/05/redux-and-mobx-first.html","hash":"8ae1aed58aff35cf158c01d2756c19261237a738","modified":1548062793491},{"_id":"public/2017/11/14/mysql-chinese-character-encoding.html","hash":"8b802ae520c62b95bfdb15bc8b4eabc7257f94d7","modified":1548062793491},{"_id":"public/2017/11/10/druid-oracle-pscache.html","hash":"74154c6985b4b5255ab99c9126599cf41382f4e4","modified":1548062793491},{"_id":"public/2017/11/08/dubbo-admin-install.html","hash":"2354311f461c74aa3294985d42e0e7640dfa004a","modified":1548062793491},{"_id":"public/2017/11/01/zookeeper-cluster.html","hash":"ee0c605ca9c00c08e1ebca21e21d0e7aaba428af","modified":1548062793491},{"_id":"public/2017/08/31/mysql-start-error.html","hash":"1f7d709d09a04d6342688b2cc37954f899157786","modified":1548062793491},{"_id":"public/2017/08/02/customize-blocked-queue.html","hash":"17567bae211498ea410d6cfd9fba4bf8bffeb044","modified":1548062793491},{"_id":"public/2017/07/19/spring-boot-mybatis-logback.html","hash":"2aa39d02a8e8206ae36c2baa7eb2b4ded93ef426","modified":1548062793491},{"_id":"public/2017/07/18/win10-download.html","hash":"f73a64fc0e9cecb2acd620cba7babff211b6ede5","modified":1548062793491},{"_id":"public/2017/07/12/jdk-map-source-explore.html","hash":"cbfd33e5a3f1b2781ca3368386cde40448bdd142","modified":1548062793491},{"_id":"public/2017/01/06/connect-oracle11g-rac-url.html","hash":"38566b6b4db105bcf07371a68961280e7dde6134","modified":1548062793491},{"_id":"public/2016/12/13/elasticsearch-get-start.html","hash":"25c29af4103b765cc6aebd7fda9385dd448b3d33","modified":1548062793492},{"_id":"public/2016/08/31/server-install-centos6.html","hash":"e79d9e4254c89d324f0de509fb0b69e895699b57","modified":1548062793492},{"_id":"public/2016/04/05/coding-standards.html","hash":"232100b524e443472b864afe9e9582777d67327b","modified":1548062793492},{"_id":"public/2016/04/03/android-svn-attention.html","hash":"b93d8bebe665e7a891330dd2c18c94ffdb0bfe49","modified":1548062793492},{"_id":"public/2016/03/28/lanqiao-exam.html","hash":"a774dcf2887618791ad593b556a55a1027024258","modified":1548062793492},{"_id":"public/2016/03/27/eclipse-tips-variable.html","hash":"ca1f87cc3edd40611ae8e39d4d7ef1baf688185e","modified":1548062793492},{"_id":"public/2016/03/26/first-use-volley-demo.html","hash":"d747ba58fd151c4cb6a820075d6c859097f39a49","modified":1548062793492},{"_id":"public/2016/03/25/android-open-project.html","hash":"d524cac1c22e87a864bcf927438581530ab2b6d2","modified":1548062793492},{"_id":"public/2016/03/24/ubuntu-15.04-install-jdk.html","hash":"448d4b62ad023fefa80824d9a5883b7dc56772d3","modified":1548062793492},{"_id":"public/2016/03/21/helloworld.html","hash":"0ef919699443f818458ccab374ca53d8b02e1a7b","modified":1548062793492},{"_id":"public/archives/index.html","hash":"89554abd6cb17358b6ad0df957fb424a2dfeea9a","modified":1548062793492},{"_id":"public/archives/page/2/index.html","hash":"c6d32c8215b29682784251061a58831ebd07fd30","modified":1548062793492},{"_id":"public/archives/page/3/index.html","hash":"82e0d6052d593b198d00bbe739269403b6e5c6ff","modified":1548062793492},{"_id":"public/archives/page/4/index.html","hash":"563a9836c42f0e565db022192d07d3c1e34c1c67","modified":1548062793492},{"_id":"public/archives/2016/index.html","hash":"00423f99716783a8af0ae3fc98d200f6a2ded077","modified":1548062793492},{"_id":"public/archives/2016/03/index.html","hash":"77cacbc0c1b57954a33419f353257bfdefbe5745","modified":1548062793492},{"_id":"public/archives/2016/04/index.html","hash":"0d230e75eeab99fc7d69af6658cd350bf24b5694","modified":1548062793493},{"_id":"public/archives/2016/08/index.html","hash":"d3aadaace4958f9dedb559e61ad23487b466bb2d","modified":1548062793493},{"_id":"public/archives/2016/12/index.html","hash":"dd9fe3afd0d3ef124b6fc8eb0811e4db609e434b","modified":1548062793493},{"_id":"public/archives/2017/index.html","hash":"f4f4dfb2a71d5aa1b24f52a98d14575517801dbf","modified":1548062793493},{"_id":"public/archives/2017/page/2/index.html","hash":"883a9e6d18109bd56fbeed1fab5b8428ed0f8ae3","modified":1548062793493},{"_id":"public/archives/2017/01/index.html","hash":"2bfacc2112eb540993308191c012c73e9aeea0b1","modified":1548062793493},{"_id":"public/archives/2017/07/index.html","hash":"3324dd2527ca604066a40670152132d81caaa018","modified":1548062793493},{"_id":"public/archives/2017/08/index.html","hash":"860b6da42ff05a156e6643fe9c46fcaac5d80630","modified":1548062793493},{"_id":"public/archives/2017/11/index.html","hash":"fe003157d2f768c5aade3eec50d15134d1ac87cf","modified":1548062793493},{"_id":"public/archives/2017/12/index.html","hash":"0afaf6fa243ba2c5e21d3b6f7579356f10856ef3","modified":1548062793493},{"_id":"public/archives/2018/index.html","hash":"ba2519e8ed17c9fc6c71859123fc7beefd3186df","modified":1548062793493},{"_id":"public/archives/2018/page/2/index.html","hash":"106711b5e96b386f91c0ef0595a1514ef08c8b9b","modified":1548062793493},{"_id":"public/archives/2018/01/index.html","hash":"7b1d45377c52fb7b37406334ad2813a18a8b2c43","modified":1548062793493},{"_id":"public/archives/2018/02/index.html","hash":"e0bc30c581f9db8011a2af72ff29487cbb65f827","modified":1548062793493},{"_id":"public/archives/2018/07/index.html","hash":"44d03f86e6f5475e08d804182704c338fd20305a","modified":1548062793493},{"_id":"public/archives/2018/08/index.html","hash":"36d1619456f25b7d2e6dda516c256e4cd63cf835","modified":1548062793493},{"_id":"public/archives/2018/09/index.html","hash":"aba318ce5da035d309853829d9f155b720dc5a2b","modified":1548062793493},{"_id":"public/archives/2018/11/index.html","hash":"aa517f4f60d2d526e6c3c3953b754581d0583a3b","modified":1548062793493},{"_id":"public/archives/2019/index.html","hash":"1a8b2fa43dde0fe4076e2a477e4d8b0526336953","modified":1548062793494},{"_id":"public/archives/2019/01/index.html","hash":"7a0753e71b3863b437461726b282bdc57cfc0abb","modified":1548062793494},{"_id":"public/categories/HelloWorld/index.html","hash":"9eaae055d73b96584e46497c0898f8c6451f2ac3","modified":1548062793494},{"_id":"public/categories/linux/index.html","hash":"c2ee6d04d63fed566dc956657303bc00eb083e6c","modified":1548062793494},{"_id":"public/categories/Android/index.html","hash":"d2ed51fe5768bc027f99cc1b23da7fcca1e4efb5","modified":1548062793494},{"_id":"public/categories/随笔/index.html","hash":"ec6fdb0f7f839f7f382a0cc0781411425b63de7c","modified":1548062793494},{"_id":"public/categories/技术相关/index.html","hash":"b926f40ef896396a2ba77e88d1fc789727664654","modified":1548062793494},{"_id":"public/categories/技术相关/page/2/index.html","hash":"234649bcd0b219e099dc8b1925bbb5c90fa34c12","modified":1548062793494},{"_id":"public/categories/系统/index.html","hash":"a562e0d4ecd38c4343bcd4327195ee94670fa4bd","modified":1548062793494},{"_id":"public/categories/代码片段/index.html","hash":"884a33266b95cb1c820d07dfd8acb385166491cd","modified":1548062793494},{"_id":"public/categories/技术相关/mysql/index.html","hash":"f576211f294f74837da3f33c70744029fab847b0","modified":1548062793494},{"_id":"public/categories/技术相关/devops/index.html","hash":"d64856cb5324e1f8dd17488700c0622e9f019e77","modified":1548062793494},{"_id":"public/categories/技术相关/oracle/index.html","hash":"9927dc283a3cc6100c3d990cb30493cb2672f919","modified":1548062793494},{"_id":"public/categories/技术相关/java/index.html","hash":"f9c678cada1bb8089e60379c9540f9bb24205d8d","modified":1548062793494},{"_id":"public/categories/软件/index.html","hash":"08146601da7f3f31371ff371216b38e444bf0ade","modified":1548062793494},{"_id":"public/categories/技术相关/spring-boot/index.html","hash":"b17bac5cc72baa45aa7e7e057a36dff3aa1d81b5","modified":1548062793495},{"_id":"public/categories/技术相关/git/index.html","hash":"b4a9659d28a8818edc4b2a0d4996503ef4ca3bcd","modified":1548062793495},{"_id":"public/categories/代码片段/java/index.html","hash":"8bb56a9e2b64733358b0d9ffe9493cff881732e0","modified":1548062793495},{"_id":"public/categories/技术相关/neo4j/index.html","hash":"67c222b4f4d7b208cdc6e1f5e4a5ebb81b67f322","modified":1548062793495},{"_id":"public/categories/技术相关/node/index.html","hash":"d5513bf4aafae90a4b942c7fb90aeb0414c32d6c","modified":1548062793495},{"_id":"public/categories/技术相关/kubernetes/index.html","hash":"00954f2bc423ab8a1675e339e13f43d8a3944e53","modified":1548062793495},{"_id":"public/categories/技术相关/nginx/index.html","hash":"de46ff5d2357ebc05723326a39218b10e2bf1269","modified":1548062793495},{"_id":"public/categories/总结展望/index.html","hash":"a3c110914b544db3f1b0f68c05441267c9fae504","modified":1548062793495},{"_id":"public/categories/代码片段/sql/index.html","hash":"86e6d0f5b86fbbbb5edab2b80dd79834e919d43f","modified":1548062793495},{"_id":"public/categories/代码片段/regex/index.html","hash":"d5e7dd02e69612b5b2eaf5e58031c7f31cdb0cf6","modified":1548062793495},{"_id":"public/index.html","hash":"33839b08524122e8c377ca6cea38216cd16dae40","modified":1548062793495},{"_id":"public/page/2/index.html","hash":"0469e640c9740d144be8f8976cee8dd73d201852","modified":1548062793495},{"_id":"public/page/3/index.html","hash":"a16dc47eb87014a1fec127ceddc84e725fbf3d4d","modified":1548062793495},{"_id":"public/page/4/index.html","hash":"6d4d245d54b2901e4dd0fd53a478584923d25a7d","modified":1548062793495},{"_id":"public/tags/Hexo/index.html","hash":"f5ed1fdc543aa8f70a56466b6ecef474141a3b32","modified":1548062793496},{"_id":"public/tags/HelloWorld/index.html","hash":"7194f798ed51634c16962d5eda35c3dd67f280af","modified":1548062793496},{"_id":"public/tags/linux/index.html","hash":"2daa9bafecd8102677501b71b84ce134733b316c","modified":1548062793496},{"_id":"public/tags/JDK/index.html","hash":"bced2c4d7352da764260bee85b7e738b305c075a","modified":1548062793496},{"_id":"public/tags/volley/index.html","hash":"891d3049dc57352f2749b2f1e2abe18925b708ea","modified":1548062793496},{"_id":"public/tags/Android/index.html","hash":"2348bd30e7dbb4fdefcb5181c1d1c36b4876012b","modified":1548062793496},{"_id":"public/tags/eclipse小技巧/index.html","hash":"24ff259d16a9051e46889814f23b1de4dbbb8dd4","modified":1548062793496},{"_id":"public/tags/随笔/index.html","hash":"c46c92d1987aa0682e1549ac9481265c7b325b56","modified":1548062793496},{"_id":"public/tags/svn/index.html","hash":"b8e07c9956bbfe38a84c5676a04327c7af772e41","modified":1548062793496},{"_id":"public/tags/eclipse/index.html","hash":"68733d17828d4e545494e5ab11d3a0ecc7d27962","modified":1548062793496},{"_id":"public/tags/elasticsearch/index.html","hash":"47e1d85b42105afa1b806446c169884b5572dcab","modified":1548062793496},{"_id":"public/tags/oracle/index.html","hash":"99ca1df6dd691fc181458b3d19010dc5b1925782","modified":1548062793496},{"_id":"public/tags/java/index.html","hash":"a235d9ca1f12072fa6615b53c4601f1421ee3e72","modified":1548062793496},{"_id":"public/tags/win10/index.html","hash":"6c6d012d077d373b292a234164470e9430826959","modified":1548062793496},{"_id":"public/tags/系统/index.html","hash":"b7ae9e3814a4a187b5e5556190a8cbdae3733ef7","modified":1548062793496},{"_id":"public/tags/JDK-HashMap-源码探索/index.html","hash":"d50c46141d32eea4ff5d3985f7abc2b70ec47c0d","modified":1548062793497},{"_id":"public/tags/spring-boot/index.html","hash":"b20703556eb3ae7df5a510f9f67219153f5ceef9","modified":1548062793497},{"_id":"public/tags/mybatis/index.html","hash":"4e4fed3cf4fde5b9c01bd096b051f465860a537a","modified":1548062793497},{"_id":"public/tags/日志/index.html","hash":"1b38090a781a376eaadc95e97903043ddc6e2220","modified":1548062793497},{"_id":"public/tags/多线程/index.html","hash":"a2a3992e8c3c0370db581e00aa540c07d4206657","modified":1548062793497},{"_id":"public/tags/代码片段/index.html","hash":"e97650f988c1ddd3282ab48ac0afe00cdf1107c7","modified":1548062793497},{"_id":"public/tags/mysql/index.html","hash":"845065603648b80b78cd90ef2a58083cc8b5ca22","modified":1548062793497},{"_id":"public/tags/dubbo/index.html","hash":"3aabde1203020be668a0a835a992e149c26cff0b","modified":1548062793497},{"_id":"public/tags/zookeeper/index.html","hash":"692dc19f818d1afa20655d6322df43f88908728f","modified":1548062793497},{"_id":"public/tags/Mac/index.html","hash":"43d0f64e60c818bc9c8fb0574a38c6a1ea987f3c","modified":1548062793497},{"_id":"public/tags/react/index.html","hash":"2b6237248d6019d31ea78a034036bcbf613d1d31","modified":1548062793497},{"_id":"public/tags/前端/index.html","hash":"98063f619371aded955783b4400db9c790baf493","modified":1548062793497},{"_id":"public/tags/gitlab/index.html","hash":"1241be66278b0fe5cf9e9a84811fc0e413e5fd6b","modified":1548062793498},{"_id":"public/tags/devops/index.html","hash":"4cdfcb2bb8e56287ac067ef47f645b3800147671","modified":1548062793498},{"_id":"public/tags/技术相关/index.html","hash":"9c01d7e856f395fa34757f35b2e99e8cefe6f38c","modified":1548062793498},{"_id":"public/tags/翻译/index.html","hash":"bdccc5712b1aa51245708c9f0b5117ed62832a66","modified":1548062793498},{"_id":"public/tags/jenkins/index.html","hash":"644c60171e8bb9d626160f2db9b6432eaa602047","modified":1548062793498},{"_id":"public/tags/sql/index.html","hash":"8f69b1745c7440d20f2de3cf8119c63a0cf8d36a","modified":1548062793498},{"_id":"public/tags/软件/index.html","hash":"bc29b2c85ca15ed208c071b13b9e9d58f8a06a22","modified":1548062793498},{"_id":"public/tags/regex/index.html","hash":"736df3b77571786842779caced4ff0213ab93299","modified":1548062793498},{"_id":"public/tags/git/index.html","hash":"0a307aa4334f70efcbad6370a3f95a406595c2b9","modified":1548062793498},{"_id":"public/tags/neo4j/index.html","hash":"9b8feb2852b6a90aa450f4c8757b25544464cd78","modified":1548062793498},{"_id":"public/tags/node/index.html","hash":"29091073ed7edd56f283b542b711c041a50f774f","modified":1548062793498},{"_id":"public/tags/kubernetes/index.html","hash":"6b3f96d02afa8052b68e69e24ada6a1843d8d4e3","modified":1548062793498},{"_id":"public/tags/docker/index.html","hash":"068ecf8d5a97b2e5406093b2e9f50c9c4543819b","modified":1548062793498},{"_id":"public/tags/minikube/index.html","hash":"dabca86b074fe470bfecdca467604c398260020e","modified":1548062793498},{"_id":"public/tags/nginx/index.html","hash":"678ae3e672bb6a7f5ace22ce955bbbe8e34945e1","modified":1548062793498},{"_id":"public/tags/总结展望/index.html","hash":"f2cce38118684e3029ef7ec30431379cd85b720f","modified":1548062793499},{"_id":"public/tags/开源项目汇总/index.html","hash":"c1c713d4282d5f992d7e3d6fc4138bd1d72f8c3d","modified":1548062793499},{"_id":"public/2019/01/21/modify-git-commit-timestamp.html","hash":"6801282ed02c8ecab1cc6c0f145103dea1b84219","modified":1548062793503},{"_id":"public/categories/技术相关/page/3/index.html","hash":"e484ca0238082aff00ef0a2d04f53b2943143568","modified":1548062793503},{"_id":"public/categories/技术相关/elasticsearch/index.html","hash":"412fb6be0d3a7c0f144ec1f8b18fa22bb9edaa26","modified":1548062793503},{"_id":"public/categories/技术相关/前端/index.html","hash":"57015cc5106bf0cff24604c1ed9aff944f4ec278","modified":1548062793503},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"25bb59a9807302ba9f62cecdfe443d70f297303e","modified":1548062793505},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"6b86f83e5c40efe0cdaafb03b0781fb84f63bd6f","modified":1548062793505},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"f91f3033bbde2cd4280a143cd76246ea064b78a1","modified":1548062793506},{"_id":"public/assets/algolia/algoliasearch.js","hash":"e24429a98bbdf7fc8f7058f4ea684a059c74a985","modified":1548062793511}],"Category":[{"name":"HelloWorld","_id":"cjr64il5m0006kds6g0rqd8cq"},{"name":"linux","_id":"cjr64il5t000ckds6whyztriw"},{"name":"Android","_id":"cjr64il5v000hkds6x5ufltob"},{"name":"随笔","_id":"cjr64il64000ukds6x7ckglyn"},{"name":"技术相关","_id":"cjr64il6d001dkds6amvdjg5j"},{"name":"系统","_id":"cjr64il6l001pkds6frig24sk"},{"name":"代码片段","_id":"cjr64il6x0025kds6wej55d6m"},{"name":"mysql","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7e002ukds66gco04ok"},{"name":"elasticsearch","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7f002wkds670skrwkh"},{"name":"前端","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7g0031kds6xkl15ua7"},{"name":"devops","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7i0035kds6sy365n58"},{"name":"oracle","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7j003bkds6jf70ykeh"},{"name":"java","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7o003skds617x6edkx"},{"name":"软件","_id":"cjr64il7r0042kds6rtz22kje"},{"name":"spring boot","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7r0045kds6zscmi6qb"},{"name":"git","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7u004ekds6347qylxt"},{"name":"java","parent":"cjr64il6x0025kds6wej55d6m","_id":"cjr64il7v004ikds659xnigqr"},{"name":"neo4j","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7w004mkds61kxfy985"},{"name":"node","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7x004skds61urppv8b"},{"name":"kubernetes","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il800052kds66dpt18es"},{"name":"nginx","parent":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il810058kds63rqhr79x"},{"name":"总结展望","_id":"cjr64il83005ikds6ht2qbj3p"},{"name":"sql","parent":"cjr64il6x0025kds6wej55d6m","_id":"cjr64il8c006ekds6lxy0w0wl"},{"name":"regex","parent":"cjr64il6x0025kds6wej55d6m","_id":"cjr64il8d006jkds6jvpchpja"}],"Data":[],"Page":[{"comments":0,"date":"2017-07-27T01:44:41.000Z","_content":"# 联系方式\n* 手机：18601224166\n* Email：shenyangkai1994@gmail.com\n* QQ：237497819\n\n# 个人信息\n* 沈扬凯 / 男 / 1994\n* 湖北文理学院 / 物联网工程专业 / 本科 / 工学学士\n* 技术博客：http://xkcoding.com\n\n# 工作经历\n## 西安图迹信息科技有限公司 - 北京分公司（2016.08 ~ 2018.03）\n\n- 2017.04-2018.3，回到北京分公司，独立开发“晶见资讯”小程序，协助部署devops平台，参与设计并开发“图迹售电”云平台\n- 2016.08-2017.3，驻场在“龙源电力”集团，参与“风功率预测”平台v1.0和v2.0版的开发\n\n## 武汉金智维科技有限公司（2015.06~2016.07）\n\n参与接口的开发，平台的维护，参与“襄阳变电站设备检测管理系统”的开发\n\n# 项目经历\n\n## 西安图迹信息科技有限公司 - 北京分公司\n\n### 图迹售电云平台\n\n**项目描述：**\n图迹售电云平台分为售电侧、用电侧和管理侧。\n售电侧主要为售电公司提供客户管理、客户数据分析，合同管理、合同套餐推荐、合同数据分析，交易中心结算、客户结算、居间商结算以及结算分析和生成结算报表，负荷预测，交易模拟，交易复盘，资讯消息，系统管理等功能。（网址：http://sd.togeek.cn/em/gddn/）\n用电侧主要功能用电用户合同信息的展示，电量申报，资讯消息等功能。（网址：http://sd.togeek.cn/wt/gddn/）\n管理侧主要负责整个云平台账户维护，售电侧和用电侧模块权限控制等。（待开发）\n\n**主要负责：**\n1.根据不同省份的规则不同设计系统架构；\n2.负责开发合同服务、结算服务、资讯服务、权限服务、申报服务、日志服务。\n\n**主要工作：**\n1.负责开发结算服务、资讯服务、权限服务、日志服务，并根据全国各个省份电改政策做定制化开发。整个云平台使用Eureka集群搭建高可用的服务注册和发现组件，使用`Hystrix`对服务做熔断保护措施；\n2.结算服务是整个云平台请求最多的服务，这里采用`Ribbon`实现了该服务的负载均衡，该服务涉及到与其他服务的交互，通过`Feign`组件对其他服务进行调用，并使用`Sleuth`、`Zipkin`进行追踪服务的调用关系；\n3.资讯服务通过爬虫定时抓取与\"售电\"业务相关的信息，存入数据库，然后通过`kafka`消息队列，将资讯内容存入 `ElasticSearch` 中；\n4.权限服务采用`JWT`+`shiro`来实现；\n5.日志服务采用`logbook`来打印HTTP请求与响应，并通过`logback`保存至日志文件中，使用`ELK`对日志进行分析；\n6.整个云平台采用了前后端分离架构， Gateway使用`Zuul`进行路由控制，前端使用`React`技术栈和`Ant design`的UI层表现；\n7.数据库采用`shardbatis`进行分表操作。\n\n### 搭建DevOps平台\n\n**项目描述：**\n协助驻场在深圳\"华润电力\"集团的同事搭建DevOps平台。\n\n**主要工作：**\n1.搭建`GitLab`，`Jenkins`，`Docker`，`Harbor`环境；\n2.对整个流程进行测试。\n> 代码托管在`GitLab`中，对 `GitLab` 的push操作进行 `Jenkins` 的自动化代码风格的检测（`FireLine`）；将代码风格合格之后的代码进行自动化打包成 `Docker` 镜像，并将打包成功的镜像push至 `Harbor` 仓库，并发送邮件给开发、测试、运维同事；开发环境下，`Jenkins` 根据编写好的 `YAML` 文件直接更新 `kubernetes` 中的应用；任何一个步骤出错，均触发邮件提醒。\n\n### \"晶见资讯\" 微信小程序\n\n**项目描述：**\n\"晶见资讯\"是一款关于售电信息检索的微信小程序。旨在帮助售电公司相关人员了解售电信息，减轻公司资讯人员的工作压力。\"晶见资讯\"分为admin端和小程序端，admin端主要是管理员对售电信息的管理和配置爬取的公众号信息，小程序端主要是面向售电咨询人员对售电信息的查询和下载。售电信息主要包括日常售电讯息、售电政策法规、专业问题在线咨询等。服务端网址： http://sd.togeek.cn/wechat/ \n\n**主要工作：**\n1.使用轻量级开发框架`JFinal`来提供小程序入口及后台管理入口，使用`Vue.js`，`iView`搭建后台管理系统前端界面；\n2.管理端可以配置爬虫所需要抓取的公众号信息，使用`Java`编写的爬虫每天爬取公众号文章，存入`MySQL`，通过`kafka`消息队列，将爬取到的文章存入 `Elasticsearch`；\n3.管理端支持上传文档，文档支持PDF和Word，Word使用`POI`解析、PDF使用Apache的`pdfbox`解析入库，通过`kafka`消息队列，将新入库的文档信息存入 `Elasticsearch`中；\n4.小程序端信息存储、分类、检索使用`Elasticsearch`实现。\n\n### 风电场功率预测管理平台 v2.0\n\n**项目描述：**\n根据国网电力系统二次安防的要求，加入正向隔离，对原有v1.0平台进行重构。\n\"风功率预测\"平台分为现场端程序和服务端程序。现场端程序主要是用来定时采集风场实时数据，定时生成电力调度所需要的调度E文件并上传至调度。服务端程序主要用于运维人员每天的检查调度文件的上送情况，以及风场人员对风场数据的查看。服务端网址：http://wpps.clypg.com.cn \n\n**主要工作：**\n1.负责服务端程序的整体重构，UI层面使用了 `H-ui.admin`，并加入了`vue.js`和`iView`，数据库从`MySQL`改成`Oracle`数据库，并搭建了`Rac`实现高可用；\n2.现场端程序内外网程序采用`json`文件通过正反向隔离传输的方式进行数据同步，并使用`BeautyEye`美化`Swing`程序；\n3.现场端程序的在线升级，外网程序每天定时访问服务端是否有最新程序包，将最新的程序包通过`Base64`的encode成文本文件传输至内网，在decode回程序包进行升级。\n\n**成果：**\n龙源电力集团下总共有130多家风场，风功率预测现场端程序已**成功部署风场120多家风场**，现场端程序为风场E文件上送调度的**准确率提升至98%以上**，服务端程序为甲方运维人员和风场提供统一的查询以及申报界面，方便了运维工作，提升了工作效率，获得甲方和风场的一致好评。\n\n### 风功率预测管理平台 v1.0\n\n**项目描述：**\n风功率预测平台分为现场端和服务端程序，服务端程序部署在北京龙源集团总部，主要用于各个风场采集到的数据的展示以及定时从FTP获取各个风电场的短期预测文件，现场端程序部署在各个风场的内外网，分为内网程序和外网程序，外网程序主要是采集各个测风塔与风机的实时数据以及和服务端进行数据同步，并按照调度要求定时生成调度 E 文件，通过反向隔离设备将E文件传输给内网程序，内网程序收到调度文件，通过 FTP 协议将文件传输至调度侧，并将传输结果返回给外网程序，以便将结果同步至服务端。\n\n**主要工作：**\n1.服务端使用 `Quartz` 定时从 `FTP` 获取短期预测文件，并解析入库；\n2.使用 `HttpClient` 保证服务端与现场端外网程序的数据同步；\n3.现场端外网程序使用`Quartz`和`Freemarker`定时生成调度E文件，现场端内网程序使用`FTPClient`将调度E文件传输至调度侧的FTP服务器。\n\n## 武汉金智维科技有限公司\n\n### 襄阳变电站设备检测管理系统\n\n**项目描述：**\n主要对襄阳市各个变电站站点的运行监控，以及设备资源数据管理，对站点的运行提供故障分析和解决方案，对设备的运行提供实时校准、检修、验收的管理体制，保证了所有站点和运行设备正常运行，和对数据的分析、统计；设备的购置和费用报销由公司财务人员及有关部门领导共同介入审核，保证录入数据的准确性，合理性；并实现公司每个站点资料图书管理，方便的为公司技术人员提供最新的设备图书资料，给公司技术人员提供强大的技术支持；使用开源的echarts图表组件，生成设备运行情况，有利于技术人员做故障分析。\n\n**主要工作：**\n负责开发模块包括技术设施维护管理、站点管理、图书资料信息管理、系统管理4个功能模块，实现系统的功能设计与开发、页面设计与开发、数据库设计。除实现功能代码外，并编写系统的概要设计、详细设计文档及用户使用手册。\n\n**涉及技术：**\nPOI 导入和导出；富文本编辑器 Ueditor 处理多格式文本内容；quartz定时备份数据库；echarts 来展示设备年月周的运行情况。\n\n### 华中科技大学教室管理系统\n\n**项目描述：**\n为了简化华中科技大学每年繁重的教室分配和分发权力，让各院老师或者学生自己去借用教室，而学校只需要从中调节一下不合理的教室申请就可以了，免去了以前查教室，然后考虑该教室是否可用等一系列繁复的操作，只保留现在的审核就可以了。也符合了现在信息化管理的条件，与时俱进，迎合了现代人的想法化繁为简，也简化了老师们的工作量。\n\n**主要工作：**\n主要负责教室申请整个流程的设计，流程分为老师（学生）申请、院系审核、教务处审核等一些功能的实现，并且设计相应的表结构和以及后台逻辑的开发。主要使用了jquery与ajax实现前端效果展示与前后台的数据交换工作，以及struts2自带的上传文件功能。\n\n### 谷城县再生资源回收利用平台\n\n**项目描述：**\n主要是提供一个在线的可再生资源信息发布平台，包括的内容有信息的发布和求购，网点的分布和资源你的推送。实现再生资源线上预约线下回收、分拣、交易、拍卖一体化的再生资源回收交易服务平台。 利用基于LBS的全方位O2O模式为产废、收废、利废环节搭建成一个最权威、最安全、最快捷、最方便的再生资源回收交易服务平台。该系统在功能上包括用户管理、公告管理、信息发布、审批管理、评论、位置服务、线上支付、首页管理。\n\n**主要工作：**\n主要负责信息发布、用户管理模块的开发，并且配合参与审批管理以及框架的搭建和数据库的设计。我的任务重心在信息发布上、主要使用JQuery与Ajax完成异步交互，后台使用内部MVC框架实现数据的交互。\n\n# 技能清单\n\n1. 有扎实的`Java`基础和面向对象抽象能力，有扎实的编程基础和良好的编程习惯；\n2. 熟练掌握`Spring`、`SpringMVC`、`Spring Boot`、`JFinal`、`mybatis`、`Hibernate`、`JPA`、`Dubbo`、`Zookeeper`等开源框架的使用；\n3. 熟悉`MySQL`、`Oracle`、`MSSQL`数据库，熟悉`Mysql`的主从复制，读写分离，熟悉sql优化；\n4. 熟练使用`JSP`、`FreeMarker`、`Beetl`、`Thymeleaf`模板引擎技术；\n5. 熟练使用`Quartz`、`Spring Task`定时任务；\n6. 熟练使用`maven`、`gradle`构建项目；\n7. 熟练使用`redis`缓存，并实现`redis`集群；\n8. 熟练使用`rabbitMQ`、`kafka`消息中间件；\n9. 熟练使用`best-pay-sdk`、`IJPay`开发微信支付、支付宝支付；\n10. 熟悉`ELK`技术栈，熟练使用`ElasticSearch`进行文件存储和检索，及集群配置，掌握`Kibana`、`Logstash`；\n11. 熟练使用`Apache Commons`、`Google Guava`、`hutool`等开源工具类；\n12. 掌握`Docker`，`Jenkins`，了解`DevOps`；\n13. 熟练使用`React.js`，熟悉`Redux`、`Mobx`数据状态管理，能独立开发常用组件；\n14. 熟练使用`Html5+Mui`完成跨平台App开发，适配安卓、IOS；\n15. 熟练使用`Vue.js`技术栈。\n\n# 我的开源项目\n`springboot` 学习项目 [spring-boot-demo](https://github.com/xkcoding/spring-boot-demo)\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n\n","source":"resume.md","raw":"---\ncomments: false\ndate: 2017-07-27 09:44:41\npermalink: resume\n---\n# 联系方式\n* 手机：18601224166\n* Email：shenyangkai1994@gmail.com\n* QQ：237497819\n\n# 个人信息\n* 沈扬凯 / 男 / 1994\n* 湖北文理学院 / 物联网工程专业 / 本科 / 工学学士\n* 技术博客：http://xkcoding.com\n\n# 工作经历\n## 西安图迹信息科技有限公司 - 北京分公司（2016.08 ~ 2018.03）\n\n- 2017.04-2018.3，回到北京分公司，独立开发“晶见资讯”小程序，协助部署devops平台，参与设计并开发“图迹售电”云平台\n- 2016.08-2017.3，驻场在“龙源电力”集团，参与“风功率预测”平台v1.0和v2.0版的开发\n\n## 武汉金智维科技有限公司（2015.06~2016.07）\n\n参与接口的开发，平台的维护，参与“襄阳变电站设备检测管理系统”的开发\n\n# 项目经历\n\n## 西安图迹信息科技有限公司 - 北京分公司\n\n### 图迹售电云平台\n\n**项目描述：**\n图迹售电云平台分为售电侧、用电侧和管理侧。\n售电侧主要为售电公司提供客户管理、客户数据分析，合同管理、合同套餐推荐、合同数据分析，交易中心结算、客户结算、居间商结算以及结算分析和生成结算报表，负荷预测，交易模拟，交易复盘，资讯消息，系统管理等功能。（网址：http://sd.togeek.cn/em/gddn/）\n用电侧主要功能用电用户合同信息的展示，电量申报，资讯消息等功能。（网址：http://sd.togeek.cn/wt/gddn/）\n管理侧主要负责整个云平台账户维护，售电侧和用电侧模块权限控制等。（待开发）\n\n**主要负责：**\n1.根据不同省份的规则不同设计系统架构；\n2.负责开发合同服务、结算服务、资讯服务、权限服务、申报服务、日志服务。\n\n**主要工作：**\n1.负责开发结算服务、资讯服务、权限服务、日志服务，并根据全国各个省份电改政策做定制化开发。整个云平台使用Eureka集群搭建高可用的服务注册和发现组件，使用`Hystrix`对服务做熔断保护措施；\n2.结算服务是整个云平台请求最多的服务，这里采用`Ribbon`实现了该服务的负载均衡，该服务涉及到与其他服务的交互，通过`Feign`组件对其他服务进行调用，并使用`Sleuth`、`Zipkin`进行追踪服务的调用关系；\n3.资讯服务通过爬虫定时抓取与\"售电\"业务相关的信息，存入数据库，然后通过`kafka`消息队列，将资讯内容存入 `ElasticSearch` 中；\n4.权限服务采用`JWT`+`shiro`来实现；\n5.日志服务采用`logbook`来打印HTTP请求与响应，并通过`logback`保存至日志文件中，使用`ELK`对日志进行分析；\n6.整个云平台采用了前后端分离架构， Gateway使用`Zuul`进行路由控制，前端使用`React`技术栈和`Ant design`的UI层表现；\n7.数据库采用`shardbatis`进行分表操作。\n\n### 搭建DevOps平台\n\n**项目描述：**\n协助驻场在深圳\"华润电力\"集团的同事搭建DevOps平台。\n\n**主要工作：**\n1.搭建`GitLab`，`Jenkins`，`Docker`，`Harbor`环境；\n2.对整个流程进行测试。\n> 代码托管在`GitLab`中，对 `GitLab` 的push操作进行 `Jenkins` 的自动化代码风格的检测（`FireLine`）；将代码风格合格之后的代码进行自动化打包成 `Docker` 镜像，并将打包成功的镜像push至 `Harbor` 仓库，并发送邮件给开发、测试、运维同事；开发环境下，`Jenkins` 根据编写好的 `YAML` 文件直接更新 `kubernetes` 中的应用；任何一个步骤出错，均触发邮件提醒。\n\n### \"晶见资讯\" 微信小程序\n\n**项目描述：**\n\"晶见资讯\"是一款关于售电信息检索的微信小程序。旨在帮助售电公司相关人员了解售电信息，减轻公司资讯人员的工作压力。\"晶见资讯\"分为admin端和小程序端，admin端主要是管理员对售电信息的管理和配置爬取的公众号信息，小程序端主要是面向售电咨询人员对售电信息的查询和下载。售电信息主要包括日常售电讯息、售电政策法规、专业问题在线咨询等。服务端网址： http://sd.togeek.cn/wechat/ \n\n**主要工作：**\n1.使用轻量级开发框架`JFinal`来提供小程序入口及后台管理入口，使用`Vue.js`，`iView`搭建后台管理系统前端界面；\n2.管理端可以配置爬虫所需要抓取的公众号信息，使用`Java`编写的爬虫每天爬取公众号文章，存入`MySQL`，通过`kafka`消息队列，将爬取到的文章存入 `Elasticsearch`；\n3.管理端支持上传文档，文档支持PDF和Word，Word使用`POI`解析、PDF使用Apache的`pdfbox`解析入库，通过`kafka`消息队列，将新入库的文档信息存入 `Elasticsearch`中；\n4.小程序端信息存储、分类、检索使用`Elasticsearch`实现。\n\n### 风电场功率预测管理平台 v2.0\n\n**项目描述：**\n根据国网电力系统二次安防的要求，加入正向隔离，对原有v1.0平台进行重构。\n\"风功率预测\"平台分为现场端程序和服务端程序。现场端程序主要是用来定时采集风场实时数据，定时生成电力调度所需要的调度E文件并上传至调度。服务端程序主要用于运维人员每天的检查调度文件的上送情况，以及风场人员对风场数据的查看。服务端网址：http://wpps.clypg.com.cn \n\n**主要工作：**\n1.负责服务端程序的整体重构，UI层面使用了 `H-ui.admin`，并加入了`vue.js`和`iView`，数据库从`MySQL`改成`Oracle`数据库，并搭建了`Rac`实现高可用；\n2.现场端程序内外网程序采用`json`文件通过正反向隔离传输的方式进行数据同步，并使用`BeautyEye`美化`Swing`程序；\n3.现场端程序的在线升级，外网程序每天定时访问服务端是否有最新程序包，将最新的程序包通过`Base64`的encode成文本文件传输至内网，在decode回程序包进行升级。\n\n**成果：**\n龙源电力集团下总共有130多家风场，风功率预测现场端程序已**成功部署风场120多家风场**，现场端程序为风场E文件上送调度的**准确率提升至98%以上**，服务端程序为甲方运维人员和风场提供统一的查询以及申报界面，方便了运维工作，提升了工作效率，获得甲方和风场的一致好评。\n\n### 风功率预测管理平台 v1.0\n\n**项目描述：**\n风功率预测平台分为现场端和服务端程序，服务端程序部署在北京龙源集团总部，主要用于各个风场采集到的数据的展示以及定时从FTP获取各个风电场的短期预测文件，现场端程序部署在各个风场的内外网，分为内网程序和外网程序，外网程序主要是采集各个测风塔与风机的实时数据以及和服务端进行数据同步，并按照调度要求定时生成调度 E 文件，通过反向隔离设备将E文件传输给内网程序，内网程序收到调度文件，通过 FTP 协议将文件传输至调度侧，并将传输结果返回给外网程序，以便将结果同步至服务端。\n\n**主要工作：**\n1.服务端使用 `Quartz` 定时从 `FTP` 获取短期预测文件，并解析入库；\n2.使用 `HttpClient` 保证服务端与现场端外网程序的数据同步；\n3.现场端外网程序使用`Quartz`和`Freemarker`定时生成调度E文件，现场端内网程序使用`FTPClient`将调度E文件传输至调度侧的FTP服务器。\n\n## 武汉金智维科技有限公司\n\n### 襄阳变电站设备检测管理系统\n\n**项目描述：**\n主要对襄阳市各个变电站站点的运行监控，以及设备资源数据管理，对站点的运行提供故障分析和解决方案，对设备的运行提供实时校准、检修、验收的管理体制，保证了所有站点和运行设备正常运行，和对数据的分析、统计；设备的购置和费用报销由公司财务人员及有关部门领导共同介入审核，保证录入数据的准确性，合理性；并实现公司每个站点资料图书管理，方便的为公司技术人员提供最新的设备图书资料，给公司技术人员提供强大的技术支持；使用开源的echarts图表组件，生成设备运行情况，有利于技术人员做故障分析。\n\n**主要工作：**\n负责开发模块包括技术设施维护管理、站点管理、图书资料信息管理、系统管理4个功能模块，实现系统的功能设计与开发、页面设计与开发、数据库设计。除实现功能代码外，并编写系统的概要设计、详细设计文档及用户使用手册。\n\n**涉及技术：**\nPOI 导入和导出；富文本编辑器 Ueditor 处理多格式文本内容；quartz定时备份数据库；echarts 来展示设备年月周的运行情况。\n\n### 华中科技大学教室管理系统\n\n**项目描述：**\n为了简化华中科技大学每年繁重的教室分配和分发权力，让各院老师或者学生自己去借用教室，而学校只需要从中调节一下不合理的教室申请就可以了，免去了以前查教室，然后考虑该教室是否可用等一系列繁复的操作，只保留现在的审核就可以了。也符合了现在信息化管理的条件，与时俱进，迎合了现代人的想法化繁为简，也简化了老师们的工作量。\n\n**主要工作：**\n主要负责教室申请整个流程的设计，流程分为老师（学生）申请、院系审核、教务处审核等一些功能的实现，并且设计相应的表结构和以及后台逻辑的开发。主要使用了jquery与ajax实现前端效果展示与前后台的数据交换工作，以及struts2自带的上传文件功能。\n\n### 谷城县再生资源回收利用平台\n\n**项目描述：**\n主要是提供一个在线的可再生资源信息发布平台，包括的内容有信息的发布和求购，网点的分布和资源你的推送。实现再生资源线上预约线下回收、分拣、交易、拍卖一体化的再生资源回收交易服务平台。 利用基于LBS的全方位O2O模式为产废、收废、利废环节搭建成一个最权威、最安全、最快捷、最方便的再生资源回收交易服务平台。该系统在功能上包括用户管理、公告管理、信息发布、审批管理、评论、位置服务、线上支付、首页管理。\n\n**主要工作：**\n主要负责信息发布、用户管理模块的开发，并且配合参与审批管理以及框架的搭建和数据库的设计。我的任务重心在信息发布上、主要使用JQuery与Ajax完成异步交互，后台使用内部MVC框架实现数据的交互。\n\n# 技能清单\n\n1. 有扎实的`Java`基础和面向对象抽象能力，有扎实的编程基础和良好的编程习惯；\n2. 熟练掌握`Spring`、`SpringMVC`、`Spring Boot`、`JFinal`、`mybatis`、`Hibernate`、`JPA`、`Dubbo`、`Zookeeper`等开源框架的使用；\n3. 熟悉`MySQL`、`Oracle`、`MSSQL`数据库，熟悉`Mysql`的主从复制，读写分离，熟悉sql优化；\n4. 熟练使用`JSP`、`FreeMarker`、`Beetl`、`Thymeleaf`模板引擎技术；\n5. 熟练使用`Quartz`、`Spring Task`定时任务；\n6. 熟练使用`maven`、`gradle`构建项目；\n7. 熟练使用`redis`缓存，并实现`redis`集群；\n8. 熟练使用`rabbitMQ`、`kafka`消息中间件；\n9. 熟练使用`best-pay-sdk`、`IJPay`开发微信支付、支付宝支付；\n10. 熟悉`ELK`技术栈，熟练使用`ElasticSearch`进行文件存储和检索，及集群配置，掌握`Kibana`、`Logstash`；\n11. 熟练使用`Apache Commons`、`Google Guava`、`hutool`等开源工具类；\n12. 掌握`Docker`，`Jenkins`，了解`DevOps`；\n13. 熟练使用`React.js`，熟悉`Redux`、`Mobx`数据状态管理，能独立开发常用组件；\n14. 熟练使用`Html5+Mui`完成跨平台App开发，适配安卓、IOS；\n15. 熟练使用`Vue.js`技术栈。\n\n# 我的开源项目\n`springboot` 学习项目 [spring-boot-demo](https://github.com/xkcoding/spring-boot-demo)\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n\n","updated":"2018-03-27T09:32:23.373Z","path":"resume.html","title":"","layout":"page","_id":"cjr64il430000kds6l5tfbhgs","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：18601224166</li>\n<li>Email：shenyangkai1994@gmail.com</li>\n<li>QQ：237497819</li>\n</ul>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>沈扬凯 / 男 / 1994</li>\n<li>湖北文理学院 / 物联网工程专业 / 本科 / 工学学士</li>\n<li>技术博客：<a href=\"http://xkcoding.com\">http://xkcoding.com</a></li>\n</ul>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"西安图迹信息科技有限公司-北京分公司（2016-08-2018-03）\"><a href=\"#西安图迹信息科技有限公司-北京分公司（2016-08-2018-03）\" class=\"headerlink\" title=\"西安图迹信息科技有限公司 - 北京分公司（2016.08 ~ 2018.03）\"></a>西安图迹信息科技有限公司 - 北京分公司（2016.08 ~ 2018.03）</h2><ul>\n<li>2017.04-2018.3，回到北京分公司，独立开发“晶见资讯”小程序，协助部署devops平台，参与设计并开发“图迹售电”云平台</li>\n<li>2016.08-2017.3，驻场在“龙源电力”集团，参与“风功率预测”平台v1.0和v2.0版的开发</li>\n</ul>\n<h2 id=\"武汉金智维科技有限公司（2015-06-2016-07）\"><a href=\"#武汉金智维科技有限公司（2015-06-2016-07）\" class=\"headerlink\" title=\"武汉金智维科技有限公司（2015.06~2016.07）\"></a>武汉金智维科技有限公司（2015.06~2016.07）</h2><p>参与接口的开发，平台的维护，参与“襄阳变电站设备检测管理系统”的开发</p>\n<h1 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h1><h2 id=\"西安图迹信息科技有限公司-北京分公司\"><a href=\"#西安图迹信息科技有限公司-北京分公司\" class=\"headerlink\" title=\"西安图迹信息科技有限公司 - 北京分公司\"></a>西安图迹信息科技有限公司 - 北京分公司</h2><h3 id=\"图迹售电云平台\"><a href=\"#图迹售电云平台\" class=\"headerlink\" title=\"图迹售电云平台\"></a>图迹售电云平台</h3><p><strong>项目描述：</strong><br>图迹售电云平台分为售电侧、用电侧和管理侧。<br>售电侧主要为售电公司提供客户管理、客户数据分析，合同管理、合同套餐推荐、合同数据分析，交易中心结算、客户结算、居间商结算以及结算分析和生成结算报表，负荷预测，交易模拟，交易复盘，资讯消息，系统管理等功能。（网址：<a href=\"http://sd.togeek.cn/em/gddn/）\" target=\"_blank\" rel=\"external\">http://sd.togeek.cn/em/gddn/）</a><br>用电侧主要功能用电用户合同信息的展示，电量申报，资讯消息等功能。（网址：<a href=\"http://sd.togeek.cn/wt/gddn/）\" target=\"_blank\" rel=\"external\">http://sd.togeek.cn/wt/gddn/）</a><br>管理侧主要负责整个云平台账户维护，售电侧和用电侧模块权限控制等。（待开发）</p>\n<p><strong>主要负责：</strong><br>1.根据不同省份的规则不同设计系统架构；<br>2.负责开发合同服务、结算服务、资讯服务、权限服务、申报服务、日志服务。</p>\n<p><strong>主要工作：</strong><br>1.负责开发结算服务、资讯服务、权限服务、日志服务，并根据全国各个省份电改政策做定制化开发。整个云平台使用Eureka集群搭建高可用的服务注册和发现组件，使用<code>Hystrix</code>对服务做熔断保护措施；<br>2.结算服务是整个云平台请求最多的服务，这里采用<code>Ribbon</code>实现了该服务的负载均衡，该服务涉及到与其他服务的交互，通过<code>Feign</code>组件对其他服务进行调用，并使用<code>Sleuth</code>、<code>Zipkin</code>进行追踪服务的调用关系；<br>3.资讯服务通过爬虫定时抓取与”售电”业务相关的信息，存入数据库，然后通过<code>kafka</code>消息队列，将资讯内容存入 <code>ElasticSearch</code> 中；<br>4.权限服务采用<code>JWT</code>+<code>shiro</code>来实现；<br>5.日志服务采用<code>logbook</code>来打印HTTP请求与响应，并通过<code>logback</code>保存至日志文件中，使用<code>ELK</code>对日志进行分析；<br>6.整个云平台采用了前后端分离架构， Gateway使用<code>Zuul</code>进行路由控制，前端使用<code>React</code>技术栈和<code>Ant design</code>的UI层表现；<br>7.数据库采用<code>shardbatis</code>进行分表操作。</p>\n<h3 id=\"搭建DevOps平台\"><a href=\"#搭建DevOps平台\" class=\"headerlink\" title=\"搭建DevOps平台\"></a>搭建DevOps平台</h3><p><strong>项目描述：</strong><br>协助驻场在深圳”华润电力”集团的同事搭建DevOps平台。</p>\n<p><strong>主要工作：</strong><br>1.搭建<code>GitLab</code>，<code>Jenkins</code>，<code>Docker</code>，<code>Harbor</code>环境；<br>2.对整个流程进行测试。</p>\n<blockquote>\n<p>代码托管在<code>GitLab</code>中，对 <code>GitLab</code> 的push操作进行 <code>Jenkins</code> 的自动化代码风格的检测（<code>FireLine</code>）；将代码风格合格之后的代码进行自动化打包成 <code>Docker</code> 镜像，并将打包成功的镜像push至 <code>Harbor</code> 仓库，并发送邮件给开发、测试、运维同事；开发环境下，<code>Jenkins</code> 根据编写好的 <code>YAML</code> 文件直接更新 <code>kubernetes</code> 中的应用；任何一个步骤出错，均触发邮件提醒。</p>\n</blockquote>\n<h3 id=\"“晶见资讯”-微信小程序\"><a href=\"#“晶见资讯”-微信小程序\" class=\"headerlink\" title=\"“晶见资讯” 微信小程序\"></a>“晶见资讯” 微信小程序</h3><p><strong>项目描述：</strong><br>“晶见资讯”是一款关于售电信息检索的微信小程序。旨在帮助售电公司相关人员了解售电信息，减轻公司资讯人员的工作压力。”晶见资讯”分为admin端和小程序端，admin端主要是管理员对售电信息的管理和配置爬取的公众号信息，小程序端主要是面向售电咨询人员对售电信息的查询和下载。售电信息主要包括日常售电讯息、售电政策法规、专业问题在线咨询等。服务端网址： <a href=\"http://sd.togeek.cn/wechat/\" target=\"_blank\" rel=\"external\">http://sd.togeek.cn/wechat/</a> </p>\n<p><strong>主要工作：</strong><br>1.使用轻量级开发框架<code>JFinal</code>来提供小程序入口及后台管理入口，使用<code>Vue.js</code>，<code>iView</code>搭建后台管理系统前端界面；<br>2.管理端可以配置爬虫所需要抓取的公众号信息，使用<code>Java</code>编写的爬虫每天爬取公众号文章，存入<code>MySQL</code>，通过<code>kafka</code>消息队列，将爬取到的文章存入 <code>Elasticsearch</code>；<br>3.管理端支持上传文档，文档支持PDF和Word，Word使用<code>POI</code>解析、PDF使用Apache的<code>pdfbox</code>解析入库，通过<code>kafka</code>消息队列，将新入库的文档信息存入 <code>Elasticsearch</code>中；<br>4.小程序端信息存储、分类、检索使用<code>Elasticsearch</code>实现。</p>\n<h3 id=\"风电场功率预测管理平台-v2-0\"><a href=\"#风电场功率预测管理平台-v2-0\" class=\"headerlink\" title=\"风电场功率预测管理平台 v2.0\"></a>风电场功率预测管理平台 v2.0</h3><p><strong>项目描述：</strong><br>根据国网电力系统二次安防的要求，加入正向隔离，对原有v1.0平台进行重构。<br>“风功率预测”平台分为现场端程序和服务端程序。现场端程序主要是用来定时采集风场实时数据，定时生成电力调度所需要的调度E文件并上传至调度。服务端程序主要用于运维人员每天的检查调度文件的上送情况，以及风场人员对风场数据的查看。服务端网址：<a href=\"http://wpps.clypg.com.cn\" target=\"_blank\" rel=\"external\">http://wpps.clypg.com.cn</a> </p>\n<p><strong>主要工作：</strong><br>1.负责服务端程序的整体重构，UI层面使用了 <code>H-ui.admin</code>，并加入了<code>vue.js</code>和<code>iView</code>，数据库从<code>MySQL</code>改成<code>Oracle</code>数据库，并搭建了<code>Rac</code>实现高可用；<br>2.现场端程序内外网程序采用<code>json</code>文件通过正反向隔离传输的方式进行数据同步，并使用<code>BeautyEye</code>美化<code>Swing</code>程序；<br>3.现场端程序的在线升级，外网程序每天定时访问服务端是否有最新程序包，将最新的程序包通过<code>Base64</code>的encode成文本文件传输至内网，在decode回程序包进行升级。</p>\n<p><strong>成果：</strong><br>龙源电力集团下总共有130多家风场，风功率预测现场端程序已<strong>成功部署风场120多家风场</strong>，现场端程序为风场E文件上送调度的<strong>准确率提升至98%以上</strong>，服务端程序为甲方运维人员和风场提供统一的查询以及申报界面，方便了运维工作，提升了工作效率，获得甲方和风场的一致好评。</p>\n<h3 id=\"风功率预测管理平台-v1-0\"><a href=\"#风功率预测管理平台-v1-0\" class=\"headerlink\" title=\"风功率预测管理平台 v1.0\"></a>风功率预测管理平台 v1.0</h3><p><strong>项目描述：</strong><br>风功率预测平台分为现场端和服务端程序，服务端程序部署在北京龙源集团总部，主要用于各个风场采集到的数据的展示以及定时从FTP获取各个风电场的短期预测文件，现场端程序部署在各个风场的内外网，分为内网程序和外网程序，外网程序主要是采集各个测风塔与风机的实时数据以及和服务端进行数据同步，并按照调度要求定时生成调度 E 文件，通过反向隔离设备将E文件传输给内网程序，内网程序收到调度文件，通过 FTP 协议将文件传输至调度侧，并将传输结果返回给外网程序，以便将结果同步至服务端。</p>\n<p><strong>主要工作：</strong><br>1.服务端使用 <code>Quartz</code> 定时从 <code>FTP</code> 获取短期预测文件，并解析入库；<br>2.使用 <code>HttpClient</code> 保证服务端与现场端外网程序的数据同步；<br>3.现场端外网程序使用<code>Quartz</code>和<code>Freemarker</code>定时生成调度E文件，现场端内网程序使用<code>FTPClient</code>将调度E文件传输至调度侧的FTP服务器。</p>\n<h2 id=\"武汉金智维科技有限公司\"><a href=\"#武汉金智维科技有限公司\" class=\"headerlink\" title=\"武汉金智维科技有限公司\"></a>武汉金智维科技有限公司</h2><h3 id=\"襄阳变电站设备检测管理系统\"><a href=\"#襄阳变电站设备检测管理系统\" class=\"headerlink\" title=\"襄阳变电站设备检测管理系统\"></a>襄阳变电站设备检测管理系统</h3><p><strong>项目描述：</strong><br>主要对襄阳市各个变电站站点的运行监控，以及设备资源数据管理，对站点的运行提供故障分析和解决方案，对设备的运行提供实时校准、检修、验收的管理体制，保证了所有站点和运行设备正常运行，和对数据的分析、统计；设备的购置和费用报销由公司财务人员及有关部门领导共同介入审核，保证录入数据的准确性，合理性；并实现公司每个站点资料图书管理，方便的为公司技术人员提供最新的设备图书资料，给公司技术人员提供强大的技术支持；使用开源的echarts图表组件，生成设备运行情况，有利于技术人员做故障分析。</p>\n<p><strong>主要工作：</strong><br>负责开发模块包括技术设施维护管理、站点管理、图书资料信息管理、系统管理4个功能模块，实现系统的功能设计与开发、页面设计与开发、数据库设计。除实现功能代码外，并编写系统的概要设计、详细设计文档及用户使用手册。</p>\n<p><strong>涉及技术：</strong><br>POI 导入和导出；富文本编辑器 Ueditor 处理多格式文本内容；quartz定时备份数据库；echarts 来展示设备年月周的运行情况。</p>\n<h3 id=\"华中科技大学教室管理系统\"><a href=\"#华中科技大学教室管理系统\" class=\"headerlink\" title=\"华中科技大学教室管理系统\"></a>华中科技大学教室管理系统</h3><p><strong>项目描述：</strong><br>为了简化华中科技大学每年繁重的教室分配和分发权力，让各院老师或者学生自己去借用教室，而学校只需要从中调节一下不合理的教室申请就可以了，免去了以前查教室，然后考虑该教室是否可用等一系列繁复的操作，只保留现在的审核就可以了。也符合了现在信息化管理的条件，与时俱进，迎合了现代人的想法化繁为简，也简化了老师们的工作量。</p>\n<p><strong>主要工作：</strong><br>主要负责教室申请整个流程的设计，流程分为老师（学生）申请、院系审核、教务处审核等一些功能的实现，并且设计相应的表结构和以及后台逻辑的开发。主要使用了jquery与ajax实现前端效果展示与前后台的数据交换工作，以及struts2自带的上传文件功能。</p>\n<h3 id=\"谷城县再生资源回收利用平台\"><a href=\"#谷城县再生资源回收利用平台\" class=\"headerlink\" title=\"谷城县再生资源回收利用平台\"></a>谷城县再生资源回收利用平台</h3><p><strong>项目描述：</strong><br>主要是提供一个在线的可再生资源信息发布平台，包括的内容有信息的发布和求购，网点的分布和资源你的推送。实现再生资源线上预约线下回收、分拣、交易、拍卖一体化的再生资源回收交易服务平台。 利用基于LBS的全方位O2O模式为产废、收废、利废环节搭建成一个最权威、最安全、最快捷、最方便的再生资源回收交易服务平台。该系统在功能上包括用户管理、公告管理、信息发布、审批管理、评论、位置服务、线上支付、首页管理。</p>\n<p><strong>主要工作：</strong><br>主要负责信息发布、用户管理模块的开发，并且配合参与审批管理以及框架的搭建和数据库的设计。我的任务重心在信息发布上、主要使用JQuery与Ajax完成异步交互，后台使用内部MVC框架实现数据的交互。</p>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><ol>\n<li>有扎实的<code>Java</code>基础和面向对象抽象能力，有扎实的编程基础和良好的编程习惯；</li>\n<li>熟练掌握<code>Spring</code>、<code>SpringMVC</code>、<code>Spring Boot</code>、<code>JFinal</code>、<code>mybatis</code>、<code>Hibernate</code>、<code>JPA</code>、<code>Dubbo</code>、<code>Zookeeper</code>等开源框架的使用；</li>\n<li>熟悉<code>MySQL</code>、<code>Oracle</code>、<code>MSSQL</code>数据库，熟悉<code>Mysql</code>的主从复制，读写分离，熟悉sql优化；</li>\n<li>熟练使用<code>JSP</code>、<code>FreeMarker</code>、<code>Beetl</code>、<code>Thymeleaf</code>模板引擎技术；</li>\n<li>熟练使用<code>Quartz</code>、<code>Spring Task</code>定时任务；</li>\n<li>熟练使用<code>maven</code>、<code>gradle</code>构建项目；</li>\n<li>熟练使用<code>redis</code>缓存，并实现<code>redis</code>集群；</li>\n<li>熟练使用<code>rabbitMQ</code>、<code>kafka</code>消息中间件；</li>\n<li>熟练使用<code>best-pay-sdk</code>、<code>IJPay</code>开发微信支付、支付宝支付；</li>\n<li>熟悉<code>ELK</code>技术栈，熟练使用<code>ElasticSearch</code>进行文件存储和检索，及集群配置，掌握<code>Kibana</code>、<code>Logstash</code>；</li>\n<li>熟练使用<code>Apache Commons</code>、<code>Google Guava</code>、<code>hutool</code>等开源工具类；</li>\n<li>掌握<code>Docker</code>，<code>Jenkins</code>，了解<code>DevOps</code>；</li>\n<li>熟练使用<code>React.js</code>，熟悉<code>Redux</code>、<code>Mobx</code>数据状态管理，能独立开发常用组件；</li>\n<li>熟练使用<code>Html5+Mui</code>完成跨平台App开发，适配安卓、IOS；</li>\n<li>熟练使用<code>Vue.js</code>技术栈。</li>\n</ol>\n<h1 id=\"我的开源项目\"><a href=\"#我的开源项目\" class=\"headerlink\" title=\"我的开源项目\"></a>我的开源项目</h1><p><code>springboot</code> 学习项目 <a href=\"https://github.com/xkcoding/spring-boot-demo\" target=\"_blank\" rel=\"external\">spring-boot-demo</a></p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：18601224166</li>\n<li>Email：shenyangkai1994@gmail.com</li>\n<li>QQ：237497819</li>\n</ul>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>沈扬凯 / 男 / 1994</li>\n<li>湖北文理学院 / 物联网工程专业 / 本科 / 工学学士</li>\n<li>技术博客：<a href=\"http://xkcoding.com\">http://xkcoding.com</a></li>\n</ul>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"西安图迹信息科技有限公司-北京分公司（2016-08-2018-03）\"><a href=\"#西安图迹信息科技有限公司-北京分公司（2016-08-2018-03）\" class=\"headerlink\" title=\"西安图迹信息科技有限公司 - 北京分公司（2016.08 ~ 2018.03）\"></a>西安图迹信息科技有限公司 - 北京分公司（2016.08 ~ 2018.03）</h2><ul>\n<li>2017.04-2018.3，回到北京分公司，独立开发“晶见资讯”小程序，协助部署devops平台，参与设计并开发“图迹售电”云平台</li>\n<li>2016.08-2017.3，驻场在“龙源电力”集团，参与“风功率预测”平台v1.0和v2.0版的开发</li>\n</ul>\n<h2 id=\"武汉金智维科技有限公司（2015-06-2016-07）\"><a href=\"#武汉金智维科技有限公司（2015-06-2016-07）\" class=\"headerlink\" title=\"武汉金智维科技有限公司（2015.06~2016.07）\"></a>武汉金智维科技有限公司（2015.06~2016.07）</h2><p>参与接口的开发，平台的维护，参与“襄阳变电站设备检测管理系统”的开发</p>\n<h1 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h1><h2 id=\"西安图迹信息科技有限公司-北京分公司\"><a href=\"#西安图迹信息科技有限公司-北京分公司\" class=\"headerlink\" title=\"西安图迹信息科技有限公司 - 北京分公司\"></a>西安图迹信息科技有限公司 - 北京分公司</h2><h3 id=\"图迹售电云平台\"><a href=\"#图迹售电云平台\" class=\"headerlink\" title=\"图迹售电云平台\"></a>图迹售电云平台</h3><p><strong>项目描述：</strong><br>图迹售电云平台分为售电侧、用电侧和管理侧。<br>售电侧主要为售电公司提供客户管理、客户数据分析，合同管理、合同套餐推荐、合同数据分析，交易中心结算、客户结算、居间商结算以及结算分析和生成结算报表，负荷预测，交易模拟，交易复盘，资讯消息，系统管理等功能。（网址：<a href=\"http://sd.togeek.cn/em/gddn/）\" target=\"_blank\" rel=\"external\">http://sd.togeek.cn/em/gddn/）</a><br>用电侧主要功能用电用户合同信息的展示，电量申报，资讯消息等功能。（网址：<a href=\"http://sd.togeek.cn/wt/gddn/）\" target=\"_blank\" rel=\"external\">http://sd.togeek.cn/wt/gddn/）</a><br>管理侧主要负责整个云平台账户维护，售电侧和用电侧模块权限控制等。（待开发）</p>\n<p><strong>主要负责：</strong><br>1.根据不同省份的规则不同设计系统架构；<br>2.负责开发合同服务、结算服务、资讯服务、权限服务、申报服务、日志服务。</p>\n<p><strong>主要工作：</strong><br>1.负责开发结算服务、资讯服务、权限服务、日志服务，并根据全国各个省份电改政策做定制化开发。整个云平台使用Eureka集群搭建高可用的服务注册和发现组件，使用<code>Hystrix</code>对服务做熔断保护措施；<br>2.结算服务是整个云平台请求最多的服务，这里采用<code>Ribbon</code>实现了该服务的负载均衡，该服务涉及到与其他服务的交互，通过<code>Feign</code>组件对其他服务进行调用，并使用<code>Sleuth</code>、<code>Zipkin</code>进行追踪服务的调用关系；<br>3.资讯服务通过爬虫定时抓取与”售电”业务相关的信息，存入数据库，然后通过<code>kafka</code>消息队列，将资讯内容存入 <code>ElasticSearch</code> 中；<br>4.权限服务采用<code>JWT</code>+<code>shiro</code>来实现；<br>5.日志服务采用<code>logbook</code>来打印HTTP请求与响应，并通过<code>logback</code>保存至日志文件中，使用<code>ELK</code>对日志进行分析；<br>6.整个云平台采用了前后端分离架构， Gateway使用<code>Zuul</code>进行路由控制，前端使用<code>React</code>技术栈和<code>Ant design</code>的UI层表现；<br>7.数据库采用<code>shardbatis</code>进行分表操作。</p>\n<h3 id=\"搭建DevOps平台\"><a href=\"#搭建DevOps平台\" class=\"headerlink\" title=\"搭建DevOps平台\"></a>搭建DevOps平台</h3><p><strong>项目描述：</strong><br>协助驻场在深圳”华润电力”集团的同事搭建DevOps平台。</p>\n<p><strong>主要工作：</strong><br>1.搭建<code>GitLab</code>，<code>Jenkins</code>，<code>Docker</code>，<code>Harbor</code>环境；<br>2.对整个流程进行测试。</p>\n<blockquote>\n<p>代码托管在<code>GitLab</code>中，对 <code>GitLab</code> 的push操作进行 <code>Jenkins</code> 的自动化代码风格的检测（<code>FireLine</code>）；将代码风格合格之后的代码进行自动化打包成 <code>Docker</code> 镜像，并将打包成功的镜像push至 <code>Harbor</code> 仓库，并发送邮件给开发、测试、运维同事；开发环境下，<code>Jenkins</code> 根据编写好的 <code>YAML</code> 文件直接更新 <code>kubernetes</code> 中的应用；任何一个步骤出错，均触发邮件提醒。</p>\n</blockquote>\n<h3 id=\"“晶见资讯”-微信小程序\"><a href=\"#“晶见资讯”-微信小程序\" class=\"headerlink\" title=\"“晶见资讯” 微信小程序\"></a>“晶见资讯” 微信小程序</h3><p><strong>项目描述：</strong><br>“晶见资讯”是一款关于售电信息检索的微信小程序。旨在帮助售电公司相关人员了解售电信息，减轻公司资讯人员的工作压力。”晶见资讯”分为admin端和小程序端，admin端主要是管理员对售电信息的管理和配置爬取的公众号信息，小程序端主要是面向售电咨询人员对售电信息的查询和下载。售电信息主要包括日常售电讯息、售电政策法规、专业问题在线咨询等。服务端网址： <a href=\"http://sd.togeek.cn/wechat/\" target=\"_blank\" rel=\"external\">http://sd.togeek.cn/wechat/</a> </p>\n<p><strong>主要工作：</strong><br>1.使用轻量级开发框架<code>JFinal</code>来提供小程序入口及后台管理入口，使用<code>Vue.js</code>，<code>iView</code>搭建后台管理系统前端界面；<br>2.管理端可以配置爬虫所需要抓取的公众号信息，使用<code>Java</code>编写的爬虫每天爬取公众号文章，存入<code>MySQL</code>，通过<code>kafka</code>消息队列，将爬取到的文章存入 <code>Elasticsearch</code>；<br>3.管理端支持上传文档，文档支持PDF和Word，Word使用<code>POI</code>解析、PDF使用Apache的<code>pdfbox</code>解析入库，通过<code>kafka</code>消息队列，将新入库的文档信息存入 <code>Elasticsearch</code>中；<br>4.小程序端信息存储、分类、检索使用<code>Elasticsearch</code>实现。</p>\n<h3 id=\"风电场功率预测管理平台-v2-0\"><a href=\"#风电场功率预测管理平台-v2-0\" class=\"headerlink\" title=\"风电场功率预测管理平台 v2.0\"></a>风电场功率预测管理平台 v2.0</h3><p><strong>项目描述：</strong><br>根据国网电力系统二次安防的要求，加入正向隔离，对原有v1.0平台进行重构。<br>“风功率预测”平台分为现场端程序和服务端程序。现场端程序主要是用来定时采集风场实时数据，定时生成电力调度所需要的调度E文件并上传至调度。服务端程序主要用于运维人员每天的检查调度文件的上送情况，以及风场人员对风场数据的查看。服务端网址：<a href=\"http://wpps.clypg.com.cn\" target=\"_blank\" rel=\"external\">http://wpps.clypg.com.cn</a> </p>\n<p><strong>主要工作：</strong><br>1.负责服务端程序的整体重构，UI层面使用了 <code>H-ui.admin</code>，并加入了<code>vue.js</code>和<code>iView</code>，数据库从<code>MySQL</code>改成<code>Oracle</code>数据库，并搭建了<code>Rac</code>实现高可用；<br>2.现场端程序内外网程序采用<code>json</code>文件通过正反向隔离传输的方式进行数据同步，并使用<code>BeautyEye</code>美化<code>Swing</code>程序；<br>3.现场端程序的在线升级，外网程序每天定时访问服务端是否有最新程序包，将最新的程序包通过<code>Base64</code>的encode成文本文件传输至内网，在decode回程序包进行升级。</p>\n<p><strong>成果：</strong><br>龙源电力集团下总共有130多家风场，风功率预测现场端程序已<strong>成功部署风场120多家风场</strong>，现场端程序为风场E文件上送调度的<strong>准确率提升至98%以上</strong>，服务端程序为甲方运维人员和风场提供统一的查询以及申报界面，方便了运维工作，提升了工作效率，获得甲方和风场的一致好评。</p>\n<h3 id=\"风功率预测管理平台-v1-0\"><a href=\"#风功率预测管理平台-v1-0\" class=\"headerlink\" title=\"风功率预测管理平台 v1.0\"></a>风功率预测管理平台 v1.0</h3><p><strong>项目描述：</strong><br>风功率预测平台分为现场端和服务端程序，服务端程序部署在北京龙源集团总部，主要用于各个风场采集到的数据的展示以及定时从FTP获取各个风电场的短期预测文件，现场端程序部署在各个风场的内外网，分为内网程序和外网程序，外网程序主要是采集各个测风塔与风机的实时数据以及和服务端进行数据同步，并按照调度要求定时生成调度 E 文件，通过反向隔离设备将E文件传输给内网程序，内网程序收到调度文件，通过 FTP 协议将文件传输至调度侧，并将传输结果返回给外网程序，以便将结果同步至服务端。</p>\n<p><strong>主要工作：</strong><br>1.服务端使用 <code>Quartz</code> 定时从 <code>FTP</code> 获取短期预测文件，并解析入库；<br>2.使用 <code>HttpClient</code> 保证服务端与现场端外网程序的数据同步；<br>3.现场端外网程序使用<code>Quartz</code>和<code>Freemarker</code>定时生成调度E文件，现场端内网程序使用<code>FTPClient</code>将调度E文件传输至调度侧的FTP服务器。</p>\n<h2 id=\"武汉金智维科技有限公司\"><a href=\"#武汉金智维科技有限公司\" class=\"headerlink\" title=\"武汉金智维科技有限公司\"></a>武汉金智维科技有限公司</h2><h3 id=\"襄阳变电站设备检测管理系统\"><a href=\"#襄阳变电站设备检测管理系统\" class=\"headerlink\" title=\"襄阳变电站设备检测管理系统\"></a>襄阳变电站设备检测管理系统</h3><p><strong>项目描述：</strong><br>主要对襄阳市各个变电站站点的运行监控，以及设备资源数据管理，对站点的运行提供故障分析和解决方案，对设备的运行提供实时校准、检修、验收的管理体制，保证了所有站点和运行设备正常运行，和对数据的分析、统计；设备的购置和费用报销由公司财务人员及有关部门领导共同介入审核，保证录入数据的准确性，合理性；并实现公司每个站点资料图书管理，方便的为公司技术人员提供最新的设备图书资料，给公司技术人员提供强大的技术支持；使用开源的echarts图表组件，生成设备运行情况，有利于技术人员做故障分析。</p>\n<p><strong>主要工作：</strong><br>负责开发模块包括技术设施维护管理、站点管理、图书资料信息管理、系统管理4个功能模块，实现系统的功能设计与开发、页面设计与开发、数据库设计。除实现功能代码外，并编写系统的概要设计、详细设计文档及用户使用手册。</p>\n<p><strong>涉及技术：</strong><br>POI 导入和导出；富文本编辑器 Ueditor 处理多格式文本内容；quartz定时备份数据库；echarts 来展示设备年月周的运行情况。</p>\n<h3 id=\"华中科技大学教室管理系统\"><a href=\"#华中科技大学教室管理系统\" class=\"headerlink\" title=\"华中科技大学教室管理系统\"></a>华中科技大学教室管理系统</h3><p><strong>项目描述：</strong><br>为了简化华中科技大学每年繁重的教室分配和分发权力，让各院老师或者学生自己去借用教室，而学校只需要从中调节一下不合理的教室申请就可以了，免去了以前查教室，然后考虑该教室是否可用等一系列繁复的操作，只保留现在的审核就可以了。也符合了现在信息化管理的条件，与时俱进，迎合了现代人的想法化繁为简，也简化了老师们的工作量。</p>\n<p><strong>主要工作：</strong><br>主要负责教室申请整个流程的设计，流程分为老师（学生）申请、院系审核、教务处审核等一些功能的实现，并且设计相应的表结构和以及后台逻辑的开发。主要使用了jquery与ajax实现前端效果展示与前后台的数据交换工作，以及struts2自带的上传文件功能。</p>\n<h3 id=\"谷城县再生资源回收利用平台\"><a href=\"#谷城县再生资源回收利用平台\" class=\"headerlink\" title=\"谷城县再生资源回收利用平台\"></a>谷城县再生资源回收利用平台</h3><p><strong>项目描述：</strong><br>主要是提供一个在线的可再生资源信息发布平台，包括的内容有信息的发布和求购，网点的分布和资源你的推送。实现再生资源线上预约线下回收、分拣、交易、拍卖一体化的再生资源回收交易服务平台。 利用基于LBS的全方位O2O模式为产废、收废、利废环节搭建成一个最权威、最安全、最快捷、最方便的再生资源回收交易服务平台。该系统在功能上包括用户管理、公告管理、信息发布、审批管理、评论、位置服务、线上支付、首页管理。</p>\n<p><strong>主要工作：</strong><br>主要负责信息发布、用户管理模块的开发，并且配合参与审批管理以及框架的搭建和数据库的设计。我的任务重心在信息发布上、主要使用JQuery与Ajax完成异步交互，后台使用内部MVC框架实现数据的交互。</p>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><ol>\n<li>有扎实的<code>Java</code>基础和面向对象抽象能力，有扎实的编程基础和良好的编程习惯；</li>\n<li>熟练掌握<code>Spring</code>、<code>SpringMVC</code>、<code>Spring Boot</code>、<code>JFinal</code>、<code>mybatis</code>、<code>Hibernate</code>、<code>JPA</code>、<code>Dubbo</code>、<code>Zookeeper</code>等开源框架的使用；</li>\n<li>熟悉<code>MySQL</code>、<code>Oracle</code>、<code>MSSQL</code>数据库，熟悉<code>Mysql</code>的主从复制，读写分离，熟悉sql优化；</li>\n<li>熟练使用<code>JSP</code>、<code>FreeMarker</code>、<code>Beetl</code>、<code>Thymeleaf</code>模板引擎技术；</li>\n<li>熟练使用<code>Quartz</code>、<code>Spring Task</code>定时任务；</li>\n<li>熟练使用<code>maven</code>、<code>gradle</code>构建项目；</li>\n<li>熟练使用<code>redis</code>缓存，并实现<code>redis</code>集群；</li>\n<li>熟练使用<code>rabbitMQ</code>、<code>kafka</code>消息中间件；</li>\n<li>熟练使用<code>best-pay-sdk</code>、<code>IJPay</code>开发微信支付、支付宝支付；</li>\n<li>熟悉<code>ELK</code>技术栈，熟练使用<code>ElasticSearch</code>进行文件存储和检索，及集群配置，掌握<code>Kibana</code>、<code>Logstash</code>；</li>\n<li>熟练使用<code>Apache Commons</code>、<code>Google Guava</code>、<code>hutool</code>等开源工具类；</li>\n<li>掌握<code>Docker</code>，<code>Jenkins</code>，了解<code>DevOps</code>；</li>\n<li>熟练使用<code>React.js</code>，熟悉<code>Redux</code>、<code>Mobx</code>数据状态管理，能独立开发常用组件；</li>\n<li>熟练使用<code>Html5+Mui</code>完成跨平台App开发，适配安卓、IOS；</li>\n<li>熟练使用<code>Vue.js</code>技术栈。</li>\n</ol>\n<h1 id=\"我的开源项目\"><a href=\"#我的开源项目\" class=\"headerlink\" title=\"我的开源项目\"></a>我的开源项目</h1><p><code>springboot</code> 学习项目 <a href=\"https://github.com/xkcoding/spring-boot-demo\" target=\"_blank\" rel=\"external\">spring-boot-demo</a></p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n"},{"comments":0,"date":"2017-07-27T01:44:41.000Z","_content":"# 此表赠黄宇\n\n\n| 技能 | 掌握程度 |\n| :-: | :-: |\n| 基础 | ❤❤❤❤❤❤❤❤❤❤ （文件操作、多线程，尽量掌握） |\n| 数据库 | ❤❤❤❤❤❤❤❤ （增删改查，左右关联，自关联，子查询，分组，去重） |\n| HTML | ❤❤❤❤❤❤ （认得，可以写简单的页面，能在别人的基础上修改） |\n| CSS | ❤❤❤❤ （基础的会就行） |\n| JS | ❤❤❤❤❤ （基础 dom 操作必须会） |\n| JQuery | ❤❤❤❤❤❤ （重点掌握选择器的用法） |\n| sevlet | ❤❤❤❤❤❤ （请掌握生命周期） |\n| JSP | ❤❤❤❤❤❤ （会用就好，能看懂就好） |\n| Struts | ❤❤❤❤❤❤❤❤ （虽然落伍了。但是学好了便于理解） |\n| Hibernate | ❤❤❤❤❤❤❤❤ |\n| Spring | ❤❤❤❤❤❤❤❤❤❤ （一定一定要学好） |\n| SpringMVC | ❤❤❤❤❤❤❤❤❤❤ （外面大部分用这个，不管教不教，请学好，应该教的） |\n| Mybatis | ❤❤❤❤❤❤❤❤❤❤ （外面大部分用这个，不管教不教，请学好，应该教的） |\n| maven | ❤❤❤❤❤❤❤❤ （要掌握，会用就行，不需要了解原理） |\n| svn、git | ❤❤❤❤❤❤❤❤ （要掌握，会用就行，不需要了解原理） |\n| <div>新技术要好好在网上关注，学会看文档</div><div>技术不重要，学习新技术的技能很重要</div> | ❤❤❤❤❤❤❤❤❤❤ |\n\n\n\n","source":"the-gift-for-hy.md","raw":"---\ncomments: false\ndate: 2017-07-27 09:44:41\npermalink: the-gift-for-hy\n---\n# 此表赠黄宇\n\n\n| 技能 | 掌握程度 |\n| :-: | :-: |\n| 基础 | ❤❤❤❤❤❤❤❤❤❤ （文件操作、多线程，尽量掌握） |\n| 数据库 | ❤❤❤❤❤❤❤❤ （增删改查，左右关联，自关联，子查询，分组，去重） |\n| HTML | ❤❤❤❤❤❤ （认得，可以写简单的页面，能在别人的基础上修改） |\n| CSS | ❤❤❤❤ （基础的会就行） |\n| JS | ❤❤❤❤❤ （基础 dom 操作必须会） |\n| JQuery | ❤❤❤❤❤❤ （重点掌握选择器的用法） |\n| sevlet | ❤❤❤❤❤❤ （请掌握生命周期） |\n| JSP | ❤❤❤❤❤❤ （会用就好，能看懂就好） |\n| Struts | ❤❤❤❤❤❤❤❤ （虽然落伍了。但是学好了便于理解） |\n| Hibernate | ❤❤❤❤❤❤❤❤ |\n| Spring | ❤❤❤❤❤❤❤❤❤❤ （一定一定要学好） |\n| SpringMVC | ❤❤❤❤❤❤❤❤❤❤ （外面大部分用这个，不管教不教，请学好，应该教的） |\n| Mybatis | ❤❤❤❤❤❤❤❤❤❤ （外面大部分用这个，不管教不教，请学好，应该教的） |\n| maven | ❤❤❤❤❤❤❤❤ （要掌握，会用就行，不需要了解原理） |\n| svn、git | ❤❤❤❤❤❤❤❤ （要掌握，会用就行，不需要了解原理） |\n| <div>新技术要好好在网上关注，学会看文档</div><div>技术不重要，学习新技术的技能很重要</div> | ❤❤❤❤❤❤❤❤❤❤ |\n\n\n\n","updated":"2017-07-27T02:27:57.000Z","path":"the-gift-for-hy.html","title":"","layout":"page","_id":"cjr64il4p0001kds6rebaukiq","content":"<h1 id=\"此表赠黄宇\"><a href=\"#此表赠黄宇\" class=\"headerlink\" title=\"此表赠黄宇\"></a>此表赠黄宇</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">技能</th>\n<th style=\"text-align:center\">掌握程度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">基础</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤ （文件操作、多线程，尽量掌握）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据库</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤ （增删改查，左右关联，自关联，子查询，分组，去重）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTML</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤ （认得，可以写简单的页面，能在别人的基础上修改）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CSS</td>\n<td style=\"text-align:center\">❤❤❤❤ （基础的会就行）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JS</td>\n<td style=\"text-align:center\">❤❤❤❤❤ （基础 dom 操作必须会）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JQuery</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤ （重点掌握选择器的用法）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sevlet</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤ （请掌握生命周期）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JSP</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤ （会用就好，能看懂就好）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Struts</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤ （虽然落伍了。但是学好了便于理解）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hibernate</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Spring</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤ （一定一定要学好）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SpringMVC</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤ （外面大部分用这个，不管教不教，请学好，应该教的）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Mybatis</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤ （外面大部分用这个，不管教不教，请学好，应该教的）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">maven</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤ （要掌握，会用就行，不需要了解原理）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">svn、git</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤ （要掌握，会用就行，不需要了解原理）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><div>新技术要好好在网上关注，学会看文档</div><div>技术不重要，学习新技术的技能很重要</div></td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"此表赠黄宇\"><a href=\"#此表赠黄宇\" class=\"headerlink\" title=\"此表赠黄宇\"></a>此表赠黄宇</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">技能</th>\n<th style=\"text-align:center\">掌握程度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">基础</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤ （文件操作、多线程，尽量掌握）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据库</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤ （增删改查，左右关联，自关联，子查询，分组，去重）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTML</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤ （认得，可以写简单的页面，能在别人的基础上修改）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CSS</td>\n<td style=\"text-align:center\">❤❤❤❤ （基础的会就行）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JS</td>\n<td style=\"text-align:center\">❤❤❤❤❤ （基础 dom 操作必须会）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JQuery</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤ （重点掌握选择器的用法）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sevlet</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤ （请掌握生命周期）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JSP</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤ （会用就好，能看懂就好）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Struts</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤ （虽然落伍了。但是学好了便于理解）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Hibernate</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Spring</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤ （一定一定要学好）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SpringMVC</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤ （外面大部分用这个，不管教不教，请学好，应该教的）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Mybatis</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤ （外面大部分用这个，不管教不教，请学好，应该教的）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">maven</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤ （要掌握，会用就行，不需要了解原理）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">svn、git</td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤ （要掌握，会用就行，不需要了解原理）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><div>新技术要好好在网上关注，学会看文档</div><div>技术不重要，学习新技术的技能很重要</div></td>\n<td style=\"text-align:center\">❤❤❤❤❤❤❤❤❤❤</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>\n<p class=\"center\">很抱歉，您所访问的地址并不存在 </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"https://music.163.com/outchain/player?type=0&id=135852005&auto=1&height=430\"></iframe>\n</div>\n\n<!-- 原先的外链歌单 52458825  -->","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>\n<p class=\"center\">很抱歉，您所访问的地址并不存在 </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"https://music.163.com/outchain/player?type=0&id=135852005&auto=1&height=430\"></iframe>\n</div>\n\n<!-- 原先的外链歌单 52458825  -->","date":"2019-01-21T09:33:39.420Z","updated":"2019-01-21T09:33:39.416Z","path":"/404.html","_id":"cjr64il5f0002kds6cxizsvyl","layout":"page","content":"<p><style type=\"text/css\"><br>    .article-header {<br>        padding: 0;<br>        padding-top: 26px;<br>        border-left: none;<br>        text-align: center;<br>    }<br>    .article-header:hover {<br>        border-left: none;<br>    }<br>    .article-title {<br>        font-size: 2.1em;<br>    }<br>    strong a {<br>        color: #747474;<br>    }<br>    .article-meta {<br>        display: none;<br>    }<br>    .share {<br>        display: none;<br>    }<br>    .ds-meta {<br>        display: none;<br>    }<br>    .player {<br>        margin-left: -10px;<br>    }<br>    .sign {<br>        text-align: right;<br>        font-style: italic;<br>    }</p>\n<pre><code>  #page-visit {\n    display: none;\n}\n.center {\n    text-align: center;\n    height: 2.5em;\n    font-weight: bold;\n}\n.article-entry hr {\n    margin: 0;\n}\n.pic {\n    text-align: center;\n    margin: 0;\n}\n.pic br {\n      display: none;\n  }\n#container .article-info-post.article-info {\n  display: none;\n  }\n#container .article .article-title {\npadding: 0;\n}\n</code></pre><p></style></p>\n<p class=\"center\">很抱歉，您所访问的地址并不存在 </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"https://music.163.com/outchain/player?type=0&id=135852005&auto=1&height=430\"></iframe><br></div>\n\n<!-- 原先的外链歌单 52458825  -->","site":{"data":{}},"excerpt":"","more":"<p><style type=\"text/css\"><br>    .article-header {<br>        padding: 0;<br>        padding-top: 26px;<br>        border-left: none;<br>        text-align: center;<br>    }<br>    .article-header:hover {<br>        border-left: none;<br>    }<br>    .article-title {<br>        font-size: 2.1em;<br>    }<br>    strong a {<br>        color: #747474;<br>    }<br>    .article-meta {<br>        display: none;<br>    }<br>    .share {<br>        display: none;<br>    }<br>    .ds-meta {<br>        display: none;<br>    }<br>    .player {<br>        margin-left: -10px;<br>    }<br>    .sign {<br>        text-align: right;<br>        font-style: italic;<br>    }</p>\n<pre><code>  #page-visit {\n    display: none;\n}\n.center {\n    text-align: center;\n    height: 2.5em;\n    font-weight: bold;\n}\n.article-entry hr {\n    margin: 0;\n}\n.pic {\n    text-align: center;\n    margin: 0;\n}\n.pic br {\n      display: none;\n  }\n#container .article-info-post.article-info {\n  display: none;\n  }\n#container .article .article-title {\npadding: 0;\n}\n</code></pre><p></style></p>\n<p class=\"center\">很抱歉，您所访问的地址并不存在 </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<div style=\"text-align: center\"><br>以下是博主喜欢的一些歌曲，可以听听，稍作休息~<br><br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"https://music.163.com/outchain/player?type=0&id=135852005&auto=1&height=430\"></iframe><br></div>\n\n<!-- 原先的外链歌单 52458825  -->"},{"date":"2017-07-26T06:08:15.000Z","fancybox":false,"_content":"<blockquote class=\"blockquote-center\">不积跬步无以至千里，不积小流无以成江海。\n《劝学》—— 荀子</blockquote>\n\n> 20岁到30岁这十年间，可能是我们最重要的十年，你要确定自己的世界观、价值观，选择一个合适的人生伴侣，慢慢定下来，可是这其间充满了挫折、怀疑和困惑。\n> 大学毕业之前，你可能和我一样，充满了各种千奇百怪的想法和想要去闯荡的心，可结果总是混混当当，想做的事情只是停留在了“想”的层面上，并没有什么结果，如今我已开始步入社会，好多事情还没有来得及做，好多想法也早已泯灭，我不要再过这样子的生活，我想改变，成为更好的自己！\n\n> 如果回到初出社会或者更年轻又或者对现在的你，你想告诉自己什么，你要怎么做？ Good luck and make it count .\n\n当我进入大四，意识到时间越过越快，好多事情再不做就来不及了，所以就有了这个博客，记录自己这一路走来的历程，希望能忠于自己，坚持下去，毕业后的第一个10年是积累的时间，期间需要慢慢改变学习的方式方法，积累行业知识，认识行业牛人，本博客目的在于积累：汇总日常所学，分享读书笔记，整理网络资料，忠于自己，忠于理想！「不积跬步无以至千里，不积小流无以成江海」，希望自己可以在不断的积累中做到厚积薄发。\n## 关于 xkcoding\n<hr>介绍自己永远是最困难的一件事情，它意味着，你把自己定位成什么，意味着你想过什么样的生活，还意味着一旦你做出介绍，那么，你自己的思维就局限于此，因为到目前为止我都没有想清楚「我是谁」这个困难的哲学问题，所以我不断的给自己打 tag，让越来越多的标签来来模糊的形成这么一个人，名字叫 「xkcoding」\n<blockquote>94年、开发者、工程师、程序猿、物联网工程、java、js、Android、APP、前端、Git、Github、开源、音乐、电影、美剧、阅读、武侠、爱狗、独立博主、果粉、米粉、电子设备、极简、不爱运动、[爱「妞妞」](http://love.xkcoding.com)</blockquote><br><blockquote>每个平凡的人都有着自己的故事，有那么多沉默的时光，默默的努力着，忍受孤独与寂寞，没有抱怨，没有诉苦，那段连自己回忆起来都感动的日子，值得记录，铭记心中。努力的去做，去尝试更多的可能，不辜负年轻，忠于自己，忠于理想！\nTry a better life , you deserve more !\n\n** xkcoding ** * - Try to be free *</blockquote>\n\n## 进步之路~\n\n<hr>\n- ~~学习 Jfinal 3.x 版本 新特性~~\n- ~~学习 Oracle 关系型数据库~~\n- ~~学习 Lucene 全文检索引擎~~\n- ~~学习 ElasticSearch 全文检索引擎~~\n- ~~学习 Layui 前端UI框架(国产)~~\n- ~~学习 vue.js~~\n- ~~学习 react.js~~\n- ~~学习 Zookeeper 中间件~~\n- ~~学习 Redis 分布式缓存~~\n- ~~学习 ActiveMQ,RabbitMQ,Kafka,RocketMQ 等任意消息中间件  -- > Apollo(ActiveMQ下一代产品),已学习Kafka,RabbitMQ~~\n- 学习 MyCat 数据库中间件\n- ~~学习 Spring Boot~~\n- ~~学习 Spring Cloud各个组件的使用~~\n- ~~学习 Dubbo 分布式RPC服务框架~~\n- ~~学习 Beetl 模版引擎(号称是JEE里面效率最牛逼的模版渲染引擎)~~\n- ~~学习 BeetlSQL 持久层框架(号称是秒杀Hibernate和MyBatis的持久层框架)~~\n- 学习 Sharding-jdbc (当当网)\n- 学习 NIO 编程 / AIO 编程,以及 NIO 框架 Netty\n- 学习开源框架 t-io\n- ~~学习 Docker 虚拟技术~~\n- ~~学习 jenkins 持续集成工具~~\n- 学习 Zabbix 分布式监控系统\n- 学习 FastDFS 分布式文件系统\n\n## 我正在坚持的行动~\n<hr>\n* 我的超神学习计划\n* 每周至少 2 次的跑步计划\n* ......\n\n## One more thing ……\n<hr>无论何时你都要记住 `xkcoding` 只是一个虚拟的网络 ID，只是一个来自网络上面的声音，可在活生生的世界里面，却真实的生存着这么一个人，有着博文中的价值观和一些独特的想法，脚踏实地的行走在这条艰难的人生路上，努力跟随自己的内心，去追求理想中的生活； `xkcoding` 是谁并不重要，重要的是芸芸众生中有那么一批人，有所想有所做，不焦不燥，忠于自己，忠于理想，不断突破着、坚守着，或许你看到文章中的某些文字会产生共鸣，引起改变，进而将这种改变带给身边的人，让自己的生活更加美好，这是平凡的力量！ 一个平凡的人，用 `xkcoding` 这个 ID 摆弄着一些文字，影响着一些人，这就足够了……\n\n## 联系 xkcoding\n<hr>\n* [MailMe(邮件联系)](mailto:237497819@qq.com)\n* [QQ](http://wpa.qq.com/msgrd?v=3&uin=237497819&site=qq&menu=yes)\n* <a href=\"/resume.html\" target=\"_blank\">查看我的完整简历</a>\n\n与我一起，聆听这首 Beyond 的《海阔天空》，感受内心深处的触动 ~<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28875146&auto=0&height=66\"></iframe>\n\n","source":"about/index.md","raw":"---\ndate: 2017-07-26 14:08:15\nfancybox: false\n---\n<blockquote class=\"blockquote-center\">不积跬步无以至千里，不积小流无以成江海。\n《劝学》—— 荀子</blockquote>\n\n> 20岁到30岁这十年间，可能是我们最重要的十年，你要确定自己的世界观、价值观，选择一个合适的人生伴侣，慢慢定下来，可是这其间充满了挫折、怀疑和困惑。\n> 大学毕业之前，你可能和我一样，充满了各种千奇百怪的想法和想要去闯荡的心，可结果总是混混当当，想做的事情只是停留在了“想”的层面上，并没有什么结果，如今我已开始步入社会，好多事情还没有来得及做，好多想法也早已泯灭，我不要再过这样子的生活，我想改变，成为更好的自己！\n\n> 如果回到初出社会或者更年轻又或者对现在的你，你想告诉自己什么，你要怎么做？ Good luck and make it count .\n\n当我进入大四，意识到时间越过越快，好多事情再不做就来不及了，所以就有了这个博客，记录自己这一路走来的历程，希望能忠于自己，坚持下去，毕业后的第一个10年是积累的时间，期间需要慢慢改变学习的方式方法，积累行业知识，认识行业牛人，本博客目的在于积累：汇总日常所学，分享读书笔记，整理网络资料，忠于自己，忠于理想！「不积跬步无以至千里，不积小流无以成江海」，希望自己可以在不断的积累中做到厚积薄发。\n## 关于 xkcoding\n<hr>介绍自己永远是最困难的一件事情，它意味着，你把自己定位成什么，意味着你想过什么样的生活，还意味着一旦你做出介绍，那么，你自己的思维就局限于此，因为到目前为止我都没有想清楚「我是谁」这个困难的哲学问题，所以我不断的给自己打 tag，让越来越多的标签来来模糊的形成这么一个人，名字叫 「xkcoding」\n<blockquote>94年、开发者、工程师、程序猿、物联网工程、java、js、Android、APP、前端、Git、Github、开源、音乐、电影、美剧、阅读、武侠、爱狗、独立博主、果粉、米粉、电子设备、极简、不爱运动、[爱「妞妞」](http://love.xkcoding.com)</blockquote><br><blockquote>每个平凡的人都有着自己的故事，有那么多沉默的时光，默默的努力着，忍受孤独与寂寞，没有抱怨，没有诉苦，那段连自己回忆起来都感动的日子，值得记录，铭记心中。努力的去做，去尝试更多的可能，不辜负年轻，忠于自己，忠于理想！\nTry a better life , you deserve more !\n\n** xkcoding ** * - Try to be free *</blockquote>\n\n## 进步之路~\n\n<hr>\n- ~~学习 Jfinal 3.x 版本 新特性~~\n- ~~学习 Oracle 关系型数据库~~\n- ~~学习 Lucene 全文检索引擎~~\n- ~~学习 ElasticSearch 全文检索引擎~~\n- ~~学习 Layui 前端UI框架(国产)~~\n- ~~学习 vue.js~~\n- ~~学习 react.js~~\n- ~~学习 Zookeeper 中间件~~\n- ~~学习 Redis 分布式缓存~~\n- ~~学习 ActiveMQ,RabbitMQ,Kafka,RocketMQ 等任意消息中间件  -- > Apollo(ActiveMQ下一代产品),已学习Kafka,RabbitMQ~~\n- 学习 MyCat 数据库中间件\n- ~~学习 Spring Boot~~\n- ~~学习 Spring Cloud各个组件的使用~~\n- ~~学习 Dubbo 分布式RPC服务框架~~\n- ~~学习 Beetl 模版引擎(号称是JEE里面效率最牛逼的模版渲染引擎)~~\n- ~~学习 BeetlSQL 持久层框架(号称是秒杀Hibernate和MyBatis的持久层框架)~~\n- 学习 Sharding-jdbc (当当网)\n- 学习 NIO 编程 / AIO 编程,以及 NIO 框架 Netty\n- 学习开源框架 t-io\n- ~~学习 Docker 虚拟技术~~\n- ~~学习 jenkins 持续集成工具~~\n- 学习 Zabbix 分布式监控系统\n- 学习 FastDFS 分布式文件系统\n\n## 我正在坚持的行动~\n<hr>\n* 我的超神学习计划\n* 每周至少 2 次的跑步计划\n* ......\n\n## One more thing ……\n<hr>无论何时你都要记住 `xkcoding` 只是一个虚拟的网络 ID，只是一个来自网络上面的声音，可在活生生的世界里面，却真实的生存着这么一个人，有着博文中的价值观和一些独特的想法，脚踏实地的行走在这条艰难的人生路上，努力跟随自己的内心，去追求理想中的生活； `xkcoding` 是谁并不重要，重要的是芸芸众生中有那么一批人，有所想有所做，不焦不燥，忠于自己，忠于理想，不断突破着、坚守着，或许你看到文章中的某些文字会产生共鸣，引起改变，进而将这种改变带给身边的人，让自己的生活更加美好，这是平凡的力量！ 一个平凡的人，用 `xkcoding` 这个 ID 摆弄着一些文字，影响着一些人，这就足够了……\n\n## 联系 xkcoding\n<hr>\n* [MailMe(邮件联系)](mailto:237497819@qq.com)\n* [QQ](http://wpa.qq.com/msgrd?v=3&uin=237497819&site=qq&menu=yes)\n* <a href=\"/resume.html\" target=\"_blank\">查看我的完整简历</a>\n\n与我一起，聆听这首 Beyond 的《海阔天空》，感受内心深处的触动 ~<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28875146&auto=0&height=66\"></iframe>\n\n","updated":"2018-07-30T07:10:23.704Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjr64il5j0004kds6d61zxtjh","content":"<blockquote class=\"blockquote-center\">不积跬步无以至千里，不积小流无以成江海。<br>《劝学》—— 荀子</blockquote>\n\n<blockquote>\n<p>20岁到30岁这十年间，可能是我们最重要的十年，你要确定自己的世界观、价值观，选择一个合适的人生伴侣，慢慢定下来，可是这其间充满了挫折、怀疑和困惑。<br>大学毕业之前，你可能和我一样，充满了各种千奇百怪的想法和想要去闯荡的心，可结果总是混混当当，想做的事情只是停留在了“想”的层面上，并没有什么结果，如今我已开始步入社会，好多事情还没有来得及做，好多想法也早已泯灭，我不要再过这样子的生活，我想改变，成为更好的自己！</p>\n<p>如果回到初出社会或者更年轻又或者对现在的你，你想告诉自己什么，你要怎么做？ Good luck and make it count .</p>\n</blockquote>\n<p>当我进入大四，意识到时间越过越快，好多事情再不做就来不及了，所以就有了这个博客，记录自己这一路走来的历程，希望能忠于自己，坚持下去，毕业后的第一个10年是积累的时间，期间需要慢慢改变学习的方式方法，积累行业知识，认识行业牛人，本博客目的在于积累：汇总日常所学，分享读书笔记，整理网络资料，忠于自己，忠于理想！「不积跬步无以至千里，不积小流无以成江海」，希望自己可以在不断的积累中做到厚积薄发。</p>\n<h2 id=\"关于-xkcoding\"><a href=\"#关于-xkcoding\" class=\"headerlink\" title=\"关于 xkcoding\"></a>关于 xkcoding</h2><p><hr>介绍自己永远是最困难的一件事情，它意味着，你把自己定位成什么，意味着你想过什么样的生活，还意味着一旦你做出介绍，那么，你自己的思维就局限于此，因为到目前为止我都没有想清楚「我是谁」这个困难的哲学问题，所以我不断的给自己打 tag，让越来越多的标签来来模糊的形成这么一个人，名字叫 「xkcoding」</p>\n<blockquote>94年、开发者、工程师、程序猿、物联网工程、java、js、Android、APP、前端、Git、Github、开源、音乐、电影、美剧、阅读、武侠、爱狗、独立博主、果粉、米粉、电子设备、极简、不爱运动、<a href=\"http://love.xkcoding.com\" target=\"_blank\" rel=\"external\">爱「妞妞」</a></blockquote><br><blockquote>每个平凡的人都有着自己的故事，有那么多沉默的时光，默默的努力着，忍受孤独与寂寞，没有抱怨，没有诉苦，那段连自己回忆起来都感动的日子，值得记录，铭记心中。努力的去做，去尝试更多的可能，不辜负年轻，忠于自己，忠于理想！<br>Try a better life , you deserve more !<br><br><strong> xkcoding </strong> <em> - Try to be free </em></blockquote>\n\n<h2 id=\"进步之路\"><a href=\"#进步之路\" class=\"headerlink\" title=\"进步之路~\"></a>进步之路~</h2><p><hr></p>\n<ul>\n<li><del>学习 Jfinal 3.x 版本 新特性</del></li>\n<li><del>学习 Oracle 关系型数据库</del></li>\n<li><del>学习 Lucene 全文检索引擎</del></li>\n<li><del>学习 ElasticSearch 全文检索引擎</del></li>\n<li><del>学习 Layui 前端UI框架(国产)</del></li>\n<li><del>学习 vue.js</del></li>\n<li><del>学习 react.js</del></li>\n<li><del>学习 Zookeeper 中间件</del></li>\n<li><del>学习 Redis 分布式缓存</del></li>\n<li><del>学习 ActiveMQ,RabbitMQ,Kafka,RocketMQ 等任意消息中间件  – &gt; Apollo(ActiveMQ下一代产品),已学习Kafka,RabbitMQ</del></li>\n<li>学习 MyCat 数据库中间件</li>\n<li><del>学习 Spring Boot</del></li>\n<li><del>学习 Spring Cloud各个组件的使用</del></li>\n<li><del>学习 Dubbo 分布式RPC服务框架</del></li>\n<li><del>学习 Beetl 模版引擎(号称是JEE里面效率最牛逼的模版渲染引擎)</del></li>\n<li><del>学习 BeetlSQL 持久层框架(号称是秒杀Hibernate和MyBatis的持久层框架)</del></li>\n<li>学习 Sharding-jdbc (当当网)</li>\n<li>学习 NIO 编程 / AIO 编程,以及 NIO 框架 Netty</li>\n<li>学习开源框架 t-io</li>\n<li><del>学习 Docker 虚拟技术</del></li>\n<li><del>学习 jenkins 持续集成工具</del></li>\n<li>学习 Zabbix 分布式监控系统</li>\n<li>学习 FastDFS 分布式文件系统</li>\n</ul>\n<h2 id=\"我正在坚持的行动\"><a href=\"#我正在坚持的行动\" class=\"headerlink\" title=\"我正在坚持的行动~\"></a>我正在坚持的行动~</h2><p><hr></p>\n<ul>\n<li>我的超神学习计划</li>\n<li>每周至少 2 次的跑步计划</li>\n<li>……</li>\n</ul>\n<h2 id=\"One-more-thing-……\"><a href=\"#One-more-thing-……\" class=\"headerlink\" title=\"One more thing ……\"></a>One more thing ……</h2><p><hr>无论何时你都要记住 <code>xkcoding</code> 只是一个虚拟的网络 ID，只是一个来自网络上面的声音，可在活生生的世界里面，却真实的生存着这么一个人，有着博文中的价值观和一些独特的想法，脚踏实地的行走在这条艰难的人生路上，努力跟随自己的内心，去追求理想中的生活； <code>xkcoding</code> 是谁并不重要，重要的是芸芸众生中有那么一批人，有所想有所做，不焦不燥，忠于自己，忠于理想，不断突破着、坚守着，或许你看到文章中的某些文字会产生共鸣，引起改变，进而将这种改变带给身边的人，让自己的生活更加美好，这是平凡的力量！ 一个平凡的人，用 <code>xkcoding</code> 这个 ID 摆弄着一些文字，影响着一些人，这就足够了……</p>\n<h2 id=\"联系-xkcoding\"><a href=\"#联系-xkcoding\" class=\"headerlink\" title=\"联系 xkcoding\"></a>联系 xkcoding</h2><p><hr></p>\n<ul>\n<li><a href=\"mailto:237497819@qq.com\" target=\"_blank\" rel=\"external\">MailMe(邮件联系)</a></li>\n<li><a href=\"http://wpa.qq.com/msgrd?v=3&amp;uin=237497819&amp;site=qq&amp;menu=yes\" target=\"_blank\" rel=\"external\">QQ</a></li>\n<li><a href=\"/resume.html\" target=\"_blank\">查看我的完整简历</a></li>\n</ul>\n<p>与我一起，聆听这首 Beyond 的《海阔天空》，感受内心深处的触动 ~<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28875146&auto=0&height=66\"></iframe></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote class=\"blockquote-center\">不积跬步无以至千里，不积小流无以成江海。<br>《劝学》—— 荀子</blockquote>\n\n<blockquote>\n<p>20岁到30岁这十年间，可能是我们最重要的十年，你要确定自己的世界观、价值观，选择一个合适的人生伴侣，慢慢定下来，可是这其间充满了挫折、怀疑和困惑。<br>大学毕业之前，你可能和我一样，充满了各种千奇百怪的想法和想要去闯荡的心，可结果总是混混当当，想做的事情只是停留在了“想”的层面上，并没有什么结果，如今我已开始步入社会，好多事情还没有来得及做，好多想法也早已泯灭，我不要再过这样子的生活，我想改变，成为更好的自己！</p>\n<p>如果回到初出社会或者更年轻又或者对现在的你，你想告诉自己什么，你要怎么做？ Good luck and make it count .</p>\n</blockquote>\n<p>当我进入大四，意识到时间越过越快，好多事情再不做就来不及了，所以就有了这个博客，记录自己这一路走来的历程，希望能忠于自己，坚持下去，毕业后的第一个10年是积累的时间，期间需要慢慢改变学习的方式方法，积累行业知识，认识行业牛人，本博客目的在于积累：汇总日常所学，分享读书笔记，整理网络资料，忠于自己，忠于理想！「不积跬步无以至千里，不积小流无以成江海」，希望自己可以在不断的积累中做到厚积薄发。</p>\n<h2 id=\"关于-xkcoding\"><a href=\"#关于-xkcoding\" class=\"headerlink\" title=\"关于 xkcoding\"></a>关于 xkcoding</h2><p><hr>介绍自己永远是最困难的一件事情，它意味着，你把自己定位成什么，意味着你想过什么样的生活，还意味着一旦你做出介绍，那么，你自己的思维就局限于此，因为到目前为止我都没有想清楚「我是谁」这个困难的哲学问题，所以我不断的给自己打 tag，让越来越多的标签来来模糊的形成这么一个人，名字叫 「xkcoding」</p>\n<blockquote>94年、开发者、工程师、程序猿、物联网工程、java、js、Android、APP、前端、Git、Github、开源、音乐、电影、美剧、阅读、武侠、爱狗、独立博主、果粉、米粉、电子设备、极简、不爱运动、<a href=\"http://love.xkcoding.com\" target=\"_blank\" rel=\"external\">爱「妞妞」</a></blockquote><br><blockquote>每个平凡的人都有着自己的故事，有那么多沉默的时光，默默的努力着，忍受孤独与寂寞，没有抱怨，没有诉苦，那段连自己回忆起来都感动的日子，值得记录，铭记心中。努力的去做，去尝试更多的可能，不辜负年轻，忠于自己，忠于理想！<br>Try a better life , you deserve more !<br><br><strong> xkcoding </strong> <em> - Try to be free </em></blockquote>\n\n<h2 id=\"进步之路\"><a href=\"#进步之路\" class=\"headerlink\" title=\"进步之路~\"></a>进步之路~</h2><p><hr></p>\n<ul>\n<li><del>学习 Jfinal 3.x 版本 新特性</del></li>\n<li><del>学习 Oracle 关系型数据库</del></li>\n<li><del>学习 Lucene 全文检索引擎</del></li>\n<li><del>学习 ElasticSearch 全文检索引擎</del></li>\n<li><del>学习 Layui 前端UI框架(国产)</del></li>\n<li><del>学习 vue.js</del></li>\n<li><del>学习 react.js</del></li>\n<li><del>学习 Zookeeper 中间件</del></li>\n<li><del>学习 Redis 分布式缓存</del></li>\n<li><del>学习 ActiveMQ,RabbitMQ,Kafka,RocketMQ 等任意消息中间件  – &gt; Apollo(ActiveMQ下一代产品),已学习Kafka,RabbitMQ</del></li>\n<li>学习 MyCat 数据库中间件</li>\n<li><del>学习 Spring Boot</del></li>\n<li><del>学习 Spring Cloud各个组件的使用</del></li>\n<li><del>学习 Dubbo 分布式RPC服务框架</del></li>\n<li><del>学习 Beetl 模版引擎(号称是JEE里面效率最牛逼的模版渲染引擎)</del></li>\n<li><del>学习 BeetlSQL 持久层框架(号称是秒杀Hibernate和MyBatis的持久层框架)</del></li>\n<li>学习 Sharding-jdbc (当当网)</li>\n<li>学习 NIO 编程 / AIO 编程,以及 NIO 框架 Netty</li>\n<li>学习开源框架 t-io</li>\n<li><del>学习 Docker 虚拟技术</del></li>\n<li><del>学习 jenkins 持续集成工具</del></li>\n<li>学习 Zabbix 分布式监控系统</li>\n<li>学习 FastDFS 分布式文件系统</li>\n</ul>\n<h2 id=\"我正在坚持的行动\"><a href=\"#我正在坚持的行动\" class=\"headerlink\" title=\"我正在坚持的行动~\"></a>我正在坚持的行动~</h2><p><hr></p>\n<ul>\n<li>我的超神学习计划</li>\n<li>每周至少 2 次的跑步计划</li>\n<li>……</li>\n</ul>\n<h2 id=\"One-more-thing-……\"><a href=\"#One-more-thing-……\" class=\"headerlink\" title=\"One more thing ……\"></a>One more thing ……</h2><p><hr>无论何时你都要记住 <code>xkcoding</code> 只是一个虚拟的网络 ID，只是一个来自网络上面的声音，可在活生生的世界里面，却真实的生存着这么一个人，有着博文中的价值观和一些独特的想法，脚踏实地的行走在这条艰难的人生路上，努力跟随自己的内心，去追求理想中的生活； <code>xkcoding</code> 是谁并不重要，重要的是芸芸众生中有那么一批人，有所想有所做，不焦不燥，忠于自己，忠于理想，不断突破着、坚守着，或许你看到文章中的某些文字会产生共鸣，引起改变，进而将这种改变带给身边的人，让自己的生活更加美好，这是平凡的力量！ 一个平凡的人，用 <code>xkcoding</code> 这个 ID 摆弄着一些文字，影响着一些人，这就足够了……</p>\n<h2 id=\"联系-xkcoding\"><a href=\"#联系-xkcoding\" class=\"headerlink\" title=\"联系 xkcoding\"></a>联系 xkcoding</h2><p><hr></p>\n<ul>\n<li><a href=\"mailto:237497819@qq.com\" target=\"_blank\" rel=\"external\">MailMe(邮件联系)</a></li>\n<li><a href=\"http://wpa.qq.com/msgrd?v=3&amp;uin=237497819&amp;site=qq&amp;menu=yes\" target=\"_blank\" rel=\"external\">QQ</a></li>\n<li><a href=\"/resume.html\" target=\"_blank\">查看我的完整简历</a></li>\n</ul>\n<p>与我一起，聆听这首 Beyond 的《海阔天空》，感受内心深处的触动 ~<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28875146&auto=0&height=66\"></iframe></p>\n"},{"title":"categories","date":"2016-12-15T02:28:36.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-12-15 10:28:36\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-06-06T14:08:27.000Z","path":"categories/index.html","layout":"page","_id":"cjr64il5o0008kds6mpnbpu80","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类 & 标签","date":"2016-03-21T12:27:39.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 分类 & 标签\ndate: 2016-03-21 20:27:39\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-06-06T14:08:27.000Z","path":"tags/index.html","layout":"page","_id":"cjr64il91007nkds6e2xrzjky","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"helloworld","date":"2016-03-21T15:58:59.000Z","comments":1,"fancybox":false,"description":"Welcome to Hexo: This is your very first post.","toc":false,"top":null,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/2016-03-21.helloworld.md","raw":"---\ntitle: helloworld\ndate: 2016-03-21 23:58:59\ntags:\n- Hexo\n- HelloWorld\ncategories:\n- HelloWorld\ncomments: true\nfancybox: false\ndescription: \"Welcome to Hexo: This is your very first post.\" \ntoc: false\npermalink: helloworld\ntop: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"helloworld","published":1,"updated":"2017-06-06T14:08:27.000Z","layout":"post","photos":[],"link":"","_id":"cjr64il5g0003kds6mch17hnp","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Ubuntu-15.04安装jdk","comments":1,"fancybox":false,"toc":true,"date":"2016-03-23T16:00:46.000Z","description":null,"top":null,"_content":"<h2 id=\"intro\">前言</h2>最近在Linux上学习Python，而PyCharm需要java环境的支持，本文记录了在Ubuntu-15.04上安装jdk1.8版本的步骤与遇到的问题。\n<!-- more -->\n## 方式一\n>**Ubuntu安装JDK**\n\n>**系统版本：**Ubuntu 15.04 x64\n\n>**JDK版本：**jdk-8u60-linux-x64\n\n### 步骤详解\n1. 查看系统位数，输入以下命令即可\n\t`getconf LONG_BIT`\n\n2. 下载对应的JDK文件，我这里下载的是**jdk-8u60-linux-64.tar.gz**\n\n3. 创建目录作为JDK的安装目录，这里选择安装位置为:**/usr/java/**\n\t`sudo mkdir /usr/java`\n\n4. 解压文件带/usr/java/目录下，文件下载的位置是在download目录下的\n\t`cd download`\n\t`sudo tar zxvf jdk-8u60-linux-x64.tar.gz -C /usr/java/`\n\n5. 进入到**/usr/java/**目录，给文件夹改名（这一步并非必须，但是为了配置环境变量方便，建议这样做）\n\t`cd /usr/java/`\n\t`sudo mv jdk1.8.0_60 jdk_8u60`\n\n6. 配置系统环境变量\n\t`sudo gedit /etc/environment`\n\n\t加入以下的内容\n\t`PATH=\":$JAVA_HOME/bin\"`\n\t`export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib`\n\t`export JAVA_HOME=/usr/java/jdk_8u60`\n\n\t修改完成后保存并关闭，输入以下命令使环境变量生效\t\n\t`source /etc/environment`\n\n7. 使用echo命令检查环境变量的配置情况\n  `echo $JAVA_HOME`\n  >输出 /usr/java/jdk_8u60\n\n  `echo $CLASSPATH`\n  >输出 .:/usr/java/jdk_8u60/lib:/usr/java/jdk_8u60/jre/lib\n\n  `echo $PATH`\n\n  >输出 /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/java/jdk_8u60/bin\n\n8. 查看安装版本:\n\t>java -version\n\t>Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar\n\t>java version \"1.8.0_60\"\n\t>Java(TM) SE Runtime Environment (build 1.8.0_60-b27)\n\t>Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)\n\n9. 设置所有用户的环境变量，不然重启之后依然找不到java命令\n\t`sudo gedit /etc/profile`\n\n\t添加以下内容即可(注意替换路径):\n\t\n\t`#set Java environment`\t\n\t`JAVA_HOME=/usr/java/jdk_8u60`\n\t`export JRE_HOME=/usr/java/jdk_8u60/jre`\n\t`export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH`\n\t`export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH`\n\n10. 重启电脑，使配置生效。\n\n11. 结束了？没有！！！\n\n   >如果使用Myeclipse等IDE的或者安装了多个jdk版本的请继续向下看↓↓↓\n\n12. 修改默认的JDK(注意替换路径)\n\t`sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/java/jdk_8u60/bin/java\" 300`\n\t`sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/java/jdk_8u60/bin/javac\" 300`\n\t`sudo update-alternatives --install \"/usr/bin/javaws\" \"javaws\" \"/usr/java/jdk_8u60/bin/javaws\" 300`\n\n\t>以上是为不同的命令建立链接，如果存在多个JDK只需要替换路径重新执行一遍即可建立链接，执行以下命令选择链接，如果每个选项只建立了一个链接，系统不会提供选项，如果存在多个链接，请根据需要选择不同选项\n\t\n\t`sudo update-alternatives --config java`\n\t`sudo update-alternatives --config javac`\n\t`sudo update-alternatives --config javaws`\n\n\n\n## 方式二\n\n1. 如果在 Ubuntu 软件中心安装过 OpenJDK，使用如下命令将其删除：\n`sudo apt-get purge openjdk*`\n\n2. 添加源和更新\n`sudo add-apt-repository ppa:webupd8team/java`\n`sudo apt-get update`\n\n3. 安装java 8\n`sudo apt-get install Oracle-java8-installer`\n\n## 安装时常见错误处理\n1. 安装时VirtualBox异常退出，重进时报如下错误：\n\t**dpkg 被中断,您必须手工运行 sudo dpkg --configure -a 解决此问题。**\n\t解决方法：\n\t`sudo rm /var/lib/dpkg/updates/*`\n\t`sudo apt-get update`\n\t`sudo apt-get upgrade`\n\n2. 运行`java -version`出现如下错误:\n\t**Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar。**\n\t解决方法：\n\t`sudo rm /usr/share/upstart/sessions/jayatana.conf`\n\t`sudo add-apt-repository ppa:danjaredg/jayatana`\n\t`sudo apt-get update`\n\t`sudo apt-get install jayatana`\n\t再正常运行正常：\n\t`xkcoding@Yangkai:~$ ~/workspace$ java -version`\n\t`java version \"1.8.0_60\"`\n\t`Java(TM) SE Runtime Environment (build 1.8.0_60-b27)`\n\t`Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)`\n\n","source":"_posts/2016-03-24.ubuntu-15.04-install-jdk.md","raw":"---\ntitle: Ubuntu-15.04安装jdk\ncomments: true\nfancybox: false\ntoc: true\ndate: 2016-03-24 00:00:46\ntags:\n- linux\n- JDK\ncategories:\n- linux\ndescription: \npermalink: ubuntu-15.04-install-jdk\ntop:\n---\n<h2 id=\"intro\">前言</h2>最近在Linux上学习Python，而PyCharm需要java环境的支持，本文记录了在Ubuntu-15.04上安装jdk1.8版本的步骤与遇到的问题。\n<!-- more -->\n## 方式一\n>**Ubuntu安装JDK**\n\n>**系统版本：**Ubuntu 15.04 x64\n\n>**JDK版本：**jdk-8u60-linux-x64\n\n### 步骤详解\n1. 查看系统位数，输入以下命令即可\n\t`getconf LONG_BIT`\n\n2. 下载对应的JDK文件，我这里下载的是**jdk-8u60-linux-64.tar.gz**\n\n3. 创建目录作为JDK的安装目录，这里选择安装位置为:**/usr/java/**\n\t`sudo mkdir /usr/java`\n\n4. 解压文件带/usr/java/目录下，文件下载的位置是在download目录下的\n\t`cd download`\n\t`sudo tar zxvf jdk-8u60-linux-x64.tar.gz -C /usr/java/`\n\n5. 进入到**/usr/java/**目录，给文件夹改名（这一步并非必须，但是为了配置环境变量方便，建议这样做）\n\t`cd /usr/java/`\n\t`sudo mv jdk1.8.0_60 jdk_8u60`\n\n6. 配置系统环境变量\n\t`sudo gedit /etc/environment`\n\n\t加入以下的内容\n\t`PATH=\":$JAVA_HOME/bin\"`\n\t`export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib`\n\t`export JAVA_HOME=/usr/java/jdk_8u60`\n\n\t修改完成后保存并关闭，输入以下命令使环境变量生效\t\n\t`source /etc/environment`\n\n7. 使用echo命令检查环境变量的配置情况\n  `echo $JAVA_HOME`\n  >输出 /usr/java/jdk_8u60\n\n  `echo $CLASSPATH`\n  >输出 .:/usr/java/jdk_8u60/lib:/usr/java/jdk_8u60/jre/lib\n\n  `echo $PATH`\n\n  >输出 /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/java/jdk_8u60/bin\n\n8. 查看安装版本:\n\t>java -version\n\t>Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar\n\t>java version \"1.8.0_60\"\n\t>Java(TM) SE Runtime Environment (build 1.8.0_60-b27)\n\t>Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)\n\n9. 设置所有用户的环境变量，不然重启之后依然找不到java命令\n\t`sudo gedit /etc/profile`\n\n\t添加以下内容即可(注意替换路径):\n\t\n\t`#set Java environment`\t\n\t`JAVA_HOME=/usr/java/jdk_8u60`\n\t`export JRE_HOME=/usr/java/jdk_8u60/jre`\n\t`export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH`\n\t`export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH`\n\n10. 重启电脑，使配置生效。\n\n11. 结束了？没有！！！\n\n   >如果使用Myeclipse等IDE的或者安装了多个jdk版本的请继续向下看↓↓↓\n\n12. 修改默认的JDK(注意替换路径)\n\t`sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/java/jdk_8u60/bin/java\" 300`\n\t`sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/java/jdk_8u60/bin/javac\" 300`\n\t`sudo update-alternatives --install \"/usr/bin/javaws\" \"javaws\" \"/usr/java/jdk_8u60/bin/javaws\" 300`\n\n\t>以上是为不同的命令建立链接，如果存在多个JDK只需要替换路径重新执行一遍即可建立链接，执行以下命令选择链接，如果每个选项只建立了一个链接，系统不会提供选项，如果存在多个链接，请根据需要选择不同选项\n\t\n\t`sudo update-alternatives --config java`\n\t`sudo update-alternatives --config javac`\n\t`sudo update-alternatives --config javaws`\n\n\n\n## 方式二\n\n1. 如果在 Ubuntu 软件中心安装过 OpenJDK，使用如下命令将其删除：\n`sudo apt-get purge openjdk*`\n\n2. 添加源和更新\n`sudo add-apt-repository ppa:webupd8team/java`\n`sudo apt-get update`\n\n3. 安装java 8\n`sudo apt-get install Oracle-java8-installer`\n\n## 安装时常见错误处理\n1. 安装时VirtualBox异常退出，重进时报如下错误：\n\t**dpkg 被中断,您必须手工运行 sudo dpkg --configure -a 解决此问题。**\n\t解决方法：\n\t`sudo rm /var/lib/dpkg/updates/*`\n\t`sudo apt-get update`\n\t`sudo apt-get upgrade`\n\n2. 运行`java -version`出现如下错误:\n\t**Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar。**\n\t解决方法：\n\t`sudo rm /usr/share/upstart/sessions/jayatana.conf`\n\t`sudo add-apt-repository ppa:danjaredg/jayatana`\n\t`sudo apt-get update`\n\t`sudo apt-get install jayatana`\n\t再正常运行正常：\n\t`xkcoding@Yangkai:~$ ~/workspace$ java -version`\n\t`java version \"1.8.0_60\"`\n\t`Java(TM) SE Runtime Environment (build 1.8.0_60-b27)`\n\t`Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)`\n\n","slug":"ubuntu-15.04-install-jdk","published":1,"updated":"2019-01-21T09:23:28.451Z","layout":"post","photos":[],"link":"","_id":"cjr64il5k0005kds6rj6ty7tb","content":"<p></p><h2 id=\"intro\">前言</h2>最近在Linux上学习Python，而PyCharm需要java环境的支持，本文记录了在Ubuntu-15.04上安装jdk1.8版本的步骤与遇到的问题。<br><a id=\"more\"></a><p></p>\n<h2 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h2><blockquote>\n<p><strong>Ubuntu安装JDK</strong></p>\n<p><strong>系统版本：</strong>Ubuntu 15.04 x64</p>\n<p><strong>JDK版本：</strong>jdk-8u60-linux-x64</p>\n</blockquote>\n<h3 id=\"步骤详解\"><a href=\"#步骤详解\" class=\"headerlink\" title=\"步骤详解\"></a>步骤详解</h3><ol>\n<li><p>查看系统位数，输入以下命令即可<br> <code>getconf LONG_BIT</code></p>\n</li>\n<li><p>下载对应的JDK文件，我这里下载的是<strong>jdk-8u60-linux-64.tar.gz</strong></p>\n</li>\n<li><p>创建目录作为JDK的安装目录，这里选择安装位置为:<strong>/usr/java/</strong><br> <code>sudo mkdir /usr/java</code></p>\n</li>\n<li><p>解压文件带/usr/java/目录下，文件下载的位置是在download目录下的<br> <code>cd download</code><br> <code>sudo tar zxvf jdk-8u60-linux-x64.tar.gz -C /usr/java/</code></p>\n</li>\n<li><p>进入到<strong>/usr/java/</strong>目录，给文件夹改名（这一步并非必须，但是为了配置环境变量方便，建议这样做）<br> <code>cd /usr/java/</code><br> <code>sudo mv jdk1.8.0_60 jdk_8u60</code></p>\n</li>\n<li><p>配置系统环境变量<br> <code>sudo gedit /etc/environment</code></p>\n<p> 加入以下的内容<br> <code>PATH=&quot;:$JAVA_HOME/bin&quot;</code><br> <code>export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</code><br> <code>export JAVA_HOME=/usr/java/jdk_8u60</code></p>\n<p> 修改完成后保存并关闭，输入以下命令使环境变量生效<br> <code>source /etc/environment</code></p>\n</li>\n<li><p>使用echo命令检查环境变量的配置情况<br><code>echo $JAVA_HOME</code></p>\n<blockquote>\n<p>输出 /usr/java/jdk_8u60</p>\n</blockquote>\n<p><code>echo $CLASSPATH</code></p>\n<blockquote>\n<p>输出 .:/usr/java/jdk_8u60/lib:/usr/java/jdk_8u60/jre/lib</p>\n</blockquote>\n<p><code>echo $PATH</code></p>\n<blockquote>\n<p>输出 /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/java/jdk_8u60/bin</p>\n</blockquote>\n</li>\n<li><p>查看安装版本:</p>\n<blockquote>\n<p>java -version<br>Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar<br>java version “1.8.0_60”<br>Java(TM) SE Runtime Environment (build 1.8.0_60-b27)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</p>\n</blockquote>\n</li>\n<li><p>设置所有用户的环境变量，不然重启之后依然找不到java命令<br> <code>sudo gedit /etc/profile</code></p>\n<p> 添加以下内容即可(注意替换路径):</p>\n<p> <code>#set Java environment</code><br> <code>JAVA_HOME=/usr/java/jdk_8u60</code><br> <code>export JRE_HOME=/usr/java/jdk_8u60/jre</code><br> <code>export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</code><br> <code>export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</code></p>\n</li>\n<li><p>重启电脑，使配置生效。</p>\n</li>\n<li><p>结束了？没有！！！</p>\n<blockquote>\n<p>如果使用Myeclipse等IDE的或者安装了多个jdk版本的请继续向下看↓↓↓</p>\n</blockquote>\n</li>\n<li><p>修改默认的JDK(注意替换路径)<br><code>sudo update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/usr/java/jdk_8u60/bin/java&quot; 300</code><br><code>sudo update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;/usr/java/jdk_8u60/bin/javac&quot; 300</code><br><code>sudo update-alternatives --install &quot;/usr/bin/javaws&quot; &quot;javaws&quot; &quot;/usr/java/jdk_8u60/bin/javaws&quot; 300</code></p>\n<blockquote>\n<p>以上是为不同的命令建立链接，如果存在多个JDK只需要替换路径重新执行一遍即可建立链接，执行以下命令选择链接，如果每个选项只建立了一个链接，系统不会提供选项，如果存在多个链接，请根据需要选择不同选项</p>\n</blockquote>\n<p><code>sudo update-alternatives --config java</code><br><code>sudo update-alternatives --config javac</code><br><code>sudo update-alternatives --config javaws</code></p>\n</li>\n</ol>\n<h2 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h2><ol>\n<li><p>如果在 Ubuntu 软件中心安装过 OpenJDK，使用如下命令将其删除：<br><code>sudo apt-get purge openjdk*</code></p>\n</li>\n<li><p>添加源和更新<br><code>sudo add-apt-repository ppa:webupd8team/java</code><br><code>sudo apt-get update</code></p>\n</li>\n<li><p>安装java 8<br><code>sudo apt-get install Oracle-java8-installer</code></p>\n</li>\n</ol>\n<h2 id=\"安装时常见错误处理\"><a href=\"#安装时常见错误处理\" class=\"headerlink\" title=\"安装时常见错误处理\"></a>安装时常见错误处理</h2><ol>\n<li><p>安装时VirtualBox异常退出，重进时报如下错误：<br> <strong>dpkg 被中断,您必须手工运行 sudo dpkg –configure -a 解决此问题。</strong><br> 解决方法：<br> <code>sudo rm /var/lib/dpkg/updates/*</code><br> <code>sudo apt-get update</code><br> <code>sudo apt-get upgrade</code></p>\n</li>\n<li><p>运行<code>java -version</code>出现如下错误:<br> <strong>Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar。</strong><br> 解决方法：<br> <code>sudo rm /usr/share/upstart/sessions/jayatana.conf</code><br> <code>sudo add-apt-repository ppa:danjaredg/jayatana</code><br> <code>sudo apt-get update</code><br> <code>sudo apt-get install jayatana</code><br> 再正常运行正常：<br> <code>xkcoding@Yangkai:~$ ~/workspace$ java -version</code><br> <code>java version &quot;1.8.0_60&quot;</code><br> <code>Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</code><br> <code>Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p></p><h2 id=\"intro\">前言</h2>最近在Linux上学习Python，而PyCharm需要java环境的支持，本文记录了在Ubuntu-15.04上安装jdk1.8版本的步骤与遇到的问题。<br>","more":"<p></p>\n<h2 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h2><blockquote>\n<p><strong>Ubuntu安装JDK</strong></p>\n<p><strong>系统版本：</strong>Ubuntu 15.04 x64</p>\n<p><strong>JDK版本：</strong>jdk-8u60-linux-x64</p>\n</blockquote>\n<h3 id=\"步骤详解\"><a href=\"#步骤详解\" class=\"headerlink\" title=\"步骤详解\"></a>步骤详解</h3><ol>\n<li><p>查看系统位数，输入以下命令即可<br> <code>getconf LONG_BIT</code></p>\n</li>\n<li><p>下载对应的JDK文件，我这里下载的是<strong>jdk-8u60-linux-64.tar.gz</strong></p>\n</li>\n<li><p>创建目录作为JDK的安装目录，这里选择安装位置为:<strong>/usr/java/</strong><br> <code>sudo mkdir /usr/java</code></p>\n</li>\n<li><p>解压文件带/usr/java/目录下，文件下载的位置是在download目录下的<br> <code>cd download</code><br> <code>sudo tar zxvf jdk-8u60-linux-x64.tar.gz -C /usr/java/</code></p>\n</li>\n<li><p>进入到<strong>/usr/java/</strong>目录，给文件夹改名（这一步并非必须，但是为了配置环境变量方便，建议这样做）<br> <code>cd /usr/java/</code><br> <code>sudo mv jdk1.8.0_60 jdk_8u60</code></p>\n</li>\n<li><p>配置系统环境变量<br> <code>sudo gedit /etc/environment</code></p>\n<p> 加入以下的内容<br> <code>PATH=&quot;:$JAVA_HOME/bin&quot;</code><br> <code>export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</code><br> <code>export JAVA_HOME=/usr/java/jdk_8u60</code></p>\n<p> 修改完成后保存并关闭，输入以下命令使环境变量生效<br> <code>source /etc/environment</code></p>\n</li>\n<li><p>使用echo命令检查环境变量的配置情况<br><code>echo $JAVA_HOME</code></p>\n<blockquote>\n<p>输出 /usr/java/jdk_8u60</p>\n</blockquote>\n<p><code>echo $CLASSPATH</code></p>\n<blockquote>\n<p>输出 .:/usr/java/jdk_8u60/lib:/usr/java/jdk_8u60/jre/lib</p>\n</blockquote>\n<p><code>echo $PATH</code></p>\n<blockquote>\n<p>输出 /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/java/jdk_8u60/bin</p>\n</blockquote>\n</li>\n<li><p>查看安装版本:</p>\n<blockquote>\n<p>java -version<br>Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar<br>java version “1.8.0_60”<br>Java(TM) SE Runtime Environment (build 1.8.0_60-b27)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</p>\n</blockquote>\n</li>\n<li><p>设置所有用户的环境变量，不然重启之后依然找不到java命令<br> <code>sudo gedit /etc/profile</code></p>\n<p> 添加以下内容即可(注意替换路径):</p>\n<p> <code>#set Java environment</code><br> <code>JAVA_HOME=/usr/java/jdk_8u60</code><br> <code>export JRE_HOME=/usr/java/jdk_8u60/jre</code><br> <code>export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</code><br> <code>export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</code></p>\n</li>\n<li><p>重启电脑，使配置生效。</p>\n</li>\n<li><p>结束了？没有！！！</p>\n<blockquote>\n<p>如果使用Myeclipse等IDE的或者安装了多个jdk版本的请继续向下看↓↓↓</p>\n</blockquote>\n</li>\n<li><p>修改默认的JDK(注意替换路径)<br><code>sudo update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/usr/java/jdk_8u60/bin/java&quot; 300</code><br><code>sudo update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;/usr/java/jdk_8u60/bin/javac&quot; 300</code><br><code>sudo update-alternatives --install &quot;/usr/bin/javaws&quot; &quot;javaws&quot; &quot;/usr/java/jdk_8u60/bin/javaws&quot; 300</code></p>\n<blockquote>\n<p>以上是为不同的命令建立链接，如果存在多个JDK只需要替换路径重新执行一遍即可建立链接，执行以下命令选择链接，如果每个选项只建立了一个链接，系统不会提供选项，如果存在多个链接，请根据需要选择不同选项</p>\n</blockquote>\n<p><code>sudo update-alternatives --config java</code><br><code>sudo update-alternatives --config javac</code><br><code>sudo update-alternatives --config javaws</code></p>\n</li>\n</ol>\n<h2 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h2><ol>\n<li><p>如果在 Ubuntu 软件中心安装过 OpenJDK，使用如下命令将其删除：<br><code>sudo apt-get purge openjdk*</code></p>\n</li>\n<li><p>添加源和更新<br><code>sudo add-apt-repository ppa:webupd8team/java</code><br><code>sudo apt-get update</code></p>\n</li>\n<li><p>安装java 8<br><code>sudo apt-get install Oracle-java8-installer</code></p>\n</li>\n</ol>\n<h2 id=\"安装时常见错误处理\"><a href=\"#安装时常见错误处理\" class=\"headerlink\" title=\"安装时常见错误处理\"></a>安装时常见错误处理</h2><ol>\n<li><p>安装时VirtualBox异常退出，重进时报如下错误：<br> <strong>dpkg 被中断,您必须手工运行 sudo dpkg –configure -a 解决此问题。</strong><br> 解决方法：<br> <code>sudo rm /var/lib/dpkg/updates/*</code><br> <code>sudo apt-get update</code><br> <code>sudo apt-get upgrade</code></p>\n</li>\n<li><p>运行<code>java -version</code>出现如下错误:<br> <strong>Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar。</strong><br> 解决方法：<br> <code>sudo rm /usr/share/upstart/sessions/jayatana.conf</code><br> <code>sudo add-apt-repository ppa:danjaredg/jayatana</code><br> <code>sudo apt-get update</code><br> <code>sudo apt-get install jayatana</code><br> 再正常运行正常：<br> <code>xkcoding@Yangkai:~$ ~/workspace$ java -version</code><br> <code>java version &quot;1.8.0_60&quot;</code><br> <code>Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</code><br> <code>Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</code></p>\n</li>\n</ol>"},{"title":"volley开源框架的初体验","comments":1,"fancybox":true,"toc":true,"date":"2016-03-25T16:51:41.000Z","description":null,"top":null,"_content":"<h2 id=\"intro\">前言</h2>Http网络数据交互请求是极其重要并且使用很频繁的一个模块，也是最基本的网络编程所需要学习的。网络请求方式的效率和性能直接影响到APP的整体用户体验流畅性，所以学习并掌握一款好的Http请求框架对我们的网络开发非常重要。Http请求在移动网络编程中主要是Get和Post请求接口数据的使用。所以，在学习好基础的Http请求知识后，为了提升开发效率，选择学习使用一款好的Http网络请求框架变得非常的重要。\n<!--more-->\n> 什么是Volley？汉语译过来就是：齐射; 迸发的意思。可以看出来，Volley特别适合数据量不大但是通信频繁的场景。\n> Volley是Google I/O 2013上Google官方发布的一款Android平台上的网络通信库。\n> 以前的网络请求，要考虑开启线程、内存泄漏、性能等等复杂的问题。但是Volley框架已经帮我们把这些问题处理好了，对外提供了相应的完善的请求API ，我们只需要按照要求使用即可\n\n### Volley框架的特点\n- 能使网络通信更快，更简单，更健壮\n- Get、Post网络请求及网络图像的高效率异步处理请求\n- 可以对网络请求进行排序优先级管理\n- 网络请求的缓存\n- 多级别取消请求\n- 和Activity生命周期的联动（Activity结束时同时取消所有网络请求）\n使用Volley可以简化一些网络通信的开发，当然Volley不适合大数据（largepayloads）和流媒体的网络请求。例如上百兆的文件、视频下载。\n- Volley开源，可以进行定制修改也可以直接使用Jar包的形式。\n\n### Volley的用法\n> 1. Volley的Get和Post请求方式的使用\n> 1. Volley的网络请求队列建立和取消队列请求\n\n1. Volley的Get和Post请求方式的使用\nGet和Post用于与服务器间请求和发送数据。\n建立请求首先建立队列，将请求添加到请求队列里。\n然后进行相应的Get和Post请求，请求结果在回调里获取解析。\n\n1. Volley的网络请求队列建立和取消队列请求\nVolley有自己的请求队列管理机制，可以控制每个请求的建立与取消。非常方便和安全。\n这样也就可以做到随时控制某个请求在什么时候结束，Activity生命周期关联，防止无谓的请求。\n\n### Volley的简单测试demo\n\n1.新建一个MyApplication类，继承自Application ，用于返回一个全局的Volley网络请求队列\n```java\npackage com.xkcoding.volley;\n\nimport android.app.Application;\n\nimport com.android.volley.RequestQueue;\nimport com.android.volley.toolbox.Volley;\n\n/**\n * @ClassName: MyApplication\n * @Description: 用于生成一个全局的请求队列\n * @author Yangkai.Shen\n * @date 2016-3-26 上午1:09:10\n * \n */\npublic class MyApplication extends Application {\n\tpublic static RequestQueue queue;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tqueue = Volley.newRequestQueue(getApplicationContext());\n\t}\n\n\t/**\n\t * @Title: getRequestQueue\n\t * @Description: 获取一个全局的请求队列\n\t * @param @return 参数说明\n\t * @return RequestQueue 返回类型\n\t * @throws\n\t */\n\tpublic static RequestQueue getRequestQueue() {\n\t\treturn queue;\n\t}\n\n}\n```\n\t\n2.在MainActivity中编写测试GET与POST请求的代码\n```java\npackage com.xkcoding.volley;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.widget.Toast;\n\nimport com.android.volley.Request.Method;\nimport com.android.volley.AuthFailureError;\nimport com.android.volley.Response;\nimport com.android.volley.Response.Listener;\nimport com.android.volley.VolleyError;\nimport com.android.volley.toolbox.StringRequest;\n\n/**\n * @ClassName: MainActivity\n * @Description: 1. Volley的Get和Post请求方式的使用 2. Volley的网络请求队列建立和取消队列请求\n * @author Yangkai.Shen\n * @date 2016-3-26 上午1:08:27\n * \n */\npublic class MainActivity extends Activity {\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_main);\n\t\tvolley_Get();\n\t\tvolley_Post();\n\t}\n\n\t/**\n\t * @Title: volley_Get\n\t * @Description: 测试GET方法\n\t * @param 参数说明\n\t * @return void 返回类型\n\t * @throws\n\t */\n\tprivate void volley_Get() {\n\t\t//测试url为聚合数据的手机归属地查询\n\t\tString url = \"http://apis.juhe.cn/mobile/get?phone=13429667914&key=ebe4429a46cb136bc7fcee57806fe952\";\n\t\tStringRequest request = new StringRequest(Method.GET, url,\n\t\t\t\tnew Listener<String>() {\n\t\t\t\t\t// 成功时回调\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onResponse(String arg0) {\n\t\t\t\t\t\tLog.i(\"volley_Get\", arg0);\n\t\t\t\t\t\tToast.makeText(getApplicationContext(), arg0,\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t}, new Response.ErrorListener() {\n\t\t\t\t\t// 失败时回调\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onErrorResponse(VolleyError arg0) {\n\t\t\t\t\t\tToast.makeText(getApplicationContext(), \"网络请求失败\",\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t// 加标签，便于在Activity销毁时，断开网络请求\n\t\trequest.setTag(\"testGet\");\n\t\t// 将请求放入请求队列\n\t\tMyApplication.getRequestQueue().add(request);\n\t}\n\n\tprivate void volley_Post() {\n\t\t//测试url为聚合数据的手机归属地查询\n\t\tString url = \"http://apis.juhe.cn/mobile/get?\";\n\t\tStringRequest request = new StringRequest(Method.POST, url,\n\t\t\t\tnew Listener<String>() {\n\t\t\t\t\t// 成功时回调\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onResponse(String arg0) {\n\t\t\t\t\t\tLog.i(\"volley_Post\", arg0);\n\t\t\t\t\t\tToast.makeText(getApplicationContext(), arg0,\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\n\t\t\t\t\t}\n\t\t\t\t}, new Response.ErrorListener() {\n\t\t\t\t\t// 失败时回调\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onErrorResponse(VolleyError arg0) {\n\t\t\t\t\t\tToast.makeText(getApplicationContext(), \"网络请求失败\",\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t}) {\n\t\t\t// POST请求所附带的请求参数\n\t\t\t@Override\n\t\t\tprotected Map<String, String> getParams() throws AuthFailureError {\n\t\t\t\tHashMap<String, String> map = new HashMap<String, String>();\n\t\t\t\tmap.put(\"phone\", \"13429667914\");\n\t\t\t\tmap.put(\"key\", \"ebe4429a46cb136bc7fcee57806fe952\");\n\t\t\t\treturn map;\n\t\t\t}\n\t\t};\n\t\t// 加标签，便于在Activity销毁时，断开网络请求\n\t\trequest.setTag(\"testPost\");\n\t\t// 将请求放入请求队列\n\t\tMyApplication.getRequestQueue().add(request);\n\t}\n\n\t@Override\n\tprotected void onStop() {\n\t\t// Activity销毁时取消请求队列列的所有请求，通过Tags找到所有请求\n\t\tMyApplication.getRequestQueue().cancelAll(\"testGet\");\n\t\tMyApplication.getRequestQueue().cancelAll(\"testPost\");\n\t\tsuper.onStop();\n\t}\n\n}\n```\n\t\n3.在清单文件AndroidManifest.xml中注册刚刚的MyApplication并添加网络权限\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n4.Ctrl+F11 成功在LogCat中打印出号码信息\n![LogCat信息](/resources/volley-demo-20160326012642.png)\n\n","source":"_posts/2016-03-26.first-use-volley-demo.md","raw":"---\ntitle: volley开源框架的初体验\ncomments: true\nfancybox: true\ntoc: true\ndate: 2016-03-26 00:51:41\ntags:\n- volley\n- Android\ncategories:\n- Android\ndescription:\npermalink: first-use-volley-demo\ntop:\n---\n<h2 id=\"intro\">前言</h2>Http网络数据交互请求是极其重要并且使用很频繁的一个模块，也是最基本的网络编程所需要学习的。网络请求方式的效率和性能直接影响到APP的整体用户体验流畅性，所以学习并掌握一款好的Http请求框架对我们的网络开发非常重要。Http请求在移动网络编程中主要是Get和Post请求接口数据的使用。所以，在学习好基础的Http请求知识后，为了提升开发效率，选择学习使用一款好的Http网络请求框架变得非常的重要。\n<!--more-->\n> 什么是Volley？汉语译过来就是：齐射; 迸发的意思。可以看出来，Volley特别适合数据量不大但是通信频繁的场景。\n> Volley是Google I/O 2013上Google官方发布的一款Android平台上的网络通信库。\n> 以前的网络请求，要考虑开启线程、内存泄漏、性能等等复杂的问题。但是Volley框架已经帮我们把这些问题处理好了，对外提供了相应的完善的请求API ，我们只需要按照要求使用即可\n\n### Volley框架的特点\n- 能使网络通信更快，更简单，更健壮\n- Get、Post网络请求及网络图像的高效率异步处理请求\n- 可以对网络请求进行排序优先级管理\n- 网络请求的缓存\n- 多级别取消请求\n- 和Activity生命周期的联动（Activity结束时同时取消所有网络请求）\n使用Volley可以简化一些网络通信的开发，当然Volley不适合大数据（largepayloads）和流媒体的网络请求。例如上百兆的文件、视频下载。\n- Volley开源，可以进行定制修改也可以直接使用Jar包的形式。\n\n### Volley的用法\n> 1. Volley的Get和Post请求方式的使用\n> 1. Volley的网络请求队列建立和取消队列请求\n\n1. Volley的Get和Post请求方式的使用\nGet和Post用于与服务器间请求和发送数据。\n建立请求首先建立队列，将请求添加到请求队列里。\n然后进行相应的Get和Post请求，请求结果在回调里获取解析。\n\n1. Volley的网络请求队列建立和取消队列请求\nVolley有自己的请求队列管理机制，可以控制每个请求的建立与取消。非常方便和安全。\n这样也就可以做到随时控制某个请求在什么时候结束，Activity生命周期关联，防止无谓的请求。\n\n### Volley的简单测试demo\n\n1.新建一个MyApplication类，继承自Application ，用于返回一个全局的Volley网络请求队列\n```java\npackage com.xkcoding.volley;\n\nimport android.app.Application;\n\nimport com.android.volley.RequestQueue;\nimport com.android.volley.toolbox.Volley;\n\n/**\n * @ClassName: MyApplication\n * @Description: 用于生成一个全局的请求队列\n * @author Yangkai.Shen\n * @date 2016-3-26 上午1:09:10\n * \n */\npublic class MyApplication extends Application {\n\tpublic static RequestQueue queue;\n\n\t@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tqueue = Volley.newRequestQueue(getApplicationContext());\n\t}\n\n\t/**\n\t * @Title: getRequestQueue\n\t * @Description: 获取一个全局的请求队列\n\t * @param @return 参数说明\n\t * @return RequestQueue 返回类型\n\t * @throws\n\t */\n\tpublic static RequestQueue getRequestQueue() {\n\t\treturn queue;\n\t}\n\n}\n```\n\t\n2.在MainActivity中编写测试GET与POST请求的代码\n```java\npackage com.xkcoding.volley;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.widget.Toast;\n\nimport com.android.volley.Request.Method;\nimport com.android.volley.AuthFailureError;\nimport com.android.volley.Response;\nimport com.android.volley.Response.Listener;\nimport com.android.volley.VolleyError;\nimport com.android.volley.toolbox.StringRequest;\n\n/**\n * @ClassName: MainActivity\n * @Description: 1. Volley的Get和Post请求方式的使用 2. Volley的网络请求队列建立和取消队列请求\n * @author Yangkai.Shen\n * @date 2016-3-26 上午1:08:27\n * \n */\npublic class MainActivity extends Activity {\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_main);\n\t\tvolley_Get();\n\t\tvolley_Post();\n\t}\n\n\t/**\n\t * @Title: volley_Get\n\t * @Description: 测试GET方法\n\t * @param 参数说明\n\t * @return void 返回类型\n\t * @throws\n\t */\n\tprivate void volley_Get() {\n\t\t//测试url为聚合数据的手机归属地查询\n\t\tString url = \"http://apis.juhe.cn/mobile/get?phone=13429667914&key=ebe4429a46cb136bc7fcee57806fe952\";\n\t\tStringRequest request = new StringRequest(Method.GET, url,\n\t\t\t\tnew Listener<String>() {\n\t\t\t\t\t// 成功时回调\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onResponse(String arg0) {\n\t\t\t\t\t\tLog.i(\"volley_Get\", arg0);\n\t\t\t\t\t\tToast.makeText(getApplicationContext(), arg0,\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t}, new Response.ErrorListener() {\n\t\t\t\t\t// 失败时回调\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onErrorResponse(VolleyError arg0) {\n\t\t\t\t\t\tToast.makeText(getApplicationContext(), \"网络请求失败\",\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t// 加标签，便于在Activity销毁时，断开网络请求\n\t\trequest.setTag(\"testGet\");\n\t\t// 将请求放入请求队列\n\t\tMyApplication.getRequestQueue().add(request);\n\t}\n\n\tprivate void volley_Post() {\n\t\t//测试url为聚合数据的手机归属地查询\n\t\tString url = \"http://apis.juhe.cn/mobile/get?\";\n\t\tStringRequest request = new StringRequest(Method.POST, url,\n\t\t\t\tnew Listener<String>() {\n\t\t\t\t\t// 成功时回调\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onResponse(String arg0) {\n\t\t\t\t\t\tLog.i(\"volley_Post\", arg0);\n\t\t\t\t\t\tToast.makeText(getApplicationContext(), arg0,\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\n\t\t\t\t\t}\n\t\t\t\t}, new Response.ErrorListener() {\n\t\t\t\t\t// 失败时回调\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onErrorResponse(VolleyError arg0) {\n\t\t\t\t\t\tToast.makeText(getApplicationContext(), \"网络请求失败\",\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t}) {\n\t\t\t// POST请求所附带的请求参数\n\t\t\t@Override\n\t\t\tprotected Map<String, String> getParams() throws AuthFailureError {\n\t\t\t\tHashMap<String, String> map = new HashMap<String, String>();\n\t\t\t\tmap.put(\"phone\", \"13429667914\");\n\t\t\t\tmap.put(\"key\", \"ebe4429a46cb136bc7fcee57806fe952\");\n\t\t\t\treturn map;\n\t\t\t}\n\t\t};\n\t\t// 加标签，便于在Activity销毁时，断开网络请求\n\t\trequest.setTag(\"testPost\");\n\t\t// 将请求放入请求队列\n\t\tMyApplication.getRequestQueue().add(request);\n\t}\n\n\t@Override\n\tprotected void onStop() {\n\t\t// Activity销毁时取消请求队列列的所有请求，通过Tags找到所有请求\n\t\tMyApplication.getRequestQueue().cancelAll(\"testGet\");\n\t\tMyApplication.getRequestQueue().cancelAll(\"testPost\");\n\t\tsuper.onStop();\n\t}\n\n}\n```\n\t\n3.在清单文件AndroidManifest.xml中注册刚刚的MyApplication并添加网络权限\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n4.Ctrl+F11 成功在LogCat中打印出号码信息\n![LogCat信息](/resources/volley-demo-20160326012642.png)\n\n","slug":"first-use-volley-demo","published":1,"updated":"2017-06-06T14:08:27.000Z","layout":"post","photos":[],"link":"","_id":"cjr64il5p0009kds67lwkeun0","content":"<p></p><h2 id=\"intro\">前言</h2>Http网络数据交互请求是极其重要并且使用很频繁的一个模块，也是最基本的网络编程所需要学习的。网络请求方式的效率和性能直接影响到APP的整体用户体验流畅性，所以学习并掌握一款好的Http请求框架对我们的网络开发非常重要。Http请求在移动网络编程中主要是Get和Post请求接口数据的使用。所以，在学习好基础的Http请求知识后，为了提升开发效率，选择学习使用一款好的Http网络请求框架变得非常的重要。<br><a id=\"more\"></a><p></p>\n<blockquote>\n<p>什么是Volley？汉语译过来就是：齐射; 迸发的意思。可以看出来，Volley特别适合数据量不大但是通信频繁的场景。<br>Volley是Google I/O 2013上Google官方发布的一款Android平台上的网络通信库。<br>以前的网络请求，要考虑开启线程、内存泄漏、性能等等复杂的问题。但是Volley框架已经帮我们把这些问题处理好了，对外提供了相应的完善的请求API ，我们只需要按照要求使用即可</p>\n</blockquote>\n<h3 id=\"Volley框架的特点\"><a href=\"#Volley框架的特点\" class=\"headerlink\" title=\"Volley框架的特点\"></a>Volley框架的特点</h3><ul>\n<li>能使网络通信更快，更简单，更健壮</li>\n<li>Get、Post网络请求及网络图像的高效率异步处理请求</li>\n<li>可以对网络请求进行排序优先级管理</li>\n<li>网络请求的缓存</li>\n<li>多级别取消请求</li>\n<li>和Activity生命周期的联动（Activity结束时同时取消所有网络请求）<br>使用Volley可以简化一些网络通信的开发，当然Volley不适合大数据（largepayloads）和流媒体的网络请求。例如上百兆的文件、视频下载。</li>\n<li>Volley开源，可以进行定制修改也可以直接使用Jar包的形式。</li>\n</ul>\n<h3 id=\"Volley的用法\"><a href=\"#Volley的用法\" class=\"headerlink\" title=\"Volley的用法\"></a>Volley的用法</h3><blockquote>\n<ol>\n<li>Volley的Get和Post请求方式的使用</li>\n<li>Volley的网络请求队列建立和取消队列请求</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>Volley的Get和Post请求方式的使用<br>Get和Post用于与服务器间请求和发送数据。<br>建立请求首先建立队列，将请求添加到请求队列里。<br>然后进行相应的Get和Post请求，请求结果在回调里获取解析。</p>\n</li>\n<li><p>Volley的网络请求队列建立和取消队列请求<br>Volley有自己的请求队列管理机制，可以控制每个请求的建立与取消。非常方便和安全。<br>这样也就可以做到随时控制某个请求在什么时候结束，Activity生命周期关联，防止无谓的请求。</p>\n</li>\n</ol>\n<h3 id=\"Volley的简单测试demo\"><a href=\"#Volley的简单测试demo\" class=\"headerlink\" title=\"Volley的简单测试demo\"></a>Volley的简单测试demo</h3><p>1.新建一个MyApplication类，继承自Application ，用于返回一个全局的Volley网络请求队列<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.volley;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.RequestQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.toolbox.Volley;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@ClassName</span>: MyApplication</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: 用于生成一个全局的请求队列</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Yangkai.Shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016-3-26 上午1:09:10</div><div class=\"line\"> * </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestQueue queue;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">\t\tqueue = Volley.newRequestQueue(getApplicationContext());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Title</span>: getRequestQueue</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 获取一个全局的请求队列</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> <span class=\"doctag\">@return</span> 参数说明</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> RequestQueue 返回类型</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestQueue <span class=\"title\">getRequestQueue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.在MainActivity中编写测试GET与POST请求的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.volley;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.Request.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.AuthFailureError;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.Response;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.Response.Listener;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.VolleyError;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.toolbox.StringRequest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@ClassName</span>: MainActivity</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: 1. Volley的Get和Post请求方式的使用 2. Volley的网络请求队列建立和取消队列请求</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Yangkai.Shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016-3-26 上午1:08:27</div><div class=\"line\"> * </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\tsetContentView(R.layout.activity_main);</div><div class=\"line\">\t\tvolley_Get();</div><div class=\"line\">\t\tvolley_Post();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Title</span>: volley_Get</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 测试GET方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> 参数说明</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> void 返回类型</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">volley_Get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//测试url为聚合数据的手机归属地查询</span></div><div class=\"line\">\t\tString url = <span class=\"string\">\"http://apis.juhe.cn/mobile/get?phone=13429667914&amp;key=ebe4429a46cb136bc7fcee57806fe952\"</span>;</div><div class=\"line\">\t\tStringRequest request = <span class=\"keyword\">new</span> StringRequest(Method.GET, url,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Listener&lt;String&gt;() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 成功时回调</span></div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tLog.i(<span class=\"string\">\"volley_Get\"</span>, arg0);</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getApplicationContext(), arg0,</div><div class=\"line\">\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;, <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 失败时回调</span></div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getApplicationContext(), <span class=\"string\">\"网络请求失败\"</span>,</div><div class=\"line\">\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"comment\">// 加标签，便于在Activity销毁时，断开网络请求</span></div><div class=\"line\">\t\trequest.setTag(<span class=\"string\">\"testGet\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 将请求放入请求队列</span></div><div class=\"line\">\t\tMyApplication.getRequestQueue().add(request);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">volley_Post</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//测试url为聚合数据的手机归属地查询</span></div><div class=\"line\">\t\tString url = <span class=\"string\">\"http://apis.juhe.cn/mobile/get?\"</span>;</div><div class=\"line\">\t\tStringRequest request = <span class=\"keyword\">new</span> StringRequest(Method.POST, url,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Listener&lt;String&gt;() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 成功时回调</span></div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tLog.i(<span class=\"string\">\"volley_Post\"</span>, arg0);</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getApplicationContext(), arg0,</div><div class=\"line\">\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;, <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 失败时回调</span></div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getApplicationContext(), <span class=\"string\">\"网络请求失败\"</span>,</div><div class=\"line\">\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// POST请求所附带的请求参数</span></div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> Map&lt;String, String&gt; <span class=\"title\">getParams</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> AuthFailureError </span>&#123;</div><div class=\"line\">\t\t\t\tHashMap&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</div><div class=\"line\">\t\t\t\tmap.put(<span class=\"string\">\"phone\"</span>, <span class=\"string\">\"13429667914\"</span>);</div><div class=\"line\">\t\t\t\tmap.put(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"ebe4429a46cb136bc7fcee57806fe952\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> map;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t<span class=\"comment\">// 加标签，便于在Activity销毁时，断开网络请求</span></div><div class=\"line\">\t\trequest.setTag(<span class=\"string\">\"testPost\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 将请求放入请求队列</span></div><div class=\"line\">\t\tMyApplication.getRequestQueue().add(request);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// Activity销毁时取消请求队列列的所有请求，通过Tags找到所有请求</span></div><div class=\"line\">\t\tMyApplication.getRequestQueue().cancelAll(<span class=\"string\">\"testGet\"</span>);</div><div class=\"line\">\t\tMyApplication.getRequestQueue().cancelAll(<span class=\"string\">\"testPost\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.在清单文件AndroidManifest.xml中注册刚刚的MyApplication并添加网络权限<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>4.Ctrl+F11 成功在LogCat中打印出号码信息<br><img src=\"/resources/volley-demo-20160326012642.png\" alt=\"LogCat信息\"></p>\n","site":{"data":{}},"excerpt":"<p></p><h2 id=\"intro\">前言</h2>Http网络数据交互请求是极其重要并且使用很频繁的一个模块，也是最基本的网络编程所需要学习的。网络请求方式的效率和性能直接影响到APP的整体用户体验流畅性，所以学习并掌握一款好的Http请求框架对我们的网络开发非常重要。Http请求在移动网络编程中主要是Get和Post请求接口数据的使用。所以，在学习好基础的Http请求知识后，为了提升开发效率，选择学习使用一款好的Http网络请求框架变得非常的重要。<br>","more":"<p></p>\n<blockquote>\n<p>什么是Volley？汉语译过来就是：齐射; 迸发的意思。可以看出来，Volley特别适合数据量不大但是通信频繁的场景。<br>Volley是Google I/O 2013上Google官方发布的一款Android平台上的网络通信库。<br>以前的网络请求，要考虑开启线程、内存泄漏、性能等等复杂的问题。但是Volley框架已经帮我们把这些问题处理好了，对外提供了相应的完善的请求API ，我们只需要按照要求使用即可</p>\n</blockquote>\n<h3 id=\"Volley框架的特点\"><a href=\"#Volley框架的特点\" class=\"headerlink\" title=\"Volley框架的特点\"></a>Volley框架的特点</h3><ul>\n<li>能使网络通信更快，更简单，更健壮</li>\n<li>Get、Post网络请求及网络图像的高效率异步处理请求</li>\n<li>可以对网络请求进行排序优先级管理</li>\n<li>网络请求的缓存</li>\n<li>多级别取消请求</li>\n<li>和Activity生命周期的联动（Activity结束时同时取消所有网络请求）<br>使用Volley可以简化一些网络通信的开发，当然Volley不适合大数据（largepayloads）和流媒体的网络请求。例如上百兆的文件、视频下载。</li>\n<li>Volley开源，可以进行定制修改也可以直接使用Jar包的形式。</li>\n</ul>\n<h3 id=\"Volley的用法\"><a href=\"#Volley的用法\" class=\"headerlink\" title=\"Volley的用法\"></a>Volley的用法</h3><blockquote>\n<ol>\n<li>Volley的Get和Post请求方式的使用</li>\n<li>Volley的网络请求队列建立和取消队列请求</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>Volley的Get和Post请求方式的使用<br>Get和Post用于与服务器间请求和发送数据。<br>建立请求首先建立队列，将请求添加到请求队列里。<br>然后进行相应的Get和Post请求，请求结果在回调里获取解析。</p>\n</li>\n<li><p>Volley的网络请求队列建立和取消队列请求<br>Volley有自己的请求队列管理机制，可以控制每个请求的建立与取消。非常方便和安全。<br>这样也就可以做到随时控制某个请求在什么时候结束，Activity生命周期关联，防止无谓的请求。</p>\n</li>\n</ol>\n<h3 id=\"Volley的简单测试demo\"><a href=\"#Volley的简单测试demo\" class=\"headerlink\" title=\"Volley的简单测试demo\"></a>Volley的简单测试demo</h3><p>1.新建一个MyApplication类，继承自Application ，用于返回一个全局的Volley网络请求队列<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.volley;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Application;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.RequestQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.toolbox.Volley;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@ClassName</span>: MyApplication</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: 用于生成一个全局的请求队列</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Yangkai.Shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016-3-26 上午1:09:10</div><div class=\"line\"> * </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestQueue queue;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">\t\tqueue = Volley.newRequestQueue(getApplicationContext());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Title</span>: getRequestQueue</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 获取一个全局的请求队列</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> <span class=\"doctag\">@return</span> 参数说明</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> RequestQueue 返回类型</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestQueue <span class=\"title\">getRequestQueue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queue;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.在MainActivity中编写测试GET与POST请求的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.volley;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.Request.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.AuthFailureError;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.Response;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.Response.Listener;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.VolleyError;</div><div class=\"line\"><span class=\"keyword\">import</span> com.android.volley.toolbox.StringRequest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * <span class=\"doctag\">@ClassName</span>: MainActivity</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: 1. Volley的Get和Post请求方式的使用 2. Volley的网络请求队列建立和取消队列请求</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Yangkai.Shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2016-3-26 上午1:08:27</div><div class=\"line\"> * </div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\tsetContentView(R.layout.activity_main);</div><div class=\"line\">\t\tvolley_Get();</div><div class=\"line\">\t\tvolley_Post();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Title</span>: volley_Get</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 测试GET方法</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> 参数说明</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> void 返回类型</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">volley_Get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//测试url为聚合数据的手机归属地查询</span></div><div class=\"line\">\t\tString url = <span class=\"string\">\"http://apis.juhe.cn/mobile/get?phone=13429667914&amp;key=ebe4429a46cb136bc7fcee57806fe952\"</span>;</div><div class=\"line\">\t\tStringRequest request = <span class=\"keyword\">new</span> StringRequest(Method.GET, url,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Listener&lt;String&gt;() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 成功时回调</span></div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tLog.i(<span class=\"string\">\"volley_Get\"</span>, arg0);</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getApplicationContext(), arg0,</div><div class=\"line\">\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;, <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 失败时回调</span></div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getApplicationContext(), <span class=\"string\">\"网络请求失败\"</span>,</div><div class=\"line\">\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"comment\">// 加标签，便于在Activity销毁时，断开网络请求</span></div><div class=\"line\">\t\trequest.setTag(<span class=\"string\">\"testGet\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 将请求放入请求队列</span></div><div class=\"line\">\t\tMyApplication.getRequestQueue().add(request);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">volley_Post</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//测试url为聚合数据的手机归属地查询</span></div><div class=\"line\">\t\tString url = <span class=\"string\">\"http://apis.juhe.cn/mobile/get?\"</span>;</div><div class=\"line\">\t\tStringRequest request = <span class=\"keyword\">new</span> StringRequest(Method.POST, url,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Listener&lt;String&gt;() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 成功时回调</span></div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tLog.i(<span class=\"string\">\"volley_Post\"</span>, arg0);</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getApplicationContext(), arg0,</div><div class=\"line\">\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;, <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 失败时回调</span></div><div class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError arg0)</span> </span>&#123;</div><div class=\"line\">\t\t\t\t\t\tToast.makeText(getApplicationContext(), <span class=\"string\">\"网络请求失败\"</span>,</div><div class=\"line\">\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// POST请求所附带的请求参数</span></div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">protected</span> Map&lt;String, String&gt; <span class=\"title\">getParams</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> AuthFailureError </span>&#123;</div><div class=\"line\">\t\t\t\tHashMap&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</div><div class=\"line\">\t\t\t\tmap.put(<span class=\"string\">\"phone\"</span>, <span class=\"string\">\"13429667914\"</span>);</div><div class=\"line\">\t\t\t\tmap.put(<span class=\"string\">\"key\"</span>, <span class=\"string\">\"ebe4429a46cb136bc7fcee57806fe952\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> map;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t\t<span class=\"comment\">// 加标签，便于在Activity销毁时，断开网络请求</span></div><div class=\"line\">\t\trequest.setTag(<span class=\"string\">\"testPost\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 将请求放入请求队列</span></div><div class=\"line\">\t\tMyApplication.getRequestQueue().add(request);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// Activity销毁时取消请求队列列的所有请求，通过Tags找到所有请求</span></div><div class=\"line\">\t\tMyApplication.getRequestQueue().cancelAll(<span class=\"string\">\"testGet\"</span>);</div><div class=\"line\">\t\tMyApplication.getRequestQueue().cancelAll(<span class=\"string\">\"testPost\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>.onStop();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.在清单文件AndroidManifest.xml中注册刚刚的MyApplication并添加网络权限<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>4.Ctrl+F11 成功在LogCat中打印出号码信息<br><img src=\"/resources/volley-demo-20160326012642.png\" alt=\"LogCat信息\"></p>"},{"title":"android 在eclipse中把局部变量变成成员变量前自动加m","comments":1,"fancybox":true,"toc":false,"date":"2016-03-27T04:22:09.000Z","description":null,"top":null,"_content":"<h2 id=\"intro\">前言</h2>在开发过程中,开发规范很重要,这样有利于后期维护,而且如果离职后,新同事接收你项目时也方便阅读代码,比如我们命名一个成员变量,一般在都是m子母开头。\n<!--more-->\n比如我们在一个方法中写一个变量,后来发现在其他地方也要用到此变量,这时我们就需要把这变量做成成员变量,我们只要按下ctrl+1,就会提示是否需要变成成员变量,如果要它自动在变量前加m，其实这也是可以配置的,如图:\n\n![eclipse中设置变量名前加m](/resources/eclipse-tips-20151107221921217.png)\n","source":"_posts/2016-03-27.eclipse-tips-variable.md","raw":"---\ntitle: android 在eclipse中把局部变量变成成员变量前自动加m\ncomments: true\nfancybox: true\ntoc: false\ndate: 2016-03-27 12:22:09\ntags:\n- Android\n- eclipse小技巧\ncategories:\n- Android\ndescription:\npermalink: eclipse-tips-variable\ntop:\n---\n<h2 id=\"intro\">前言</h2>在开发过程中,开发规范很重要,这样有利于后期维护,而且如果离职后,新同事接收你项目时也方便阅读代码,比如我们命名一个成员变量,一般在都是m子母开头。\n<!--more-->\n比如我们在一个方法中写一个变量,后来发现在其他地方也要用到此变量,这时我们就需要把这变量做成成员变量,我们只要按下ctrl+1,就会提示是否需要变成成员变量,如果要它自动在变量前加m，其实这也是可以配置的,如图:\n\n![eclipse中设置变量名前加m](/resources/eclipse-tips-20151107221921217.png)\n","slug":"eclipse-tips-variable","published":1,"updated":"2017-06-06T14:08:27.000Z","layout":"post","photos":[],"link":"","_id":"cjr64il5q000akds68w8am6x6","content":"<p></p><h2 id=\"intro\">前言</h2>在开发过程中,开发规范很重要,这样有利于后期维护,而且如果离职后,新同事接收你项目时也方便阅读代码,比如我们命名一个成员变量,一般在都是m子母开头。<br><a id=\"more\"></a><br>比如我们在一个方法中写一个变量,后来发现在其他地方也要用到此变量,这时我们就需要把这变量做成成员变量,我们只要按下ctrl+1,就会提示是否需要变成成员变量,如果要它自动在变量前加m，其实这也是可以配置的,如图:<p></p>\n<p><img src=\"/resources/eclipse-tips-20151107221921217.png\" alt=\"eclipse中设置变量名前加m\"></p>\n","site":{"data":{}},"excerpt":"<p></p><h2 id=\"intro\">前言</h2>在开发过程中,开发规范很重要,这样有利于后期维护,而且如果离职后,新同事接收你项目时也方便阅读代码,比如我们命名一个成员变量,一般在都是m子母开头。<br>","more":"<br>比如我们在一个方法中写一个变量,后来发现在其他地方也要用到此变量,这时我们就需要把这变量做成成员变量,我们只要按下ctrl+1,就会提示是否需要变成成员变量,如果要它自动在变量前加m，其实这也是可以配置的,如图:<p></p>\n<p><img src=\"/resources/eclipse-tips-20151107221921217.png\" alt=\"eclipse中设置变量名前加m\"></p>"},{"title":"蓝桥杯感想","comments":1,"fancybox":false,"toc":false,"date":"2016-03-28T15:08:33.000Z","description":null,"top":null,"_content":"<h2 id=\"intro\">前言</h2>今年是我第一次参加蓝桥杯。3月20号。\n<!--more-->\n大一、大二的时候，我就对蓝桥杯有所耳闻，今年如愿以偿的报名了。曾经憧憬着可以在蓝桥杯轻松获得二等奖，兴许运气来了，一等也是有机会的。However，今晚（3月28号）成绩出来了，三等奖，GG了。大学从未有过的信心摧残。好了，炮灰就是炮灰，我也不会一直自怨自艾，我是个有态度的炮灰，总结一下失败的原因吧！\n\n#### 总结\n1. 自信心爆棚（自负）\n比赛前一个月，室友和我说，蓝桥杯还有一个月了，不做做模拟？当时我正在做一个Android项目，再加上一直对自己实力的自信，就没有在意；比赛前2周，室友说紧张不，我说小case。。终于我成功的裸考了（在进考场之前未做甚至未看一题模拟题)\n\n1. 学艺不精(对简单的算法不够熟练，对复杂的算法没有深究)\n1. 想到再补（不是想不到，而是实在太多了）\n\n#### 展望\n蓝桥杯，如果大四还可以参战的话，明年我还想再战，那时我必将全力以赴，毕竟大学不想留有遗憾。大学剩下的一年，我会尽自己最大的努力提升自己，以最好的姿态迎接毕业。","source":"_posts/2016-03-28.lanqiao-exam.md","raw":"---\ntitle: 蓝桥杯感想\ncomments: true\nfancybox: false\ntoc: false\ndate: 2016-03-28 23:08:33\ntags:\n- 随笔\ncategories:\n- 随笔\ndescription:\npermalink: lanqiao-exam\ntop:\n---\n<h2 id=\"intro\">前言</h2>今年是我第一次参加蓝桥杯。3月20号。\n<!--more-->\n大一、大二的时候，我就对蓝桥杯有所耳闻，今年如愿以偿的报名了。曾经憧憬着可以在蓝桥杯轻松获得二等奖，兴许运气来了，一等也是有机会的。However，今晚（3月28号）成绩出来了，三等奖，GG了。大学从未有过的信心摧残。好了，炮灰就是炮灰，我也不会一直自怨自艾，我是个有态度的炮灰，总结一下失败的原因吧！\n\n#### 总结\n1. 自信心爆棚（自负）\n比赛前一个月，室友和我说，蓝桥杯还有一个月了，不做做模拟？当时我正在做一个Android项目，再加上一直对自己实力的自信，就没有在意；比赛前2周，室友说紧张不，我说小case。。终于我成功的裸考了（在进考场之前未做甚至未看一题模拟题)\n\n1. 学艺不精(对简单的算法不够熟练，对复杂的算法没有深究)\n1. 想到再补（不是想不到，而是实在太多了）\n\n#### 展望\n蓝桥杯，如果大四还可以参战的话，明年我还想再战，那时我必将全力以赴，毕竟大学不想留有遗憾。大学剩下的一年，我会尽自己最大的努力提升自己，以最好的姿态迎接毕业。","slug":"lanqiao-exam","published":1,"updated":"2017-06-06T14:08:27.000Z","layout":"post","photos":[],"link":"","_id":"cjr64il5r000bkds6n0vv3a19","content":"<p></p><h2 id=\"intro\">前言</h2>今年是我第一次参加蓝桥杯。3月20号。<br><a id=\"more\"></a><br>大一、大二的时候，我就对蓝桥杯有所耳闻，今年如愿以偿的报名了。曾经憧憬着可以在蓝桥杯轻松获得二等奖，兴许运气来了，一等也是有机会的。However，今晚（3月28号）成绩出来了，三等奖，GG了。大学从未有过的信心摧残。好了，炮灰就是炮灰，我也不会一直自怨自艾，我是个有态度的炮灰，总结一下失败的原因吧！<p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li><p>自信心爆棚（自负）<br>比赛前一个月，室友和我说，蓝桥杯还有一个月了，不做做模拟？当时我正在做一个Android项目，再加上一直对自己实力的自信，就没有在意；比赛前2周，室友说紧张不，我说小case。。终于我成功的裸考了（在进考场之前未做甚至未看一题模拟题)</p>\n</li>\n<li><p>学艺不精(对简单的算法不够熟练，对复杂的算法没有深究)</p>\n</li>\n<li>想到再补（不是想不到，而是实在太多了）</li>\n</ol>\n<h4 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h4><p>蓝桥杯，如果大四还可以参战的话，明年我还想再战，那时我必将全力以赴，毕竟大学不想留有遗憾。大学剩下的一年，我会尽自己最大的努力提升自己，以最好的姿态迎接毕业。</p>\n","site":{"data":{}},"excerpt":"<p></p><h2 id=\"intro\">前言</h2>今年是我第一次参加蓝桥杯。3月20号。<br>","more":"<br>大一、大二的时候，我就对蓝桥杯有所耳闻，今年如愿以偿的报名了。曾经憧憬着可以在蓝桥杯轻松获得二等奖，兴许运气来了，一等也是有机会的。However，今晚（3月28号）成绩出来了，三等奖，GG了。大学从未有过的信心摧残。好了，炮灰就是炮灰，我也不会一直自怨自艾，我是个有态度的炮灰，总结一下失败的原因吧！<p></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li><p>自信心爆棚（自负）<br>比赛前一个月，室友和我说，蓝桥杯还有一个月了，不做做模拟？当时我正在做一个Android项目，再加上一直对自己实力的自信，就没有在意；比赛前2周，室友说紧张不，我说小case。。终于我成功的裸考了（在进考场之前未做甚至未看一题模拟题)</p>\n</li>\n<li><p>学艺不精(对简单的算法不够熟练，对复杂的算法没有深究)</p>\n</li>\n<li>想到再补（不是想不到，而是实在太多了）</li>\n</ol>\n<h4 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h4><p>蓝桥杯，如果大四还可以参战的话，明年我还想再战，那时我必将全力以赴，毕竟大学不想留有遗憾。大学剩下的一年，我会尽自己最大的努力提升自己，以最好的姿态迎接毕业。</p>"},{"title":"Android中svn不需要进行版本控制的部分","comments":1,"fancybox":true,"toc":false,"date":"2016-04-03T05:07:36.000Z","description":null,"top":null,"_content":"<h2 id=\"intro\">前言</h2>SVN是Subversion的简称，是一个开放源代码的版本控制系统，说得简单一点SVN就是用于多个人共同开发同一个项目，共用资源的目的。但是SVN对于Android项目来说并不是所有文件都需要进行版本控制的。\n> 1. bin，gen 两个文件夹不用提交，因为这两个文件夹是自动生成的，如果提交可能会产生编译异常。\n> 1. .settings也是自动生成，也不用提交。\n> 1. .git文件夹也不需要提交，这是存放git的配置信息\n> 1. .svn同.git一样，是存放svn的配置信息的，同样不需要提交\n\n<!--more-->\n- bin目录\n- gen目录\n- .svn目录\n- .settings目录\n- .git目录\n\n----------\n屏蔽上传的方式：window-->preferences-->team-->Ignored Resources-->Add Pattern最后添加完成点击Apply\n具体需要添加的部分见下图\n![eclipse中配置Android不需要版本控制的部分](/resources/android-svn-attention-20160403130946.png)\n","source":"_posts/2016-04-03.android-svn-attention.md","raw":"---\ntitle: Android中svn不需要进行版本控制的部分\ncomments: true\nfancybox: true\ntoc: false\ndate: 2016-04-03 13:07:36\ntags:\n- Android\n- svn\n- eclipse\ncategories:\n- Android\ndescription:\npermalink: android-svn-attention\ntop:\n---\n<h2 id=\"intro\">前言</h2>SVN是Subversion的简称，是一个开放源代码的版本控制系统，说得简单一点SVN就是用于多个人共同开发同一个项目，共用资源的目的。但是SVN对于Android项目来说并不是所有文件都需要进行版本控制的。\n> 1. bin，gen 两个文件夹不用提交，因为这两个文件夹是自动生成的，如果提交可能会产生编译异常。\n> 1. .settings也是自动生成，也不用提交。\n> 1. .git文件夹也不需要提交，这是存放git的配置信息\n> 1. .svn同.git一样，是存放svn的配置信息的，同样不需要提交\n\n<!--more-->\n- bin目录\n- gen目录\n- .svn目录\n- .settings目录\n- .git目录\n\n----------\n屏蔽上传的方式：window-->preferences-->team-->Ignored Resources-->Add Pattern最后添加完成点击Apply\n具体需要添加的部分见下图\n![eclipse中配置Android不需要版本控制的部分](/resources/android-svn-attention-20160403130946.png)\n","slug":"android-svn-attention","published":1,"updated":"2017-06-06T14:08:27.000Z","layout":"post","photos":[],"link":"","_id":"cjr64il5t000ekds6ziwogi2l","content":"<p></p><h2 id=\"intro\">前言</h2>SVN是Subversion的简称，是一个开放源代码的版本控制系统，说得简单一点SVN就是用于多个人共同开发同一个项目，共用资源的目的。但是SVN对于Android项目来说并不是所有文件都需要进行版本控制的。<p></p>\n<blockquote>\n<ol>\n<li>bin，gen 两个文件夹不用提交，因为这两个文件夹是自动生成的，如果提交可能会产生编译异常。</li>\n<li>.settings也是自动生成，也不用提交。</li>\n<li>.git文件夹也不需要提交，这是存放git的配置信息</li>\n<li>.svn同.git一样，是存放svn的配置信息的，同样不需要提交</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>bin目录</li>\n<li>gen目录</li>\n<li>.svn目录</li>\n<li>.settings目录</li>\n<li>.git目录</li>\n</ul>\n<hr>\n<p>屏蔽上传的方式：window–&gt;preferences–&gt;team–&gt;Ignored Resources–&gt;Add Pattern最后添加完成点击Apply<br>具体需要添加的部分见下图<br><img src=\"/resources/android-svn-attention-20160403130946.png\" alt=\"eclipse中配置Android不需要版本控制的部分\"></p>\n","site":{"data":{}},"excerpt":"<p></p><h2 id=\"intro\">前言</h2>SVN是Subversion的简称，是一个开放源代码的版本控制系统，说得简单一点SVN就是用于多个人共同开发同一个项目，共用资源的目的。但是SVN对于Android项目来说并不是所有文件都需要进行版本控制的。<p></p>\n<blockquote>\n<ol>\n<li>bin，gen 两个文件夹不用提交，因为这两个文件夹是自动生成的，如果提交可能会产生编译异常。</li>\n<li>.settings也是自动生成，也不用提交。</li>\n<li>.git文件夹也不需要提交，这是存放git的配置信息</li>\n<li>.svn同.git一样，是存放svn的配置信息的，同样不需要提交</li>\n</ol>\n</blockquote>","more":"<ul>\n<li>bin目录</li>\n<li>gen目录</li>\n<li>.svn目录</li>\n<li>.settings目录</li>\n<li>.git目录</li>\n</ul>\n<hr>\n<p>屏蔽上传的方式：window–&gt;preferences–&gt;team–&gt;Ignored Resources–&gt;Add Pattern最后添加完成点击Apply<br>具体需要添加的部分见下图<br><img src=\"/resources/android-svn-attention-20160403130946.png\" alt=\"eclipse中配置Android不需要版本控制的部分\"></p>"},{"title":"实际项目中的代码规范","comments":1,"fancybox":true,"toc":false,"date":"2016-04-05T13:35:53.000Z","description":null,"top":null,"_content":"<h2 id=\"intro\">前言</h2>最近在准备软件杯的比赛项目，因为是担任的是项目组长，所以要求组员之间的项目代码必须要有规范，方便组员之间的团队合作，以及后期代码的维护。而且，我相信，如果我们代码规范能够做好的话，对于我们的开发水平也会提高多少。\n<!--more-->\n### 代码的规范化好处多多\n> 1. 规范的代码可以促进团队合作 \n> 1. 规范的代码可以减少bug处理 \n> 1. 规范的代码可以降低维护成本\n> 1. 规范的代码有助于代码审查\n> 1. 养成代码规范的习惯，有助于程序员自身的成长\n\n### 开发前的准备\nEclipse中设置代码样式在 `Window -->Preferences` 中设置\n#### 设置工作空间编码为UTF-8\n![设置工作空间编码为UTF-8](/resources/coding-standards-1.png)\n#### 设置文件编码为UTF-8\n![设置JAVA文件编码为UTF-8](/resources/coding-standards-2.1.png)\n![设置XML文件编码为UTF-8](/resources/coding-standards-2.2.png)\n \n#### 方法变量名转化成成员变量名称时，变量名称前加m以示区分\n![方法变量名转化成成员变量名称时，变量名称前加m以示区分](/resources/coding-standards-3.png)\n#### 配置文档注释\n `Window  -->Preferences -->Java -->Code Style -->Code Templates` \n##### Comments\n###### Files修改成如下内容\n\t/**   \n\t * @Title: ${file_name} \n\t * @Package ${package_name} \n\t * @Description: ${todo}(用一句话描述该文件做什么) \n\t * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n\t * @date ${date} ${time} \n\t * @version V1.0   \n\t */\n \n###### Types修改成如下内容\n\t/** \n\t * @ClassName: ${type_name} \n\t * @Description: ${todo}(这里用一句话描述这个类的作用) \n\t * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n\t * @date ${date} ${time} \n\t * ${tags} \n\t */\n\n \n###### Fields修改成如下内容\n\t/** \n\t * @Fields ${field} : ${todo}(用一句话描述这个变量表示什么) \n\t */\n###### Constructors修改成如下内容\n\t/** \n\t * <p>Title: </p> \n\t * <p>Description: </p> \n\t * ${tags} \n\t */\n###### Methods修改成如下内容\n\t/** \n\t * @Title: ${enclosing_method} \n\t * @Description: ${todo}(这里用一句话描述这个方法的作用) \n\t * ${tags}  参数说明 \n\t * ${return_type}  返回类型 \n\t * @throws \n\t */\n###### Overriding methods修改成如下内容\n\t/*\n\t * Title: ${enclosing_method}\n\t * Description: \n\t * ${tags} \n\t * ${see_to_overridden} \n\t */\n###### Delegate methods修改成如下内容\n\t/** \n\t * ${tags} \n\t * ${see_to_target} \n\t */\n###### Getters修改成如下内容\n\t/**\n\t * @return the ${bare_field_name}\n\t */\n###### Setters修改成如下内容\n\t/**\n\t * @param ${param} the ${bare_field_name} to set\n\t */\n\n##### Codes中只修改New Java files\n###### New Java files修改成如下内容\n\t/**   \n\t * @Title: ${file_name} \n\t * @Package ${package_name} \n\t * @Description: ${todo}(用一句话描述该文件做什么) \n\t * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n\t * @date ${date} ${time} \n\t * @version V1.0   \n\t */\n### 开发时的规范\n1.\t每个方法前添加文档注释（快捷方式：选中需要添加的方法名，再按alt+shift+j）\n2.\tSVN提交代码时，必须注明提交代码时所作的修改\n3.\t尽可能少的使用全局的静态变量，以免常驻内存\n4.\t方法变量名转化成成员变量名称时，变量名称前加m以示区分（可以在eclipse中已经设置，自动化解决）\n","source":"_posts/2016-04-05.coding-standards.md","raw":"---\ntitle: 实际项目中的代码规范\ncomments: true\nfancybox: true\ntoc: false\ndate: 2016-04-05 21:35:53\ntags:\n- eclipse\n- Android\ncategories:\n- Android\ndescription:\npermalink: coding-standards\ntop:\n---\n<h2 id=\"intro\">前言</h2>最近在准备软件杯的比赛项目，因为是担任的是项目组长，所以要求组员之间的项目代码必须要有规范，方便组员之间的团队合作，以及后期代码的维护。而且，我相信，如果我们代码规范能够做好的话，对于我们的开发水平也会提高多少。\n<!--more-->\n### 代码的规范化好处多多\n> 1. 规范的代码可以促进团队合作 \n> 1. 规范的代码可以减少bug处理 \n> 1. 规范的代码可以降低维护成本\n> 1. 规范的代码有助于代码审查\n> 1. 养成代码规范的习惯，有助于程序员自身的成长\n\n### 开发前的准备\nEclipse中设置代码样式在 `Window -->Preferences` 中设置\n#### 设置工作空间编码为UTF-8\n![设置工作空间编码为UTF-8](/resources/coding-standards-1.png)\n#### 设置文件编码为UTF-8\n![设置JAVA文件编码为UTF-8](/resources/coding-standards-2.1.png)\n![设置XML文件编码为UTF-8](/resources/coding-standards-2.2.png)\n \n#### 方法变量名转化成成员变量名称时，变量名称前加m以示区分\n![方法变量名转化成成员变量名称时，变量名称前加m以示区分](/resources/coding-standards-3.png)\n#### 配置文档注释\n `Window  -->Preferences -->Java -->Code Style -->Code Templates` \n##### Comments\n###### Files修改成如下内容\n\t/**   \n\t * @Title: ${file_name} \n\t * @Package ${package_name} \n\t * @Description: ${todo}(用一句话描述该文件做什么) \n\t * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n\t * @date ${date} ${time} \n\t * @version V1.0   \n\t */\n \n###### Types修改成如下内容\n\t/** \n\t * @ClassName: ${type_name} \n\t * @Description: ${todo}(这里用一句话描述这个类的作用) \n\t * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n\t * @date ${date} ${time} \n\t * ${tags} \n\t */\n\n \n###### Fields修改成如下内容\n\t/** \n\t * @Fields ${field} : ${todo}(用一句话描述这个变量表示什么) \n\t */\n###### Constructors修改成如下内容\n\t/** \n\t * <p>Title: </p> \n\t * <p>Description: </p> \n\t * ${tags} \n\t */\n###### Methods修改成如下内容\n\t/** \n\t * @Title: ${enclosing_method} \n\t * @Description: ${todo}(这里用一句话描述这个方法的作用) \n\t * ${tags}  参数说明 \n\t * ${return_type}  返回类型 \n\t * @throws \n\t */\n###### Overriding methods修改成如下内容\n\t/*\n\t * Title: ${enclosing_method}\n\t * Description: \n\t * ${tags} \n\t * ${see_to_overridden} \n\t */\n###### Delegate methods修改成如下内容\n\t/** \n\t * ${tags} \n\t * ${see_to_target} \n\t */\n###### Getters修改成如下内容\n\t/**\n\t * @return the ${bare_field_name}\n\t */\n###### Setters修改成如下内容\n\t/**\n\t * @param ${param} the ${bare_field_name} to set\n\t */\n\n##### Codes中只修改New Java files\n###### New Java files修改成如下内容\n\t/**   \n\t * @Title: ${file_name} \n\t * @Package ${package_name} \n\t * @Description: ${todo}(用一句话描述该文件做什么) \n\t * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n\t * @date ${date} ${time} \n\t * @version V1.0   \n\t */\n### 开发时的规范\n1.\t每个方法前添加文档注释（快捷方式：选中需要添加的方法名，再按alt+shift+j）\n2.\tSVN提交代码时，必须注明提交代码时所作的修改\n3.\t尽可能少的使用全局的静态变量，以免常驻内存\n4.\t方法变量名转化成成员变量名称时，变量名称前加m以示区分（可以在eclipse中已经设置，自动化解决）\n","slug":"coding-standards","published":1,"updated":"2017-06-06T14:08:27.000Z","layout":"post","photos":[],"link":"","_id":"cjr64il5v000gkds6lhi891p4","content":"<p></p><h2 id=\"intro\">前言</h2>最近在准备软件杯的比赛项目，因为是担任的是项目组长，所以要求组员之间的项目代码必须要有规范，方便组员之间的团队合作，以及后期代码的维护。而且，我相信，如果我们代码规范能够做好的话，对于我们的开发水平也会提高多少。<br><a id=\"more\"></a><p></p>\n<h3 id=\"代码的规范化好处多多\"><a href=\"#代码的规范化好处多多\" class=\"headerlink\" title=\"代码的规范化好处多多\"></a>代码的规范化好处多多</h3><blockquote>\n<ol>\n<li>规范的代码可以促进团队合作 </li>\n<li>规范的代码可以减少bug处理 </li>\n<li>规范的代码可以降低维护成本</li>\n<li>规范的代码有助于代码审查</li>\n<li>养成代码规范的习惯，有助于程序员自身的成长</li>\n</ol>\n</blockquote>\n<h3 id=\"开发前的准备\"><a href=\"#开发前的准备\" class=\"headerlink\" title=\"开发前的准备\"></a>开发前的准备</h3><p>Eclipse中设置代码样式在 <code>Window --&gt;Preferences</code> 中设置</p>\n<h4 id=\"设置工作空间编码为UTF-8\"><a href=\"#设置工作空间编码为UTF-8\" class=\"headerlink\" title=\"设置工作空间编码为UTF-8\"></a>设置工作空间编码为UTF-8</h4><p><img src=\"/resources/coding-standards-1.png\" alt=\"设置工作空间编码为UTF-8\"></p>\n<h4 id=\"设置文件编码为UTF-8\"><a href=\"#设置文件编码为UTF-8\" class=\"headerlink\" title=\"设置文件编码为UTF-8\"></a>设置文件编码为UTF-8</h4><p><img src=\"/resources/coding-standards-2.1.png\" alt=\"设置JAVA文件编码为UTF-8\"><br><img src=\"/resources/coding-standards-2.2.png\" alt=\"设置XML文件编码为UTF-8\"></p>\n<h4 id=\"方法变量名转化成成员变量名称时，变量名称前加m以示区分\"><a href=\"#方法变量名转化成成员变量名称时，变量名称前加m以示区分\" class=\"headerlink\" title=\"方法变量名转化成成员变量名称时，变量名称前加m以示区分\"></a>方法变量名转化成成员变量名称时，变量名称前加m以示区分</h4><p><img src=\"/resources/coding-standards-3.png\" alt=\"方法变量名转化成成员变量名称时，变量名称前加m以示区分\"></p>\n<h4 id=\"配置文档注释\"><a href=\"#配置文档注释\" class=\"headerlink\" title=\"配置文档注释\"></a>配置文档注释</h4><p> <code>Window  --&gt;Preferences --&gt;Java --&gt;Code Style --&gt;Code Templates</code> </p>\n<h5 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h5><h6 id=\"Files修改成如下内容\"><a href=\"#Files修改成如下内容\" class=\"headerlink\" title=\"Files修改成如下内容\"></a>Files修改成如下内容</h6><pre><code>/**   \n * @Title: ${file_name} \n * @Package ${package_name} \n * @Description: ${todo}(用一句话描述该文件做什么) \n * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n * @date ${date} ${time} \n * @version V1.0   \n */\n</code></pre><h6 id=\"Types修改成如下内容\"><a href=\"#Types修改成如下内容\" class=\"headerlink\" title=\"Types修改成如下内容\"></a>Types修改成如下内容</h6><pre><code>/** \n * @ClassName: ${type_name} \n * @Description: ${todo}(这里用一句话描述这个类的作用) \n * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n * @date ${date} ${time} \n * ${tags} \n */\n</code></pre><h6 id=\"Fields修改成如下内容\"><a href=\"#Fields修改成如下内容\" class=\"headerlink\" title=\"Fields修改成如下内容\"></a>Fields修改成如下内容</h6><pre><code>/** \n * @Fields ${field} : ${todo}(用一句话描述这个变量表示什么) \n */\n</code></pre><h6 id=\"Constructors修改成如下内容\"><a href=\"#Constructors修改成如下内容\" class=\"headerlink\" title=\"Constructors修改成如下内容\"></a>Constructors修改成如下内容</h6><pre><code>/** \n * &lt;p&gt;Title: &lt;/p&gt; \n * &lt;p&gt;Description: &lt;/p&gt; \n * ${tags} \n */\n</code></pre><h6 id=\"Methods修改成如下内容\"><a href=\"#Methods修改成如下内容\" class=\"headerlink\" title=\"Methods修改成如下内容\"></a>Methods修改成如下内容</h6><pre><code>/** \n * @Title: ${enclosing_method} \n * @Description: ${todo}(这里用一句话描述这个方法的作用) \n * ${tags}  参数说明 \n * ${return_type}  返回类型 \n * @throws \n */\n</code></pre><h6 id=\"Overriding-methods修改成如下内容\"><a href=\"#Overriding-methods修改成如下内容\" class=\"headerlink\" title=\"Overriding methods修改成如下内容\"></a>Overriding methods修改成如下内容</h6><pre><code>/*\n * Title: ${enclosing_method}\n * Description: \n * ${tags} \n * ${see_to_overridden} \n */\n</code></pre><h6 id=\"Delegate-methods修改成如下内容\"><a href=\"#Delegate-methods修改成如下内容\" class=\"headerlink\" title=\"Delegate methods修改成如下内容\"></a>Delegate methods修改成如下内容</h6><pre><code>/** \n * ${tags} \n * ${see_to_target} \n */\n</code></pre><h6 id=\"Getters修改成如下内容\"><a href=\"#Getters修改成如下内容\" class=\"headerlink\" title=\"Getters修改成如下内容\"></a>Getters修改成如下内容</h6><pre><code>/**\n * @return the ${bare_field_name}\n */\n</code></pre><h6 id=\"Setters修改成如下内容\"><a href=\"#Setters修改成如下内容\" class=\"headerlink\" title=\"Setters修改成如下内容\"></a>Setters修改成如下内容</h6><pre><code>/**\n * @param ${param} the ${bare_field_name} to set\n */\n</code></pre><h5 id=\"Codes中只修改New-Java-files\"><a href=\"#Codes中只修改New-Java-files\" class=\"headerlink\" title=\"Codes中只修改New Java files\"></a>Codes中只修改New Java files</h5><h6 id=\"New-Java-files修改成如下内容\"><a href=\"#New-Java-files修改成如下内容\" class=\"headerlink\" title=\"New Java files修改成如下内容\"></a>New Java files修改成如下内容</h6><pre><code>/**   \n * @Title: ${file_name} \n * @Package ${package_name} \n * @Description: ${todo}(用一句话描述该文件做什么) \n * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n * @date ${date} ${time} \n * @version V1.0   \n */\n</code></pre><h3 id=\"开发时的规范\"><a href=\"#开发时的规范\" class=\"headerlink\" title=\"开发时的规范\"></a>开发时的规范</h3><ol>\n<li>每个方法前添加文档注释（快捷方式：选中需要添加的方法名，再按alt+shift+j）</li>\n<li>SVN提交代码时，必须注明提交代码时所作的修改</li>\n<li>尽可能少的使用全局的静态变量，以免常驻内存</li>\n<li>方法变量名转化成成员变量名称时，变量名称前加m以示区分（可以在eclipse中已经设置，自动化解决）</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p></p><h2 id=\"intro\">前言</h2>最近在准备软件杯的比赛项目，因为是担任的是项目组长，所以要求组员之间的项目代码必须要有规范，方便组员之间的团队合作，以及后期代码的维护。而且，我相信，如果我们代码规范能够做好的话，对于我们的开发水平也会提高多少。<br>","more":"<p></p>\n<h3 id=\"代码的规范化好处多多\"><a href=\"#代码的规范化好处多多\" class=\"headerlink\" title=\"代码的规范化好处多多\"></a>代码的规范化好处多多</h3><blockquote>\n<ol>\n<li>规范的代码可以促进团队合作 </li>\n<li>规范的代码可以减少bug处理 </li>\n<li>规范的代码可以降低维护成本</li>\n<li>规范的代码有助于代码审查</li>\n<li>养成代码规范的习惯，有助于程序员自身的成长</li>\n</ol>\n</blockquote>\n<h3 id=\"开发前的准备\"><a href=\"#开发前的准备\" class=\"headerlink\" title=\"开发前的准备\"></a>开发前的准备</h3><p>Eclipse中设置代码样式在 <code>Window --&gt;Preferences</code> 中设置</p>\n<h4 id=\"设置工作空间编码为UTF-8\"><a href=\"#设置工作空间编码为UTF-8\" class=\"headerlink\" title=\"设置工作空间编码为UTF-8\"></a>设置工作空间编码为UTF-8</h4><p><img src=\"/resources/coding-standards-1.png\" alt=\"设置工作空间编码为UTF-8\"></p>\n<h4 id=\"设置文件编码为UTF-8\"><a href=\"#设置文件编码为UTF-8\" class=\"headerlink\" title=\"设置文件编码为UTF-8\"></a>设置文件编码为UTF-8</h4><p><img src=\"/resources/coding-standards-2.1.png\" alt=\"设置JAVA文件编码为UTF-8\"><br><img src=\"/resources/coding-standards-2.2.png\" alt=\"设置XML文件编码为UTF-8\"></p>\n<h4 id=\"方法变量名转化成成员变量名称时，变量名称前加m以示区分\"><a href=\"#方法变量名转化成成员变量名称时，变量名称前加m以示区分\" class=\"headerlink\" title=\"方法变量名转化成成员变量名称时，变量名称前加m以示区分\"></a>方法变量名转化成成员变量名称时，变量名称前加m以示区分</h4><p><img src=\"/resources/coding-standards-3.png\" alt=\"方法变量名转化成成员变量名称时，变量名称前加m以示区分\"></p>\n<h4 id=\"配置文档注释\"><a href=\"#配置文档注释\" class=\"headerlink\" title=\"配置文档注释\"></a>配置文档注释</h4><p> <code>Window  --&gt;Preferences --&gt;Java --&gt;Code Style --&gt;Code Templates</code> </p>\n<h5 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h5><h6 id=\"Files修改成如下内容\"><a href=\"#Files修改成如下内容\" class=\"headerlink\" title=\"Files修改成如下内容\"></a>Files修改成如下内容</h6><pre><code>/**   \n * @Title: ${file_name} \n * @Package ${package_name} \n * @Description: ${todo}(用一句话描述该文件做什么) \n * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n * @date ${date} ${time} \n * @version V1.0   \n */\n</code></pre><h6 id=\"Types修改成如下内容\"><a href=\"#Types修改成如下内容\" class=\"headerlink\" title=\"Types修改成如下内容\"></a>Types修改成如下内容</h6><pre><code>/** \n * @ClassName: ${type_name} \n * @Description: ${todo}(这里用一句话描述这个类的作用) \n * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n * @date ${date} ${time} \n * ${tags} \n */\n</code></pre><h6 id=\"Fields修改成如下内容\"><a href=\"#Fields修改成如下内容\" class=\"headerlink\" title=\"Fields修改成如下内容\"></a>Fields修改成如下内容</h6><pre><code>/** \n * @Fields ${field} : ${todo}(用一句话描述这个变量表示什么) \n */\n</code></pre><h6 id=\"Constructors修改成如下内容\"><a href=\"#Constructors修改成如下内容\" class=\"headerlink\" title=\"Constructors修改成如下内容\"></a>Constructors修改成如下内容</h6><pre><code>/** \n * &lt;p&gt;Title: &lt;/p&gt; \n * &lt;p&gt;Description: &lt;/p&gt; \n * ${tags} \n */\n</code></pre><h6 id=\"Methods修改成如下内容\"><a href=\"#Methods修改成如下内容\" class=\"headerlink\" title=\"Methods修改成如下内容\"></a>Methods修改成如下内容</h6><pre><code>/** \n * @Title: ${enclosing_method} \n * @Description: ${todo}(这里用一句话描述这个方法的作用) \n * ${tags}  参数说明 \n * ${return_type}  返回类型 \n * @throws \n */\n</code></pre><h6 id=\"Overriding-methods修改成如下内容\"><a href=\"#Overriding-methods修改成如下内容\" class=\"headerlink\" title=\"Overriding methods修改成如下内容\"></a>Overriding methods修改成如下内容</h6><pre><code>/*\n * Title: ${enclosing_method}\n * Description: \n * ${tags} \n * ${see_to_overridden} \n */\n</code></pre><h6 id=\"Delegate-methods修改成如下内容\"><a href=\"#Delegate-methods修改成如下内容\" class=\"headerlink\" title=\"Delegate methods修改成如下内容\"></a>Delegate methods修改成如下内容</h6><pre><code>/** \n * ${tags} \n * ${see_to_target} \n */\n</code></pre><h6 id=\"Getters修改成如下内容\"><a href=\"#Getters修改成如下内容\" class=\"headerlink\" title=\"Getters修改成如下内容\"></a>Getters修改成如下内容</h6><pre><code>/**\n * @return the ${bare_field_name}\n */\n</code></pre><h6 id=\"Setters修改成如下内容\"><a href=\"#Setters修改成如下内容\" class=\"headerlink\" title=\"Setters修改成如下内容\"></a>Setters修改成如下内容</h6><pre><code>/**\n * @param ${param} the ${bare_field_name} to set\n */\n</code></pre><h5 id=\"Codes中只修改New-Java-files\"><a href=\"#Codes中只修改New-Java-files\" class=\"headerlink\" title=\"Codes中只修改New Java files\"></a>Codes中只修改New Java files</h5><h6 id=\"New-Java-files修改成如下内容\"><a href=\"#New-Java-files修改成如下内容\" class=\"headerlink\" title=\"New Java files修改成如下内容\"></a>New Java files修改成如下内容</h6><pre><code>/**   \n * @Title: ${file_name} \n * @Package ${package_name} \n * @Description: ${todo}(用一句话描述该文件做什么) \n * @author Yangkai.Shen（此处换成你自己的名字，格式参考我的）\n * @date ${date} ${time} \n * @version V1.0   \n */\n</code></pre><h3 id=\"开发时的规范\"><a href=\"#开发时的规范\" class=\"headerlink\" title=\"开发时的规范\"></a>开发时的规范</h3><ol>\n<li>每个方法前添加文档注释（快捷方式：选中需要添加的方法名，再按alt+shift+j）</li>\n<li>SVN提交代码时，必须注明提交代码时所作的修改</li>\n<li>尽可能少的使用全局的静态变量，以免常驻内存</li>\n<li>方法变量名转化成成员变量名称时，变量名称前加m以示区分（可以在eclipse中已经设置，自动化解决）</li>\n</ol>"},{"title":"Lenovo System X3250 M5服务器安装CentOS6.4","comments":1,"fancybox":false,"toc":false,"date":"2016-08-31T02:46:09.000Z","description":null,"top":null,"_content":"<h2 id=\"intro\">前言</h2>\n第一次真正接触服务器，公司要求安装linux系统，花了2天时间，因为该服务器比较复杂，以此文记录下安装过程中出现的问题。\n<!--more-->\n### 问题一：安装系统时无法识别硬盘\n\n**问题描述：**\n\nLenovo System X3250 M5 该服务器最初是存在磁盘阵列的，也就是Raid模式，因此使用 `U盘安装系统` 时，有时会出现无法识别硬盘的状态。\n\n**问题解决：**\n\n手动加载驱动的方法\n\n* centos 6.2进入安装界面时**Tab**键进入高级选项，追加输入 `linux dd`，这样安装时会提示加载disk driver。用管理卡挂载驱动镜像即可。\n\n* centos 5.8进入安装界面直接在boot:后面输入 `linux dd`。\n\nPXE安装自动加载驱动\n\n* ks文件中在开头附近增加driverdisk选项 `driverdisk --source=http://$ip/driverimg.iso`\n\n### 问题二：使用U盘安装系统，安装过程中说找不到ISO文件\n\n**问题描述：**\n\n该问题是使用U盘安装系统时会出现的，使用U盘安装的步骤：\n\n1. 使用UltraISO（软碟通）将linux系统镜像写入U盘 ，并且将ISO文件放入U盘\n2. 设置U盘启动\n3. 安装\n\n**问题解决：**\n\n* 方法一：该问题是因为第一步中，U盘格式为**FAT32**格式，因此镜像大小需小于4G才可以放入U盘，一般系统64位的都会大于4G，选择32位的即可解决。\n* 方法二：\n\t1. 采用外接光驱，使用UltraISO（软碟通）将镜像写入一张白盘\n\t2. 设置光盘启动\n\t3. 安装，亲测，成功！","source":"_posts/2016-08-31.server-install-centos6.md","raw":"---\ntitle: Lenovo System X3250 M5服务器安装CentOS6.4\ncomments: true\nfancybox: false\ntoc: false\ndate: 2016-08-31 10:46:09\ntags:\n- linux\ncategories:\n- linux\ndescription:\npermalink: server-install-centos6\ntop: \n---\n<h2 id=\"intro\">前言</h2>\n第一次真正接触服务器，公司要求安装linux系统，花了2天时间，因为该服务器比较复杂，以此文记录下安装过程中出现的问题。\n<!--more-->\n### 问题一：安装系统时无法识别硬盘\n\n**问题描述：**\n\nLenovo System X3250 M5 该服务器最初是存在磁盘阵列的，也就是Raid模式，因此使用 `U盘安装系统` 时，有时会出现无法识别硬盘的状态。\n\n**问题解决：**\n\n手动加载驱动的方法\n\n* centos 6.2进入安装界面时**Tab**键进入高级选项，追加输入 `linux dd`，这样安装时会提示加载disk driver。用管理卡挂载驱动镜像即可。\n\n* centos 5.8进入安装界面直接在boot:后面输入 `linux dd`。\n\nPXE安装自动加载驱动\n\n* ks文件中在开头附近增加driverdisk选项 `driverdisk --source=http://$ip/driverimg.iso`\n\n### 问题二：使用U盘安装系统，安装过程中说找不到ISO文件\n\n**问题描述：**\n\n该问题是使用U盘安装系统时会出现的，使用U盘安装的步骤：\n\n1. 使用UltraISO（软碟通）将linux系统镜像写入U盘 ，并且将ISO文件放入U盘\n2. 设置U盘启动\n3. 安装\n\n**问题解决：**\n\n* 方法一：该问题是因为第一步中，U盘格式为**FAT32**格式，因此镜像大小需小于4G才可以放入U盘，一般系统64位的都会大于4G，选择32位的即可解决。\n* 方法二：\n\t1. 采用外接光驱，使用UltraISO（软碟通）将镜像写入一张白盘\n\t2. 设置光盘启动\n\t3. 安装，亲测，成功！","slug":"server-install-centos6","published":1,"updated":"2019-01-21T09:22:54.197Z","layout":"post","photos":[],"link":"","_id":"cjr64il5x000jkds6yaf31ppb","content":"<p></p><h2 id=\"intro\">前言</h2><br>第一次真正接触服务器，公司要求安装linux系统，花了2天时间，因为该服务器比较复杂，以此文记录下安装过程中出现的问题。<br><a id=\"more\"></a><p></p>\n<h3 id=\"问题一：安装系统时无法识别硬盘\"><a href=\"#问题一：安装系统时无法识别硬盘\" class=\"headerlink\" title=\"问题一：安装系统时无法识别硬盘\"></a>问题一：安装系统时无法识别硬盘</h3><p><strong>问题描述：</strong></p>\n<p>Lenovo System X3250 M5 该服务器最初是存在磁盘阵列的，也就是Raid模式，因此使用 <code>U盘安装系统</code> 时，有时会出现无法识别硬盘的状态。</p>\n<p><strong>问题解决：</strong></p>\n<p>手动加载驱动的方法</p>\n<ul>\n<li><p>centos 6.2进入安装界面时<strong>Tab</strong>键进入高级选项，追加输入 <code>linux dd</code>，这样安装时会提示加载disk driver。用管理卡挂载驱动镜像即可。</p>\n</li>\n<li><p>centos 5.8进入安装界面直接在boot:后面输入 <code>linux dd</code>。</p>\n</li>\n</ul>\n<p>PXE安装自动加载驱动</p>\n<ul>\n<li>ks文件中在开头附近增加driverdisk选项 <code>driverdisk --source=http://$ip/driverimg.iso</code></li>\n</ul>\n<h3 id=\"问题二：使用U盘安装系统，安装过程中说找不到ISO文件\"><a href=\"#问题二：使用U盘安装系统，安装过程中说找不到ISO文件\" class=\"headerlink\" title=\"问题二：使用U盘安装系统，安装过程中说找不到ISO文件\"></a>问题二：使用U盘安装系统，安装过程中说找不到ISO文件</h3><p><strong>问题描述：</strong></p>\n<p>该问题是使用U盘安装系统时会出现的，使用U盘安装的步骤：</p>\n<ol>\n<li>使用UltraISO（软碟通）将linux系统镜像写入U盘 ，并且将ISO文件放入U盘</li>\n<li>设置U盘启动</li>\n<li>安装</li>\n</ol>\n<p><strong>问题解决：</strong></p>\n<ul>\n<li>方法一：该问题是因为第一步中，U盘格式为<strong>FAT32</strong>格式，因此镜像大小需小于4G才可以放入U盘，一般系统64位的都会大于4G，选择32位的即可解决。</li>\n<li>方法二：<ol>\n<li>采用外接光驱，使用UltraISO（软碟通）将镜像写入一张白盘</li>\n<li>设置光盘启动</li>\n<li>安装，亲测，成功！</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p></p><h2 id=\"intro\">前言</h2><br>第一次真正接触服务器，公司要求安装linux系统，花了2天时间，因为该服务器比较复杂，以此文记录下安装过程中出现的问题。<br>","more":"<p></p>\n<h3 id=\"问题一：安装系统时无法识别硬盘\"><a href=\"#问题一：安装系统时无法识别硬盘\" class=\"headerlink\" title=\"问题一：安装系统时无法识别硬盘\"></a>问题一：安装系统时无法识别硬盘</h3><p><strong>问题描述：</strong></p>\n<p>Lenovo System X3250 M5 该服务器最初是存在磁盘阵列的，也就是Raid模式，因此使用 <code>U盘安装系统</code> 时，有时会出现无法识别硬盘的状态。</p>\n<p><strong>问题解决：</strong></p>\n<p>手动加载驱动的方法</p>\n<ul>\n<li><p>centos 6.2进入安装界面时<strong>Tab</strong>键进入高级选项，追加输入 <code>linux dd</code>，这样安装时会提示加载disk driver。用管理卡挂载驱动镜像即可。</p>\n</li>\n<li><p>centos 5.8进入安装界面直接在boot:后面输入 <code>linux dd</code>。</p>\n</li>\n</ul>\n<p>PXE安装自动加载驱动</p>\n<ul>\n<li>ks文件中在开头附近增加driverdisk选项 <code>driverdisk --source=http://$ip/driverimg.iso</code></li>\n</ul>\n<h3 id=\"问题二：使用U盘安装系统，安装过程中说找不到ISO文件\"><a href=\"#问题二：使用U盘安装系统，安装过程中说找不到ISO文件\" class=\"headerlink\" title=\"问题二：使用U盘安装系统，安装过程中说找不到ISO文件\"></a>问题二：使用U盘安装系统，安装过程中说找不到ISO文件</h3><p><strong>问题描述：</strong></p>\n<p>该问题是使用U盘安装系统时会出现的，使用U盘安装的步骤：</p>\n<ol>\n<li>使用UltraISO（软碟通）将linux系统镜像写入U盘 ，并且将ISO文件放入U盘</li>\n<li>设置U盘启动</li>\n<li>安装</li>\n</ol>\n<p><strong>问题解决：</strong></p>\n<ul>\n<li>方法一：该问题是因为第一步中，U盘格式为<strong>FAT32</strong>格式，因此镜像大小需小于4G才可以放入U盘，一般系统64位的都会大于4G，选择32位的即可解决。</li>\n<li>方法二：<ol>\n<li>采用外接光驱，使用UltraISO（软碟通）将镜像写入一张白盘</li>\n<li>设置光盘启动</li>\n<li>安装，亲测，成功！</li>\n</ol>\n</li>\n</ul>"},{"title":"elasticsearch环境搭建及起步","date":"2016-12-13T09:12:39.000Z","comments":1,"fancybox":false,"description":null,"toc":true,"top":null,"_content":"## ElasticSearch 概述\n> ElasticSearch是一个高可扩展的开源的全文搜索分析引擎。 \n> - 它允许你快速的存储、搜索和分析大量数据。ElasticSearch通常作为后端程序，为需要复杂查询的应用提供服务。\n> - Elasticsearch是一个基于Lucene的开源分布式搜索引擎，具有分布式多用户能力。Elasticsearch是用java开发，提供Restful接口，能够达到实时搜索、高性能计算；同时Elasticsearch的横向扩展能力非常强，不需要重启服务，基本上达到了零配置。\n\n<!--more-->\n## ElasticSearch 安装\n1. 在VMware上安装centos7\n2. 安装vim，输入`yum install -y vim`\n3. 安装git，输入：`yum install -y git`\n4. 安装jdk1.8+\n    - 查看CentOS自带JDK是否已安装，输入：`yum list installed |grep java`。\n    - 若有自带安装的JDK，卸载CentOS系统自带Java环境。\n    - 卸载JDK相关文件，输入：`yum -y remove java-1.8.0-openjdk*`。\n    - 卸载tzdata-java，输入：`yum -y remove tzdata-java.noarch`。当结果显示为Complete！即卸载完毕。\n\n        > 注：“*”表示卸载掉java1.8.0的所有openjdk相关文件。\n\n    - 新建目录`mkdir /usr/java/`\n    - 将下载的jdk的rpm包上传至`/usr/java`文件夹中，修改权限，输入`chmod +x jdk-8u111-linux-x64.rpm`\n    - 输入`rpm -ivh jdk-8u101-linux-x64.rpm`安装\n    - 输入`PATH=\"${PATH}:/usr/java/jdk1.8.0_111\"`，修改环境变量\n    - 查看刚安装的Java版本信息，输入：`java -version` 可查看Java版本。\n5. 打开xshell通过xftp将elasticsearch-2.1.1.tar.gz传到虚拟机`/opt`中，cd到opt目录，输入`tar zxvf elasticsearch-2.1.1.tar.gz`，解压至当前目录。\n    > 注：不可以使用root用户启动elasticsearch，这是出于系统安全考虑设置的条件。由于ElasticSearch可以接收用户输入的脚本并且执行，为了系统安全考虑，建议创建一个单独的用户用来运行xkcoding\n    > \n    > 如果是用root账号启动，会报以下错误\n    > \n     ```java\n     Exception in thread \"main\" java.lang.RuntimeException: don't run elasticsearch as root. at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:93) at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:144) at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:285) at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35) Refer to the log for complete error details.\n     ```\n6. 创建xkcoding用户组及xkcoding用户\n    ```bash\n    groupadd xkcoding\n    useradd xkcoding -g xkcoding -p elasticsearch-2.1.1\n    ```\n7. 更改elasticsearch-2.1.1文件夹及内部文件的所属用户及组为xkcoding:xkcoding\n    ```bash\n    cd /opt\n    chown -R xkcoding:xkcoding elasticsearch-2.1.1\n    ```\n8. 切换到elsearch用户再启动\n    ```bash\n    su xkcoding\n    cd elasticsearch-2.1.1\n    ./bin/elasticsearch -d #以守护进程的方式运行\n    ```\n9. 打开一个新的终端进行测试\n    ```bash\n    curl 'http://localhost:9200/?pretty'\n    ```\n10. 查看返回数据\n    ```json\n    {\n      \"name\" : \"node-1\",\n      \"cluster_name\" : \"togeek\",\n      \"version\" : {\n        \"number\" : \"2.1.1\",\n        \"build_hash\" : \"40e2c53a6b6c2972b3d13846e450e66f4375bd71\",\n        \"build_timestamp\" : \"2015-12-15T13:05:55Z\",\n        \"build_snapshot\" : false,\n        \"lucene_version\" : \"5.3.1\"\n      },\n      \"tagline\" : \"You Know, for Search\"\n    }\n    ```\n11. 需要从windows本机访问centos7虚拟机，因此需要关闭防火墙\n    > CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下\n    \n    - 直接关闭防火墙\n        ```bash\n        systemctl stop firewalld.service #停止firewall\n        systemctl disable firewalld.service #禁止firewall开机启动\n        ```\n    - 设置 `iptables service`\n        ```bash\n        yum -y install iptables-services\n        ```\n    - 如果要修改防火墙配置，如增加防火墙端口9200\n        ```bash\n        vi /etc/sysconfig/iptables \n        ```\n    - 增加规则\n        ```bash\n        -A INPUT -m state --state NEW -m tcp -p tcp --dport 9200 -j ACCEPT\n        ```\n    - 保存退出后\n        ```bash\n        systemctl restart iptables.service #重启防火墙使配置生效\n        systemctl enable iptables.service #设置防火墙开机启动\n        ```\n    - 最后重启系统使设置生效即可。\n12. 在windows的cmd中测试，返回json，测试通过！","source":"_posts/2016-12-13.elasticsearch-get-start.md","raw":"---\ntitle: elasticsearch环境搭建及起步\ndate: 2016-12-13 17:12:39\ntags:\n- elasticsearch\ncategories:\n- 技术相关\n- elasticsearch\ncomments: true\nfancybox: false\ndescription: \ntoc: true\npermalink: elasticsearch-get-start\ntop: \n---\n## ElasticSearch 概述\n> ElasticSearch是一个高可扩展的开源的全文搜索分析引擎。 \n> - 它允许你快速的存储、搜索和分析大量数据。ElasticSearch通常作为后端程序，为需要复杂查询的应用提供服务。\n> - Elasticsearch是一个基于Lucene的开源分布式搜索引擎，具有分布式多用户能力。Elasticsearch是用java开发，提供Restful接口，能够达到实时搜索、高性能计算；同时Elasticsearch的横向扩展能力非常强，不需要重启服务，基本上达到了零配置。\n\n<!--more-->\n## ElasticSearch 安装\n1. 在VMware上安装centos7\n2. 安装vim，输入`yum install -y vim`\n3. 安装git，输入：`yum install -y git`\n4. 安装jdk1.8+\n    - 查看CentOS自带JDK是否已安装，输入：`yum list installed |grep java`。\n    - 若有自带安装的JDK，卸载CentOS系统自带Java环境。\n    - 卸载JDK相关文件，输入：`yum -y remove java-1.8.0-openjdk*`。\n    - 卸载tzdata-java，输入：`yum -y remove tzdata-java.noarch`。当结果显示为Complete！即卸载完毕。\n\n        > 注：“*”表示卸载掉java1.8.0的所有openjdk相关文件。\n\n    - 新建目录`mkdir /usr/java/`\n    - 将下载的jdk的rpm包上传至`/usr/java`文件夹中，修改权限，输入`chmod +x jdk-8u111-linux-x64.rpm`\n    - 输入`rpm -ivh jdk-8u101-linux-x64.rpm`安装\n    - 输入`PATH=\"${PATH}:/usr/java/jdk1.8.0_111\"`，修改环境变量\n    - 查看刚安装的Java版本信息，输入：`java -version` 可查看Java版本。\n5. 打开xshell通过xftp将elasticsearch-2.1.1.tar.gz传到虚拟机`/opt`中，cd到opt目录，输入`tar zxvf elasticsearch-2.1.1.tar.gz`，解压至当前目录。\n    > 注：不可以使用root用户启动elasticsearch，这是出于系统安全考虑设置的条件。由于ElasticSearch可以接收用户输入的脚本并且执行，为了系统安全考虑，建议创建一个单独的用户用来运行xkcoding\n    > \n    > 如果是用root账号启动，会报以下错误\n    > \n     ```java\n     Exception in thread \"main\" java.lang.RuntimeException: don't run elasticsearch as root. at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:93) at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:144) at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:285) at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35) Refer to the log for complete error details.\n     ```\n6. 创建xkcoding用户组及xkcoding用户\n    ```bash\n    groupadd xkcoding\n    useradd xkcoding -g xkcoding -p elasticsearch-2.1.1\n    ```\n7. 更改elasticsearch-2.1.1文件夹及内部文件的所属用户及组为xkcoding:xkcoding\n    ```bash\n    cd /opt\n    chown -R xkcoding:xkcoding elasticsearch-2.1.1\n    ```\n8. 切换到elsearch用户再启动\n    ```bash\n    su xkcoding\n    cd elasticsearch-2.1.1\n    ./bin/elasticsearch -d #以守护进程的方式运行\n    ```\n9. 打开一个新的终端进行测试\n    ```bash\n    curl 'http://localhost:9200/?pretty'\n    ```\n10. 查看返回数据\n    ```json\n    {\n      \"name\" : \"node-1\",\n      \"cluster_name\" : \"togeek\",\n      \"version\" : {\n        \"number\" : \"2.1.1\",\n        \"build_hash\" : \"40e2c53a6b6c2972b3d13846e450e66f4375bd71\",\n        \"build_timestamp\" : \"2015-12-15T13:05:55Z\",\n        \"build_snapshot\" : false,\n        \"lucene_version\" : \"5.3.1\"\n      },\n      \"tagline\" : \"You Know, for Search\"\n    }\n    ```\n11. 需要从windows本机访问centos7虚拟机，因此需要关闭防火墙\n    > CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下\n    \n    - 直接关闭防火墙\n        ```bash\n        systemctl stop firewalld.service #停止firewall\n        systemctl disable firewalld.service #禁止firewall开机启动\n        ```\n    - 设置 `iptables service`\n        ```bash\n        yum -y install iptables-services\n        ```\n    - 如果要修改防火墙配置，如增加防火墙端口9200\n        ```bash\n        vi /etc/sysconfig/iptables \n        ```\n    - 增加规则\n        ```bash\n        -A INPUT -m state --state NEW -m tcp -p tcp --dport 9200 -j ACCEPT\n        ```\n    - 保存退出后\n        ```bash\n        systemctl restart iptables.service #重启防火墙使配置生效\n        systemctl enable iptables.service #设置防火墙开机启动\n        ```\n    - 最后重启系统使设置生效即可。\n12. 在windows的cmd中测试，返回json，测试通过！","slug":"elasticsearch-get-start","published":1,"updated":"2019-01-21T09:22:43.997Z","layout":"post","photos":[],"link":"","_id":"cjr64il5z000lkds6wwn2ufxg","content":"<h2 id=\"ElasticSearch-概述\"><a href=\"#ElasticSearch-概述\" class=\"headerlink\" title=\"ElasticSearch 概述\"></a>ElasticSearch 概述</h2><blockquote>\n<p>ElasticSearch是一个高可扩展的开源的全文搜索分析引擎。 </p>\n<ul>\n<li>它允许你快速的存储、搜索和分析大量数据。ElasticSearch通常作为后端程序，为需要复杂查询的应用提供服务。</li>\n<li>Elasticsearch是一个基于Lucene的开源分布式搜索引擎，具有分布式多用户能力。Elasticsearch是用java开发，提供Restful接口，能够达到实时搜索、高性能计算；同时Elasticsearch的横向扩展能力非常强，不需要重启服务，基本上达到了零配置。</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"ElasticSearch-安装\"><a href=\"#ElasticSearch-安装\" class=\"headerlink\" title=\"ElasticSearch 安装\"></a>ElasticSearch 安装</h2><ol>\n<li>在VMware上安装centos7</li>\n<li>安装vim，输入<code>yum install -y vim</code></li>\n<li>安装git，输入：<code>yum install -y git</code></li>\n<li><p>安装jdk1.8+</p>\n<ul>\n<li>查看CentOS自带JDK是否已安装，输入：<code>yum list installed |grep java</code>。</li>\n<li>若有自带安装的JDK，卸载CentOS系统自带Java环境。</li>\n<li>卸载JDK相关文件，输入：<code>yum -y remove java-1.8.0-openjdk*</code>。</li>\n<li><p>卸载tzdata-java，输入：<code>yum -y remove tzdata-java.noarch</code>。当结果显示为Complete！即卸载完毕。</p>\n<blockquote>\n<p>注：“*”表示卸载掉java1.8.0的所有openjdk相关文件。</p>\n</blockquote>\n</li>\n<li><p>新建目录<code>mkdir /usr/java/</code></p>\n</li>\n<li>将下载的jdk的rpm包上传至<code>/usr/java</code>文件夹中，修改权限，输入<code>chmod +x jdk-8u111-linux-x64.rpm</code></li>\n<li>输入<code>rpm -ivh jdk-8u101-linux-x64.rpm</code>安装</li>\n<li>输入<code>PATH=&quot;${PATH}:/usr/java/jdk1.8.0_111&quot;</code>，修改环境变量</li>\n<li>查看刚安装的Java版本信息，输入：<code>java -version</code> 可查看Java版本。</li>\n</ul>\n</li>\n<li><p>打开xshell通过xftp将elasticsearch-2.1.1.tar.gz传到虚拟机<code>/opt</code>中，cd到opt目录，输入<code>tar zxvf elasticsearch-2.1.1.tar.gz</code>，解压至当前目录。</p>\n<blockquote>\n<p>注：不可以使用root用户启动elasticsearch，这是出于系统安全考虑设置的条件。由于ElasticSearch可以接收用户输入的脚本并且执行，为了系统安全考虑，建议创建一个单独的用户用来运行xkcoding</p>\n<p>如果是用root账号启动，会报以下错误</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.RuntimeException: don<span class=\"string\">'t run elasticsearch as root. at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:93) at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:144) at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:285) at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35) Refer to the log for complete error details.</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>创建xkcoding用户组及xkcoding用户</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd xkcoding</div><div class=\"line\">useradd xkcoding -g xkcoding -p elasticsearch-2.1.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>更改elasticsearch-2.1.1文件夹及内部文件的所属用户及组为xkcoding:xkcoding</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /opt</div><div class=\"line\">chown -R xkcoding:xkcoding elasticsearch-2.1.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>切换到elsearch用户再启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">su xkcoding</div><div class=\"line\"><span class=\"built_in\">cd</span> elasticsearch-2.1.1</div><div class=\"line\">./bin/elasticsearch -d <span class=\"comment\">#以守护进程的方式运行</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>打开一个新的终端进行测试</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">'http://localhost:9200/?pretty'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查看返回数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"node-1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"cluster_name\"</span> : <span class=\"string\">\"togeek\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span> : &#123;</div><div class=\"line\">    <span class=\"attr\">\"number\"</span> : <span class=\"string\">\"2.1.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"build_hash\"</span> : <span class=\"string\">\"40e2c53a6b6c2972b3d13846e450e66f4375bd71\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"build_timestamp\"</span> : <span class=\"string\">\"2015-12-15T13:05:55Z\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"build_snapshot\"</span> : <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">\"lucene_version\"</span> : <span class=\"string\">\"5.3.1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"tagline\"</span> : <span class=\"string\">\"You Know, for Search\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>需要从windows本机访问centos7虚拟机，因此需要关闭防火墙</p>\n<blockquote>\n<p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>\n</blockquote>\n<ul>\n<li><p>直接关闭防火墙</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl stop firewalld.service <span class=\"comment\">#停止firewall</span></div><div class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service <span class=\"comment\">#禁止firewall开机启动</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>设置 <code>iptables service</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install iptables-services</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果要修改防火墙配置，如增加防火墙端口9200</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/sysconfig/iptables</div></pre></td></tr></table></figure>\n</li>\n<li><p>增加规则</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 9200 -j ACCEPT</div></pre></td></tr></table></figure>\n</li>\n<li><p>保存退出后</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart iptables.service <span class=\"comment\">#重启防火墙使配置生效</span></div><div class=\"line\">systemctl <span class=\"built_in\">enable</span> iptables.service <span class=\"comment\">#设置防火墙开机启动</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>最后重启系统使设置生效即可。</p>\n</li>\n</ul>\n</li>\n<li>在windows的cmd中测试，返回json，测试通过！</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"ElasticSearch-概述\"><a href=\"#ElasticSearch-概述\" class=\"headerlink\" title=\"ElasticSearch 概述\"></a>ElasticSearch 概述</h2><blockquote>\n<p>ElasticSearch是一个高可扩展的开源的全文搜索分析引擎。 </p>\n<ul>\n<li>它允许你快速的存储、搜索和分析大量数据。ElasticSearch通常作为后端程序，为需要复杂查询的应用提供服务。</li>\n<li>Elasticsearch是一个基于Lucene的开源分布式搜索引擎，具有分布式多用户能力。Elasticsearch是用java开发，提供Restful接口，能够达到实时搜索、高性能计算；同时Elasticsearch的横向扩展能力非常强，不需要重启服务，基本上达到了零配置。</li>\n</ul>\n</blockquote>","more":"<h2 id=\"ElasticSearch-安装\"><a href=\"#ElasticSearch-安装\" class=\"headerlink\" title=\"ElasticSearch 安装\"></a>ElasticSearch 安装</h2><ol>\n<li>在VMware上安装centos7</li>\n<li>安装vim，输入<code>yum install -y vim</code></li>\n<li>安装git，输入：<code>yum install -y git</code></li>\n<li><p>安装jdk1.8+</p>\n<ul>\n<li>查看CentOS自带JDK是否已安装，输入：<code>yum list installed |grep java</code>。</li>\n<li>若有自带安装的JDK，卸载CentOS系统自带Java环境。</li>\n<li>卸载JDK相关文件，输入：<code>yum -y remove java-1.8.0-openjdk*</code>。</li>\n<li><p>卸载tzdata-java，输入：<code>yum -y remove tzdata-java.noarch</code>。当结果显示为Complete！即卸载完毕。</p>\n<blockquote>\n<p>注：“*”表示卸载掉java1.8.0的所有openjdk相关文件。</p>\n</blockquote>\n</li>\n<li><p>新建目录<code>mkdir /usr/java/</code></p>\n</li>\n<li>将下载的jdk的rpm包上传至<code>/usr/java</code>文件夹中，修改权限，输入<code>chmod +x jdk-8u111-linux-x64.rpm</code></li>\n<li>输入<code>rpm -ivh jdk-8u101-linux-x64.rpm</code>安装</li>\n<li>输入<code>PATH=&quot;${PATH}:/usr/java/jdk1.8.0_111&quot;</code>，修改环境变量</li>\n<li>查看刚安装的Java版本信息，输入：<code>java -version</code> 可查看Java版本。</li>\n</ul>\n</li>\n<li><p>打开xshell通过xftp将elasticsearch-2.1.1.tar.gz传到虚拟机<code>/opt</code>中，cd到opt目录，输入<code>tar zxvf elasticsearch-2.1.1.tar.gz</code>，解压至当前目录。</p>\n<blockquote>\n<p>注：不可以使用root用户启动elasticsearch，这是出于系统安全考虑设置的条件。由于ElasticSearch可以接收用户输入的脚本并且执行，为了系统安全考虑，建议创建一个单独的用户用来运行xkcoding</p>\n<p>如果是用root账号启动，会报以下错误</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.lang.RuntimeException: don<span class=\"string\">'t run elasticsearch as root. at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:93) at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:144) at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:285) at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35) Refer to the log for complete error details.</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>创建xkcoding用户组及xkcoding用户</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd xkcoding</div><div class=\"line\">useradd xkcoding -g xkcoding -p elasticsearch-2.1.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>更改elasticsearch-2.1.1文件夹及内部文件的所属用户及组为xkcoding:xkcoding</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /opt</div><div class=\"line\">chown -R xkcoding:xkcoding elasticsearch-2.1.1</div></pre></td></tr></table></figure>\n</li>\n<li><p>切换到elsearch用户再启动</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">su xkcoding</div><div class=\"line\"><span class=\"built_in\">cd</span> elasticsearch-2.1.1</div><div class=\"line\">./bin/elasticsearch -d <span class=\"comment\">#以守护进程的方式运行</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>打开一个新的终端进行测试</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">'http://localhost:9200/?pretty'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查看返回数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span> : <span class=\"string\">\"node-1\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"cluster_name\"</span> : <span class=\"string\">\"togeek\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span> : &#123;</div><div class=\"line\">    <span class=\"attr\">\"number\"</span> : <span class=\"string\">\"2.1.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"build_hash\"</span> : <span class=\"string\">\"40e2c53a6b6c2972b3d13846e450e66f4375bd71\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"build_timestamp\"</span> : <span class=\"string\">\"2015-12-15T13:05:55Z\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"build_snapshot\"</span> : <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">\"lucene_version\"</span> : <span class=\"string\">\"5.3.1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"tagline\"</span> : <span class=\"string\">\"You Know, for Search\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>需要从windows本机访问centos7虚拟机，因此需要关闭防火墙</p>\n<blockquote>\n<p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>\n</blockquote>\n<ul>\n<li><p>直接关闭防火墙</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl stop firewalld.service <span class=\"comment\">#停止firewall</span></div><div class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld.service <span class=\"comment\">#禁止firewall开机启动</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>设置 <code>iptables service</code></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install iptables-services</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果要修改防火墙配置，如增加防火墙端口9200</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/sysconfig/iptables</div></pre></td></tr></table></figure>\n</li>\n<li><p>增加规则</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 9200 -j ACCEPT</div></pre></td></tr></table></figure>\n</li>\n<li><p>保存退出后</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart iptables.service <span class=\"comment\">#重启防火墙使配置生效</span></div><div class=\"line\">systemctl <span class=\"built_in\">enable</span> iptables.service <span class=\"comment\">#设置防火墙开机启动</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>最后重启系统使设置生效即可。</p>\n</li>\n</ul>\n</li>\n<li>在windows的cmd中测试，返回json，测试通过！</li>\n</ol>"},{"title":"Oracle 11gR2 RAC的JDBC连接串","comments":1,"fancybox":false,"toc":false,"date":"2017-01-06T05:51:10.000Z","description":null,"top":null,"_content":"<!--<h2 id=\"intro\">前言</h2>-->\n今天tomcat启动时，连接oracle直接报错，出现ORA-12505的问题，最开始，我以为错误的原因是jdbc连接Oracle的连接串中的sid配置的不对，oracle不能解析连接串中的sid名字，所以拒绝了连接。在连接字串中写入正确的sid即可。\n<!--more-->\n于是，查看数据库中当前的sid:\n```sql\nselect INSTANCE_NAME from v$instance;\n```\n发现sid果然不同，然后将url的sid换成查出来的sid，果然连接上了。\n但是我仔细一想，我用原来的sid通过navicat是可以连上oracle的，为什么jdbc会连接不上呢？\n查资料得知，对于Oracle的JDBC连接，是支持EZ-Connect写法的，即`jdbc:oracle:thin:@Server:1521/Database`\n但对于Oracle 11gR2 RAC系统，如果Server用了ScanName，Database用了数据库的ServiceName，并不能连接到数据库，而是报SID错误。\n原因可能是此种写法，JDBC将Database解析为了数据库的SID。\n经多方测试，可用如下写法实现11GR2的数据库连接的负载均衡，特此记录下：\n`jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = scan-name)(PORT = 1521))(CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = DatabaseServiceName)))`","source":"_posts/2017-01-06.connect-oracle11g-rac-url.md","raw":"---\ntitle: Oracle 11gR2 RAC的JDBC连接串 \ncomments: true\nfancybox: false\ntoc: false\ndate: 2017-01-06 13:51:10\ntags:\n- oracle\n- java\ncategories:\n- 技术相关\n- oracle\ndescription:\npermalink: connect-oracle11g-rac-url\ntop:\n---\n<!--<h2 id=\"intro\">前言</h2>-->\n今天tomcat启动时，连接oracle直接报错，出现ORA-12505的问题，最开始，我以为错误的原因是jdbc连接Oracle的连接串中的sid配置的不对，oracle不能解析连接串中的sid名字，所以拒绝了连接。在连接字串中写入正确的sid即可。\n<!--more-->\n于是，查看数据库中当前的sid:\n```sql\nselect INSTANCE_NAME from v$instance;\n```\n发现sid果然不同，然后将url的sid换成查出来的sid，果然连接上了。\n但是我仔细一想，我用原来的sid通过navicat是可以连上oracle的，为什么jdbc会连接不上呢？\n查资料得知，对于Oracle的JDBC连接，是支持EZ-Connect写法的，即`jdbc:oracle:thin:@Server:1521/Database`\n但对于Oracle 11gR2 RAC系统，如果Server用了ScanName，Database用了数据库的ServiceName，并不能连接到数据库，而是报SID错误。\n原因可能是此种写法，JDBC将Database解析为了数据库的SID。\n经多方测试，可用如下写法实现11GR2的数据库连接的负载均衡，特此记录下：\n`jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = scan-name)(PORT = 1521))(CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = DatabaseServiceName)))`","slug":"connect-oracle11g-rac-url","published":1,"updated":"2019-01-21T09:22:30.325Z","layout":"post","photos":[],"link":"","_id":"cjr64il61000qkds6bm3w0yr3","content":"<!--<h2 id=\"intro\">前言</h2>-->\n<p>今天tomcat启动时，连接oracle直接报错，出现ORA-12505的问题，最开始，我以为错误的原因是jdbc连接Oracle的连接串中的sid配置的不对，oracle不能解析连接串中的sid名字，所以拒绝了连接。在连接字串中写入正确的sid即可。<br><a id=\"more\"></a><br>于是，查看数据库中当前的sid:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> INSTANCE_NAME <span class=\"keyword\">from</span> v$<span class=\"keyword\">instance</span>;</div></pre></td></tr></table></figure></p>\n<p>发现sid果然不同，然后将url的sid换成查出来的sid，果然连接上了。<br>但是我仔细一想，我用原来的sid通过navicat是可以连上oracle的，为什么jdbc会连接不上呢？<br>查资料得知，对于Oracle的JDBC连接，是支持EZ-Connect写法的，即<code>jdbc:oracle:thin:@Server:1521/Database</code><br>但对于Oracle 11gR2 RAC系统，如果Server用了ScanName，Database用了数据库的ServiceName，并不能连接到数据库，而是报SID错误。<br>原因可能是此种写法，JDBC将Database解析为了数据库的SID。<br>经多方测试，可用如下写法实现11GR2的数据库连接的负载均衡，特此记录下：<br><code>jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = scan-name)(PORT = 1521))(CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = DatabaseServiceName)))</code></p>\n","site":{"data":{}},"excerpt":"<!--<h2 id=\"intro\">前言</h2>-->\n<p>今天tomcat启动时，连接oracle直接报错，出现ORA-12505的问题，最开始，我以为错误的原因是jdbc连接Oracle的连接串中的sid配置的不对，oracle不能解析连接串中的sid名字，所以拒绝了连接。在连接字串中写入正确的sid即可。<br>","more":"<br>于是，查看数据库中当前的sid:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> INSTANCE_NAME <span class=\"keyword\">from</span> v$<span class=\"keyword\">instance</span>;</div></pre></td></tr></table></figure></p>\n<p>发现sid果然不同，然后将url的sid换成查出来的sid，果然连接上了。<br>但是我仔细一想，我用原来的sid通过navicat是可以连上oracle的，为什么jdbc会连接不上呢？<br>查资料得知，对于Oracle的JDBC连接，是支持EZ-Connect写法的，即<code>jdbc:oracle:thin:@Server:1521/Database</code><br>但对于Oracle 11gR2 RAC系统，如果Server用了ScanName，Database用了数据库的ServiceName，并不能连接到数据库，而是报SID错误。<br>原因可能是此种写法，JDBC将Database解析为了数据库的SID。<br>经多方测试，可用如下写法实现11GR2的数据库连接的负载均衡，特此记录下：<br><code>jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS = (PROTOCOL = TCP)(HOST = scan-name)(PORT = 1521))(CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = DatabaseServiceName)))</code></p>"},{"title":"Windows10 系统下载与激活","comments":1,"fancybox":true,"toc":false,"date":"2017-07-18T01:57:35.000Z","description":null,"top":null,"_content":"\nwindows 是目前我们用的最多一个系统，win10 现在也优化的越来越好，今天大姐的电脑有点问题，担心太蠢，不会下载和激活系统，所以整理并记录一下如何下载并激活 win10 系统，以供查阅。\n<!--more-->\n\n1. [微软各类软件下载地址](http://msdn.itellyou.cn/)（国人自己搞得，非微软官方）\n\n2. 选择 win10 更新版本\n![选择 win10 更新版本](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003417580098.jpg)\n\n3. 选择 win10 的具体版本\n![选择 win10 的具体版本](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003421081219.jpg)\n\n4. 复制版本下载地址，使用迅雷下载\n![复制版本下载地址，使用迅雷下载](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003421847355.jpg)\n我已经把64位多版本的链接单独抠出来了，需要的直接拿去用~\n    ```log\n    ed2k://|file|cn_windows_10_multiple_editions_version_1703_updated_june_2017_x64_dvd_10724850.iso|5741144064|7717C389428734009E0350A1BB8F2508|/\n    ```\n\n5. 附赠一个[激活工具下载地址](http://pan.baidu.com/s/1gfEHU1t) 提取码：`1pdp` \n\n   这个激活工具很强大，可以激活 `windows 系统` 和 `office 软件`，并且提供 `office 2016`和 `office 2013`两个版本的自动安装功能。\n\n6. 激活工具的使用，下载激活工具，解压压缩包，得到一个名为 `KMSTools.exe` 的文件，然后右键，`以管理员身份运行`。（运行之前，注意`关闭所有杀毒软件`！）\n![运行 KMSTools.exe ](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003439698423.jpg)\n\n7. 打开之后，选择第二个 `KMSAuto Lite`\n![选择 KMSAuto Lite ](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003441158580.jpg)\n\n8. 弹出另一个界面，点击 `Activate Windows` 选择，然后当下面的蓝框框输出 `ACTIVATION SUCCESSFUL` 的时候，就代表激活成功了。如果卡住了，可以多试几次。\n![点击激活按钮，等待激活成功](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003443441517.jpg)\n\n9. have fun!","source":"_posts/2017-07-18.win10-download.md","raw":"---\ntitle: Windows10 系统下载与激活\ncomments: true\nfancybox: true\ntoc: false\ndate: 2017-07-18 09:57:35\ntags: \n- win10\n- 系统\ncategories: \n- 系统\ndescription:\npermalink: win10-download\ntop:\n---\n\nwindows 是目前我们用的最多一个系统，win10 现在也优化的越来越好，今天大姐的电脑有点问题，担心太蠢，不会下载和激活系统，所以整理并记录一下如何下载并激活 win10 系统，以供查阅。\n<!--more-->\n\n1. [微软各类软件下载地址](http://msdn.itellyou.cn/)（国人自己搞得，非微软官方）\n\n2. 选择 win10 更新版本\n![选择 win10 更新版本](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003417580098.jpg)\n\n3. 选择 win10 的具体版本\n![选择 win10 的具体版本](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003421081219.jpg)\n\n4. 复制版本下载地址，使用迅雷下载\n![复制版本下载地址，使用迅雷下载](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003421847355.jpg)\n我已经把64位多版本的链接单独抠出来了，需要的直接拿去用~\n    ```log\n    ed2k://|file|cn_windows_10_multiple_editions_version_1703_updated_june_2017_x64_dvd_10724850.iso|5741144064|7717C389428734009E0350A1BB8F2508|/\n    ```\n\n5. 附赠一个[激活工具下载地址](http://pan.baidu.com/s/1gfEHU1t) 提取码：`1pdp` \n\n   这个激活工具很强大，可以激活 `windows 系统` 和 `office 软件`，并且提供 `office 2016`和 `office 2013`两个版本的自动安装功能。\n\n6. 激活工具的使用，下载激活工具，解压压缩包，得到一个名为 `KMSTools.exe` 的文件，然后右键，`以管理员身份运行`。（运行之前，注意`关闭所有杀毒软件`！）\n![运行 KMSTools.exe ](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003439698423.jpg)\n\n7. 打开之后，选择第二个 `KMSAuto Lite`\n![选择 KMSAuto Lite ](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003441158580.jpg)\n\n8. 弹出另一个界面，点击 `Activate Windows` 选择，然后当下面的蓝框框输出 `ACTIVATION SUCCESSFUL` 的时候，就代表激活成功了。如果卡住了，可以多试几次。\n![点击激活按钮，等待激活成功](http://oriqjordg.bkt.clouddn.com/2017-07-18-15003443441517.jpg)\n\n9. have fun!","slug":"win10-download","published":1,"updated":"2017-07-27T01:11:30.000Z","layout":"post","photos":[],"link":"","_id":"cjr64il63000tkds69a7kpsnd","content":"<p>windows 是目前我们用的最多一个系统，win10 现在也优化的越来越好，今天大姐的电脑有点问题，担心太蠢，不会下载和激活系统，所以整理并记录一下如何下载并激活 win10 系统，以供查阅。<br><a id=\"more\"></a></p>\n<ol>\n<li><p><a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"external\">微软各类软件下载地址</a>（国人自己搞得，非微软官方）</p>\n</li>\n<li><p>选择 win10 更新版本<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003417580098.jpg\" alt=\"选择 win10 更新版本\"></p>\n</li>\n<li><p>选择 win10 的具体版本<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003421081219.jpg\" alt=\"选择 win10 的具体版本\"></p>\n</li>\n<li><p>复制版本下载地址，使用迅雷下载<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003421847355.jpg\" alt=\"复制版本下载地址，使用迅雷下载\"><br>我已经把64位多版本的链接单独抠出来了，需要的直接拿去用~</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ed2k://|file|cn_windows_10_multiple_editions_version_1703_updated_june_2017_x64_dvd_10724850.iso|5741144064|7717C389428734009E0350A1BB8F2508|/</div></pre></td></tr></table></figure>\n</li>\n<li><p>附赠一个<a href=\"http://pan.baidu.com/s/1gfEHU1t\" target=\"_blank\" rel=\"external\">激活工具下载地址</a> 提取码：<code>1pdp</code> </p>\n<p>这个激活工具很强大，可以激活 <code>windows 系统</code> 和 <code>office 软件</code>，并且提供 <code>office 2016</code>和 <code>office 2013</code>两个版本的自动安装功能。</p>\n</li>\n<li><p>激活工具的使用，下载激活工具，解压压缩包，得到一个名为 <code>KMSTools.exe</code> 的文件，然后右键，<code>以管理员身份运行</code>。（运行之前，注意<code>关闭所有杀毒软件</code>！）<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003439698423.jpg\" alt=\"运行 KMSTools.exe \"></p>\n</li>\n<li><p>打开之后，选择第二个 <code>KMSAuto Lite</code><br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003441158580.jpg\" alt=\"选择 KMSAuto Lite \"></p>\n</li>\n<li><p>弹出另一个界面，点击 <code>Activate Windows</code> 选择，然后当下面的蓝框框输出 <code>ACTIVATION SUCCESSFUL</code> 的时候，就代表激活成功了。如果卡住了，可以多试几次。<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003443441517.jpg\" alt=\"点击激活按钮，等待激活成功\"></p>\n</li>\n<li><p>have fun!</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>windows 是目前我们用的最多一个系统，win10 现在也优化的越来越好，今天大姐的电脑有点问题，担心太蠢，不会下载和激活系统，所以整理并记录一下如何下载并激活 win10 系统，以供查阅。<br>","more":"</p>\n<ol>\n<li><p><a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"external\">微软各类软件下载地址</a>（国人自己搞得，非微软官方）</p>\n</li>\n<li><p>选择 win10 更新版本<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003417580098.jpg\" alt=\"选择 win10 更新版本\"></p>\n</li>\n<li><p>选择 win10 的具体版本<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003421081219.jpg\" alt=\"选择 win10 的具体版本\"></p>\n</li>\n<li><p>复制版本下载地址，使用迅雷下载<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003421847355.jpg\" alt=\"复制版本下载地址，使用迅雷下载\"><br>我已经把64位多版本的链接单独抠出来了，需要的直接拿去用~</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ed2k://|file|cn_windows_10_multiple_editions_version_1703_updated_june_2017_x64_dvd_10724850.iso|5741144064|7717C389428734009E0350A1BB8F2508|/</div></pre></td></tr></table></figure>\n</li>\n<li><p>附赠一个<a href=\"http://pan.baidu.com/s/1gfEHU1t\" target=\"_blank\" rel=\"external\">激活工具下载地址</a> 提取码：<code>1pdp</code> </p>\n<p>这个激活工具很强大，可以激活 <code>windows 系统</code> 和 <code>office 软件</code>，并且提供 <code>office 2016</code>和 <code>office 2013</code>两个版本的自动安装功能。</p>\n</li>\n<li><p>激活工具的使用，下载激活工具，解压压缩包，得到一个名为 <code>KMSTools.exe</code> 的文件，然后右键，<code>以管理员身份运行</code>。（运行之前，注意<code>关闭所有杀毒软件</code>！）<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003439698423.jpg\" alt=\"运行 KMSTools.exe \"></p>\n</li>\n<li><p>打开之后，选择第二个 <code>KMSAuto Lite</code><br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003441158580.jpg\" alt=\"选择 KMSAuto Lite \"></p>\n</li>\n<li><p>弹出另一个界面，点击 <code>Activate Windows</code> 选择，然后当下面的蓝框框输出 <code>ACTIVATION SUCCESSFUL</code> 的时候，就代表激活成功了。如果卡住了，可以多试几次。<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-18-15003443441517.jpg\" alt=\"点击激活按钮，等待激活成功\"></p>\n</li>\n<li><p>have fun!</p>\n</li>\n</ol>"},{"title":"HashMap 的 JDK 源码探索","comments":1,"fancybox":true,"toc":false,"date":"2017-07-12T03:26:43.000Z","description":null,"top":null,"_content":"\n> 缘由：今天好友拿着下面的代码，问我为什么Map.Entry 这个接口没有实现 getKey() 和 getValue() 方法，却可以使用，由此，开启了一番查阅 JDK 源码的旅途....\n\n<!--more-->\n\n```java\nMap map = new HashMap();\n   \nmap.put(1, \"张三\");\nmap.put(2, \"李四\");\nmap.put(3, \"王五\");\nmap.put(4, \"赵六\");\nmap.put(5, \"钱七\");\n   \nSet set = map.entrySet();\nfor (Object object : set) {\n   Map.Entry entry = (Map.Entry) object;\n   System.out.println(entry.getKey() + \"-->\" + entry.getValue());\n}\n```\n\n1. 首先，我们看 `map` 对象，这个 `map` 对象是 `HashMap` 的一个实例，然后下面的 `Set set = map.entrySet();` 可以知道这其实用的 `HashMap` 实现的 `entrySet()` 方法，然后我们可以查看 `HashMap` 里 `entrySet()` 的源码\n\n    ![](http://oriqjordg.bkt.clouddn.com/2017-07-12-14998277900006.jpg)\n\n    从源码可以看出，这里的返回了一个 `EntrySet` 对象，但是需要注意的是这个 `EntrySet` 是 `HashMap` 里的一个内部类，源码如下：\n\n    ```java\n    final class EntrySet extends AbstractSet<Map.Entry<K,V>> {\n        public final int size() {\n           return size;\n        }\n\n        public final void clear() {\n            HashMap.this.clear();\n        }\n\n        public final Iterator<Map.Entry<K,V>> iterator() {\n            return new EntryIterator();\n        }\n\n        public final boolean contains(Object o) {\n            if (!(o instanceof Map.Entry))\n                return false;\n            Map.Entry<?,?> e = (Map.Entry<?,?>) o;\n            Object key = e.getKey();\n            Node<K,V> candidate = getNode(hash(key), key);\n            return candidate != null && candidate.equals(e);\n        }\n\n        public final boolean remove(Object o) {\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>) o;\n                Object key = e.getKey();\n                Object value = e.getValue();\n                return removeNode(hash(key), key, value, true, true) != null;\n            }\n            return false;\n        }\n\n        public final Spliterator<Map.Entry<K,V>> spliterator() {\n            return new EntrySpliterator<>(HashMap.this, 0, -1, 0, 0);\n        }\n\n        public final void forEach(Consumer<? super Map.Entry<K,V>> action) {\n            Node<K,V>[] tab;\n            if (action == null)\n                throw new NullPointerException();\n            if (size > 0 && (tab = table) != null) {\n                int mc = modCount;\n                for (int i = 0; i < tab.length; ++i) {\n                    for (Node<K,V> e = tab[i]; e != null; e = e.next)\n                        action.accept(e);\n                }\n                if (modCount != mc)\n                    throw new ConcurrentModificationException();\n            }\n        }\n    }\n    ```\n\n    从这里我们是可以看出，这个 `EntrySet` 其实是封装的一个 `Node` 类的实体。也就是说我们的 `set` 其实就是这个 `Node` 对象。\n\n2. 现在我们来说说这个 `Node` 对象，`Node` 对象也是 `HashMap` 里的一个内部类，源码如下：\n\n    ```java\n    static class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n\n        Node(int hash, K key, V value, Node<K,V> next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public final K getKey() {\n            return key;\n        }\n\n        public final V getValue() {\n            return value;\n        }\n\n        public final String toString() {\n            return key + \"=\" + value;\n        }\n\n        public final int hashCode() {\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\n        public final boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                if (Objects.equals(key, e.getKey()) &&\n                    Objects.equals(value, e.getValue()))\n                    return true;\n            }\n            return false;\n        }\n    }\n    ```\n    可以看出来，这个 `Node` 对象是 `Map.Entry<K,V>` 的实现类，我们可以看到这个 `Node` 对象实现了 `getKey()` 和 `getValue()` 的方法，所以后面调用的 `entry.getKey()` 以及 `entry.getValue()` 方法其实都是调用的 Node 对象里的`getKey()` 和 `getValue()` 方法，这里就是 `Java` 的多态的一种表现。\n\n3. 至此，打完收枪！","source":"_posts/2017-07-12.jdk-map-source-explore.md","raw":"---\ntitle: HashMap 的 JDK 源码探索\ncomments: true\nfancybox: true\ntoc: false\ndate: 2017-07-12 11:26:43\ntags:\n- java\n- JDK HashMap 源码探索\ncategories:\n- 技术相关\n- java\ndescription:\npermalink: jdk-map-source-explore\ntop:\n---\n\n> 缘由：今天好友拿着下面的代码，问我为什么Map.Entry 这个接口没有实现 getKey() 和 getValue() 方法，却可以使用，由此，开启了一番查阅 JDK 源码的旅途....\n\n<!--more-->\n\n```java\nMap map = new HashMap();\n   \nmap.put(1, \"张三\");\nmap.put(2, \"李四\");\nmap.put(3, \"王五\");\nmap.put(4, \"赵六\");\nmap.put(5, \"钱七\");\n   \nSet set = map.entrySet();\nfor (Object object : set) {\n   Map.Entry entry = (Map.Entry) object;\n   System.out.println(entry.getKey() + \"-->\" + entry.getValue());\n}\n```\n\n1. 首先，我们看 `map` 对象，这个 `map` 对象是 `HashMap` 的一个实例，然后下面的 `Set set = map.entrySet();` 可以知道这其实用的 `HashMap` 实现的 `entrySet()` 方法，然后我们可以查看 `HashMap` 里 `entrySet()` 的源码\n\n    ![](http://oriqjordg.bkt.clouddn.com/2017-07-12-14998277900006.jpg)\n\n    从源码可以看出，这里的返回了一个 `EntrySet` 对象，但是需要注意的是这个 `EntrySet` 是 `HashMap` 里的一个内部类，源码如下：\n\n    ```java\n    final class EntrySet extends AbstractSet<Map.Entry<K,V>> {\n        public final int size() {\n           return size;\n        }\n\n        public final void clear() {\n            HashMap.this.clear();\n        }\n\n        public final Iterator<Map.Entry<K,V>> iterator() {\n            return new EntryIterator();\n        }\n\n        public final boolean contains(Object o) {\n            if (!(o instanceof Map.Entry))\n                return false;\n            Map.Entry<?,?> e = (Map.Entry<?,?>) o;\n            Object key = e.getKey();\n            Node<K,V> candidate = getNode(hash(key), key);\n            return candidate != null && candidate.equals(e);\n        }\n\n        public final boolean remove(Object o) {\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>) o;\n                Object key = e.getKey();\n                Object value = e.getValue();\n                return removeNode(hash(key), key, value, true, true) != null;\n            }\n            return false;\n        }\n\n        public final Spliterator<Map.Entry<K,V>> spliterator() {\n            return new EntrySpliterator<>(HashMap.this, 0, -1, 0, 0);\n        }\n\n        public final void forEach(Consumer<? super Map.Entry<K,V>> action) {\n            Node<K,V>[] tab;\n            if (action == null)\n                throw new NullPointerException();\n            if (size > 0 && (tab = table) != null) {\n                int mc = modCount;\n                for (int i = 0; i < tab.length; ++i) {\n                    for (Node<K,V> e = tab[i]; e != null; e = e.next)\n                        action.accept(e);\n                }\n                if (modCount != mc)\n                    throw new ConcurrentModificationException();\n            }\n        }\n    }\n    ```\n\n    从这里我们是可以看出，这个 `EntrySet` 其实是封装的一个 `Node` 类的实体。也就是说我们的 `set` 其实就是这个 `Node` 对象。\n\n2. 现在我们来说说这个 `Node` 对象，`Node` 对象也是 `HashMap` 里的一个内部类，源码如下：\n\n    ```java\n    static class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n\n        Node(int hash, K key, V value, Node<K,V> next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public final K getKey() {\n            return key;\n        }\n\n        public final V getValue() {\n            return value;\n        }\n\n        public final String toString() {\n            return key + \"=\" + value;\n        }\n\n        public final int hashCode() {\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\n        public final boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                if (Objects.equals(key, e.getKey()) &&\n                    Objects.equals(value, e.getValue()))\n                    return true;\n            }\n            return false;\n        }\n    }\n    ```\n    可以看出来，这个 `Node` 对象是 `Map.Entry<K,V>` 的实现类，我们可以看到这个 `Node` 对象实现了 `getKey()` 和 `getValue()` 的方法，所以后面调用的 `entry.getKey()` 以及 `entry.getValue()` 方法其实都是调用的 Node 对象里的`getKey()` 和 `getValue()` 方法，这里就是 `Java` 的多态的一种表现。\n\n3. 至此，打完收枪！","slug":"jdk-map-source-explore","published":1,"updated":"2019-01-21T09:22:24.190Z","layout":"post","photos":[],"link":"","_id":"cjr64il65000xkds6t218xlmc","content":"<blockquote>\n<p>缘由：今天好友拿着下面的代码，问我为什么Map.Entry 这个接口没有实现 getKey() 和 getValue() 方法，却可以使用，由此，开启了一番查阅 JDK 源码的旅途….</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">   </div><div class=\"line\">map.put(<span class=\"number\">1</span>, <span class=\"string\">\"张三\"</span>);</div><div class=\"line\">map.put(<span class=\"number\">2</span>, <span class=\"string\">\"李四\"</span>);</div><div class=\"line\">map.put(<span class=\"number\">3</span>, <span class=\"string\">\"王五\"</span>);</div><div class=\"line\">map.put(<span class=\"number\">4</span>, <span class=\"string\">\"赵六\"</span>);</div><div class=\"line\">map.put(<span class=\"number\">5</span>, <span class=\"string\">\"钱七\"</span>);</div><div class=\"line\">   </div><div class=\"line\">Set set = map.entrySet();</div><div class=\"line\"><span class=\"keyword\">for</span> (Object object : set) &#123;</div><div class=\"line\">   Map.Entry entry = (Map.Entry) object;</div><div class=\"line\">   System.out.println(entry.getKey() + <span class=\"string\">\"--&gt;\"</span> + entry.getValue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>首先，我们看 <code>map</code> 对象，这个 <code>map</code> 对象是 <code>HashMap</code> 的一个实例，然后下面的 <code>Set set = map.entrySet();</code> 可以知道这其实用的 <code>HashMap</code> 实现的 <code>entrySet()</code> 方法，然后我们可以查看 <code>HashMap</code> 里 <code>entrySet()</code> 的源码</p>\n<p> <img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-12-14998277900006.jpg\" alt=\"\"></p>\n<p> 从源码可以看出，这里的返回了一个 <code>EntrySet</code> 对象，但是需要注意的是这个 <code>EntrySet</code> 是 <code>HashMap</code> 里的一个内部类，源码如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EntrySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> size;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        HashMap.<span class=\"keyword\">this</span>.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EntryIterator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Map.Entry))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</div><div class=\"line\">        Object key = e.getKey();</div><div class=\"line\">        Node&lt;K,V&gt; candidate = getNode(hash(key), key);</div><div class=\"line\">        <span class=\"keyword\">return</span> candidate != <span class=\"keyword\">null</span> &amp;&amp; candidate.equals(e);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</div><div class=\"line\">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</div><div class=\"line\">            Object key = e.getKey();</div><div class=\"line\">            Object value = e.getValue();</div><div class=\"line\">            <span class=\"keyword\">return</span> removeNode(hash(key), key, value, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>) != <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EntrySpliterator&lt;&gt;(HashMap.<span class=\"keyword\">this</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab;</div><div class=\"line\">        <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">        <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span> &amp;&amp; (tab = table) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> mc = modCount;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tab.length; ++i) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next)</div><div class=\"line\">                    action.accept(e);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (modCount != mc)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 从这里我们是可以看出，这个 <code>EntrySet</code> 其实是封装的一个 <code>Node</code> 类的实体。也就是说我们的 <code>set</code> 其实就是这个 <code>Node</code> 对象。</p>\n</li>\n<li><p>现在我们来说说这个 <code>Node</code> 对象，<code>Node</code> 对象也是 <code>HashMap</code> 里的一个内部类，源码如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</div><div class=\"line\">    <span class=\"keyword\">final</span> K key;</div><div class=\"line\">    V value;</div><div class=\"line\">    Node&lt;K,V&gt; next;</div><div class=\"line\"></div><div class=\"line\">    Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.hash = hash;</div><div class=\"line\">        <span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">        <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> key;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> key + <span class=\"string\">\"=\"</span> + value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</div><div class=\"line\">        V oldValue = value;</div><div class=\"line\">        value = newValue;</div><div class=\"line\">        <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</div><div class=\"line\">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class=\"line\">                Objects.equals(value, e.getValue()))</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 可以看出来，这个 <code>Node</code> 对象是 <code>Map.Entry&lt;K,V&gt;</code> 的实现类，我们可以看到这个 <code>Node</code> 对象实现了 <code>getKey()</code> 和 <code>getValue()</code> 的方法，所以后面调用的 <code>entry.getKey()</code> 以及 <code>entry.getValue()</code> 方法其实都是调用的 Node 对象里的<code>getKey()</code> 和 <code>getValue()</code> 方法，这里就是 <code>Java</code> 的多态的一种表现。</p>\n</li>\n<li><p>至此，打完收枪！</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>缘由：今天好友拿着下面的代码，问我为什么Map.Entry 这个接口没有实现 getKey() 和 getValue() 方法，却可以使用，由此，开启了一番查阅 JDK 源码的旅途….</p>\n</blockquote>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">   </div><div class=\"line\">map.put(<span class=\"number\">1</span>, <span class=\"string\">\"张三\"</span>);</div><div class=\"line\">map.put(<span class=\"number\">2</span>, <span class=\"string\">\"李四\"</span>);</div><div class=\"line\">map.put(<span class=\"number\">3</span>, <span class=\"string\">\"王五\"</span>);</div><div class=\"line\">map.put(<span class=\"number\">4</span>, <span class=\"string\">\"赵六\"</span>);</div><div class=\"line\">map.put(<span class=\"number\">5</span>, <span class=\"string\">\"钱七\"</span>);</div><div class=\"line\">   </div><div class=\"line\">Set set = map.entrySet();</div><div class=\"line\"><span class=\"keyword\">for</span> (Object object : set) &#123;</div><div class=\"line\">   Map.Entry entry = (Map.Entry) object;</div><div class=\"line\">   System.out.println(entry.getKey() + <span class=\"string\">\"--&gt;\"</span> + entry.getValue());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>首先，我们看 <code>map</code> 对象，这个 <code>map</code> 对象是 <code>HashMap</code> 的一个实例，然后下面的 <code>Set set = map.entrySet();</code> 可以知道这其实用的 <code>HashMap</code> 实现的 <code>entrySet()</code> 方法，然后我们可以查看 <code>HashMap</code> 里 <code>entrySet()</code> 的源码</p>\n<p> <img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-12-14998277900006.jpg\" alt=\"\"></p>\n<p> 从源码可以看出，这里的返回了一个 <code>EntrySet</code> 对象，但是需要注意的是这个 <code>EntrySet</code> 是 <code>HashMap</code> 里的一个内部类，源码如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EntrySet</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSet</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> size;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        HashMap.<span class=\"keyword\">this</span>.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EntryIterator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Map.Entry))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</div><div class=\"line\">        Object key = e.getKey();</div><div class=\"line\">        Node&lt;K,V&gt; candidate = getNode(hash(key), key);</div><div class=\"line\">        <span class=\"keyword\">return</span> candidate != <span class=\"keyword\">null</span> &amp;&amp; candidate.equals(e);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</div><div class=\"line\">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</div><div class=\"line\">            Object key = e.getKey();</div><div class=\"line\">            Object value = e.getValue();</div><div class=\"line\">            <span class=\"keyword\">return</span> removeNode(hash(key), key, value, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>) != <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EntrySpliterator&lt;&gt;(HashMap.<span class=\"keyword\">this</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab;</div><div class=\"line\">        <span class=\"keyword\">if</span> (action == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</div><div class=\"line\">        <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span> &amp;&amp; (tab = table) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> mc = modCount;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; tab.length; ++i) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next)</div><div class=\"line\">                    action.accept(e);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (modCount != mc)</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 从这里我们是可以看出，这个 <code>EntrySet</code> 其实是封装的一个 <code>Node</code> 类的实体。也就是说我们的 <code>set</code> 其实就是这个 <code>Node</code> 对象。</p>\n</li>\n<li><p>现在我们来说说这个 <code>Node</code> 对象，<code>Node</code> 对象也是 <code>HashMap</code> 里的一个内部类，源码如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</div><div class=\"line\">    <span class=\"keyword\">final</span> K key;</div><div class=\"line\">    V value;</div><div class=\"line\">    Node&lt;K,V&gt; next;</div><div class=\"line\"></div><div class=\"line\">    Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.hash = hash;</div><div class=\"line\">        <span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">        <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next = next;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> key;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> key + <span class=\"string\">\"=\"</span> + value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</div><div class=\"line\">        V oldValue = value;</div><div class=\"line\">        value = newValue;</div><div class=\"line\">        <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</div><div class=\"line\">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class=\"line\">                Objects.equals(value, e.getValue()))</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 可以看出来，这个 <code>Node</code> 对象是 <code>Map.Entry&lt;K,V&gt;</code> 的实现类，我们可以看到这个 <code>Node</code> 对象实现了 <code>getKey()</code> 和 <code>getValue()</code> 的方法，所以后面调用的 <code>entry.getKey()</code> 以及 <code>entry.getValue()</code> 方法其实都是调用的 Node 对象里的<code>getKey()</code> 和 <code>getValue()</code> 方法，这里就是 <code>Java</code> 的多态的一种表现。</p>\n</li>\n<li><p>至此，打完收枪！</p>\n</li>\n</ol>"},{"title":"spring-boot整合mybatis的时候使用logback打印日志","comments":1,"fancybox":true,"toc":false,"date":"2017-07-19T03:44:55.000Z","description":null,"top":null,"_content":"\n> 最近在学习 `spring boot` ，日志用的是 `logback` ，至于为什么没有选常用的 `log4j` ，因为 `logback` 是 `spring boot` 官方推荐的日志系统。但是在整合 `Mybatis` 的时候一直打印不了 `SQL` 语句，查阅多方资料，终于解决了~\n> <!--more-->\n\n1. 先展示下 `logback-spring.xml` 的完整内容\n\n    ```xml\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <configuration>\n    \t<appender name=\"consoleLog\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    \t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n              <pattern>【xkcoding】%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n</pattern>\n    \t\t</layout>\n    \t</appender>\n\n    \t<appender name=\"fileLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n    \t\t<!--滚动策略-->\n    \t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n    \t\t\t<!--输出路径-->\n    \t\t\t<fileNamePattern>${user.dir}/logs/log/online-study.%d.log</fileNamePattern>\n    \t\t</rollingPolicy>\n    \t\t<encoder>\n              <pattern>【xkcoding】%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n</pattern>\n    \t\t</encoder>\n    \t</appender>\n\n    \t<appender name=\"fileErrorLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n    \t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n    \t\t\t<level>ERROR</level>\n    \t\t\t<onMatch>ACCEPT</onMatch>\n    \t\t\t<onMismatch>DENY</onMismatch>\n    \t\t</filter>\n    \t\t<!--滚动策略-->\n    \t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n    \t\t\t<!--输出路径-->\n    \t\t\t<fileNamePattern>${user.dir}/logs/error/online-study.%d.error</fileNamePattern>\n    \t\t</rollingPolicy>\n    \t\t<encoder>\n              <pattern>【xkcoding】%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n</pattern>\n    \t\t</encoder>\n    \t</appender>\n\n    \t<!--\n    \tlogger\n    \t   属性：\n    \t\t  1)name:用来指定受此logger约束的某一个包或者具体的某一个类\n    \t\t  2)level:用来设置打印级别，大小写无关（最常用的几种）：DEBUG, INFO, WARN, ERROR\n    \t-->\n    \t\n    \t<!-- 用于打印 Spring 在启动的时候初始化各个 Bean 的信息 -->\n    \t<logger name=\"org.springframework.web\" level=\"DEBUG\"/>\n\n    \t<!-- mybatis 日志打印如果在 ssm 中，可能就需要下边的7行了。-->\n    \t<!--<logger name=\"com.ibatis\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"com.ibatis.common.jdbc.SimpleDataSource\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"com.ibatis.common.jdbc.ScriptRunner\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate\" level=\"DEBUG\" />-->    \n    \t<!--<logger name=\"java.sql.Connection\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"java.sql.Statement\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"java.sql.PreparedStatement\" level=\"DEBUG\" />-->\n    \t\n    \t<!-- 以下这一句至关重要如果没有，就无法输出 sql 语句 -->\n    \t<!--注意：在 spring boot 中，想在控制台打印 mybatis 的 sql 语句，只需要配置下边这一句就好了。-->\n    \t<!--如果想要记录更详细的 SQL 日志，只需要把下面的日志级别改成 TRACE 就可以了-->\n    \t<!--即将 mapper 接口打入 logger 就行。-->\n    \t<logger name=\"com.xkcoding.dao\" level=\"DEBUG\"></logger>\n\n    \t<root level=\"info\">\n    \t\t<appender-ref ref=\"consoleLog\"/>\n    \t\t<appender-ref ref=\"fileLog\"/>\n    \t\t<appender-ref ref=\"fileErrorLog\"/>\n    \t</root>\n\n    </configuration>\n    ```\n\n2. 如果是 Log4J 实现的话可以参考[Mybatis 日志](http://www.mybatis.org/mybatis-3/zh/logging.html)\n\n3. 第一个节点 `consoleLog` 是在控制台显示的 Log 日志，在控制台显示 Log 日志需要在 `appender` 节点里配置 `class=\"ch.qos.logback.core.ConsoleAppender\"` ，格式化输出的配置在 `pattern` 节点中配置，各个参数的介绍如下：\n\n    ```\n    %-5level: 显示 Log 级别，从左显示5个字符宽度，打印内容: TRACE/DEBUG/INFO/WARN/ERROR\n    %d{yyyy-MM-dd HH:mm:ss.SSS}: 显示时间戳，{}中内容代表时间戳格式\n    %thread: 显示线程名字\n    %logger{36}: 表示 logger 名字最长36个字符，否则按照句点分割\n    %msg: 日志消息\n    %n: 换行符\n    ```\n\n4. 第二个节点 `fileLog` 是将日志保存为文件，需要在 `appender` 节点里配置 ` class=\"ch.qos.logback.core.rolling.RollingFileAppender\"` ，并且指定滚动策略，为每天一个文件，指定文件名为 `%d.log` 。\n\n    ```xml\n    <!--滚动策略-->\n    <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n        <!--输出路径-->\n        <fileNamePattern>${user.dir}/logs/log/online-study.%d.log</fileNamePattern>\n    </rollingPolicy>\n    ```\n\n5. 第三个节点 `fileErrorLog` 是将错误日志记录在文件中，不保存其他级别的日志，需要配置一个 `filter` 节点。拦截内容如下（`注意单词大小写，千万不能出错！`）：\n\n    ```xml\n    <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n        <level>ERROR</level>\n        <onMatch>ACCEPT</onMatch>\n        <onMismatch>DENY</onMismatch>\n    </filter>\n    ```\n\n6. 在这里再推荐一个 maven 依赖，`lombok` \n\n    ```xml\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n    </dependency>\n    ```\n\n7. 在 idea 里安装 `lombok` 的相应插件\n  ![lombok插件](http://oriqjordg.bkt.clouddn.com/2017-07-19-15004348921948.jpg)\n\n8. 然后就可以在类名上方添加 `@Slf4j` 注解，这样就可以直接在代码中使用 `log.info(\"....\")` 打印日志了。\n\n9. 再提示下 `lombok` 的其他使用技巧，如果使用了 `lombok` ，只要在实体类的类名上加上 `@Data` 注解，那么我们就不需要写 `getter/ setter/toString` 方法，`lombok` 会自动生成 `getter/setter/toString` 方法，我们直接调用就可以了，如果只需要生成 `getter` 或者 `setter`，就可以直接使用 `@Getter` 或者 `@Setter` 注解。并且 `@Getter` 和 `@Setter` 这两个注解不止可以用在 `Class` 上，还可以用在 `Enum` 上哦。\n\n10. 就介绍到这儿，enjoy it !!!","source":"_posts/2017-07-19.spring-boot-mybatis-logback.md","raw":"---\ntitle: spring-boot整合mybatis的时候使用logback打印日志\ncomments: true\nfancybox: true\ntoc: false\ndate: 2017-07-19 11:44:55\ntags: \n- spring boot\n- mybatis\n- 日志\ncategories:\n- 技术相关\n- spring boot\ndescription:\npermalink: spring-boot-mybatis-logback\ntop:\n---\n\n> 最近在学习 `spring boot` ，日志用的是 `logback` ，至于为什么没有选常用的 `log4j` ，因为 `logback` 是 `spring boot` 官方推荐的日志系统。但是在整合 `Mybatis` 的时候一直打印不了 `SQL` 语句，查阅多方资料，终于解决了~\n> <!--more-->\n\n1. 先展示下 `logback-spring.xml` 的完整内容\n\n    ```xml\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <configuration>\n    \t<appender name=\"consoleLog\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    \t\t<layout class=\"ch.qos.logback.classic.PatternLayout\">\n              <pattern>【xkcoding】%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n</pattern>\n    \t\t</layout>\n    \t</appender>\n\n    \t<appender name=\"fileLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n    \t\t<!--滚动策略-->\n    \t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n    \t\t\t<!--输出路径-->\n    \t\t\t<fileNamePattern>${user.dir}/logs/log/online-study.%d.log</fileNamePattern>\n    \t\t</rollingPolicy>\n    \t\t<encoder>\n              <pattern>【xkcoding】%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n</pattern>\n    \t\t</encoder>\n    \t</appender>\n\n    \t<appender name=\"fileErrorLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n    \t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n    \t\t\t<level>ERROR</level>\n    \t\t\t<onMatch>ACCEPT</onMatch>\n    \t\t\t<onMismatch>DENY</onMismatch>\n    \t\t</filter>\n    \t\t<!--滚动策略-->\n    \t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n    \t\t\t<!--输出路径-->\n    \t\t\t<fileNamePattern>${user.dir}/logs/error/online-study.%d.error</fileNamePattern>\n    \t\t</rollingPolicy>\n    \t\t<encoder>\n              <pattern>【xkcoding】%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n</pattern>\n    \t\t</encoder>\n    \t</appender>\n\n    \t<!--\n    \tlogger\n    \t   属性：\n    \t\t  1)name:用来指定受此logger约束的某一个包或者具体的某一个类\n    \t\t  2)level:用来设置打印级别，大小写无关（最常用的几种）：DEBUG, INFO, WARN, ERROR\n    \t-->\n    \t\n    \t<!-- 用于打印 Spring 在启动的时候初始化各个 Bean 的信息 -->\n    \t<logger name=\"org.springframework.web\" level=\"DEBUG\"/>\n\n    \t<!-- mybatis 日志打印如果在 ssm 中，可能就需要下边的7行了。-->\n    \t<!--<logger name=\"com.ibatis\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"com.ibatis.common.jdbc.SimpleDataSource\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"com.ibatis.common.jdbc.ScriptRunner\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate\" level=\"DEBUG\" />-->    \n    \t<!--<logger name=\"java.sql.Connection\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"java.sql.Statement\" level=\"DEBUG\" />-->\n    \t<!--<logger name=\"java.sql.PreparedStatement\" level=\"DEBUG\" />-->\n    \t\n    \t<!-- 以下这一句至关重要如果没有，就无法输出 sql 语句 -->\n    \t<!--注意：在 spring boot 中，想在控制台打印 mybatis 的 sql 语句，只需要配置下边这一句就好了。-->\n    \t<!--如果想要记录更详细的 SQL 日志，只需要把下面的日志级别改成 TRACE 就可以了-->\n    \t<!--即将 mapper 接口打入 logger 就行。-->\n    \t<logger name=\"com.xkcoding.dao\" level=\"DEBUG\"></logger>\n\n    \t<root level=\"info\">\n    \t\t<appender-ref ref=\"consoleLog\"/>\n    \t\t<appender-ref ref=\"fileLog\"/>\n    \t\t<appender-ref ref=\"fileErrorLog\"/>\n    \t</root>\n\n    </configuration>\n    ```\n\n2. 如果是 Log4J 实现的话可以参考[Mybatis 日志](http://www.mybatis.org/mybatis-3/zh/logging.html)\n\n3. 第一个节点 `consoleLog` 是在控制台显示的 Log 日志，在控制台显示 Log 日志需要在 `appender` 节点里配置 `class=\"ch.qos.logback.core.ConsoleAppender\"` ，格式化输出的配置在 `pattern` 节点中配置，各个参数的介绍如下：\n\n    ```\n    %-5level: 显示 Log 级别，从左显示5个字符宽度，打印内容: TRACE/DEBUG/INFO/WARN/ERROR\n    %d{yyyy-MM-dd HH:mm:ss.SSS}: 显示时间戳，{}中内容代表时间戳格式\n    %thread: 显示线程名字\n    %logger{36}: 表示 logger 名字最长36个字符，否则按照句点分割\n    %msg: 日志消息\n    %n: 换行符\n    ```\n\n4. 第二个节点 `fileLog` 是将日志保存为文件，需要在 `appender` 节点里配置 ` class=\"ch.qos.logback.core.rolling.RollingFileAppender\"` ，并且指定滚动策略，为每天一个文件，指定文件名为 `%d.log` 。\n\n    ```xml\n    <!--滚动策略-->\n    <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n        <!--输出路径-->\n        <fileNamePattern>${user.dir}/logs/log/online-study.%d.log</fileNamePattern>\n    </rollingPolicy>\n    ```\n\n5. 第三个节点 `fileErrorLog` 是将错误日志记录在文件中，不保存其他级别的日志，需要配置一个 `filter` 节点。拦截内容如下（`注意单词大小写，千万不能出错！`）：\n\n    ```xml\n    <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n        <level>ERROR</level>\n        <onMatch>ACCEPT</onMatch>\n        <onMismatch>DENY</onMismatch>\n    </filter>\n    ```\n\n6. 在这里再推荐一个 maven 依赖，`lombok` \n\n    ```xml\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n    </dependency>\n    ```\n\n7. 在 idea 里安装 `lombok` 的相应插件\n  ![lombok插件](http://oriqjordg.bkt.clouddn.com/2017-07-19-15004348921948.jpg)\n\n8. 然后就可以在类名上方添加 `@Slf4j` 注解，这样就可以直接在代码中使用 `log.info(\"....\")` 打印日志了。\n\n9. 再提示下 `lombok` 的其他使用技巧，如果使用了 `lombok` ，只要在实体类的类名上加上 `@Data` 注解，那么我们就不需要写 `getter/ setter/toString` 方法，`lombok` 会自动生成 `getter/setter/toString` 方法，我们直接调用就可以了，如果只需要生成 `getter` 或者 `setter`，就可以直接使用 `@Getter` 或者 `@Setter` 注解。并且 `@Getter` 和 `@Setter` 这两个注解不止可以用在 `Class` 上，还可以用在 `Enum` 上哦。\n\n10. 就介绍到这儿，enjoy it !!!","slug":"spring-boot-mybatis-logback","published":1,"updated":"2018-01-11T02:15:32.578Z","layout":"post","photos":[],"link":"","_id":"cjr64il66000zkds6rkhsg2q1","content":"<blockquote>\n<p>最近在学习 <code>spring boot</code> ，日志用的是 <code>logback</code> ，至于为什么没有选常用的 <code>log4j</code> ，因为 <code>logback</code> 是 <code>spring boot</code> 官方推荐的日志系统。但是在整合 <code>Mybatis</code> 的时候一直打印不了 <code>SQL</code> 语句，查阅多方资料，终于解决了~<br><a id=\"more\"></a></p>\n</blockquote>\n<ol>\n<li><p>先展示下 <code>logback-spring.xml</code> 的完整内容</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"consoleLog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>【xkcoding】%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;36&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileLog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--滚动策略--&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!--输出路径--&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/log/online-study.%d.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>【xkcoding】%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;36&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileErrorLog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--滚动策略--&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!--输出路径--&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/error/online-study.%d.error<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>【xkcoding】%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;36&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!--</span></div><div class=\"line\">\tlogger</div><div class=\"line\">\t   属性：</div><div class=\"line\">\t\t  1)name:用来指定受此logger约束的某一个包或者具体的某一个类</div><div class=\"line\">\t\t  2)level:用来设置打印级别，大小写无关（最常用的几种）：DEBUG, INFO, WARN, ERROR</div><div class=\"line\">\t--&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 用于打印 Spring 在启动的时候初始化各个 Bean 的信息 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- mybatis 日志打印如果在 ssm 中，可能就需要下边的7行了。--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"com.ibatis\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"com.ibatis.common.jdbc.SimpleDataSource\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"com.ibatis.common.jdbc.ScriptRunner\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate\" level=\"DEBUG\" /&gt;--&gt;</span>    </div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"java.sql.Connection\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"java.sql.Statement\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"java.sql.PreparedStatement\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 以下这一句至关重要如果没有，就无法输出 sql 语句 --&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--注意：在 spring boot 中，想在控制台打印 mybatis 的 sql 语句，只需要配置下边这一句就好了。--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--如果想要记录更详细的 SQL 日志，只需要把下面的日志级别改成 TRACE 就可以了--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--即将 mapper 接口打入 logger 就行。--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.xkcoding.dao\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"consoleLog\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"fileLog\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"fileErrorLog\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>如果是 Log4J 实现的话可以参考<a href=\"http://www.mybatis.org/mybatis-3/zh/logging.html\" target=\"_blank\" rel=\"external\">Mybatis 日志</a></p>\n</li>\n<li><p>第一个节点 <code>consoleLog</code> 是在控制台显示的 Log 日志，在控制台显示 Log 日志需要在 <code>appender</code> 节点里配置 <code>class=&quot;ch.qos.logback.core.ConsoleAppender&quot;</code> ，格式化输出的配置在 <code>pattern</code> 节点中配置，各个参数的介绍如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">%-5level: 显示 Log 级别，从左显示5个字符宽度，打印内容: TRACE/DEBUG/INFO/WARN/ERROR</div><div class=\"line\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;: 显示时间戳，&#123;&#125;中内容代表时间戳格式</div><div class=\"line\">%thread: 显示线程名字</div><div class=\"line\">%logger&#123;36&#125;: 表示 logger 名字最长36个字符，否则按照句点分割</div><div class=\"line\">%msg: 日志消息</div><div class=\"line\">%n: 换行符</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二个节点 <code>fileLog</code> 是将日志保存为文件，需要在 <code>appender</code> 节点里配置 <code>class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</code> ，并且指定滚动策略，为每天一个文件，指定文件名为 <code>%d.log</code> 。</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--滚动策略--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--输出路径--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/log/online-study.%d.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>第三个节点 <code>fileErrorLog</code> 是将错误日志记录在文件中，不保存其他级别的日志，需要配置一个 <code>filter</code> 节点。拦截内容如下（<code>注意单词大小写，千万不能出错！</code>）：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在这里再推荐一个 maven 依赖，<code>lombok</code> </p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在 idea 里安装 <code>lombok</code> 的相应插件<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-19-15004348921948.jpg\" alt=\"lombok插件\"></p>\n</li>\n<li><p>然后就可以在类名上方添加 <code>@Slf4j</code> 注解，这样就可以直接在代码中使用 <code>log.info(&quot;....&quot;)</code> 打印日志了。</p>\n</li>\n<li><p>再提示下 <code>lombok</code> 的其他使用技巧，如果使用了 <code>lombok</code> ，只要在实体类的类名上加上 <code>@Data</code> 注解，那么我们就不需要写 <code>getter/ setter/toString</code> 方法，<code>lombok</code> 会自动生成 <code>getter/setter/toString</code> 方法，我们直接调用就可以了，如果只需要生成 <code>getter</code> 或者 <code>setter</code>，就可以直接使用 <code>@Getter</code> 或者 <code>@Setter</code> 注解。并且 <code>@Getter</code> 和 <code>@Setter</code> 这两个注解不止可以用在 <code>Class</code> 上，还可以用在 <code>Enum</code> 上哦。</p>\n</li>\n<li><p>就介绍到这儿，enjoy it !!!</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近在学习 <code>spring boot</code> ，日志用的是 <code>logback</code> ，至于为什么没有选常用的 <code>log4j</code> ，因为 <code>logback</code> 是 <code>spring boot</code> 官方推荐的日志系统。但是在整合 <code>Mybatis</code> 的时候一直打印不了 <code>SQL</code> 语句，查阅多方资料，终于解决了~<br>","more":"</p>\n</blockquote>\n<ol>\n<li><p>先展示下 <code>logback-spring.xml</code> 的完整内容</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"consoleLog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.PatternLayout\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>【xkcoding】%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;36&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileLog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--滚动策略--&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!--输出路径--&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/log/online-study.%d.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>【xkcoding】%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;36&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileErrorLog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--滚动策略--&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!--输出路径--&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/error/online-study.%d.error<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>【xkcoding】%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;36&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!--</span></div><div class=\"line\">\tlogger</div><div class=\"line\">\t   属性：</div><div class=\"line\">\t\t  1)name:用来指定受此logger约束的某一个包或者具体的某一个类</div><div class=\"line\">\t\t  2)level:用来设置打印级别，大小写无关（最常用的几种）：DEBUG, INFO, WARN, ERROR</div><div class=\"line\">\t--&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 用于打印 Spring 在启动的时候初始化各个 Bean 的信息 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.springframework.web\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- mybatis 日志打印如果在 ssm 中，可能就需要下边的7行了。--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"com.ibatis\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"com.ibatis.common.jdbc.SimpleDataSource\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"com.ibatis.common.jdbc.ScriptRunner\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate\" level=\"DEBUG\" /&gt;--&gt;</span>    </div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"java.sql.Connection\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"java.sql.Statement\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--&lt;logger name=\"java.sql.PreparedStatement\" level=\"DEBUG\" /&gt;--&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 以下这一句至关重要如果没有，就无法输出 sql 语句 --&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--注意：在 spring boot 中，想在控制台打印 mybatis 的 sql 语句，只需要配置下边这一句就好了。--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--如果想要记录更详细的 SQL 日志，只需要把下面的日志级别改成 TRACE 就可以了--&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--即将 mapper 接口打入 logger 就行。--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.xkcoding.dao\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"info\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"consoleLog\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"fileLog\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"fileErrorLog\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>如果是 Log4J 实现的话可以参考<a href=\"http://www.mybatis.org/mybatis-3/zh/logging.html\" target=\"_blank\" rel=\"external\">Mybatis 日志</a></p>\n</li>\n<li><p>第一个节点 <code>consoleLog</code> 是在控制台显示的 Log 日志，在控制台显示 Log 日志需要在 <code>appender</code> 节点里配置 <code>class=&quot;ch.qos.logback.core.ConsoleAppender&quot;</code> ，格式化输出的配置在 <code>pattern</code> 节点中配置，各个参数的介绍如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">%-5level: 显示 Log 级别，从左显示5个字符宽度，打印内容: TRACE/DEBUG/INFO/WARN/ERROR</div><div class=\"line\">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;: 显示时间戳，&#123;&#125;中内容代表时间戳格式</div><div class=\"line\">%thread: 显示线程名字</div><div class=\"line\">%logger&#123;36&#125;: 表示 logger 名字最长36个字符，否则按照句点分割</div><div class=\"line\">%msg: 日志消息</div><div class=\"line\">%n: 换行符</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二个节点 <code>fileLog</code> 是将日志保存为文件，需要在 <code>appender</code> 节点里配置 <code>class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</code> ，并且指定滚动策略，为每天一个文件，指定文件名为 <code>%d.log</code> 。</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--滚动策略--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--输出路径--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/log/online-study.%d.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>第三个节点 <code>fileErrorLog</code> 是将错误日志记录在文件中，不保存其他级别的日志，需要配置一个 <code>filter</code> 节点。拦截内容如下（<code>注意单词大小写，千万不能出错！</code>）：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在这里再推荐一个 maven 依赖，<code>lombok</code> </p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在 idea 里安装 <code>lombok</code> 的相应插件<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-07-19-15004348921948.jpg\" alt=\"lombok插件\"></p>\n</li>\n<li><p>然后就可以在类名上方添加 <code>@Slf4j</code> 注解，这样就可以直接在代码中使用 <code>log.info(&quot;....&quot;)</code> 打印日志了。</p>\n</li>\n<li><p>再提示下 <code>lombok</code> 的其他使用技巧，如果使用了 <code>lombok</code> ，只要在实体类的类名上加上 <code>@Data</code> 注解，那么我们就不需要写 <code>getter/ setter/toString</code> 方法，<code>lombok</code> 会自动生成 <code>getter/setter/toString</code> 方法，我们直接调用就可以了，如果只需要生成 <code>getter</code> 或者 <code>setter</code>，就可以直接使用 <code>@Getter</code> 或者 <code>@Setter</code> 注解。并且 <code>@Getter</code> 和 <code>@Setter</code> 这两个注解不止可以用在 <code>Class</code> 上，还可以用在 <code>Enum</code> 上哦。</p>\n</li>\n<li><p>就介绍到这儿，enjoy it !!!</p>\n</li>\n</ol>"},{"title":"自定义阻塞队列","comments":1,"fancybox":false,"toc":false,"date":"2017-08-02T07:47:07.000Z","description":null,"top":null,"_content":"\n今天重温了下 java 多线程中的 `notify()` 方法以及 `wait()` 方法，一时兴起，决定通过这俩个方法，实现一个简易的自定义阻塞队列。\n<!--more-->\n> 阻塞队列是什么，与普通队列的区别是什么？\n> 阻塞队列与普通队列的区别在于，当队列是空的时，从队列中获取元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其他的线程往空的队列插入新的元素。同样，试图往已满的阻塞队列中添加新元素的线程同样也会被阻塞，直到其他的线程使队列重新变得空闲起来。\n\n1. 新建一个 `MyQueue.java` 类\n\n    ```java\n    import java.util.LinkedList;\n    import java.util.concurrent.atomic.AtomicInteger;\n\n    import com.xiaoleilu.hutool.util.StrUtil;\n\n    /**\n     * 使用 notify() 和 wait() 实现自定义阻塞队列\n     *\n     * @author Yangkai.Shen\n     * @version 1.0\n     * @date 2017.08.02 at 11:51:14\n     */\n    public class MyQueue {\n\n    \t// 1. 承载数据的容器\n    \tprivate LinkedList<Object> queue = new LinkedList<Object>();\n\n    \t// 2. 计数器，用于判定边界\n    \tprivate AtomicInteger count = new AtomicInteger(0);\n    \tprivate final int minSize = 0;\n\n    \t// 3. 初始化一个对象，用于加锁\n    \tprivate final Object lock = new Object();\n    \tprivate final int maxSize;\n\n    \tpublic MyQueue(int maxSize) {\n    \t\tthis.maxSize = maxSize;\n    \t}\n\n    \t/**\n    \t * 添加一个元素到队列中，如果队列元素已满，则调用此方法的线程被阻塞，直到存在多余空间了，再进行添加\n    \t *\n    \t * @param obj 添加 obj 到队列尾部\n    \t */\n    \tpublic void put(Object obj) {\n    \t\tsynchronized (lock) {\n    \t\t\t// 1.没有多余空间，就阻塞线程\n    \t\t\twhile (count.get() == this.maxSize) {\n    \t\t\t\ttry {\n    \t\t\t\t\tlock.wait();\n    \t\t\t\t} catch (InterruptedException e) {\n    \t\t\t\t\te.printStackTrace();\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t// 2.添加元素\n    \t\t\tqueue.add(obj);\n    \t\t\t// 3.计数器累加\n    \t\t\tcount.incrementAndGet();\n    \t\t\tSystem.out.println(StrUtil.format(\"新加入的元素为：{}\", obj));\n    \t\t\t// 4.唤醒其他线程（若本来元素为空，有线程调用 get 方法，那么原本被阻塞的，需要在此时被唤醒）\n    \t\t\tlock.notify();\n    \t\t}\n    \t}\n\n    \t/**\n    \t * 获取一个元素，如果队列元素为空，则调用此方法的线程被阻塞，直到添加新元素了，再进行获取\n    \t *\n    \t * @return 返回队列的第一个元素\n    \t */\n    \tpublic Object get() {\n    \t\tObject ret = null;\n\n    \t\tsynchronized (lock) {\n    \t\t\t// 1.没有元素，就阻塞线程\n    \t\t\twhile (count.get() == this.minSize) {\n    \t\t\t\ttry {\n    \t\t\t\t\tlock.wait();\n    \t\t\t\t} catch (InterruptedException e) {\n    \t\t\t\t\te.printStackTrace();\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t// 2.取第一个元素\n    \t\t\tret = queue.removeFirst();\n    \t\t\t// 3.计数器递减\n    \t\t\tcount.decrementAndGet();\n    \t\t\tSystem.out.println(StrUtil.format(\"移除的元素为：{}\", ret));\n    \t\t\t// 4.唤醒其他线程（若元素本来已满，有线程调用 put 方法，那么原本被阻塞的，需要在此时被唤醒）\n    \t\t\tlock.notify();\n    \t\t}\n\n    \t\treturn ret;\n    \t}\n\n    \tpublic int getSize() {\n    \t\treturn this.count.get();\n    \t}\n\n    }\n    ```\n2. 新建一个测试类 `MyQueueTest.java`，测试类中，我们初始化一个队列，并将元素填满，然后启动一个线程 `t1`，去插入数据，中间休眠2s，再去启动一个线程 `t2` 取数据。\n\n    ```java\n    import com.xiaoleilu.hutool.util.StrUtil;\n    \n    import java.util.concurrent.TimeUnit;\n    \n    public class MyQueueTest {\n    \tpublic static void main(String[] args) {\n    \t\tfinal MyQueue queue = new MyQueue(5);\n    \n    \t\tqueue.put(\"a\");\n    \t\tqueue.put(\"b\");\n    \t\tqueue.put(\"c\");\n    \t\tqueue.put(\"d\");\n    \t\tqueue.put(\"e\");\n    \n    \t\tSystem.out.println(StrUtil.format(\"当前队列的长度: {}\", queue.getSize()));\n    \t\tThread t1 = new Thread(() -> {\n    \t\t\tqueue.put(\"f\");\n    \t\t\tqueue.put(\"g\");\n    \t\t\tqueue.put(\"h\");\n    \t\t}, \"t1\");\n    ```\n\n\n    \t\tThread t2 = new Thread(() -> {\n    \t\t\tqueue.get();\n    \t\t\tqueue.get();\n    \t\t});\n    \n    \t\tt1.start();\n    \t\ttry {\n    \t\t\tTimeUnit.SECONDS.sleep(2);\n    \t\t} catch (InterruptedException e) {\n    \t\t\te.printStackTrace();\n    \t\t}\n    \t\tt2.start();\n    \t}\n    }\n    ```\n3. 启动测试类，查看运行结果。控制台如果应该出现的效果是，队列先初始化完成，然后休眠2s，接下来先取数据，再插入数据，则证明阻塞队列生效。下面是控制台运行的效果：\n    * 初始化队列\n      ![初始化队列](http://oriqjordg.bkt.clouddn.com/2017-08-02-15016611637131.jpg)\n    * 休眠2s后取队首元素，再插入队尾元素\n       ![取队首元素，插入队尾元素](http://oriqjordg.bkt.clouddn.com/2017-08-02-15016613283795.jpg)\n    * 此时我们会发现，程序还未停止，因为此时队列已满，但是线程 `t1` 还未插入 `h` 元素，因此线程被阻塞着，直至下次队列有空余空间才会被唤醒。\n4. 至此，一个自定义阻塞队列就已经实现了。\n5. 细心的朋友会发现，我打印的 log 里用到了一个 `StrUtil.format()` 方法，这个和 `slf4j` 的 log 用法一致，可以使用占位符。这个是用到了一个国产良心工具类，[hutool](http://www.hutool.cn/)，国产开源，需要大家的支持，觉得好用的话，期望可以去 [码云](https://github.com/looly/hutool) 或者 [github](http://git.oschina.net/loolly/hutool) 上给个 Star 吧！","source":"_posts/2017-08-02.customize-blocked-queue.md","raw":"---\ntitle: 自定义阻塞队列\ncomments: true\nfancybox: false\ntoc: false\ndate: 2017-08-02 15:47:07\ntags:\n- java\n- 多线程\n- 代码片段\ncategories:\n- 代码片段\n- java\ndescription:\npermalink: customize-blocked-queue\ntop:\n---\n\n今天重温了下 java 多线程中的 `notify()` 方法以及 `wait()` 方法，一时兴起，决定通过这俩个方法，实现一个简易的自定义阻塞队列。\n<!--more-->\n> 阻塞队列是什么，与普通队列的区别是什么？\n> 阻塞队列与普通队列的区别在于，当队列是空的时，从队列中获取元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其他的线程往空的队列插入新的元素。同样，试图往已满的阻塞队列中添加新元素的线程同样也会被阻塞，直到其他的线程使队列重新变得空闲起来。\n\n1. 新建一个 `MyQueue.java` 类\n\n    ```java\n    import java.util.LinkedList;\n    import java.util.concurrent.atomic.AtomicInteger;\n\n    import com.xiaoleilu.hutool.util.StrUtil;\n\n    /**\n     * 使用 notify() 和 wait() 实现自定义阻塞队列\n     *\n     * @author Yangkai.Shen\n     * @version 1.0\n     * @date 2017.08.02 at 11:51:14\n     */\n    public class MyQueue {\n\n    \t// 1. 承载数据的容器\n    \tprivate LinkedList<Object> queue = new LinkedList<Object>();\n\n    \t// 2. 计数器，用于判定边界\n    \tprivate AtomicInteger count = new AtomicInteger(0);\n    \tprivate final int minSize = 0;\n\n    \t// 3. 初始化一个对象，用于加锁\n    \tprivate final Object lock = new Object();\n    \tprivate final int maxSize;\n\n    \tpublic MyQueue(int maxSize) {\n    \t\tthis.maxSize = maxSize;\n    \t}\n\n    \t/**\n    \t * 添加一个元素到队列中，如果队列元素已满，则调用此方法的线程被阻塞，直到存在多余空间了，再进行添加\n    \t *\n    \t * @param obj 添加 obj 到队列尾部\n    \t */\n    \tpublic void put(Object obj) {\n    \t\tsynchronized (lock) {\n    \t\t\t// 1.没有多余空间，就阻塞线程\n    \t\t\twhile (count.get() == this.maxSize) {\n    \t\t\t\ttry {\n    \t\t\t\t\tlock.wait();\n    \t\t\t\t} catch (InterruptedException e) {\n    \t\t\t\t\te.printStackTrace();\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t// 2.添加元素\n    \t\t\tqueue.add(obj);\n    \t\t\t// 3.计数器累加\n    \t\t\tcount.incrementAndGet();\n    \t\t\tSystem.out.println(StrUtil.format(\"新加入的元素为：{}\", obj));\n    \t\t\t// 4.唤醒其他线程（若本来元素为空，有线程调用 get 方法，那么原本被阻塞的，需要在此时被唤醒）\n    \t\t\tlock.notify();\n    \t\t}\n    \t}\n\n    \t/**\n    \t * 获取一个元素，如果队列元素为空，则调用此方法的线程被阻塞，直到添加新元素了，再进行获取\n    \t *\n    \t * @return 返回队列的第一个元素\n    \t */\n    \tpublic Object get() {\n    \t\tObject ret = null;\n\n    \t\tsynchronized (lock) {\n    \t\t\t// 1.没有元素，就阻塞线程\n    \t\t\twhile (count.get() == this.minSize) {\n    \t\t\t\ttry {\n    \t\t\t\t\tlock.wait();\n    \t\t\t\t} catch (InterruptedException e) {\n    \t\t\t\t\te.printStackTrace();\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t// 2.取第一个元素\n    \t\t\tret = queue.removeFirst();\n    \t\t\t// 3.计数器递减\n    \t\t\tcount.decrementAndGet();\n    \t\t\tSystem.out.println(StrUtil.format(\"移除的元素为：{}\", ret));\n    \t\t\t// 4.唤醒其他线程（若元素本来已满，有线程调用 put 方法，那么原本被阻塞的，需要在此时被唤醒）\n    \t\t\tlock.notify();\n    \t\t}\n\n    \t\treturn ret;\n    \t}\n\n    \tpublic int getSize() {\n    \t\treturn this.count.get();\n    \t}\n\n    }\n    ```\n2. 新建一个测试类 `MyQueueTest.java`，测试类中，我们初始化一个队列，并将元素填满，然后启动一个线程 `t1`，去插入数据，中间休眠2s，再去启动一个线程 `t2` 取数据。\n\n    ```java\n    import com.xiaoleilu.hutool.util.StrUtil;\n    \n    import java.util.concurrent.TimeUnit;\n    \n    public class MyQueueTest {\n    \tpublic static void main(String[] args) {\n    \t\tfinal MyQueue queue = new MyQueue(5);\n    \n    \t\tqueue.put(\"a\");\n    \t\tqueue.put(\"b\");\n    \t\tqueue.put(\"c\");\n    \t\tqueue.put(\"d\");\n    \t\tqueue.put(\"e\");\n    \n    \t\tSystem.out.println(StrUtil.format(\"当前队列的长度: {}\", queue.getSize()));\n    \t\tThread t1 = new Thread(() -> {\n    \t\t\tqueue.put(\"f\");\n    \t\t\tqueue.put(\"g\");\n    \t\t\tqueue.put(\"h\");\n    \t\t}, \"t1\");\n    ```\n\n\n    \t\tThread t2 = new Thread(() -> {\n    \t\t\tqueue.get();\n    \t\t\tqueue.get();\n    \t\t});\n    \n    \t\tt1.start();\n    \t\ttry {\n    \t\t\tTimeUnit.SECONDS.sleep(2);\n    \t\t} catch (InterruptedException e) {\n    \t\t\te.printStackTrace();\n    \t\t}\n    \t\tt2.start();\n    \t}\n    }\n    ```\n3. 启动测试类，查看运行结果。控制台如果应该出现的效果是，队列先初始化完成，然后休眠2s，接下来先取数据，再插入数据，则证明阻塞队列生效。下面是控制台运行的效果：\n    * 初始化队列\n      ![初始化队列](http://oriqjordg.bkt.clouddn.com/2017-08-02-15016611637131.jpg)\n    * 休眠2s后取队首元素，再插入队尾元素\n       ![取队首元素，插入队尾元素](http://oriqjordg.bkt.clouddn.com/2017-08-02-15016613283795.jpg)\n    * 此时我们会发现，程序还未停止，因为此时队列已满，但是线程 `t1` 还未插入 `h` 元素，因此线程被阻塞着，直至下次队列有空余空间才会被唤醒。\n4. 至此，一个自定义阻塞队列就已经实现了。\n5. 细心的朋友会发现，我打印的 log 里用到了一个 `StrUtil.format()` 方法，这个和 `slf4j` 的 log 用法一致，可以使用占位符。这个是用到了一个国产良心工具类，[hutool](http://www.hutool.cn/)，国产开源，需要大家的支持，觉得好用的话，期望可以去 [码云](https://github.com/looly/hutool) 或者 [github](http://git.oschina.net/loolly/hutool) 上给个 Star 吧！","slug":"customize-blocked-queue","published":1,"updated":"2019-01-21T09:22:04.559Z","layout":"post","photos":[],"link":"","_id":"cjr64il670013kds66mdg63fb","content":"<p>今天重温了下 java 多线程中的 <code>notify()</code> 方法以及 <code>wait()</code> 方法，一时兴起，决定通过这俩个方法，实现一个简易的自定义阻塞队列。<br><a id=\"more\"></a></p>\n<blockquote>\n<p>阻塞队列是什么，与普通队列的区别是什么？<br>阻塞队列与普通队列的区别在于，当队列是空的时，从队列中获取元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其他的线程往空的队列插入新的元素。同样，试图往已满的阻塞队列中添加新元素的线程同样也会被阻塞，直到其他的线程使队列重新变得空闲起来。</p>\n</blockquote>\n<ol>\n<li><p>新建一个 <code>MyQueue.java</code> 类</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xiaoleilu.hutool.util.StrUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 使用 notify() 和 wait() 实现自定义阻塞队列</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Yangkai.Shen</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.0</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017.08.02 at 11:51:14</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 1. 承载数据的容器</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> LinkedList&lt;Object&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;Object&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 2. 计数器，用于判定边界</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 3. 初始化一个对象，用于加锁</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object lock = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxSize;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 添加一个元素到队列中，如果队列元素已满，则调用此方法的线程被阻塞，直到存在多余空间了，再进行添加</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> obj 添加 obj 到队列尾部</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 1.没有多余空间，就阻塞线程</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (count.get() == <span class=\"keyword\">this</span>.maxSize) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tlock.wait();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2.添加元素</span></div><div class=\"line\">\t\t\tqueue.add(obj);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 3.计数器累加</span></div><div class=\"line\">\t\t\tcount.incrementAndGet();</div><div class=\"line\">\t\t\tSystem.out.println(StrUtil.format(<span class=\"string\">\"新加入的元素为：&#123;&#125;\"</span>, obj));</div><div class=\"line\">\t\t\t<span class=\"comment\">// 4.唤醒其他线程（若本来元素为空，有线程调用 get 方法，那么原本被阻塞的，需要在此时被唤醒）</span></div><div class=\"line\">\t\t\tlock.notify();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取一个元素，如果队列元素为空，则调用此方法的线程被阻塞，直到添加新元素了，再进行获取</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 返回队列的第一个元素</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tObject ret = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 1.没有元素，就阻塞线程</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (count.get() == <span class=\"keyword\">this</span>.minSize) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tlock.wait();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2.取第一个元素</span></div><div class=\"line\">\t\t\tret = queue.removeFirst();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 3.计数器递减</span></div><div class=\"line\">\t\t\tcount.decrementAndGet();</div><div class=\"line\">\t\t\tSystem.out.println(StrUtil.format(<span class=\"string\">\"移除的元素为：&#123;&#125;\"</span>, ret));</div><div class=\"line\">\t\t\t<span class=\"comment\">// 4.唤醒其他线程（若元素本来已满，有线程调用 put 方法，那么原本被阻塞的，需要在此时被唤醒）</span></div><div class=\"line\">\t\t\tlock.notify();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count.get();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个测试类 <code>MyQueueTest.java</code>，测试类中，我们初始化一个队列，并将元素填满，然后启动一个线程 <code>t1</code>，去插入数据，中间休眠2s，再去启动一个线程 <code>t2</code> 取数据。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> com.xiaoleilu.hutool.util.StrUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueueTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> MyQueue queue = <span class=\"keyword\">new</span> MyQueue(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"b\"</span>);</div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"c\"</span>);</div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"e\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(StrUtil.format(<span class=\"string\">\"当前队列的长度: &#123;&#125;\"</span>, queue.getSize()));</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">\t\t\tqueue.put(<span class=\"string\">\"f\"</span>);</div><div class=\"line\">\t\t\tqueue.put(<span class=\"string\">\"g\"</span>);</div><div class=\"line\">\t\t\tqueue.put(<span class=\"string\">\"h\"</span>);</div><div class=\"line\">\t\t&#125;, <span class=\"string\">\"t1\"</span>);</div></pre></td></tr></table></figure>\n<pre><code>    Thread t2 = new Thread(() -&gt; {\n        queue.get();\n        queue.get();\n    });\n\n    t1.start();\n    try {\n        TimeUnit.SECONDS.sleep(2);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    t2.start();\n}\n</code></pre><p> }<br> ```</p>\n</li>\n<li>启动测试类，查看运行结果。控制台如果应该出现的效果是，队列先初始化完成，然后休眠2s，接下来先取数据，再插入数据，则证明阻塞队列生效。下面是控制台运行的效果：<ul>\n<li>初始化队列<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-08-02-15016611637131.jpg\" alt=\"初始化队列\"></li>\n<li>休眠2s后取队首元素，再插入队尾元素<br> <img src=\"http://oriqjordg.bkt.clouddn.com/2017-08-02-15016613283795.jpg\" alt=\"取队首元素，插入队尾元素\"></li>\n<li>此时我们会发现，程序还未停止，因为此时队列已满，但是线程 <code>t1</code> 还未插入 <code>h</code> 元素，因此线程被阻塞着，直至下次队列有空余空间才会被唤醒。</li>\n</ul>\n</li>\n<li>至此，一个自定义阻塞队列就已经实现了。</li>\n<li>细心的朋友会发现，我打印的 log 里用到了一个 <code>StrUtil.format()</code> 方法，这个和 <code>slf4j</code> 的 log 用法一致，可以使用占位符。这个是用到了一个国产良心工具类，<a href=\"http://www.hutool.cn/\" target=\"_blank\" rel=\"external\">hutool</a>，国产开源，需要大家的支持，觉得好用的话，期望可以去 <a href=\"https://github.com/looly/hutool\" target=\"_blank\" rel=\"external\">码云</a> 或者 <a href=\"http://git.oschina.net/loolly/hutool\" target=\"_blank\" rel=\"external\">github</a> 上给个 Star 吧！</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>今天重温了下 java 多线程中的 <code>notify()</code> 方法以及 <code>wait()</code> 方法，一时兴起，决定通过这俩个方法，实现一个简易的自定义阻塞队列。<br>","more":"</p>\n<blockquote>\n<p>阻塞队列是什么，与普通队列的区别是什么？<br>阻塞队列与普通队列的区别在于，当队列是空的时，从队列中获取元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其他的线程往空的队列插入新的元素。同样，试图往已满的阻塞队列中添加新元素的线程同样也会被阻塞，直到其他的线程使队列重新变得空闲起来。</p>\n</blockquote>\n<ol>\n<li><p>新建一个 <code>MyQueue.java</code> 类</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xiaoleilu.hutool.util.StrUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 使用 notify() 和 wait() 实现自定义阻塞队列</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> Yangkai.Shen</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.0</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017.08.02 at 11:51:14</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 1. 承载数据的容器</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> LinkedList&lt;Object&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;Object&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 2. 计数器，用于判定边界</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> minSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 3. 初始化一个对象，用于加锁</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object lock = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxSize;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 添加一个元素到队列中，如果队列元素已满，则调用此方法的线程被阻塞，直到存在多余空间了，再进行添加</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> obj 添加 obj 到队列尾部</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 1.没有多余空间，就阻塞线程</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (count.get() == <span class=\"keyword\">this</span>.maxSize) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tlock.wait();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2.添加元素</span></div><div class=\"line\">\t\t\tqueue.add(obj);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 3.计数器累加</span></div><div class=\"line\">\t\t\tcount.incrementAndGet();</div><div class=\"line\">\t\t\tSystem.out.println(StrUtil.format(<span class=\"string\">\"新加入的元素为：&#123;&#125;\"</span>, obj));</div><div class=\"line\">\t\t\t<span class=\"comment\">// 4.唤醒其他线程（若本来元素为空，有线程调用 get 方法，那么原本被阻塞的，需要在此时被唤醒）</span></div><div class=\"line\">\t\t\tlock.notify();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取一个元素，如果队列元素为空，则调用此方法的线程被阻塞，直到添加新元素了，再进行获取</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 返回队列的第一个元素</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tObject ret = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 1.没有元素，就阻塞线程</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (count.get() == <span class=\"keyword\">this</span>.minSize) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\tlock.wait();</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 2.取第一个元素</span></div><div class=\"line\">\t\t\tret = queue.removeFirst();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 3.计数器递减</span></div><div class=\"line\">\t\t\tcount.decrementAndGet();</div><div class=\"line\">\t\t\tSystem.out.println(StrUtil.format(<span class=\"string\">\"移除的元素为：&#123;&#125;\"</span>, ret));</div><div class=\"line\">\t\t\t<span class=\"comment\">// 4.唤醒其他线程（若元素本来已满，有线程调用 put 方法，那么原本被阻塞的，需要在此时被唤醒）</span></div><div class=\"line\">\t\t\tlock.notify();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count.get();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个测试类 <code>MyQueueTest.java</code>，测试类中，我们初始化一个队列，并将元素填满，然后启动一个线程 <code>t1</code>，去插入数据，中间休眠2s，再去启动一个线程 <code>t2</code> 取数据。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> com.xiaoleilu.hutool.util.StrUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueueTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">final</span> MyQueue queue = <span class=\"keyword\">new</span> MyQueue(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"b\"</span>);</div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"c\"</span>);</div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"d\"</span>);</div><div class=\"line\">\t\tqueue.put(<span class=\"string\">\"e\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(StrUtil.format(<span class=\"string\">\"当前队列的长度: &#123;&#125;\"</span>, queue.getSize()));</div><div class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</div><div class=\"line\">\t\t\tqueue.put(<span class=\"string\">\"f\"</span>);</div><div class=\"line\">\t\t\tqueue.put(<span class=\"string\">\"g\"</span>);</div><div class=\"line\">\t\t\tqueue.put(<span class=\"string\">\"h\"</span>);</div><div class=\"line\">\t\t&#125;, <span class=\"string\">\"t1\"</span>);</div></pre></td></tr></table></figure>\n<pre><code>    Thread t2 = new Thread(() -&gt; {\n        queue.get();\n        queue.get();\n    });\n\n    t1.start();\n    try {\n        TimeUnit.SECONDS.sleep(2);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    t2.start();\n}\n</code></pre><p> }<br> ```</p>\n</li>\n<li>启动测试类，查看运行结果。控制台如果应该出现的效果是，队列先初始化完成，然后休眠2s，接下来先取数据，再插入数据，则证明阻塞队列生效。下面是控制台运行的效果：<ul>\n<li>初始化队列<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-08-02-15016611637131.jpg\" alt=\"初始化队列\"></li>\n<li>休眠2s后取队首元素，再插入队尾元素<br> <img src=\"http://oriqjordg.bkt.clouddn.com/2017-08-02-15016613283795.jpg\" alt=\"取队首元素，插入队尾元素\"></li>\n<li>此时我们会发现，程序还未停止，因为此时队列已满，但是线程 <code>t1</code> 还未插入 <code>h</code> 元素，因此线程被阻塞着，直至下次队列有空余空间才会被唤醒。</li>\n</ul>\n</li>\n<li>至此，一个自定义阻塞队列就已经实现了。</li>\n<li>细心的朋友会发现，我打印的 log 里用到了一个 <code>StrUtil.format()</code> 方法，这个和 <code>slf4j</code> 的 log 用法一致，可以使用占位符。这个是用到了一个国产良心工具类，<a href=\"http://www.hutool.cn/\" target=\"_blank\" rel=\"external\">hutool</a>，国产开源，需要大家的支持，觉得好用的话，期望可以去 <a href=\"https://github.com/looly/hutool\" target=\"_blank\" rel=\"external\">码云</a> 或者 <a href=\"http://git.oschina.net/loolly/hutool\" target=\"_blank\" rel=\"external\">github</a> 上给个 Star 吧！</li>\n</ol>"},{"title":"mysql启动报错问题","comments":1,"fancybox":true,"toc":false,"date":"2017-08-31T01:48:10.000Z","description":null,"top":null,"_content":"今天公司 windows 服务器 `MySQL` 数据库启动异常，记录下原因。\n<!--more-->\n\n### 问题重现\n执行 `net start mysql` 的时候出现如下错误：\n\n```bash\n系统出错\n发生系统错误 1067\n进程意外终止\n```\n\n### 排查问题\n查阅资料，普遍的解决方法是，`my.ini` 文件中需要存在 `basedir` 和 `datadir` 这两个配置\n\n但是我的 `my.ini` 原本就已经加入了这两个配置，仍然启动错误。\n\n排查原因，发现是 mysql 的 `3306` 端口被IEXPLORE.exe占用了\n![](http://oriqjordg.bkt.clouddn.com/2017-08-31-15041452096442.jpg)\n\n```bash\n# windows 下查看端口占用\nnetstat -aon|findstr \"3306\"\n# windows 下根据 id 查看对应程序\ntasklist|findstr \"2016\"\n```\n\n### 解决问题\n打开任务管理器， IEXPLORE.exe 的程序杀死，重新 `net start mysql` MySQL 就愉快的重新启动了。","source":"_posts/2017-08-31.mysql-start-error.md","raw":"---\ntitle: mysql启动报错问题\ncomments: true\nfancybox: true\ntoc: false\ndate: 2017-08-31 09:48:10\ntags:\n- mysql\ncategories:\n- 技术相关\n- mysql\ndescription:\npermalink: mysql-start-error\ntop:\n---\n今天公司 windows 服务器 `MySQL` 数据库启动异常，记录下原因。\n<!--more-->\n\n### 问题重现\n执行 `net start mysql` 的时候出现如下错误：\n\n```bash\n系统出错\n发生系统错误 1067\n进程意外终止\n```\n\n### 排查问题\n查阅资料，普遍的解决方法是，`my.ini` 文件中需要存在 `basedir` 和 `datadir` 这两个配置\n\n但是我的 `my.ini` 原本就已经加入了这两个配置，仍然启动错误。\n\n排查原因，发现是 mysql 的 `3306` 端口被IEXPLORE.exe占用了\n![](http://oriqjordg.bkt.clouddn.com/2017-08-31-15041452096442.jpg)\n\n```bash\n# windows 下查看端口占用\nnetstat -aon|findstr \"3306\"\n# windows 下根据 id 查看对应程序\ntasklist|findstr \"2016\"\n```\n\n### 解决问题\n打开任务管理器， IEXPLORE.exe 的程序杀死，重新 `net start mysql` MySQL 就愉快的重新启动了。","slug":"mysql-start-error","published":1,"updated":"2019-01-21T09:21:55.823Z","layout":"post","photos":[],"link":"","_id":"cjr64il690015kds6xn9clzf4","content":"<p>今天公司 windows 服务器 <code>MySQL</code> 数据库启动异常，记录下原因。<br><a id=\"more\"></a></p>\n<h3 id=\"问题重现\"><a href=\"#问题重现\" class=\"headerlink\" title=\"问题重现\"></a>问题重现</h3><p>执行 <code>net start mysql</code> 的时候出现如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">系统出错</div><div class=\"line\">发生系统错误 1067</div><div class=\"line\">进程意外终止</div></pre></td></tr></table></figure>\n<h3 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h3><p>查阅资料，普遍的解决方法是，<code>my.ini</code> 文件中需要存在 <code>basedir</code> 和 <code>datadir</code> 这两个配置</p>\n<p>但是我的 <code>my.ini</code> 原本就已经加入了这两个配置，仍然启动错误。</p>\n<p>排查原因，发现是 mysql 的 <code>3306</code> 端口被IEXPLORE.exe占用了<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-08-31-15041452096442.jpg\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># windows 下查看端口占用</span></div><div class=\"line\">netstat -aon|findstr <span class=\"string\">\"3306\"</span></div><div class=\"line\"><span class=\"comment\"># windows 下根据 id 查看对应程序</span></div><div class=\"line\">tasklist|findstr <span class=\"string\">\"2016\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p>打开任务管理器， IEXPLORE.exe 的程序杀死，重新 <code>net start mysql</code> MySQL 就愉快的重新启动了。</p>\n","site":{"data":{}},"excerpt":"<p>今天公司 windows 服务器 <code>MySQL</code> 数据库启动异常，记录下原因。<br>","more":"</p>\n<h3 id=\"问题重现\"><a href=\"#问题重现\" class=\"headerlink\" title=\"问题重现\"></a>问题重现</h3><p>执行 <code>net start mysql</code> 的时候出现如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">系统出错</div><div class=\"line\">发生系统错误 1067</div><div class=\"line\">进程意外终止</div></pre></td></tr></table></figure>\n<h3 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h3><p>查阅资料，普遍的解决方法是，<code>my.ini</code> 文件中需要存在 <code>basedir</code> 和 <code>datadir</code> 这两个配置</p>\n<p>但是我的 <code>my.ini</code> 原本就已经加入了这两个配置，仍然启动错误。</p>\n<p>排查原因，发现是 mysql 的 <code>3306</code> 端口被IEXPLORE.exe占用了<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-08-31-15041452096442.jpg\" alt=\"\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># windows 下查看端口占用</span></div><div class=\"line\">netstat -aon|findstr <span class=\"string\">\"3306\"</span></div><div class=\"line\"><span class=\"comment\"># windows 下根据 id 查看对应程序</span></div><div class=\"line\">tasklist|findstr <span class=\"string\">\"2016\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p>打开任务管理器， IEXPLORE.exe 的程序杀死，重新 <code>net start mysql</code> MySQL 就愉快的重新启动了。</p>"},{"title":"dubbo前置知识：dubbo-admin 的安装","comments":1,"fancybox":true,"toc":false,"date":"2017-11-08T07:37:14.000Z","description":null,"top":null,"_content":"> `dubbo-admin` 是 `dubbo` 官方提供的一个的管控台程序，可以对 `dubbo` 服务进行**监控**，还可以对其进行**权重分配**、**负载均衡策略**等的调优操作，简而言之，我们可以通过 `dubbo-admin`，对我们的 `dubbo` 服务进行服务治理及服务监控。\n\n<!--more-->                                           \n\n现在，我们开始安装及配置 `dubbo-admin`。\n\n1. 首先启动我们之前安装了 `zookeeper` 集群的三台 `Linux` 虚拟机，并将虚拟机的 `zookeeper` 集群启动起来。\n\n2. 前往 `GitHub` 的 [dubbo-ops 仓库](https://github.com/apache/incubator-dubbo-ops) 去 `clone` 最新的 dubbo 源码。\n\n   ```shell\n   # yangkai.shen @ localhost in ~/Documents/code/open [16:23:11]\n   $ git clone https://github.com/apache/incubator-dubbo-ops.git\n   ```\n\n3. 进入 `dubbo` 项目文件夹里的 `dubbo-admin` 文件夹中。\n\n   ```shell\n   # yangkai.shen @ localhost in ~/Documents/code/open [16:24:05] C:1\n   $ cd incubator-dubbo-ops\n   ```\n\n4. 使用 `maven` 编译打包项目，然后在 `dubbo/dubbo-admin/target` 目录中得到 `dubbo-admin` 的 `war` 包程序。\n\n   ```shell\n   # yangkai.shen @ localhost in ~/Documents/code/open/dubbo/dubbo-admin on git:master o [16:24:12]\n   $ mvn package\n   [INFO] Scanning for projects...\n\n   ...省略中间一些日志信息...\n\n   [INFO] ------------------------------------------------------------------------\n   [INFO] Reactor Summary:\n   [INFO]\n   [INFO] dubbo-ops .......................................... SUCCESS [  0.003 s]\n   [INFO] dubbo-admin ........................................ SUCCESS [  3.612 s]\n   [INFO] dubbo-monitor-simple ............................... SUCCESS [  2.491 s]\n   [INFO] dubbo-registry-simple .............................. SUCCESS [  0.699 s]\n   [INFO] ------------------------------------------------------------------------\n   [INFO] BUILD SUCCESS\n   [INFO] ------------------------------------------------------------------------\n   [INFO] Total time: 6.941 s\n   [INFO] Finished at: 2018-04-17T18:37:09+08:00\n   [INFO] Final Memory: 22M/301M\n   [INFO] ------------------------------------------------------------------------\n   ```\n\n5. 前往[ Apache 的 Tomcat 主页](https://tomcat.apache.org/download-90.cgi)，下载并解压一个新的 `Tomcat` 程序，专门用来启动 `dubbo-admin` 。\n\n6. 接下来我们开始对 `Tomcat` 以及 `dubbo-admin` 做一些配置。\n\n   1. 可以直接将打包出来的 war 文件放在 `webapps` 目录下，但是为了后面访问 URL 的时候更简单（*其实就是想偷懒*）可以将其放入 `ROOT` 下，删除 `webapps/ROOT` 目录下的所有文件，然后将 打包的 `dubbo-admin.war` 程序解压至 `webapps/ROOT` 目录下，注意不需要 dubbo-admin 这个目录，只要将里面的 WEB-INF 这级目录及其子目录的文件放置在 `webapps/ROOT` 中。\n\n   2. 配置 `dubbo-admin` 的一些启动配置，配置文件是 `WEB-INF/dubbo.properties` ，我们需要把之前的 `zookeeper` 集群地址配置上。\n\n      ```properties\n      # zookeeper 地址，这里是集群配置，如果 zookeeper 是 standalone 模式，那么则不需要 ?backup=*** 这部分内容\n      dubbo.registry.address=zookeeper://172.16.15.129:2181?backup=172.16.15.130:2181,172.16.15.131:2181\n\n      # dubbo-admin 程序 root 用户的密码\n      dubbo.admin.root.password=root\n\n      # dubbo-admin 程序 guest 用户的密码\n      dubbo.admin.guest.password=guest\n      ```\n\n   3. 因为考虑到我们自己写程序可能会占用`8080`端口，因此我们对这个专门为 `dubbo-admin` 的 `Tomcat` 重新配置端口，配置文件是 `tomcat/conf/server.xml`。\n      - 修改 **HTTP** 端口 \n        ```xml\n        <!--\n        <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n                       connectionTimeout=\"20000\"\n                       redirectPort=\"8443\" />\n        -->\n        <Connector port=\"7777\" protocol=\"HTTP/1.1\"\n                       connectionTimeout=\"20000\"\n                       redirectPort=\"8444\" />\n        ```\n      - 修改 **远程停服务** 端口 \n        ```xml\n        <!--\n        <Server port=\"8005\" shutdown=\"SHUTDOWN\">\n        -->\n        <Server port=\"8006\" shutdown=\"SHUTDOWN\">\n        ```\n      - 修改 **AJP** 端口\n        ```xml\n        <!--\n        <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8444\" /> \n        -->\n        <Connector port=\"8010\" protocol=\"AJP/1.3\" redirectPort=\"8444\" />  \n        ```\n\n   4. 因为 `dubbo-admin` 程序较大，因此需要对 `Tomcat` 做一些调优准备， 在 `tomcat/bin/catalina.sh` 文件中的第二行加入 `JAVA_OPTS='-Xms256m -Xmx512m'` ，如下所示。\n\n      ```sh\n      #!/bin/sh\n      JAVA_OPTS='-Xms256m -Xmx512m'\n      # 省略剩余内容\n      ```\n\n7. 配置、调优结束，我们就可以运行 `tomcat/bin/start.sh` 或者 `tomcat/bin/start.bat`，启动 `Tomcat` 查看效果了，因为现在只是搭建了 `dubbo-admin` 还没有 `dubbo` 服务，因此我们现在只浏览首页和一些系统页面。\n   - 浏览器输入 `http://localhost:7777` 弹出验证信息。\n     ![登录信息](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329196775.jpg)\n   - `dubbo-admin` 首页\n     ![首页](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329460942.jpg)\n   - 系统状态\n     ![系统状态](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329647345.jpg)\n   - 系统日志\n     ![系统日志](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329831583.jpg)\n   - 系统环境\n     ![系统环境](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329768536.jpg)","source":"_posts/2017-11-08.dubbo-admin-install.md","raw":"---\ntitle: dubbo前置知识：dubbo-admin 的安装\ncomments: true\nfancybox:  true\ntoc: false\ndate: 2017-11-08 15:37:14\ntags:\n- dubbo\ncategories:\n- 技术相关\n- java\ndescription:\npermalink: dubbo-admin-install\ntop:\n---\n> `dubbo-admin` 是 `dubbo` 官方提供的一个的管控台程序，可以对 `dubbo` 服务进行**监控**，还可以对其进行**权重分配**、**负载均衡策略**等的调优操作，简而言之，我们可以通过 `dubbo-admin`，对我们的 `dubbo` 服务进行服务治理及服务监控。\n\n<!--more-->                                           \n\n现在，我们开始安装及配置 `dubbo-admin`。\n\n1. 首先启动我们之前安装了 `zookeeper` 集群的三台 `Linux` 虚拟机，并将虚拟机的 `zookeeper` 集群启动起来。\n\n2. 前往 `GitHub` 的 [dubbo-ops 仓库](https://github.com/apache/incubator-dubbo-ops) 去 `clone` 最新的 dubbo 源码。\n\n   ```shell\n   # yangkai.shen @ localhost in ~/Documents/code/open [16:23:11]\n   $ git clone https://github.com/apache/incubator-dubbo-ops.git\n   ```\n\n3. 进入 `dubbo` 项目文件夹里的 `dubbo-admin` 文件夹中。\n\n   ```shell\n   # yangkai.shen @ localhost in ~/Documents/code/open [16:24:05] C:1\n   $ cd incubator-dubbo-ops\n   ```\n\n4. 使用 `maven` 编译打包项目，然后在 `dubbo/dubbo-admin/target` 目录中得到 `dubbo-admin` 的 `war` 包程序。\n\n   ```shell\n   # yangkai.shen @ localhost in ~/Documents/code/open/dubbo/dubbo-admin on git:master o [16:24:12]\n   $ mvn package\n   [INFO] Scanning for projects...\n\n   ...省略中间一些日志信息...\n\n   [INFO] ------------------------------------------------------------------------\n   [INFO] Reactor Summary:\n   [INFO]\n   [INFO] dubbo-ops .......................................... SUCCESS [  0.003 s]\n   [INFO] dubbo-admin ........................................ SUCCESS [  3.612 s]\n   [INFO] dubbo-monitor-simple ............................... SUCCESS [  2.491 s]\n   [INFO] dubbo-registry-simple .............................. SUCCESS [  0.699 s]\n   [INFO] ------------------------------------------------------------------------\n   [INFO] BUILD SUCCESS\n   [INFO] ------------------------------------------------------------------------\n   [INFO] Total time: 6.941 s\n   [INFO] Finished at: 2018-04-17T18:37:09+08:00\n   [INFO] Final Memory: 22M/301M\n   [INFO] ------------------------------------------------------------------------\n   ```\n\n5. 前往[ Apache 的 Tomcat 主页](https://tomcat.apache.org/download-90.cgi)，下载并解压一个新的 `Tomcat` 程序，专门用来启动 `dubbo-admin` 。\n\n6. 接下来我们开始对 `Tomcat` 以及 `dubbo-admin` 做一些配置。\n\n   1. 可以直接将打包出来的 war 文件放在 `webapps` 目录下，但是为了后面访问 URL 的时候更简单（*其实就是想偷懒*）可以将其放入 `ROOT` 下，删除 `webapps/ROOT` 目录下的所有文件，然后将 打包的 `dubbo-admin.war` 程序解压至 `webapps/ROOT` 目录下，注意不需要 dubbo-admin 这个目录，只要将里面的 WEB-INF 这级目录及其子目录的文件放置在 `webapps/ROOT` 中。\n\n   2. 配置 `dubbo-admin` 的一些启动配置，配置文件是 `WEB-INF/dubbo.properties` ，我们需要把之前的 `zookeeper` 集群地址配置上。\n\n      ```properties\n      # zookeeper 地址，这里是集群配置，如果 zookeeper 是 standalone 模式，那么则不需要 ?backup=*** 这部分内容\n      dubbo.registry.address=zookeeper://172.16.15.129:2181?backup=172.16.15.130:2181,172.16.15.131:2181\n\n      # dubbo-admin 程序 root 用户的密码\n      dubbo.admin.root.password=root\n\n      # dubbo-admin 程序 guest 用户的密码\n      dubbo.admin.guest.password=guest\n      ```\n\n   3. 因为考虑到我们自己写程序可能会占用`8080`端口，因此我们对这个专门为 `dubbo-admin` 的 `Tomcat` 重新配置端口，配置文件是 `tomcat/conf/server.xml`。\n      - 修改 **HTTP** 端口 \n        ```xml\n        <!--\n        <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n                       connectionTimeout=\"20000\"\n                       redirectPort=\"8443\" />\n        -->\n        <Connector port=\"7777\" protocol=\"HTTP/1.1\"\n                       connectionTimeout=\"20000\"\n                       redirectPort=\"8444\" />\n        ```\n      - 修改 **远程停服务** 端口 \n        ```xml\n        <!--\n        <Server port=\"8005\" shutdown=\"SHUTDOWN\">\n        -->\n        <Server port=\"8006\" shutdown=\"SHUTDOWN\">\n        ```\n      - 修改 **AJP** 端口\n        ```xml\n        <!--\n        <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8444\" /> \n        -->\n        <Connector port=\"8010\" protocol=\"AJP/1.3\" redirectPort=\"8444\" />  \n        ```\n\n   4. 因为 `dubbo-admin` 程序较大，因此需要对 `Tomcat` 做一些调优准备， 在 `tomcat/bin/catalina.sh` 文件中的第二行加入 `JAVA_OPTS='-Xms256m -Xmx512m'` ，如下所示。\n\n      ```sh\n      #!/bin/sh\n      JAVA_OPTS='-Xms256m -Xmx512m'\n      # 省略剩余内容\n      ```\n\n7. 配置、调优结束，我们就可以运行 `tomcat/bin/start.sh` 或者 `tomcat/bin/start.bat`，启动 `Tomcat` 查看效果了，因为现在只是搭建了 `dubbo-admin` 还没有 `dubbo` 服务，因此我们现在只浏览首页和一些系统页面。\n   - 浏览器输入 `http://localhost:7777` 弹出验证信息。\n     ![登录信息](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329196775.jpg)\n   - `dubbo-admin` 首页\n     ![首页](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329460942.jpg)\n   - 系统状态\n     ![系统状态](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329647345.jpg)\n   - 系统日志\n     ![系统日志](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329831583.jpg)\n   - 系统环境\n     ![系统环境](http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329768536.jpg)","slug":"dubbo-admin-install","published":1,"updated":"2018-04-17T10:39:33.952Z","layout":"post","photos":[],"link":"","_id":"cjr64il6b0018kds6rabswpn5","content":"<blockquote>\n<p><code>dubbo-admin</code> 是 <code>dubbo</code> 官方提供的一个的管控台程序，可以对 <code>dubbo</code> 服务进行<strong>监控</strong>，还可以对其进行<strong>权重分配</strong>、<strong>负载均衡策略</strong>等的调优操作，简而言之，我们可以通过 <code>dubbo-admin</code>，对我们的 <code>dubbo</code> 服务进行服务治理及服务监控。</p>\n</blockquote>\n<a id=\"more\"></a>                                           \n<p>现在，我们开始安装及配置 <code>dubbo-admin</code>。</p>\n<ol>\n<li><p>首先启动我们之前安装了 <code>zookeeper</code> 集群的三台 <code>Linux</code> 虚拟机，并将虚拟机的 <code>zookeeper</code> 集群启动起来。</p>\n</li>\n<li><p>前往 <code>GitHub</code> 的 <a href=\"https://github.com/apache/incubator-dubbo-ops\" target=\"_blank\" rel=\"external\">dubbo-ops 仓库</a> 去 <code>clone</code> 最新的 dubbo 源码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yangkai.shen @ localhost <span class=\"keyword\">in</span> ~/Documents/code/open [16:23:11]</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/apache/incubator-dubbo-ops.git</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>进入 <code>dubbo</code> 项目文件夹里的 <code>dubbo-admin</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yangkai.shen @ localhost <span class=\"keyword\">in</span> ~/Documents/code/open [16:24:05] C:1</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> incubator-dubbo-ops</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>maven</code> 编译打包项目，然后在 <code>dubbo/dubbo-admin/target</code> 目录中得到 <code>dubbo-admin</code> 的 <code>war</code> 包程序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yangkai.shen @ localhost <span class=\"keyword\">in</span> ~/Documents/code/open/dubbo/dubbo-admin on git:master o [16:24:12]</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mvn package</span></div><div class=\"line\">[INFO] Scanning for projects...</div><div class=\"line\"></div><div class=\"line\">...省略中间一些日志信息...</div><div class=\"line\"></div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] Reactor Summary:</div><div class=\"line\">[INFO]</div><div class=\"line\">[INFO] dubbo-ops .......................................... SUCCESS [  0.003 s]</div><div class=\"line\">[INFO] dubbo-admin ........................................ SUCCESS [  3.612 s]</div><div class=\"line\">[INFO] dubbo-monitor-simple ............................... SUCCESS [  2.491 s]</div><div class=\"line\">[INFO] dubbo-registry-simple .............................. SUCCESS [  0.699 s]</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] BUILD SUCCESS</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] Total time: 6.941 s</div><div class=\"line\">[INFO] Finished at: 2018-04-17T18:37:09+08:00</div><div class=\"line\">[INFO] Final Memory: 22M/301M</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure>\n</li>\n<li><p>前往<a href=\"https://tomcat.apache.org/download-90.cgi\" target=\"_blank\" rel=\"external\"> Apache 的 Tomcat 主页</a>，下载并解压一个新的 <code>Tomcat</code> 程序，专门用来启动 <code>dubbo-admin</code> 。</p>\n</li>\n<li><p>接下来我们开始对 <code>Tomcat</code> 以及 <code>dubbo-admin</code> 做一些配置。</p>\n<ol>\n<li><p>可以直接将打包出来的 war 文件放在 <code>webapps</code> 目录下，但是为了后面访问 URL 的时候更简单（<em>其实就是想偷懒</em>）可以将其放入 <code>ROOT</code> 下，删除 <code>webapps/ROOT</code> 目录下的所有文件，然后将 打包的 <code>dubbo-admin.war</code> 程序解压至 <code>webapps/ROOT</code> 目录下，注意不需要 dubbo-admin 这个目录，只要将里面的 WEB-INF 这级目录及其子目录的文件放置在 <code>webapps/ROOT</code> 中。</p>\n</li>\n<li><p>配置 <code>dubbo-admin</code> 的一些启动配置，配置文件是 <code>WEB-INF/dubbo.properties</code> ，我们需要把之前的 <code>zookeeper</code> 集群地址配置上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># zookeeper 地址，这里是集群配置，如果 zookeeper 是 standalone 模式，那么则不需要 ?backup=*** 这部分内容</div><div class=\"line\">dubbo.registry.address=zookeeper://172.16.15.129:2181?backup=172.16.15.130:2181,172.16.15.131:2181</div><div class=\"line\"></div><div class=\"line\"># dubbo-admin 程序 root 用户的密码</div><div class=\"line\">dubbo.admin.root.password=root</div><div class=\"line\"></div><div class=\"line\"># dubbo-admin 程序 guest 用户的密码</div><div class=\"line\">dubbo.admin.guest.password=guest</div></pre></td></tr></table></figure>\n</li>\n<li><p>因为考虑到我们自己写程序可能会占用<code>8080</code>端口，因此我们对这个专门为 <code>dubbo-admin</code> 的 <code>Tomcat</code> 重新配置端口，配置文件是 <code>tomcat/conf/server.xml</code>。</p>\n<ul>\n<li><p>修改 <strong>HTTP</strong> 端口 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\"</div><div class=\"line\">               connectionTimeout=\"20000\"</div><div class=\"line\">               redirectPort=\"8443\" /&gt;</div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"7777\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span></div><div class=\"line\">               <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></div><div class=\"line\">               <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8444\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <strong>远程停服务</strong> 端口 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">&lt;Server port=\"8005\" shutdown=\"SHUTDOWN\"&gt;</div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Server</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8006\"</span> <span class=\"attr\">shutdown</span>=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <strong>AJP</strong> 端口</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">&lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8444\" /&gt; </div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8010\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"AJP/1.3\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8444\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>因为 <code>dubbo-admin</code> 程序较大，因此需要对 <code>Tomcat</code> 做一些调优准备， 在 <code>tomcat/bin/catalina.sh</code> 文件中的第二行加入 <code>JAVA_OPTS=&#39;-Xms256m -Xmx512m&#39;</code> ，如下所示。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">JAVA_OPTS=<span class=\"string\">'-Xms256m -Xmx512m'</span></div><div class=\"line\"><span class=\"comment\"># 省略剩余内容</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>配置、调优结束，我们就可以运行 <code>tomcat/bin/start.sh</code> 或者 <code>tomcat/bin/start.bat</code>，启动 <code>Tomcat</code> 查看效果了，因为现在只是搭建了 <code>dubbo-admin</code> 还没有 <code>dubbo</code> 服务，因此我们现在只浏览首页和一些系统页面。</p>\n<ul>\n<li>浏览器输入 <code>http://localhost:7777</code> 弹出验证信息。<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329196775.jpg\" alt=\"登录信息\"></li>\n<li><code>dubbo-admin</code> 首页<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329460942.jpg\" alt=\"首页\"></li>\n<li>系统状态<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329647345.jpg\" alt=\"系统状态\"></li>\n<li>系统日志<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329831583.jpg\" alt=\"系统日志\"></li>\n<li>系统环境<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329768536.jpg\" alt=\"系统环境\"></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><code>dubbo-admin</code> 是 <code>dubbo</code> 官方提供的一个的管控台程序，可以对 <code>dubbo</code> 服务进行<strong>监控</strong>，还可以对其进行<strong>权重分配</strong>、<strong>负载均衡策略</strong>等的调优操作，简而言之，我们可以通过 <code>dubbo-admin</code>，对我们的 <code>dubbo</code> 服务进行服务治理及服务监控。</p>\n</blockquote>","more":"<p>现在，我们开始安装及配置 <code>dubbo-admin</code>。</p>\n<ol>\n<li><p>首先启动我们之前安装了 <code>zookeeper</code> 集群的三台 <code>Linux</code> 虚拟机，并将虚拟机的 <code>zookeeper</code> 集群启动起来。</p>\n</li>\n<li><p>前往 <code>GitHub</code> 的 <a href=\"https://github.com/apache/incubator-dubbo-ops\" target=\"_blank\" rel=\"external\">dubbo-ops 仓库</a> 去 <code>clone</code> 最新的 dubbo 源码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yangkai.shen @ localhost <span class=\"keyword\">in</span> ~/Documents/code/open [16:23:11]</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/apache/incubator-dubbo-ops.git</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>进入 <code>dubbo</code> 项目文件夹里的 <code>dubbo-admin</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yangkai.shen @ localhost <span class=\"keyword\">in</span> ~/Documents/code/open [16:24:05] C:1</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> incubator-dubbo-ops</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>maven</code> 编译打包项目，然后在 <code>dubbo/dubbo-admin/target</code> 目录中得到 <code>dubbo-admin</code> 的 <code>war</code> 包程序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yangkai.shen @ localhost <span class=\"keyword\">in</span> ~/Documents/code/open/dubbo/dubbo-admin on git:master o [16:24:12]</span></div><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mvn package</span></div><div class=\"line\">[INFO] Scanning for projects...</div><div class=\"line\"></div><div class=\"line\">...省略中间一些日志信息...</div><div class=\"line\"></div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] Reactor Summary:</div><div class=\"line\">[INFO]</div><div class=\"line\">[INFO] dubbo-ops .......................................... SUCCESS [  0.003 s]</div><div class=\"line\">[INFO] dubbo-admin ........................................ SUCCESS [  3.612 s]</div><div class=\"line\">[INFO] dubbo-monitor-simple ............................... SUCCESS [  2.491 s]</div><div class=\"line\">[INFO] dubbo-registry-simple .............................. SUCCESS [  0.699 s]</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] BUILD SUCCESS</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] Total time: 6.941 s</div><div class=\"line\">[INFO] Finished at: 2018-04-17T18:37:09+08:00</div><div class=\"line\">[INFO] Final Memory: 22M/301M</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure>\n</li>\n<li><p>前往<a href=\"https://tomcat.apache.org/download-90.cgi\" target=\"_blank\" rel=\"external\"> Apache 的 Tomcat 主页</a>，下载并解压一个新的 <code>Tomcat</code> 程序，专门用来启动 <code>dubbo-admin</code> 。</p>\n</li>\n<li><p>接下来我们开始对 <code>Tomcat</code> 以及 <code>dubbo-admin</code> 做一些配置。</p>\n<ol>\n<li><p>可以直接将打包出来的 war 文件放在 <code>webapps</code> 目录下，但是为了后面访问 URL 的时候更简单（<em>其实就是想偷懒</em>）可以将其放入 <code>ROOT</code> 下，删除 <code>webapps/ROOT</code> 目录下的所有文件，然后将 打包的 <code>dubbo-admin.war</code> 程序解压至 <code>webapps/ROOT</code> 目录下，注意不需要 dubbo-admin 这个目录，只要将里面的 WEB-INF 这级目录及其子目录的文件放置在 <code>webapps/ROOT</code> 中。</p>\n</li>\n<li><p>配置 <code>dubbo-admin</code> 的一些启动配置，配置文件是 <code>WEB-INF/dubbo.properties</code> ，我们需要把之前的 <code>zookeeper</code> 集群地址配置上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># zookeeper 地址，这里是集群配置，如果 zookeeper 是 standalone 模式，那么则不需要 ?backup=*** 这部分内容</div><div class=\"line\">dubbo.registry.address=zookeeper://172.16.15.129:2181?backup=172.16.15.130:2181,172.16.15.131:2181</div><div class=\"line\"></div><div class=\"line\"># dubbo-admin 程序 root 用户的密码</div><div class=\"line\">dubbo.admin.root.password=root</div><div class=\"line\"></div><div class=\"line\"># dubbo-admin 程序 guest 用户的密码</div><div class=\"line\">dubbo.admin.guest.password=guest</div></pre></td></tr></table></figure>\n</li>\n<li><p>因为考虑到我们自己写程序可能会占用<code>8080</code>端口，因此我们对这个专门为 <code>dubbo-admin</code> 的 <code>Tomcat</code> 重新配置端口，配置文件是 <code>tomcat/conf/server.xml</code>。</p>\n<ul>\n<li><p>修改 <strong>HTTP</strong> 端口 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\"</div><div class=\"line\">               connectionTimeout=\"20000\"</div><div class=\"line\">               redirectPort=\"8443\" /&gt;</div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"7777\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span></div><div class=\"line\">               <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></div><div class=\"line\">               <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8444\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <strong>远程停服务</strong> 端口 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">&lt;Server port=\"8005\" shutdown=\"SHUTDOWN\"&gt;</div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Server</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8006\"</span> <span class=\"attr\">shutdown</span>=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <strong>AJP</strong> 端口</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--</span></div><div class=\"line\">&lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8444\" /&gt; </div><div class=\"line\">--&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8010\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"AJP/1.3\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8444\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>因为 <code>dubbo-admin</code> 程序较大，因此需要对 <code>Tomcat</code> 做一些调优准备， 在 <code>tomcat/bin/catalina.sh</code> 文件中的第二行加入 <code>JAVA_OPTS=&#39;-Xms256m -Xmx512m&#39;</code> ，如下所示。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">JAVA_OPTS=<span class=\"string\">'-Xms256m -Xmx512m'</span></div><div class=\"line\"><span class=\"comment\"># 省略剩余内容</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>配置、调优结束，我们就可以运行 <code>tomcat/bin/start.sh</code> 或者 <code>tomcat/bin/start.bat</code>，启动 <code>Tomcat</code> 查看效果了，因为现在只是搭建了 <code>dubbo-admin</code> 还没有 <code>dubbo</code> 服务，因此我们现在只浏览首页和一些系统页面。</p>\n<ul>\n<li>浏览器输入 <code>http://localhost:7777</code> 弹出验证信息。<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329196775.jpg\" alt=\"登录信息\"></li>\n<li><code>dubbo-admin</code> 首页<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329460942.jpg\" alt=\"首页\"></li>\n<li>系统状态<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329647345.jpg\" alt=\"系统状态\"></li>\n<li>系统日志<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329831583.jpg\" alt=\"系统日志\"></li>\n<li>系统环境<br><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-08-15101329768536.jpg\" alt=\"系统环境\"></li>\n</ul>\n</li>\n</ol>"},{"title":"dubbo前置知识：zookeeper集群搭建","comments":1,"fancybox":true,"toc":false,"date":"2017-11-01T05:55:10.000Z","description":null,"top":null,"_content":"\n拖了一天一天又一天，终于在时隔3月之后，又迎来了一篇新博客。真的是懒癌晚期了。o(╯□╰)o\n\n> `dubbo` 框架需要将服务统一注册到一个注册中心，才能被远程调用。这里注册中心可以使用 `zookeeper` 或者 `redis`。\n\n这里我们以 `zookeeper` 为例。`zookeeper` 可以单机版也就是 standalone模式运行，也可以使用集群方式运行。为了实现高可用，本例采用集群方式部署，需要保证至少半数以上的机器存活，所以至少为3台机器。话不多说，让我们开始 `zookeeper` 集群的搭建吧：\n\n<!--more-->\n\n1. 官网下载 `zookeeper-3.4.10.tar.gz` ，将软件包分别放在三台 Linux 虚拟机的 `/software` 目录下。\n2. 进入 `software` 目录下，解压软件包。\n\n    ```Shell\n    [root@localhost ~]# cd /software                                                                                           \n    [root@localhost software]# tar -zxvf zookeeper-3.4.10.tar.gz\n    [root@localhost software]# ll                                                                                              \n    total 34228                                                                                                                \n    drwxr-xr-x. 10 1001 1001     4096 Mar 23  2017 zookeeper-3.4.10                                                            \n    -rw-r--r--.  1 root root 35042811 Nov  1 14:58 zookeeper-3.4.10.tar.gz\n    ```\n\n3. 解压后的文件夹名字包含了版本号，我们将其删除。\n\n    ```Shell                                                     \n    [root@localhost software]# mv zookeeper-3.4.10 zookeeper                                                                   \n    [root@localhost software]# ll                                                                                              \n    total 34228                                                                                                                \n    drwxr-xr-x. 10 1001 1001     4096 Mar 23  2017 zookeeper                                                                   \n    -rw-r--r--.  1 root root 35042811 Nov  1 14:58 zookeeper-3.4.10.tar.gz\n    ```\n\n4. 进入刚解压的 `zookeeper` 的目录中\n\n    ```Shell\n    [root@bogon software]# cd zookeeper/                                                                                       \n    [root@bogon zookeeper]# ll                                                                                                 \n    total 1580                                                                                                                 \n    drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 bin                                                                          \n    -rw-rw-r--.  1 1001 1001   84725 Mar 23  2017 build.xml                                                                    \n    drwxr-xr-x.  2 1001 1001      74 Mar 23  2017 conf                                                                         \n    drwxr-xr-x. 10 1001 1001    4096 Mar 23  2017 contrib                                                                      \n    drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 dist-maven                                                                   \n    drwxr-xr-x.  6 1001 1001    4096 Mar 23  2017 docs                                                                         \n    -rw-rw-r--.  1 1001 1001    1709 Mar 23  2017 ivysettings.xml                                                              \n    -rw-rw-r--.  1 1001 1001    5691 Mar 23  2017 ivy.xml                                                                      \n    drwxr-xr-x.  4 1001 1001    4096 Mar 23  2017 lib                                                                          \n    -rw-rw-r--.  1 1001 1001   11938 Mar 23  2017 LICENSE.txt                                                                  \n    -rw-rw-r--.  1 1001 1001    3132 Mar 23  2017 NOTICE.txt                                                                   \n    -rw-rw-r--.  1 1001 1001    1770 Mar 23  2017 README_packaging.txt                                                         \n    -rw-rw-r--.  1 1001 1001    1585 Mar 23  2017 README.txt                                                                   \n    drwxr-xr-x.  5 1001 1001      44 Mar 23  2017 recipes                                                                      \n    drwxr-xr-x.  8 1001 1001    4096 Mar 23  2017 src                                                                          \n    -rw-rw-r--.  1 1001 1001 1456729 Mar 23  2017 zookeeper-3.4.10.jar                                                         \n    -rw-rw-r--.  1 1001 1001     819 Mar 23  2017 zookeeper-3.4.10.jar.asc                                                     \n    -rw-rw-r--.  1 1001 1001      33 Mar 23  2017 zookeeper-3.4.10.jar.md5                                                     \n    -rw-rw-r--.  1 1001 1001      41 Mar 23  2017 zookeeper-3.4.10.jar.sha1\n    ```\n    解释一下，几个常见目录里的内容：\n    - `bin` 目录里存放的是一些可执行文件，基本以 `*.bat` 和 `*.sh` 结尾的文件。\n    - `conf` 目录里存放的是项目（软件）运行时的一些配置文件。\n    - `contrib` 目录存放的内容官方未提供的一些附加软件。\n    - `dist-maven` 目录存放的是 `zookeeper` 使用 `maven` 编译之后的源码和 jar文件\n    - `docs` 目录里存放的是一些文档\n    - `lib` 目录里存放的是依赖库\n    - `recipes` 目录下存放的是使用 `zookeeper` 实现的分布式锁、高并发、队列的一些方案\n    - `src` 目录里存放的是源码文件\n\n5. 在 `conf` 文件夹里对 `zookeeper` 进行配置，将示例配置文件复制并改名\n\n    ```Shell\n    [root@bogon software]# cd zookeeper/conf/                                                                                  \n    [root@bogon conf]# ll                                                                                                      \n    total 12                                                                                                                   \n    -rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl                                                                \n    -rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties                                                                 \n    -rw-rw-r--. 1 1001 1001  922 Mar 23  2017 zoo_sample.cfg\n    [root@bogon conf]# cp zoo_sample.cfg zoo.cfg                                                                               \n    [root@bogon conf]# ll                                                                                                      \n    total 16                                                                                                                   \n    -rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl                                                                \n    -rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties                                                                 \n    -rw-r--r--. 1 root root  922 Nov  2 14:40 zoo.cfg                                                                          \n    -rw-rw-r--. 1 1001 1001  922 Mar 23  2017 zoo_sample.cfg\n    [root@bogon conf]# vim zoo.cfg \n    ```\n    然后在 `zoo.cfg` 里加上一些配置\n    ```bash\n    tickTime=2000                                                                                                              \n    # The number of ticks that the initial                                                                                     \n    # synchronization phase can take                                                                                           \n    initLimit=10                                                                                                               \n    # The number of ticks that can pass between                                                                                \n    # sending a request and getting an acknowledgement                                                                         \n    syncLimit=5                                                                                                                \n    # the directory where the snapshot is stored.                                                                              \n    # do not use /tmp for storage, /tmp here is just                                                                           \n    # example sakes.                                                                                                           \n                                                                                                                               \n    ################ 修改的地方1 ################                                                                              \n    # dataDir=/tmp/zookeeper\n    # 将原先的 dataDir 注释，并修改成自定义的路径                                                                              \n    dataDir=/software/zookeeper/data                                                                                           \n\n    # the port at which the clients will connect                                                                               \n    clientPort=2181                                                                                                            \n    # the maximum number of client connections.                                                                                \n    # increase this if you need to handle more clients                                                                         \n    #maxClientCnxns=60                                                                                                         \n    #                                                                                                                          \n    # Be sure to read the maintenance section of the                                                                           \n    # administrator guide before turning on autopurge.                                                                         \n    #                                                                                                                          \n    # http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance                                               \n    #                                                                                                                          \n    # The number of snapshots to retain in dataDir                                                                             \n    #autopurge.snapRetainCount=3                                                                                               \n    # Purge task interval in hours                                                                                             \n    # Set to \"0\" to disable auto purge feature                                                                                 \n    #autopurge.purgeInterval=1                                                                                                 \n                                                                                                                               \n    ################ 修改的地方2 ################                                                                              \n    # 在文件的末尾加上                                                                                                         \n    server.0=172.16.15.129:2888:3888                                                                                           \n    server.1=172.16.15.130:2888:3888                                                                                           \n    server.2=172.16.15.131:2888:3888\n    ```\n\n6. 新建配置文件中的 `dataDir` 配置的目录\n\n    ```Shell\n    [root@bogon conf]# cd ../                                                                                                  \n    [root@bogon zookeeper]# mkdir data                                                                                         \n    [root@bogon zookeeper]# ll                                                                                                 \n    total 1580                                                                                                                 \n    drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 bin                                                                          \n    -rw-rw-r--.  1 1001 1001   84725 Mar 23  2017 build.xml                                                                    \n    drwxr-xr-x.  2 1001 1001      88 Nov  2 14:57 conf                                                                         \n    drwxr-xr-x. 10 1001 1001    4096 Mar 23  2017 contrib                                                                      \n    drwxr-xr-x.  2 root root       6 Nov  2 14:58 data                                                                         \n    drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 dist-maven                                                                   \n    drwxr-xr-x.  6 1001 1001    4096 Mar 23  2017 docs                                                                         \n    -rw-rw-r--.  1 1001 1001    1709 Mar 23  2017 ivysettings.xml                                                              \n    -rw-rw-r--.  1 1001 1001    5691 Mar 23  2017 ivy.xml                                                                      \n    drwxr-xr-x.  4 1001 1001    4096 Mar 23  2017 lib                                                                          \n    -rw-rw-r--.  1 1001 1001   11938 Mar 23  2017 LICENSE.txt                                                                  \n    -rw-rw-r--.  1 1001 1001    3132 Mar 23  2017 NOTICE.txt                                                                   \n    -rw-rw-r--.  1 1001 1001    1770 Mar 23  2017 README_packaging.txt                                                         \n    -rw-rw-r--.  1 1001 1001    1585 Mar 23  2017 README.txt                                                                   \n    drwxr-xr-x.  5 1001 1001      44 Mar 23  2017 recipes                                                                      \n    drwxr-xr-x.  8 1001 1001    4096 Mar 23  2017 src                                                                          \n    -rw-rw-r--.  1 1001 1001 1456729 Mar 23  2017 zookeeper-3.4.10.jar                                                         \n    -rw-rw-r--.  1 1001 1001     819 Mar 23  2017 zookeeper-3.4.10.jar.asc                                                     \n    -rw-rw-r--.  1 1001 1001      33 Mar 23  2017 zookeeper-3.4.10.jar.md5                                                     \n    -rw-rw-r--.  1 1001 1001      41 Mar 23  2017 zookeeper-3.4.10.jar.sha1\n    ```\n    在 `data` 目录中新建一个 `myid` 文件，这个文件中的内容存放配置文件中对应 IP 的 `serverId`。\n    ```Shell\n    [root@bogon zookeeper]# cd data                                                                                            \n    [root@bogon data]# vim myid\n    [root@bogon data]# cat myid                                                                                                \n    0\n    ```\n7. 将 `zookeeper` 的目录配置在 Linux 系统的环境变量中\n\n    ```Shell\n    [root@bogon data]# vim /etc/profile\n    ```\n    在文件末尾添加\n    ```bash\n    export ZOOKEEPER_HOME=/software/zookeeper\n    export PATH=$ZOOKEEPER_HOME/bin:$PATH\n    ```\n    然后让环境变量生效\n    ```Shell\n    [root@bogon data]# source /etc/profile\n    ```\n\n8. 将另外两台虚拟机也按照 `2-7` 的步骤配置，注意第6步的 `myid` 文件里存放的内容，应该与 `zoo.cfg` 配置文件末尾的 `server.n=ip:2888:3888` 的 `n` 对应\n9. 配置完环境变量之后，我们就可以不需要到 `bin` 目录下，直接在任意目录下执行 zookeeper 中 bin 目录下的文件了。\n    - `zkServer.sh status` ：查看 `zookeeper` 的状态\n    - `zkServer.sh start` ：启动 `zookeeper`\n    - `zkServer.sh stop` ：关闭 `zookeeper`\n\n10. 分别查看各个虚拟机的启动情况，以及启动后的状态。\n\n   虚拟机1：(follower)\n   ```Shell\n   [root@bogon software]# zkServer.sh status                                                                                  \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Error contacting service. It is probably not running.                                                                      \n   [root@bogon software]# zkServer.sh start                                                                                   \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Starting zookeeper ... STARTED                                                                                             \n   [root@bogon software]# zkServer.sh status                                                                                  \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Mode: follower\n   ```\n   虚拟机2：(leader)\n   ```Shell\n   [root@bogon ~]# zkServer.sh status                                                                                         \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Error contacting service. It is probably not running.                                                                      \n   [root@bogon ~]# zkServer.sh start                                                                                          \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Starting zookeeper ... STARTED                                                                                             \n   [root@bogon ~]# zkServer.sh status                                                                                         \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Mode: leader \n   ```\n   虚拟机3：(follower)\n   ```Shell\n   [root@bogon ~]# zkServer.sh status                                                                                         \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Error contacting service. It is probably not running.                                                                      \n   [root@bogon ~]# zkServer.sh start                                                                                          \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Starting zookeeper ... STARTED                                                                                             \n   [root@bogon ~]# zkServer.sh status                                                                                         \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Mode: follower \n   ```\n11. 至此，`zookeeper` 集群的简单搭建已经正式结束了。当然还有一些个性化（调优）的配置参数，请自行参照 `zookeeper` 的[官方文档](http://zookeeper.apache.org/doc/r3.4.10/zookeeperStarted.html) 在 `zoo.cfg` 中配置。","source":"_posts/2017-11-01.zookeeper-cluster.md","raw":"---\ntitle: dubbo前置知识：zookeeper集群搭建\ncomments: true\nfancybox: true\ntoc: false\ndate: 2017-11-01 13:55:10\ntags:\n- zookeeper\n- dubbo\n- linux\ncategories:\n- 技术相关\n- java\ndescription:\npermalink: zookeeper-cluster\ntop:\n---\n\n拖了一天一天又一天，终于在时隔3月之后，又迎来了一篇新博客。真的是懒癌晚期了。o(╯□╰)o\n\n> `dubbo` 框架需要将服务统一注册到一个注册中心，才能被远程调用。这里注册中心可以使用 `zookeeper` 或者 `redis`。\n\n这里我们以 `zookeeper` 为例。`zookeeper` 可以单机版也就是 standalone模式运行，也可以使用集群方式运行。为了实现高可用，本例采用集群方式部署，需要保证至少半数以上的机器存活，所以至少为3台机器。话不多说，让我们开始 `zookeeper` 集群的搭建吧：\n\n<!--more-->\n\n1. 官网下载 `zookeeper-3.4.10.tar.gz` ，将软件包分别放在三台 Linux 虚拟机的 `/software` 目录下。\n2. 进入 `software` 目录下，解压软件包。\n\n    ```Shell\n    [root@localhost ~]# cd /software                                                                                           \n    [root@localhost software]# tar -zxvf zookeeper-3.4.10.tar.gz\n    [root@localhost software]# ll                                                                                              \n    total 34228                                                                                                                \n    drwxr-xr-x. 10 1001 1001     4096 Mar 23  2017 zookeeper-3.4.10                                                            \n    -rw-r--r--.  1 root root 35042811 Nov  1 14:58 zookeeper-3.4.10.tar.gz\n    ```\n\n3. 解压后的文件夹名字包含了版本号，我们将其删除。\n\n    ```Shell                                                     \n    [root@localhost software]# mv zookeeper-3.4.10 zookeeper                                                                   \n    [root@localhost software]# ll                                                                                              \n    total 34228                                                                                                                \n    drwxr-xr-x. 10 1001 1001     4096 Mar 23  2017 zookeeper                                                                   \n    -rw-r--r--.  1 root root 35042811 Nov  1 14:58 zookeeper-3.4.10.tar.gz\n    ```\n\n4. 进入刚解压的 `zookeeper` 的目录中\n\n    ```Shell\n    [root@bogon software]# cd zookeeper/                                                                                       \n    [root@bogon zookeeper]# ll                                                                                                 \n    total 1580                                                                                                                 \n    drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 bin                                                                          \n    -rw-rw-r--.  1 1001 1001   84725 Mar 23  2017 build.xml                                                                    \n    drwxr-xr-x.  2 1001 1001      74 Mar 23  2017 conf                                                                         \n    drwxr-xr-x. 10 1001 1001    4096 Mar 23  2017 contrib                                                                      \n    drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 dist-maven                                                                   \n    drwxr-xr-x.  6 1001 1001    4096 Mar 23  2017 docs                                                                         \n    -rw-rw-r--.  1 1001 1001    1709 Mar 23  2017 ivysettings.xml                                                              \n    -rw-rw-r--.  1 1001 1001    5691 Mar 23  2017 ivy.xml                                                                      \n    drwxr-xr-x.  4 1001 1001    4096 Mar 23  2017 lib                                                                          \n    -rw-rw-r--.  1 1001 1001   11938 Mar 23  2017 LICENSE.txt                                                                  \n    -rw-rw-r--.  1 1001 1001    3132 Mar 23  2017 NOTICE.txt                                                                   \n    -rw-rw-r--.  1 1001 1001    1770 Mar 23  2017 README_packaging.txt                                                         \n    -rw-rw-r--.  1 1001 1001    1585 Mar 23  2017 README.txt                                                                   \n    drwxr-xr-x.  5 1001 1001      44 Mar 23  2017 recipes                                                                      \n    drwxr-xr-x.  8 1001 1001    4096 Mar 23  2017 src                                                                          \n    -rw-rw-r--.  1 1001 1001 1456729 Mar 23  2017 zookeeper-3.4.10.jar                                                         \n    -rw-rw-r--.  1 1001 1001     819 Mar 23  2017 zookeeper-3.4.10.jar.asc                                                     \n    -rw-rw-r--.  1 1001 1001      33 Mar 23  2017 zookeeper-3.4.10.jar.md5                                                     \n    -rw-rw-r--.  1 1001 1001      41 Mar 23  2017 zookeeper-3.4.10.jar.sha1\n    ```\n    解释一下，几个常见目录里的内容：\n    - `bin` 目录里存放的是一些可执行文件，基本以 `*.bat` 和 `*.sh` 结尾的文件。\n    - `conf` 目录里存放的是项目（软件）运行时的一些配置文件。\n    - `contrib` 目录存放的内容官方未提供的一些附加软件。\n    - `dist-maven` 目录存放的是 `zookeeper` 使用 `maven` 编译之后的源码和 jar文件\n    - `docs` 目录里存放的是一些文档\n    - `lib` 目录里存放的是依赖库\n    - `recipes` 目录下存放的是使用 `zookeeper` 实现的分布式锁、高并发、队列的一些方案\n    - `src` 目录里存放的是源码文件\n\n5. 在 `conf` 文件夹里对 `zookeeper` 进行配置，将示例配置文件复制并改名\n\n    ```Shell\n    [root@bogon software]# cd zookeeper/conf/                                                                                  \n    [root@bogon conf]# ll                                                                                                      \n    total 12                                                                                                                   \n    -rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl                                                                \n    -rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties                                                                 \n    -rw-rw-r--. 1 1001 1001  922 Mar 23  2017 zoo_sample.cfg\n    [root@bogon conf]# cp zoo_sample.cfg zoo.cfg                                                                               \n    [root@bogon conf]# ll                                                                                                      \n    total 16                                                                                                                   \n    -rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl                                                                \n    -rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties                                                                 \n    -rw-r--r--. 1 root root  922 Nov  2 14:40 zoo.cfg                                                                          \n    -rw-rw-r--. 1 1001 1001  922 Mar 23  2017 zoo_sample.cfg\n    [root@bogon conf]# vim zoo.cfg \n    ```\n    然后在 `zoo.cfg` 里加上一些配置\n    ```bash\n    tickTime=2000                                                                                                              \n    # The number of ticks that the initial                                                                                     \n    # synchronization phase can take                                                                                           \n    initLimit=10                                                                                                               \n    # The number of ticks that can pass between                                                                                \n    # sending a request and getting an acknowledgement                                                                         \n    syncLimit=5                                                                                                                \n    # the directory where the snapshot is stored.                                                                              \n    # do not use /tmp for storage, /tmp here is just                                                                           \n    # example sakes.                                                                                                           \n                                                                                                                               \n    ################ 修改的地方1 ################                                                                              \n    # dataDir=/tmp/zookeeper\n    # 将原先的 dataDir 注释，并修改成自定义的路径                                                                              \n    dataDir=/software/zookeeper/data                                                                                           \n\n    # the port at which the clients will connect                                                                               \n    clientPort=2181                                                                                                            \n    # the maximum number of client connections.                                                                                \n    # increase this if you need to handle more clients                                                                         \n    #maxClientCnxns=60                                                                                                         \n    #                                                                                                                          \n    # Be sure to read the maintenance section of the                                                                           \n    # administrator guide before turning on autopurge.                                                                         \n    #                                                                                                                          \n    # http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance                                               \n    #                                                                                                                          \n    # The number of snapshots to retain in dataDir                                                                             \n    #autopurge.snapRetainCount=3                                                                                               \n    # Purge task interval in hours                                                                                             \n    # Set to \"0\" to disable auto purge feature                                                                                 \n    #autopurge.purgeInterval=1                                                                                                 \n                                                                                                                               \n    ################ 修改的地方2 ################                                                                              \n    # 在文件的末尾加上                                                                                                         \n    server.0=172.16.15.129:2888:3888                                                                                           \n    server.1=172.16.15.130:2888:3888                                                                                           \n    server.2=172.16.15.131:2888:3888\n    ```\n\n6. 新建配置文件中的 `dataDir` 配置的目录\n\n    ```Shell\n    [root@bogon conf]# cd ../                                                                                                  \n    [root@bogon zookeeper]# mkdir data                                                                                         \n    [root@bogon zookeeper]# ll                                                                                                 \n    total 1580                                                                                                                 \n    drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 bin                                                                          \n    -rw-rw-r--.  1 1001 1001   84725 Mar 23  2017 build.xml                                                                    \n    drwxr-xr-x.  2 1001 1001      88 Nov  2 14:57 conf                                                                         \n    drwxr-xr-x. 10 1001 1001    4096 Mar 23  2017 contrib                                                                      \n    drwxr-xr-x.  2 root root       6 Nov  2 14:58 data                                                                         \n    drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 dist-maven                                                                   \n    drwxr-xr-x.  6 1001 1001    4096 Mar 23  2017 docs                                                                         \n    -rw-rw-r--.  1 1001 1001    1709 Mar 23  2017 ivysettings.xml                                                              \n    -rw-rw-r--.  1 1001 1001    5691 Mar 23  2017 ivy.xml                                                                      \n    drwxr-xr-x.  4 1001 1001    4096 Mar 23  2017 lib                                                                          \n    -rw-rw-r--.  1 1001 1001   11938 Mar 23  2017 LICENSE.txt                                                                  \n    -rw-rw-r--.  1 1001 1001    3132 Mar 23  2017 NOTICE.txt                                                                   \n    -rw-rw-r--.  1 1001 1001    1770 Mar 23  2017 README_packaging.txt                                                         \n    -rw-rw-r--.  1 1001 1001    1585 Mar 23  2017 README.txt                                                                   \n    drwxr-xr-x.  5 1001 1001      44 Mar 23  2017 recipes                                                                      \n    drwxr-xr-x.  8 1001 1001    4096 Mar 23  2017 src                                                                          \n    -rw-rw-r--.  1 1001 1001 1456729 Mar 23  2017 zookeeper-3.4.10.jar                                                         \n    -rw-rw-r--.  1 1001 1001     819 Mar 23  2017 zookeeper-3.4.10.jar.asc                                                     \n    -rw-rw-r--.  1 1001 1001      33 Mar 23  2017 zookeeper-3.4.10.jar.md5                                                     \n    -rw-rw-r--.  1 1001 1001      41 Mar 23  2017 zookeeper-3.4.10.jar.sha1\n    ```\n    在 `data` 目录中新建一个 `myid` 文件，这个文件中的内容存放配置文件中对应 IP 的 `serverId`。\n    ```Shell\n    [root@bogon zookeeper]# cd data                                                                                            \n    [root@bogon data]# vim myid\n    [root@bogon data]# cat myid                                                                                                \n    0\n    ```\n7. 将 `zookeeper` 的目录配置在 Linux 系统的环境变量中\n\n    ```Shell\n    [root@bogon data]# vim /etc/profile\n    ```\n    在文件末尾添加\n    ```bash\n    export ZOOKEEPER_HOME=/software/zookeeper\n    export PATH=$ZOOKEEPER_HOME/bin:$PATH\n    ```\n    然后让环境变量生效\n    ```Shell\n    [root@bogon data]# source /etc/profile\n    ```\n\n8. 将另外两台虚拟机也按照 `2-7` 的步骤配置，注意第6步的 `myid` 文件里存放的内容，应该与 `zoo.cfg` 配置文件末尾的 `server.n=ip:2888:3888` 的 `n` 对应\n9. 配置完环境变量之后，我们就可以不需要到 `bin` 目录下，直接在任意目录下执行 zookeeper 中 bin 目录下的文件了。\n    - `zkServer.sh status` ：查看 `zookeeper` 的状态\n    - `zkServer.sh start` ：启动 `zookeeper`\n    - `zkServer.sh stop` ：关闭 `zookeeper`\n\n10. 分别查看各个虚拟机的启动情况，以及启动后的状态。\n\n   虚拟机1：(follower)\n   ```Shell\n   [root@bogon software]# zkServer.sh status                                                                                  \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Error contacting service. It is probably not running.                                                                      \n   [root@bogon software]# zkServer.sh start                                                                                   \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Starting zookeeper ... STARTED                                                                                             \n   [root@bogon software]# zkServer.sh status                                                                                  \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Mode: follower\n   ```\n   虚拟机2：(leader)\n   ```Shell\n   [root@bogon ~]# zkServer.sh status                                                                                         \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Error contacting service. It is probably not running.                                                                      \n   [root@bogon ~]# zkServer.sh start                                                                                          \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Starting zookeeper ... STARTED                                                                                             \n   [root@bogon ~]# zkServer.sh status                                                                                         \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Mode: leader \n   ```\n   虚拟机3：(follower)\n   ```Shell\n   [root@bogon ~]# zkServer.sh status                                                                                         \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Error contacting service. It is probably not running.                                                                      \n   [root@bogon ~]# zkServer.sh start                                                                                          \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Starting zookeeper ... STARTED                                                                                             \n   [root@bogon ~]# zkServer.sh status                                                                                         \n   ZooKeeper JMX enabled by default                                                                                           \n   Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      \n   Mode: follower \n   ```\n11. 至此，`zookeeper` 集群的简单搭建已经正式结束了。当然还有一些个性化（调优）的配置参数，请自行参照 `zookeeper` 的[官方文档](http://zookeeper.apache.org/doc/r3.4.10/zookeeperStarted.html) 在 `zoo.cfg` 中配置。","slug":"zookeeper-cluster","published":1,"updated":"2019-01-21T09:21:50.025Z","layout":"post","photos":[],"link":"","_id":"cjr64il6c001akds68iyjbdqu","content":"<p>拖了一天一天又一天，终于在时隔3月之后，又迎来了一篇新博客。真的是懒癌晚期了。o(╯□╰)o</p>\n<blockquote>\n<p><code>dubbo</code> 框架需要将服务统一注册到一个注册中心，才能被远程调用。这里注册中心可以使用 <code>zookeeper</code> 或者 <code>redis</code>。</p>\n</blockquote>\n<p>这里我们以 <code>zookeeper</code> 为例。<code>zookeeper</code> 可以单机版也就是 standalone模式运行，也可以使用集群方式运行。为了实现高可用，本例采用集群方式部署，需要保证至少半数以上的机器存活，所以至少为3台机器。话不多说，让我们开始 <code>zookeeper</code> 集群的搭建吧：</p>\n<a id=\"more\"></a>\n<ol>\n<li>官网下载 <code>zookeeper-3.4.10.tar.gz</code> ，将软件包分别放在三台 Linux 虚拟机的 <code>/software</code> 目录下。</li>\n<li><p>进入 <code>software</code> 目录下，解压软件包。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# cd /software                                                                                           </div><div class=\"line\">[root@localhost software]# tar -zxvf zookeeper-3.4.10.tar.gz</div><div class=\"line\">[root@localhost software]# ll                                                                                              </div><div class=\"line\">total 34228                                                                                                                </div><div class=\"line\">drwxr-xr-x. 10 1001 1001     4096 Mar 23  2017 zookeeper-3.4.10                                                            </div><div class=\"line\">-rw-r--r--.  1 root root 35042811 Nov  1 14:58 zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>解压后的文件夹名字包含了版本号，我们将其删除。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost software]# mv zookeeper-3.4.10 zookeeper                                                                   </div><div class=\"line\">[root@localhost software]# ll                                                                                              </div><div class=\"line\">total 34228                                                                                                                </div><div class=\"line\">drwxr-xr-x. 10 1001 1001     4096 Mar 23  2017 zookeeper                                                                   </div><div class=\"line\">-rw-r--r--.  1 root root 35042811 Nov  1 14:58 zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>进入刚解压的 <code>zookeeper</code> 的目录中</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon software]# cd zookeeper/                                                                                       </div><div class=\"line\">[root@bogon zookeeper]# ll                                                                                                 </div><div class=\"line\">total 1580                                                                                                                 </div><div class=\"line\">drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 bin                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001   84725 Mar 23  2017 build.xml                                                                    </div><div class=\"line\">drwxr-xr-x.  2 1001 1001      74 Mar 23  2017 conf                                                                         </div><div class=\"line\">drwxr-xr-x. 10 1001 1001    4096 Mar 23  2017 contrib                                                                      </div><div class=\"line\">drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 dist-maven                                                                   </div><div class=\"line\">drwxr-xr-x.  6 1001 1001    4096 Mar 23  2017 docs                                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1709 Mar 23  2017 ivysettings.xml                                                              </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    5691 Mar 23  2017 ivy.xml                                                                      </div><div class=\"line\">drwxr-xr-x.  4 1001 1001    4096 Mar 23  2017 lib                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001   11938 Mar 23  2017 LICENSE.txt                                                                  </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    3132 Mar 23  2017 NOTICE.txt                                                                   </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1770 Mar 23  2017 README_packaging.txt                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1585 Mar 23  2017 README.txt                                                                   </div><div class=\"line\">drwxr-xr-x.  5 1001 1001      44 Mar 23  2017 recipes                                                                      </div><div class=\"line\">drwxr-xr-x.  8 1001 1001    4096 Mar 23  2017 src                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001 1456729 Mar 23  2017 zookeeper-3.4.10.jar                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001     819 Mar 23  2017 zookeeper-3.4.10.jar.asc                                                     </div><div class=\"line\">-rw-rw-r--.  1 1001 1001      33 Mar 23  2017 zookeeper-3.4.10.jar.md5                                                     </div><div class=\"line\">-rw-rw-r--.  1 1001 1001      41 Mar 23  2017 zookeeper-3.4.10.jar.sha1</div></pre></td></tr></table></figure>\n<p> 解释一下，几个常见目录里的内容：</p>\n<ul>\n<li><code>bin</code> 目录里存放的是一些可执行文件，基本以 <code>*.bat</code> 和 <code>*.sh</code> 结尾的文件。</li>\n<li><code>conf</code> 目录里存放的是项目（软件）运行时的一些配置文件。</li>\n<li><code>contrib</code> 目录存放的内容官方未提供的一些附加软件。</li>\n<li><code>dist-maven</code> 目录存放的是 <code>zookeeper</code> 使用 <code>maven</code> 编译之后的源码和 jar文件</li>\n<li><code>docs</code> 目录里存放的是一些文档</li>\n<li><code>lib</code> 目录里存放的是依赖库</li>\n<li><code>recipes</code> 目录下存放的是使用 <code>zookeeper</code> 实现的分布式锁、高并发、队列的一些方案</li>\n<li><code>src</code> 目录里存放的是源码文件</li>\n</ul>\n</li>\n<li><p>在 <code>conf</code> 文件夹里对 <code>zookeeper</code> 进行配置，将示例配置文件复制并改名</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon software]# cd zookeeper/conf/                                                                                  </div><div class=\"line\">[root@bogon conf]# ll                                                                                                      </div><div class=\"line\">total 12                                                                                                                   </div><div class=\"line\">-rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl                                                                </div><div class=\"line\">-rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties                                                                 </div><div class=\"line\">-rw-rw-r--. 1 1001 1001  922 Mar 23  2017 zoo_sample.cfg</div><div class=\"line\">[root@bogon conf]# cp zoo_sample.cfg zoo.cfg                                                                               </div><div class=\"line\">[root@bogon conf]# ll                                                                                                      </div><div class=\"line\">total 16                                                                                                                   </div><div class=\"line\">-rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl                                                                </div><div class=\"line\">-rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties                                                                 </div><div class=\"line\">-rw-r--r--. 1 root root  922 Nov  2 14:40 zoo.cfg                                                                          </div><div class=\"line\">-rw-rw-r--. 1 1001 1001  922 Mar 23  2017 zoo_sample.cfg</div><div class=\"line\">[root@bogon conf]# vim zoo.cfg</div></pre></td></tr></table></figure>\n<p> 然后在 <code>zoo.cfg</code> 里加上一些配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">tickTime=2000                                                                                                              </div><div class=\"line\"><span class=\"comment\"># The number of ticks that the initial                                                                                     </span></div><div class=\"line\"><span class=\"comment\"># synchronization phase can take                                                                                           </span></div><div class=\"line\">initLimit=10                                                                                                               </div><div class=\"line\"><span class=\"comment\"># The number of ticks that can pass between                                                                                </span></div><div class=\"line\"><span class=\"comment\"># sending a request and getting an acknowledgement                                                                         </span></div><div class=\"line\">syncLimit=5                                                                                                                </div><div class=\"line\"><span class=\"comment\"># the directory where the snapshot is stored.                                                                              </span></div><div class=\"line\"><span class=\"comment\"># do not use /tmp for storage, /tmp here is just                                                                           </span></div><div class=\"line\"><span class=\"comment\"># example sakes.                                                                                                           </span></div><div class=\"line\">                                                                                                                           </div><div class=\"line\"><span class=\"comment\">################ 修改的地方1 ################                                                                              </span></div><div class=\"line\"><span class=\"comment\"># dataDir=/tmp/zookeeper</span></div><div class=\"line\"><span class=\"comment\"># 将原先的 dataDir 注释，并修改成自定义的路径                                                                              </span></div><div class=\"line\">dataDir=/software/zookeeper/data                                                                                           </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># the port at which the clients will connect                                                                               </span></div><div class=\"line\">clientPort=2181                                                                                                            </div><div class=\"line\"><span class=\"comment\"># the maximum number of client connections.                                                                                </span></div><div class=\"line\"><span class=\"comment\"># increase this if you need to handle more clients                                                                         </span></div><div class=\"line\"><span class=\"comment\">#maxClientCnxns=60                                                                                                         </span></div><div class=\"line\"><span class=\"comment\">#                                                                                                                          </span></div><div class=\"line\"><span class=\"comment\"># Be sure to read the maintenance section of the                                                                           </span></div><div class=\"line\"><span class=\"comment\"># administrator guide before turning on autopurge.                                                                         </span></div><div class=\"line\"><span class=\"comment\">#                                                                                                                          </span></div><div class=\"line\"><span class=\"comment\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance                                               </span></div><div class=\"line\"><span class=\"comment\">#                                                                                                                          </span></div><div class=\"line\"><span class=\"comment\"># The number of snapshots to retain in dataDir                                                                             </span></div><div class=\"line\"><span class=\"comment\">#autopurge.snapRetainCount=3                                                                                               </span></div><div class=\"line\"><span class=\"comment\"># Purge task interval in hours                                                                                             </span></div><div class=\"line\"><span class=\"comment\"># Set to \"0\" to disable auto purge feature                                                                                 </span></div><div class=\"line\"><span class=\"comment\">#autopurge.purgeInterval=1                                                                                                 </span></div><div class=\"line\">                                                                                                                           </div><div class=\"line\"><span class=\"comment\">################ 修改的地方2 ################                                                                              </span></div><div class=\"line\"><span class=\"comment\"># 在文件的末尾加上                                                                                                         </span></div><div class=\"line\">server.0=172.16.15.129:2888:3888                                                                                           </div><div class=\"line\">server.1=172.16.15.130:2888:3888                                                                                           </div><div class=\"line\">server.2=172.16.15.131:2888:3888</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建配置文件中的 <code>dataDir</code> 配置的目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon conf]# cd ../                                                                                                  </div><div class=\"line\">[root@bogon zookeeper]# mkdir data                                                                                         </div><div class=\"line\">[root@bogon zookeeper]# ll                                                                                                 </div><div class=\"line\">total 1580                                                                                                                 </div><div class=\"line\">drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 bin                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001   84725 Mar 23  2017 build.xml                                                                    </div><div class=\"line\">drwxr-xr-x.  2 1001 1001      88 Nov  2 14:57 conf                                                                         </div><div class=\"line\">drwxr-xr-x. 10 1001 1001    4096 Mar 23  2017 contrib                                                                      </div><div class=\"line\">drwxr-xr-x.  2 root root       6 Nov  2 14:58 data                                                                         </div><div class=\"line\">drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 dist-maven                                                                   </div><div class=\"line\">drwxr-xr-x.  6 1001 1001    4096 Mar 23  2017 docs                                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1709 Mar 23  2017 ivysettings.xml                                                              </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    5691 Mar 23  2017 ivy.xml                                                                      </div><div class=\"line\">drwxr-xr-x.  4 1001 1001    4096 Mar 23  2017 lib                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001   11938 Mar 23  2017 LICENSE.txt                                                                  </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    3132 Mar 23  2017 NOTICE.txt                                                                   </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1770 Mar 23  2017 README_packaging.txt                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1585 Mar 23  2017 README.txt                                                                   </div><div class=\"line\">drwxr-xr-x.  5 1001 1001      44 Mar 23  2017 recipes                                                                      </div><div class=\"line\">drwxr-xr-x.  8 1001 1001    4096 Mar 23  2017 src                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001 1456729 Mar 23  2017 zookeeper-3.4.10.jar                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001     819 Mar 23  2017 zookeeper-3.4.10.jar.asc                                                     </div><div class=\"line\">-rw-rw-r--.  1 1001 1001      33 Mar 23  2017 zookeeper-3.4.10.jar.md5                                                     </div><div class=\"line\">-rw-rw-r--.  1 1001 1001      41 Mar 23  2017 zookeeper-3.4.10.jar.sha1</div></pre></td></tr></table></figure>\n<p> 在 <code>data</code> 目录中新建一个 <code>myid</code> 文件，这个文件中的内容存放配置文件中对应 IP 的 <code>serverId</code>。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon zookeeper]# cd data                                                                                            </div><div class=\"line\">[root@bogon data]# vim myid</div><div class=\"line\">[root@bogon data]# cat myid                                                                                                </div><div class=\"line\">0</div></pre></td></tr></table></figure>\n</li>\n<li><p>将 <code>zookeeper</code> 的目录配置在 Linux 系统的环境变量中</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon data]# vim /etc/profile</div></pre></td></tr></table></figure>\n<p> 在文件末尾添加</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> ZOOKEEPER_HOME=/software/zookeeper</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$ZOOKEEPER_HOME</span>/bin:<span class=\"variable\">$PATH</span></div></pre></td></tr></table></figure>\n<p> 然后让环境变量生效</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon data]# source /etc/profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>将另外两台虚拟机也按照 <code>2-7</code> 的步骤配置，注意第6步的 <code>myid</code> 文件里存放的内容，应该与 <code>zoo.cfg</code> 配置文件末尾的 <code>server.n=ip:2888:3888</code> 的 <code>n</code> 对应</p>\n</li>\n<li><p>配置完环境变量之后，我们就可以不需要到 <code>bin</code> 目录下，直接在任意目录下执行 zookeeper 中 bin 目录下的文件了。</p>\n<ul>\n<li><code>zkServer.sh status</code> ：查看 <code>zookeeper</code> 的状态</li>\n<li><code>zkServer.sh start</code> ：启动 <code>zookeeper</code></li>\n<li><code>zkServer.sh stop</code> ：关闭 <code>zookeeper</code></li>\n</ul>\n</li>\n<li><p>分别查看各个虚拟机的启动情况，以及启动后的状态。</p>\n<p>虚拟机1：(follower)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon software]# zkServer.sh status                                                                                  </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Error contacting service. It is probably not running.                                                                      </div><div class=\"line\">[root@bogon software]# zkServer.sh start                                                                                   </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Starting zookeeper ... STARTED                                                                                             </div><div class=\"line\">[root@bogon software]# zkServer.sh status                                                                                  </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Mode: follower</div></pre></td></tr></table></figure>\n<p>虚拟机2：(leader)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon ~]# zkServer.sh status                                                                                         </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Error contacting service. It is probably not running.                                                                      </div><div class=\"line\">[root@bogon ~]# zkServer.sh start                                                                                          </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Starting zookeeper ... STARTED                                                                                             </div><div class=\"line\">[root@bogon ~]# zkServer.sh status                                                                                         </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Mode: leader</div></pre></td></tr></table></figure>\n<p>虚拟机3：(follower)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon ~]# zkServer.sh status                                                                                         </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Error contacting service. It is probably not running.                                                                      </div><div class=\"line\">[root@bogon ~]# zkServer.sh start                                                                                          </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Starting zookeeper ... STARTED                                                                                             </div><div class=\"line\">[root@bogon ~]# zkServer.sh status                                                                                         </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Mode: follower</div></pre></td></tr></table></figure>\n</li>\n<li><p>至此，<code>zookeeper</code> 集群的简单搭建已经正式结束了。当然还有一些个性化（调优）的配置参数，请自行参照 <code>zookeeper</code> 的<a href=\"http://zookeeper.apache.org/doc/r3.4.10/zookeeperStarted.html\" target=\"_blank\" rel=\"external\">官方文档</a> 在 <code>zoo.cfg</code> 中配置。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>拖了一天一天又一天，终于在时隔3月之后，又迎来了一篇新博客。真的是懒癌晚期了。o(╯□╰)o</p>\n<blockquote>\n<p><code>dubbo</code> 框架需要将服务统一注册到一个注册中心，才能被远程调用。这里注册中心可以使用 <code>zookeeper</code> 或者 <code>redis</code>。</p>\n</blockquote>\n<p>这里我们以 <code>zookeeper</code> 为例。<code>zookeeper</code> 可以单机版也就是 standalone模式运行，也可以使用集群方式运行。为了实现高可用，本例采用集群方式部署，需要保证至少半数以上的机器存活，所以至少为3台机器。话不多说，让我们开始 <code>zookeeper</code> 集群的搭建吧：</p>","more":"<ol>\n<li>官网下载 <code>zookeeper-3.4.10.tar.gz</code> ，将软件包分别放在三台 Linux 虚拟机的 <code>/software</code> 目录下。</li>\n<li><p>进入 <code>software</code> 目录下，解压软件包。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# cd /software                                                                                           </div><div class=\"line\">[root@localhost software]# tar -zxvf zookeeper-3.4.10.tar.gz</div><div class=\"line\">[root@localhost software]# ll                                                                                              </div><div class=\"line\">total 34228                                                                                                                </div><div class=\"line\">drwxr-xr-x. 10 1001 1001     4096 Mar 23  2017 zookeeper-3.4.10                                                            </div><div class=\"line\">-rw-r--r--.  1 root root 35042811 Nov  1 14:58 zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>解压后的文件夹名字包含了版本号，我们将其删除。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost software]# mv zookeeper-3.4.10 zookeeper                                                                   </div><div class=\"line\">[root@localhost software]# ll                                                                                              </div><div class=\"line\">total 34228                                                                                                                </div><div class=\"line\">drwxr-xr-x. 10 1001 1001     4096 Mar 23  2017 zookeeper                                                                   </div><div class=\"line\">-rw-r--r--.  1 root root 35042811 Nov  1 14:58 zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>进入刚解压的 <code>zookeeper</code> 的目录中</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon software]# cd zookeeper/                                                                                       </div><div class=\"line\">[root@bogon zookeeper]# ll                                                                                                 </div><div class=\"line\">total 1580                                                                                                                 </div><div class=\"line\">drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 bin                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001   84725 Mar 23  2017 build.xml                                                                    </div><div class=\"line\">drwxr-xr-x.  2 1001 1001      74 Mar 23  2017 conf                                                                         </div><div class=\"line\">drwxr-xr-x. 10 1001 1001    4096 Mar 23  2017 contrib                                                                      </div><div class=\"line\">drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 dist-maven                                                                   </div><div class=\"line\">drwxr-xr-x.  6 1001 1001    4096 Mar 23  2017 docs                                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1709 Mar 23  2017 ivysettings.xml                                                              </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    5691 Mar 23  2017 ivy.xml                                                                      </div><div class=\"line\">drwxr-xr-x.  4 1001 1001    4096 Mar 23  2017 lib                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001   11938 Mar 23  2017 LICENSE.txt                                                                  </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    3132 Mar 23  2017 NOTICE.txt                                                                   </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1770 Mar 23  2017 README_packaging.txt                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1585 Mar 23  2017 README.txt                                                                   </div><div class=\"line\">drwxr-xr-x.  5 1001 1001      44 Mar 23  2017 recipes                                                                      </div><div class=\"line\">drwxr-xr-x.  8 1001 1001    4096 Mar 23  2017 src                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001 1456729 Mar 23  2017 zookeeper-3.4.10.jar                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001     819 Mar 23  2017 zookeeper-3.4.10.jar.asc                                                     </div><div class=\"line\">-rw-rw-r--.  1 1001 1001      33 Mar 23  2017 zookeeper-3.4.10.jar.md5                                                     </div><div class=\"line\">-rw-rw-r--.  1 1001 1001      41 Mar 23  2017 zookeeper-3.4.10.jar.sha1</div></pre></td></tr></table></figure>\n<p> 解释一下，几个常见目录里的内容：</p>\n<ul>\n<li><code>bin</code> 目录里存放的是一些可执行文件，基本以 <code>*.bat</code> 和 <code>*.sh</code> 结尾的文件。</li>\n<li><code>conf</code> 目录里存放的是项目（软件）运行时的一些配置文件。</li>\n<li><code>contrib</code> 目录存放的内容官方未提供的一些附加软件。</li>\n<li><code>dist-maven</code> 目录存放的是 <code>zookeeper</code> 使用 <code>maven</code> 编译之后的源码和 jar文件</li>\n<li><code>docs</code> 目录里存放的是一些文档</li>\n<li><code>lib</code> 目录里存放的是依赖库</li>\n<li><code>recipes</code> 目录下存放的是使用 <code>zookeeper</code> 实现的分布式锁、高并发、队列的一些方案</li>\n<li><code>src</code> 目录里存放的是源码文件</li>\n</ul>\n</li>\n<li><p>在 <code>conf</code> 文件夹里对 <code>zookeeper</code> 进行配置，将示例配置文件复制并改名</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon software]# cd zookeeper/conf/                                                                                  </div><div class=\"line\">[root@bogon conf]# ll                                                                                                      </div><div class=\"line\">total 12                                                                                                                   </div><div class=\"line\">-rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl                                                                </div><div class=\"line\">-rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties                                                                 </div><div class=\"line\">-rw-rw-r--. 1 1001 1001  922 Mar 23  2017 zoo_sample.cfg</div><div class=\"line\">[root@bogon conf]# cp zoo_sample.cfg zoo.cfg                                                                               </div><div class=\"line\">[root@bogon conf]# ll                                                                                                      </div><div class=\"line\">total 16                                                                                                                   </div><div class=\"line\">-rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl                                                                </div><div class=\"line\">-rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties                                                                 </div><div class=\"line\">-rw-r--r--. 1 root root  922 Nov  2 14:40 zoo.cfg                                                                          </div><div class=\"line\">-rw-rw-r--. 1 1001 1001  922 Mar 23  2017 zoo_sample.cfg</div><div class=\"line\">[root@bogon conf]# vim zoo.cfg</div></pre></td></tr></table></figure>\n<p> 然后在 <code>zoo.cfg</code> 里加上一些配置</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">tickTime=2000                                                                                                              </div><div class=\"line\"><span class=\"comment\"># The number of ticks that the initial                                                                                     </span></div><div class=\"line\"><span class=\"comment\"># synchronization phase can take                                                                                           </span></div><div class=\"line\">initLimit=10                                                                                                               </div><div class=\"line\"><span class=\"comment\"># The number of ticks that can pass between                                                                                </span></div><div class=\"line\"><span class=\"comment\"># sending a request and getting an acknowledgement                                                                         </span></div><div class=\"line\">syncLimit=5                                                                                                                </div><div class=\"line\"><span class=\"comment\"># the directory where the snapshot is stored.                                                                              </span></div><div class=\"line\"><span class=\"comment\"># do not use /tmp for storage, /tmp here is just                                                                           </span></div><div class=\"line\"><span class=\"comment\"># example sakes.                                                                                                           </span></div><div class=\"line\">                                                                                                                           </div><div class=\"line\"><span class=\"comment\">################ 修改的地方1 ################                                                                              </span></div><div class=\"line\"><span class=\"comment\"># dataDir=/tmp/zookeeper</span></div><div class=\"line\"><span class=\"comment\"># 将原先的 dataDir 注释，并修改成自定义的路径                                                                              </span></div><div class=\"line\">dataDir=/software/zookeeper/data                                                                                           </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># the port at which the clients will connect                                                                               </span></div><div class=\"line\">clientPort=2181                                                                                                            </div><div class=\"line\"><span class=\"comment\"># the maximum number of client connections.                                                                                </span></div><div class=\"line\"><span class=\"comment\"># increase this if you need to handle more clients                                                                         </span></div><div class=\"line\"><span class=\"comment\">#maxClientCnxns=60                                                                                                         </span></div><div class=\"line\"><span class=\"comment\">#                                                                                                                          </span></div><div class=\"line\"><span class=\"comment\"># Be sure to read the maintenance section of the                                                                           </span></div><div class=\"line\"><span class=\"comment\"># administrator guide before turning on autopurge.                                                                         </span></div><div class=\"line\"><span class=\"comment\">#                                                                                                                          </span></div><div class=\"line\"><span class=\"comment\"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance                                               </span></div><div class=\"line\"><span class=\"comment\">#                                                                                                                          </span></div><div class=\"line\"><span class=\"comment\"># The number of snapshots to retain in dataDir                                                                             </span></div><div class=\"line\"><span class=\"comment\">#autopurge.snapRetainCount=3                                                                                               </span></div><div class=\"line\"><span class=\"comment\"># Purge task interval in hours                                                                                             </span></div><div class=\"line\"><span class=\"comment\"># Set to \"0\" to disable auto purge feature                                                                                 </span></div><div class=\"line\"><span class=\"comment\">#autopurge.purgeInterval=1                                                                                                 </span></div><div class=\"line\">                                                                                                                           </div><div class=\"line\"><span class=\"comment\">################ 修改的地方2 ################                                                                              </span></div><div class=\"line\"><span class=\"comment\"># 在文件的末尾加上                                                                                                         </span></div><div class=\"line\">server.0=172.16.15.129:2888:3888                                                                                           </div><div class=\"line\">server.1=172.16.15.130:2888:3888                                                                                           </div><div class=\"line\">server.2=172.16.15.131:2888:3888</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建配置文件中的 <code>dataDir</code> 配置的目录</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon conf]# cd ../                                                                                                  </div><div class=\"line\">[root@bogon zookeeper]# mkdir data                                                                                         </div><div class=\"line\">[root@bogon zookeeper]# ll                                                                                                 </div><div class=\"line\">total 1580                                                                                                                 </div><div class=\"line\">drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 bin                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001   84725 Mar 23  2017 build.xml                                                                    </div><div class=\"line\">drwxr-xr-x.  2 1001 1001      88 Nov  2 14:57 conf                                                                         </div><div class=\"line\">drwxr-xr-x. 10 1001 1001    4096 Mar 23  2017 contrib                                                                      </div><div class=\"line\">drwxr-xr-x.  2 root root       6 Nov  2 14:58 data                                                                         </div><div class=\"line\">drwxr-xr-x.  2 1001 1001    4096 Mar 23  2017 dist-maven                                                                   </div><div class=\"line\">drwxr-xr-x.  6 1001 1001    4096 Mar 23  2017 docs                                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1709 Mar 23  2017 ivysettings.xml                                                              </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    5691 Mar 23  2017 ivy.xml                                                                      </div><div class=\"line\">drwxr-xr-x.  4 1001 1001    4096 Mar 23  2017 lib                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001   11938 Mar 23  2017 LICENSE.txt                                                                  </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    3132 Mar 23  2017 NOTICE.txt                                                                   </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1770 Mar 23  2017 README_packaging.txt                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001    1585 Mar 23  2017 README.txt                                                                   </div><div class=\"line\">drwxr-xr-x.  5 1001 1001      44 Mar 23  2017 recipes                                                                      </div><div class=\"line\">drwxr-xr-x.  8 1001 1001    4096 Mar 23  2017 src                                                                          </div><div class=\"line\">-rw-rw-r--.  1 1001 1001 1456729 Mar 23  2017 zookeeper-3.4.10.jar                                                         </div><div class=\"line\">-rw-rw-r--.  1 1001 1001     819 Mar 23  2017 zookeeper-3.4.10.jar.asc                                                     </div><div class=\"line\">-rw-rw-r--.  1 1001 1001      33 Mar 23  2017 zookeeper-3.4.10.jar.md5                                                     </div><div class=\"line\">-rw-rw-r--.  1 1001 1001      41 Mar 23  2017 zookeeper-3.4.10.jar.sha1</div></pre></td></tr></table></figure>\n<p> 在 <code>data</code> 目录中新建一个 <code>myid</code> 文件，这个文件中的内容存放配置文件中对应 IP 的 <code>serverId</code>。</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon zookeeper]# cd data                                                                                            </div><div class=\"line\">[root@bogon data]# vim myid</div><div class=\"line\">[root@bogon data]# cat myid                                                                                                </div><div class=\"line\">0</div></pre></td></tr></table></figure>\n</li>\n<li><p>将 <code>zookeeper</code> 的目录配置在 Linux 系统的环境变量中</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon data]# vim /etc/profile</div></pre></td></tr></table></figure>\n<p> 在文件末尾添加</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> ZOOKEEPER_HOME=/software/zookeeper</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$ZOOKEEPER_HOME</span>/bin:<span class=\"variable\">$PATH</span></div></pre></td></tr></table></figure>\n<p> 然后让环境变量生效</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon data]# source /etc/profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>将另外两台虚拟机也按照 <code>2-7</code> 的步骤配置，注意第6步的 <code>myid</code> 文件里存放的内容，应该与 <code>zoo.cfg</code> 配置文件末尾的 <code>server.n=ip:2888:3888</code> 的 <code>n</code> 对应</p>\n</li>\n<li><p>配置完环境变量之后，我们就可以不需要到 <code>bin</code> 目录下，直接在任意目录下执行 zookeeper 中 bin 目录下的文件了。</p>\n<ul>\n<li><code>zkServer.sh status</code> ：查看 <code>zookeeper</code> 的状态</li>\n<li><code>zkServer.sh start</code> ：启动 <code>zookeeper</code></li>\n<li><code>zkServer.sh stop</code> ：关闭 <code>zookeeper</code></li>\n</ul>\n</li>\n<li><p>分别查看各个虚拟机的启动情况，以及启动后的状态。</p>\n<p>虚拟机1：(follower)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon software]# zkServer.sh status                                                                                  </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Error contacting service. It is probably not running.                                                                      </div><div class=\"line\">[root@bogon software]# zkServer.sh start                                                                                   </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Starting zookeeper ... STARTED                                                                                             </div><div class=\"line\">[root@bogon software]# zkServer.sh status                                                                                  </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Mode: follower</div></pre></td></tr></table></figure>\n<p>虚拟机2：(leader)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon ~]# zkServer.sh status                                                                                         </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Error contacting service. It is probably not running.                                                                      </div><div class=\"line\">[root@bogon ~]# zkServer.sh start                                                                                          </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Starting zookeeper ... STARTED                                                                                             </div><div class=\"line\">[root@bogon ~]# zkServer.sh status                                                                                         </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Mode: leader</div></pre></td></tr></table></figure>\n<p>虚拟机3：(follower)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@bogon ~]# zkServer.sh status                                                                                         </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Error contacting service. It is probably not running.                                                                      </div><div class=\"line\">[root@bogon ~]# zkServer.sh start                                                                                          </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Starting zookeeper ... STARTED                                                                                             </div><div class=\"line\">[root@bogon ~]# zkServer.sh status                                                                                         </div><div class=\"line\">ZooKeeper JMX enabled by default                                                                                           </div><div class=\"line\">Using config: /software/zookeeper/bin/../conf/zoo.cfg                                                                      </div><div class=\"line\">Mode: follower</div></pre></td></tr></table></figure>\n</li>\n<li><p>至此，<code>zookeeper</code> 集群的简单搭建已经正式结束了。当然还有一些个性化（调优）的配置参数，请自行参照 <code>zookeeper</code> 的<a href=\"http://zookeeper.apache.org/doc/r3.4.10/zookeeperStarted.html\" target=\"_blank\" rel=\"external\">官方文档</a> 在 <code>zoo.cfg</code> 中配置。</p>\n</li>\n</ol>"},{"title":"使用 Druid 加速 oracle 的查询","comments":1,"fancybox":false,"toc":false,"date":"2017-11-10T01:06:33.000Z","description":null,"top":null,"_content":"# 问题\n\n最近，公司的 web 应用，查询数据有些慢，数据库使用的是 oracle，连接池采用了阿里巴巴温少开源的 Druid 连接池，于是开始寻找解决办法。\n\n<!--more-->\n\n# 方法\n\n1. 首先我们需要做的应该是通过 Druid 来监控我们应用中的慢 SQL，然后对其进行优化。从 SQL 监控和 SQL 防火墙中，我发现我们的 SQL 并没有多少慢 SQL。于是排除了慢 SQL 导致查询变慢的原因。\n2. Druid 中支持配置 **PSCache**。我们的 web 程序并没有开启这个选项，我们将其开启，发现查询返回的结果速度快了 **`20%`** 左右。\n\n# 原理\n\noracle 支持游标，一个 **PreparedStatement** 对应服务器一个游标，如果 **PreparedStatement** 被缓存起来重复执行，**PreparedStatement** 没有被关闭，服务器端的游标就不会被关闭，性能提高非常显著。在类似 `SELECT * FROM T WHERE ID = ? `这样的场景，启用 PSCache 和不启用 PSCache 的性能可能是相差一个数量级的。\n\n连接 oracle 数据库，打开 **PSCache**，但是其他的数据库连接池都会存在内存占用过多的问题，Druid 是唯一解决这个问题的连接池。","source":"_posts/2017-11-10.druid-oracle-pscache.md","raw":"---\ntitle: 使用 Druid 加速 oracle 的查询\ncomments: true\nfancybox: false\ntoc: false\ndate: 2017-11-10 09:06:33\ntags:\n- oracle\ncategories:\n- 技术相关\n- oracle\ndescription:\npermalink: druid-oracle-pscache\ntop:\n---\n# 问题\n\n最近，公司的 web 应用，查询数据有些慢，数据库使用的是 oracle，连接池采用了阿里巴巴温少开源的 Druid 连接池，于是开始寻找解决办法。\n\n<!--more-->\n\n# 方法\n\n1. 首先我们需要做的应该是通过 Druid 来监控我们应用中的慢 SQL，然后对其进行优化。从 SQL 监控和 SQL 防火墙中，我发现我们的 SQL 并没有多少慢 SQL。于是排除了慢 SQL 导致查询变慢的原因。\n2. Druid 中支持配置 **PSCache**。我们的 web 程序并没有开启这个选项，我们将其开启，发现查询返回的结果速度快了 **`20%`** 左右。\n\n# 原理\n\noracle 支持游标，一个 **PreparedStatement** 对应服务器一个游标，如果 **PreparedStatement** 被缓存起来重复执行，**PreparedStatement** 没有被关闭，服务器端的游标就不会被关闭，性能提高非常显著。在类似 `SELECT * FROM T WHERE ID = ? `这样的场景，启用 PSCache 和不启用 PSCache 的性能可能是相差一个数量级的。\n\n连接 oracle 数据库，打开 **PSCache**，但是其他的数据库连接池都会存在内存占用过多的问题，Druid 是唯一解决这个问题的连接池。","slug":"druid-oracle-pscache","published":1,"updated":"2018-01-11T02:14:44.005Z","layout":"post","photos":[],"link":"","_id":"cjr64il6d001ekds69ozuw8lz","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>最近，公司的 web 应用，查询数据有些慢，数据库使用的是 oracle，连接池采用了阿里巴巴温少开源的 Druid 连接池，于是开始寻找解决办法。</p>\n<a id=\"more\"></a>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><ol>\n<li>首先我们需要做的应该是通过 Druid 来监控我们应用中的慢 SQL，然后对其进行优化。从 SQL 监控和 SQL 防火墙中，我发现我们的 SQL 并没有多少慢 SQL。于是排除了慢 SQL 导致查询变慢的原因。</li>\n<li>Druid 中支持配置 <strong>PSCache</strong>。我们的 web 程序并没有开启这个选项，我们将其开启，发现查询返回的结果速度快了 <strong><code>20%</code></strong> 左右。</li>\n</ol>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>oracle 支持游标，一个 <strong>PreparedStatement</strong> 对应服务器一个游标，如果 <strong>PreparedStatement</strong> 被缓存起来重复执行，<strong>PreparedStatement</strong> 没有被关闭，服务器端的游标就不会被关闭，性能提高非常显著。在类似 <code>SELECT * FROM T WHERE ID = ?</code>这样的场景，启用 PSCache 和不启用 PSCache 的性能可能是相差一个数量级的。</p>\n<p>连接 oracle 数据库，打开 <strong>PSCache</strong>，但是其他的数据库连接池都会存在内存占用过多的问题，Druid 是唯一解决这个问题的连接池。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>最近，公司的 web 应用，查询数据有些慢，数据库使用的是 oracle，连接池采用了阿里巴巴温少开源的 Druid 连接池，于是开始寻找解决办法。</p>","more":"<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><ol>\n<li>首先我们需要做的应该是通过 Druid 来监控我们应用中的慢 SQL，然后对其进行优化。从 SQL 监控和 SQL 防火墙中，我发现我们的 SQL 并没有多少慢 SQL。于是排除了慢 SQL 导致查询变慢的原因。</li>\n<li>Druid 中支持配置 <strong>PSCache</strong>。我们的 web 程序并没有开启这个选项，我们将其开启，发现查询返回的结果速度快了 <strong><code>20%</code></strong> 左右。</li>\n</ol>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>oracle 支持游标，一个 <strong>PreparedStatement</strong> 对应服务器一个游标，如果 <strong>PreparedStatement</strong> 被缓存起来重复执行，<strong>PreparedStatement</strong> 没有被关闭，服务器端的游标就不会被关闭，性能提高非常显著。在类似 <code>SELECT * FROM T WHERE ID = ?</code>这样的场景，启用 PSCache 和不启用 PSCache 的性能可能是相差一个数量级的。</p>\n<p>连接 oracle 数据库，打开 <strong>PSCache</strong>，但是其他的数据库连接池都会存在内存占用过多的问题，Druid 是唯一解决这个问题的连接池。</p>"},{"title":"Mac 下彻底解决 mysql 中文乱码问题","comments":1,"fancybox":true,"toc":true,"date":"2017-11-14T01:26:08.000Z","description":null,"top":null,"_content":"数据库中文乱码是个比较常见的问题，今天笔者就遇到了。\n\n> 系统环境：macOS Sierra 10.12.6<br>MySQL 版本：5.7.18 Homebrew<br>连接软件：Navicat Premium 12.0.12 TNT edition\n\n<!--more-->\n\n# MySQL程序问题\n\n```mysql\n#启动\nmysql.server start\n#关闭\nmysql.server stop\n#执行mysql命令\nmysql;\n#查看编码设置[下面显示的是已经设置好的]\nmysql> show variables like '%char%';\n+--------------------------+--------------------------------------------------------+\n| Variable_name            | Value                                                  |\n+--------------------------+--------------------------------------------------------+\n| character_set_client     | utf8                                                   |\n| character_set_connection | utf8                                                   |\n| character_set_database   | utf8                                                   |\n| character_set_filesystem | binary                                                 |\n| character_set_results    | utf8                                                   |\n| character_set_server     | utf8                                                   |\n| character_set_system     | utf8                                                   |\n| character_sets_dir       | /usr/local/Cellar/mysql/5.7.18_1/share/mysql/charsets/ |\n+--------------------------+--------------------------------------------------------+\n```\n\n1. 与客户端（网页或软件：web／终端／数据库管理工具）有关的：\n\n   - character_set_client：对客户端的请求字符串进行编码\n   - character_set_connection：连接服务器时的默认编码，例如navicat连接阿里云服务器\n   - character_set_results：表示客户端想以哪种编码接收查询结果\n\n   如果后两个没有特别指定，则默认和character_set_client是一样的\n\n2. 与服务器端（增删查改命令）有关的：\n\n   - character_set_server：服务器编码\n   - character_set_database：创建数据库时的默认编码\n\n   如果后一个没有特别指定，则默认和character_set_server是一样的\n\n3. 其他：\n\n   - character_set_filesystem：以二进制文件进行设置，不影响字符显示\n   - character_set_system：用于mysql存储标识符，一直是UTF8，也不影响字符显示\n\n因此如果字符编码有异常，我们只需要在my.cnf中对character_set_client与character_set_server进行设置就ok了。\n\n```shell\n#默认路径下，配置文件加载的先后顺序\n/etc/my.cnf\n/etc/mysql/my.cnf\n/usr/local/etc/my.cnf\n~/.my.cnf\n```\n\n但是我的系统是通过 `homebrew` 安装的 MySQL，默认情况下没有 `my.cnf` 文件。\n\n```shell\ncd /etc && touch my.cnf\n```\n\n使用 `vi` 编辑器将下面内容写入 `/etc/my.cnf` 。\n\n```properties\n[client]\ndefault-character-set=utf8\n[mysqld]\ncharacter-set-server=utf8\n```\n\n保存退出，然后停止 MySQL（`mysql.server stop`），并重新启动 MySQL（`mysql.server start`），并用以下命令校验字符编码信息。\n\n```mysql\n#执行mysql命令\nmysql -uroot -proot;\n#查看编码设置[下面显示的是已经设置好的]\nmysql> show variables like '%char%';\n```\n\n# MySQL 数据库数据问题\n\n如果显示的数据查询结果还是乱码，可能就是之前创建的数据库或数据表有问题了，可以通过以下方式进行检查。\n\n1. 查询数据库支持的所有字符集\n\n   ```mysql\n   show character set;或者show char set;\n   ```\n\n2. 查看mysql服务器当前状态\n\n   ```mysql\n   status或者\\s\n   ```\n\n3. 查看数据库编码\n\n   ```mysql\n   show create database dbname;\n   ```\n\n4. 查看数据表编码\n\n   ```mysql\n   show create table tablename\\G;\n   ```\n\n5. 查看数据表字段编码\n\n   ```mysql\n   show full columns from tablename;\n   ```\n\n如果发现编码不是 `UTF-8`，请重新创建相应的`数据库`／`数据表`／`字段` 。\n\n# Mac终端－iTerm2软件设置\n\n这一种情况比较少见，就是Mac终端不支持显示中文，这样也会导致乱码。\n一方面对终端软件如iterm2的软件偏好设置进行修改为utf-8。\n另一方面就是在终端执行以下语句：\n\n```shell\nLANG='zh_CN.UTF-8';\nexport $LANG;\n```\n\n# MySQL 管理工具—Navicat 软件设置\n\n笔者这次遇到的问题就属于最后一种，前面的数据库配置，查看的编码都是正确的，并且使用程序查询出来的也没有乱码，偏偏 Navicat 显示数据表时中文便乱码了，那么请新建mysql服务器连接，Encoding那一栏不要选择默认的 UTF-8，选择Auto即可正常显示中文。\n\n![](http://oriqjordg.bkt.clouddn.com/2017-11-14-15106251909957.jpg)\n\n---\n\n本文参考：\n\n1. [Mac系统解决MySQL乱码问题](http://www.siguoya.name/pc/home/article/235)","source":"_posts/2017-11-14.mysql-chinese-character-encoding.md","raw":"---\ntitle: Mac 下彻底解决 mysql 中文乱码问题\ncomments: true\nfancybox: true\ntoc: true\ndate: 2017-11-14 09:26:08\ntags:\n- mysql\n- Mac\ncategories:\n- 技术相关\n- mysql\ndescription:\npermalink: mysql-chinese-character-encoding\ntop:\n---\n数据库中文乱码是个比较常见的问题，今天笔者就遇到了。\n\n> 系统环境：macOS Sierra 10.12.6<br>MySQL 版本：5.7.18 Homebrew<br>连接软件：Navicat Premium 12.0.12 TNT edition\n\n<!--more-->\n\n# MySQL程序问题\n\n```mysql\n#启动\nmysql.server start\n#关闭\nmysql.server stop\n#执行mysql命令\nmysql;\n#查看编码设置[下面显示的是已经设置好的]\nmysql> show variables like '%char%';\n+--------------------------+--------------------------------------------------------+\n| Variable_name            | Value                                                  |\n+--------------------------+--------------------------------------------------------+\n| character_set_client     | utf8                                                   |\n| character_set_connection | utf8                                                   |\n| character_set_database   | utf8                                                   |\n| character_set_filesystem | binary                                                 |\n| character_set_results    | utf8                                                   |\n| character_set_server     | utf8                                                   |\n| character_set_system     | utf8                                                   |\n| character_sets_dir       | /usr/local/Cellar/mysql/5.7.18_1/share/mysql/charsets/ |\n+--------------------------+--------------------------------------------------------+\n```\n\n1. 与客户端（网页或软件：web／终端／数据库管理工具）有关的：\n\n   - character_set_client：对客户端的请求字符串进行编码\n   - character_set_connection：连接服务器时的默认编码，例如navicat连接阿里云服务器\n   - character_set_results：表示客户端想以哪种编码接收查询结果\n\n   如果后两个没有特别指定，则默认和character_set_client是一样的\n\n2. 与服务器端（增删查改命令）有关的：\n\n   - character_set_server：服务器编码\n   - character_set_database：创建数据库时的默认编码\n\n   如果后一个没有特别指定，则默认和character_set_server是一样的\n\n3. 其他：\n\n   - character_set_filesystem：以二进制文件进行设置，不影响字符显示\n   - character_set_system：用于mysql存储标识符，一直是UTF8，也不影响字符显示\n\n因此如果字符编码有异常，我们只需要在my.cnf中对character_set_client与character_set_server进行设置就ok了。\n\n```shell\n#默认路径下，配置文件加载的先后顺序\n/etc/my.cnf\n/etc/mysql/my.cnf\n/usr/local/etc/my.cnf\n~/.my.cnf\n```\n\n但是我的系统是通过 `homebrew` 安装的 MySQL，默认情况下没有 `my.cnf` 文件。\n\n```shell\ncd /etc && touch my.cnf\n```\n\n使用 `vi` 编辑器将下面内容写入 `/etc/my.cnf` 。\n\n```properties\n[client]\ndefault-character-set=utf8\n[mysqld]\ncharacter-set-server=utf8\n```\n\n保存退出，然后停止 MySQL（`mysql.server stop`），并重新启动 MySQL（`mysql.server start`），并用以下命令校验字符编码信息。\n\n```mysql\n#执行mysql命令\nmysql -uroot -proot;\n#查看编码设置[下面显示的是已经设置好的]\nmysql> show variables like '%char%';\n```\n\n# MySQL 数据库数据问题\n\n如果显示的数据查询结果还是乱码，可能就是之前创建的数据库或数据表有问题了，可以通过以下方式进行检查。\n\n1. 查询数据库支持的所有字符集\n\n   ```mysql\n   show character set;或者show char set;\n   ```\n\n2. 查看mysql服务器当前状态\n\n   ```mysql\n   status或者\\s\n   ```\n\n3. 查看数据库编码\n\n   ```mysql\n   show create database dbname;\n   ```\n\n4. 查看数据表编码\n\n   ```mysql\n   show create table tablename\\G;\n   ```\n\n5. 查看数据表字段编码\n\n   ```mysql\n   show full columns from tablename;\n   ```\n\n如果发现编码不是 `UTF-8`，请重新创建相应的`数据库`／`数据表`／`字段` 。\n\n# Mac终端－iTerm2软件设置\n\n这一种情况比较少见，就是Mac终端不支持显示中文，这样也会导致乱码。\n一方面对终端软件如iterm2的软件偏好设置进行修改为utf-8。\n另一方面就是在终端执行以下语句：\n\n```shell\nLANG='zh_CN.UTF-8';\nexport $LANG;\n```\n\n# MySQL 管理工具—Navicat 软件设置\n\n笔者这次遇到的问题就属于最后一种，前面的数据库配置，查看的编码都是正确的，并且使用程序查询出来的也没有乱码，偏偏 Navicat 显示数据表时中文便乱码了，那么请新建mysql服务器连接，Encoding那一栏不要选择默认的 UTF-8，选择Auto即可正常显示中文。\n\n![](http://oriqjordg.bkt.clouddn.com/2017-11-14-15106251909957.jpg)\n\n---\n\n本文参考：\n\n1. [Mac系统解决MySQL乱码问题](http://www.siguoya.name/pc/home/article/235)","slug":"mysql-chinese-character-encoding","published":1,"updated":"2018-01-11T02:14:53.222Z","layout":"post","photos":[],"link":"","_id":"cjr64il6f001hkds6hthn6ndr","content":"<p>数据库中文乱码是个比较常见的问题，今天笔者就遇到了。</p>\n<blockquote>\n<p>系统环境：macOS Sierra 10.12.6<br>MySQL 版本：5.7.18 Homebrew<br>连接软件：Navicat Premium 12.0.12 TNT edition</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"MySQL程序问题\"><a href=\"#MySQL程序问题\" class=\"headerlink\" title=\"MySQL程序问题\"></a>MySQL程序问题</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">#启动</div><div class=\"line\">mysql.server start</div><div class=\"line\">#关闭</div><div class=\"line\">mysql.server stop</div><div class=\"line\">#执行mysql命令</div><div class=\"line\">mysql;</div><div class=\"line\">#查看编码设置[下面显示的是已经设置好的]</div><div class=\"line\">mysql&gt; show variables like &apos;%char%&apos;;</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div><div class=\"line\">| Variable_name            | Value                                                  |</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div><div class=\"line\">| character_set_client     | utf8                                                   |</div><div class=\"line\">| character_set_connection | utf8                                                   |</div><div class=\"line\">| character_set_database   | utf8                                                   |</div><div class=\"line\">| character_set_filesystem | binary                                                 |</div><div class=\"line\">| character_set_results    | utf8                                                   |</div><div class=\"line\">| character_set_server     | utf8                                                   |</div><div class=\"line\">| character_set_system     | utf8                                                   |</div><div class=\"line\">| character_sets_dir       | /usr/local/Cellar/mysql/5.7.18_1/share/mysql/charsets/ |</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div></pre></td></tr></table></figure>\n<ol>\n<li><p>与客户端（网页或软件：web／终端／数据库管理工具）有关的：</p>\n<ul>\n<li>character_set_client：对客户端的请求字符串进行编码</li>\n<li>character_set_connection：连接服务器时的默认编码，例如navicat连接阿里云服务器</li>\n<li>character_set_results：表示客户端想以哪种编码接收查询结果</li>\n</ul>\n<p>如果后两个没有特别指定，则默认和character_set_client是一样的</p>\n</li>\n<li><p>与服务器端（增删查改命令）有关的：</p>\n<ul>\n<li>character_set_server：服务器编码</li>\n<li>character_set_database：创建数据库时的默认编码</li>\n</ul>\n<p>如果后一个没有特别指定，则默认和character_set_server是一样的</p>\n</li>\n<li><p>其他：</p>\n<ul>\n<li>character_set_filesystem：以二进制文件进行设置，不影响字符显示</li>\n<li>character_set_system：用于mysql存储标识符，一直是UTF8，也不影响字符显示</li>\n</ul>\n</li>\n</ol>\n<p>因此如果字符编码有异常，我们只需要在my.cnf中对character_set_client与character_set_server进行设置就ok了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认路径下，配置文件加载的先后顺序</span></div><div class=\"line\">/etc/my.cnf</div><div class=\"line\">/etc/mysql/my.cnf</div><div class=\"line\">/usr/local/etc/my.cnf</div><div class=\"line\">~/.my.cnf</div></pre></td></tr></table></figure>\n<p>但是我的系统是通过 <code>homebrew</code> 安装的 MySQL，默认情况下没有 <code>my.cnf</code> 文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /etc &amp;&amp; touch my.cnf</div></pre></td></tr></table></figure>\n<p>使用 <code>vi</code> 编辑器将下面内容写入 <code>/etc/my.cnf</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[client]</div><div class=\"line\">default-character-set=utf8</div><div class=\"line\">[mysqld]</div><div class=\"line\">character-set-server=utf8</div></pre></td></tr></table></figure>\n<p>保存退出，然后停止 MySQL（<code>mysql.server stop</code>），并重新启动 MySQL（<code>mysql.server start</code>），并用以下命令校验字符编码信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#执行mysql命令</div><div class=\"line\">mysql -uroot -proot;</div><div class=\"line\">#查看编码设置[下面显示的是已经设置好的]</div><div class=\"line\">mysql&gt; show variables like &apos;%char%&apos;;</div></pre></td></tr></table></figure>\n<h1 id=\"MySQL-数据库数据问题\"><a href=\"#MySQL-数据库数据问题\" class=\"headerlink\" title=\"MySQL 数据库数据问题\"></a>MySQL 数据库数据问题</h1><p>如果显示的数据查询结果还是乱码，可能就是之前创建的数据库或数据表有问题了，可以通过以下方式进行检查。</p>\n<ol>\n<li><p>查询数据库支持的所有字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show character set;或者show char set;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看mysql服务器当前状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">status或者\\s</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据库编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show create database dbname;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据表编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show create table tablename\\G;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据表字段编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show full columns from tablename;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果发现编码不是 <code>UTF-8</code>，请重新创建相应的<code>数据库</code>／<code>数据表</code>／<code>字段</code> 。</p>\n<h1 id=\"Mac终端－iTerm2软件设置\"><a href=\"#Mac终端－iTerm2软件设置\" class=\"headerlink\" title=\"Mac终端－iTerm2软件设置\"></a>Mac终端－iTerm2软件设置</h1><p>这一种情况比较少见，就是Mac终端不支持显示中文，这样也会导致乱码。<br>一方面对终端软件如iterm2的软件偏好设置进行修改为utf-8。<br>另一方面就是在终端执行以下语句：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG='zh_CN.UTF-8';</div><div class=\"line\">export $LANG;</div></pre></td></tr></table></figure>\n<h1 id=\"MySQL-管理工具—Navicat-软件设置\"><a href=\"#MySQL-管理工具—Navicat-软件设置\" class=\"headerlink\" title=\"MySQL 管理工具—Navicat 软件设置\"></a>MySQL 管理工具—Navicat 软件设置</h1><p>笔者这次遇到的问题就属于最后一种，前面的数据库配置，查看的编码都是正确的，并且使用程序查询出来的也没有乱码，偏偏 Navicat 显示数据表时中文便乱码了，那么请新建mysql服务器连接，Encoding那一栏不要选择默认的 UTF-8，选择Auto即可正常显示中文。</p>\n<p><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-14-15106251909957.jpg\" alt=\"\"></p>\n<hr>\n<p>本文参考：</p>\n<ol>\n<li><a href=\"http://www.siguoya.name/pc/home/article/235\" target=\"_blank\" rel=\"external\">Mac系统解决MySQL乱码问题</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>数据库中文乱码是个比较常见的问题，今天笔者就遇到了。</p>\n<blockquote>\n<p>系统环境：macOS Sierra 10.12.6<br>MySQL 版本：5.7.18 Homebrew<br>连接软件：Navicat Premium 12.0.12 TNT edition</p>\n</blockquote>","more":"<h1 id=\"MySQL程序问题\"><a href=\"#MySQL程序问题\" class=\"headerlink\" title=\"MySQL程序问题\"></a>MySQL程序问题</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">#启动</div><div class=\"line\">mysql.server start</div><div class=\"line\">#关闭</div><div class=\"line\">mysql.server stop</div><div class=\"line\">#执行mysql命令</div><div class=\"line\">mysql;</div><div class=\"line\">#查看编码设置[下面显示的是已经设置好的]</div><div class=\"line\">mysql&gt; show variables like &apos;%char%&apos;;</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div><div class=\"line\">| Variable_name            | Value                                                  |</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div><div class=\"line\">| character_set_client     | utf8                                                   |</div><div class=\"line\">| character_set_connection | utf8                                                   |</div><div class=\"line\">| character_set_database   | utf8                                                   |</div><div class=\"line\">| character_set_filesystem | binary                                                 |</div><div class=\"line\">| character_set_results    | utf8                                                   |</div><div class=\"line\">| character_set_server     | utf8                                                   |</div><div class=\"line\">| character_set_system     | utf8                                                   |</div><div class=\"line\">| character_sets_dir       | /usr/local/Cellar/mysql/5.7.18_1/share/mysql/charsets/ |</div><div class=\"line\">+--------------------------+--------------------------------------------------------+</div></pre></td></tr></table></figure>\n<ol>\n<li><p>与客户端（网页或软件：web／终端／数据库管理工具）有关的：</p>\n<ul>\n<li>character_set_client：对客户端的请求字符串进行编码</li>\n<li>character_set_connection：连接服务器时的默认编码，例如navicat连接阿里云服务器</li>\n<li>character_set_results：表示客户端想以哪种编码接收查询结果</li>\n</ul>\n<p>如果后两个没有特别指定，则默认和character_set_client是一样的</p>\n</li>\n<li><p>与服务器端（增删查改命令）有关的：</p>\n<ul>\n<li>character_set_server：服务器编码</li>\n<li>character_set_database：创建数据库时的默认编码</li>\n</ul>\n<p>如果后一个没有特别指定，则默认和character_set_server是一样的</p>\n</li>\n<li><p>其他：</p>\n<ul>\n<li>character_set_filesystem：以二进制文件进行设置，不影响字符显示</li>\n<li>character_set_system：用于mysql存储标识符，一直是UTF8，也不影响字符显示</li>\n</ul>\n</li>\n</ol>\n<p>因此如果字符编码有异常，我们只需要在my.cnf中对character_set_client与character_set_server进行设置就ok了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认路径下，配置文件加载的先后顺序</span></div><div class=\"line\">/etc/my.cnf</div><div class=\"line\">/etc/mysql/my.cnf</div><div class=\"line\">/usr/local/etc/my.cnf</div><div class=\"line\">~/.my.cnf</div></pre></td></tr></table></figure>\n<p>但是我的系统是通过 <code>homebrew</code> 安装的 MySQL，默认情况下没有 <code>my.cnf</code> 文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /etc &amp;&amp; touch my.cnf</div></pre></td></tr></table></figure>\n<p>使用 <code>vi</code> 编辑器将下面内容写入 <code>/etc/my.cnf</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[client]</div><div class=\"line\">default-character-set=utf8</div><div class=\"line\">[mysqld]</div><div class=\"line\">character-set-server=utf8</div></pre></td></tr></table></figure>\n<p>保存退出，然后停止 MySQL（<code>mysql.server stop</code>），并重新启动 MySQL（<code>mysql.server start</code>），并用以下命令校验字符编码信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#执行mysql命令</div><div class=\"line\">mysql -uroot -proot;</div><div class=\"line\">#查看编码设置[下面显示的是已经设置好的]</div><div class=\"line\">mysql&gt; show variables like &apos;%char%&apos;;</div></pre></td></tr></table></figure>\n<h1 id=\"MySQL-数据库数据问题\"><a href=\"#MySQL-数据库数据问题\" class=\"headerlink\" title=\"MySQL 数据库数据问题\"></a>MySQL 数据库数据问题</h1><p>如果显示的数据查询结果还是乱码，可能就是之前创建的数据库或数据表有问题了，可以通过以下方式进行检查。</p>\n<ol>\n<li><p>查询数据库支持的所有字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show character set;或者show char set;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看mysql服务器当前状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">status或者\\s</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据库编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show create database dbname;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据表编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show create table tablename\\G;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据表字段编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show full columns from tablename;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果发现编码不是 <code>UTF-8</code>，请重新创建相应的<code>数据库</code>／<code>数据表</code>／<code>字段</code> 。</p>\n<h1 id=\"Mac终端－iTerm2软件设置\"><a href=\"#Mac终端－iTerm2软件设置\" class=\"headerlink\" title=\"Mac终端－iTerm2软件设置\"></a>Mac终端－iTerm2软件设置</h1><p>这一种情况比较少见，就是Mac终端不支持显示中文，这样也会导致乱码。<br>一方面对终端软件如iterm2的软件偏好设置进行修改为utf-8。<br>另一方面就是在终端执行以下语句：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LANG='zh_CN.UTF-8';</div><div class=\"line\">export $LANG;</div></pre></td></tr></table></figure>\n<h1 id=\"MySQL-管理工具—Navicat-软件设置\"><a href=\"#MySQL-管理工具—Navicat-软件设置\" class=\"headerlink\" title=\"MySQL 管理工具—Navicat 软件设置\"></a>MySQL 管理工具—Navicat 软件设置</h1><p>笔者这次遇到的问题就属于最后一种，前面的数据库配置，查看的编码都是正确的，并且使用程序查询出来的也没有乱码，偏偏 Navicat 显示数据表时中文便乱码了，那么请新建mysql服务器连接，Encoding那一栏不要选择默认的 UTF-8，选择Auto即可正常显示中文。</p>\n<p><img src=\"http://oriqjordg.bkt.clouddn.com/2017-11-14-15106251909957.jpg\" alt=\"\"></p>\n<hr>\n<p>本文参考：</p>\n<ol>\n<li><a href=\"http://www.siguoya.name/pc/home/article/235\" target=\"_blank\" rel=\"external\">Mac系统解决MySQL乱码问题</a></li>\n</ol>"},{"title":"redux 和 mobx 初体验","comments":1,"fancybox":false,"toc":false,"date":"2017-12-05T09:58:56.000Z","description":null,"top":null,"_content":"前段时间搞了 Vue，现在又得开始写 React 了。 我堂堂的一个后端，真是太残忍啦 o(╯□╰)o\n\n接触过 Vue 的应该都知道，Vue 的状态管理可以有两种实现，一种是 Vuex，还有一种是 eventBus 形式。\n\nReact 状态管理，老牌的应该是 Redux，但是存在了太多的概念，对于刚接触的童鞋不太友好。mobx 当属时代的新星了。不管从效率，还是易读性都远超 Redux。\n\n下面带来俩小🌰大家感受下~~\n\n<!--more-->\n\n#### 最简单的一个 redux 操作\n\n```js\nimport {createStore} from 'redux';\n\nconst ADD_ACTION = 'ADD';\n\nconst add = (num) => {\n    return {\n        type: ADD_ACTION,\n        num\n    };\n};\n\nconst initialState = {\n    count: 0\n};\n\nconst reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_ACTION:\n            return Object.assign({}, state, {count: state.count + action.num});\n        default:\n            return state;\n    }\n};\n\nconst reduxStore = createStore(reducers);\n\nreduxStore.dispatch(add(1));\n```\n\n#### 最简单的一个 mobx 操作\n\n```js\nimport {observable, action} from 'mobx';\n\nconst mobxStore = observable({\n    count: 0,\n    add: action((num) => {\n        this.count += num;\n    })\n});\n\nmobxStore.add(1);\n```\n\n","source":"_posts/2017-12-05.redux-and-mobx-first.md","raw":"---\ntitle: redux 和 mobx 初体验\ncomments: true\nfancybox: false\ntoc: false\ndate: 2017-12-05 17:58:56\ntags:\n- react\n- 前端\ncategories:\n- 技术相关\n- 前端\ndescription:\npermalink: redux-and-mobx-first\ntop:\n---\n前段时间搞了 Vue，现在又得开始写 React 了。 我堂堂的一个后端，真是太残忍啦 o(╯□╰)o\n\n接触过 Vue 的应该都知道，Vue 的状态管理可以有两种实现，一种是 Vuex，还有一种是 eventBus 形式。\n\nReact 状态管理，老牌的应该是 Redux，但是存在了太多的概念，对于刚接触的童鞋不太友好。mobx 当属时代的新星了。不管从效率，还是易读性都远超 Redux。\n\n下面带来俩小🌰大家感受下~~\n\n<!--more-->\n\n#### 最简单的一个 redux 操作\n\n```js\nimport {createStore} from 'redux';\n\nconst ADD_ACTION = 'ADD';\n\nconst add = (num) => {\n    return {\n        type: ADD_ACTION,\n        num\n    };\n};\n\nconst initialState = {\n    count: 0\n};\n\nconst reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_ACTION:\n            return Object.assign({}, state, {count: state.count + action.num});\n        default:\n            return state;\n    }\n};\n\nconst reduxStore = createStore(reducers);\n\nreduxStore.dispatch(add(1));\n```\n\n#### 最简单的一个 mobx 操作\n\n```js\nimport {observable, action} from 'mobx';\n\nconst mobxStore = observable({\n    count: 0,\n    add: action((num) => {\n        this.count += num;\n    })\n});\n\nmobxStore.add(1);\n```\n\n","slug":"redux-and-mobx-first","published":1,"updated":"2019-01-21T09:21:32.641Z","layout":"post","photos":[],"link":"","_id":"cjr64il6g001jkds6lqbzmijn","content":"<p>前段时间搞了 Vue，现在又得开始写 React 了。 我堂堂的一个后端，真是太残忍啦 o(╯□╰)o</p>\n<p>接触过 Vue 的应该都知道，Vue 的状态管理可以有两种实现，一种是 Vuex，还有一种是 eventBus 形式。</p>\n<p>React 状态管理，老牌的应该是 Redux，但是存在了太多的概念，对于刚接触的童鞋不太友好。mobx 当属时代的新星了。不管从效率，还是易读性都远超 Redux。</p>\n<p>下面带来俩小🌰大家感受下~~</p>\n<a id=\"more\"></a>\n<h4 id=\"最简单的一个-redux-操作\"><a href=\"#最简单的一个-redux-操作\" class=\"headerlink\" title=\"最简单的一个 redux 操作\"></a>最简单的一个 redux 操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> ADD_ACTION = <span class=\"string\">'ADD'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: ADD_ACTION,</div><div class=\"line\">        num</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> reducers = <span class=\"function\">(<span class=\"params\">state = initialState, action</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> ADD_ACTION:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;<span class=\"attr\">count</span>: state.count + action.num&#125;);</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> state;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> reduxStore = createStore(reducers);</div><div class=\"line\"></div><div class=\"line\">reduxStore.dispatch(add(<span class=\"number\">1</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"最简单的一个-mobx-操作\"><a href=\"#最简单的一个-mobx-操作\" class=\"headerlink\" title=\"最简单的一个 mobx 操作\"></a>最简单的一个 mobx 操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable, action&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mobxStore = observable(&#123;</div><div class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">add</span>: action(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.count += num;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">mobxStore.add(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>前段时间搞了 Vue，现在又得开始写 React 了。 我堂堂的一个后端，真是太残忍啦 o(╯□╰)o</p>\n<p>接触过 Vue 的应该都知道，Vue 的状态管理可以有两种实现，一种是 Vuex，还有一种是 eventBus 形式。</p>\n<p>React 状态管理，老牌的应该是 Redux，但是存在了太多的概念，对于刚接触的童鞋不太友好。mobx 当属时代的新星了。不管从效率，还是易读性都远超 Redux。</p>\n<p>下面带来俩小🌰大家感受下~~</p>","more":"<h4 id=\"最简单的一个-redux-操作\"><a href=\"#最简单的一个-redux-操作\" class=\"headerlink\" title=\"最简单的一个 redux 操作\"></a>最简单的一个 redux 操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> ADD_ACTION = <span class=\"string\">'ADD'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: ADD_ACTION,</div><div class=\"line\">        num</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> reducers = <span class=\"function\">(<span class=\"params\">state = initialState, action</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> ADD_ACTION:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;<span class=\"attr\">count</span>: state.count + action.num&#125;);</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> state;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> reduxStore = createStore(reducers);</div><div class=\"line\"></div><div class=\"line\">reduxStore.dispatch(add(<span class=\"number\">1</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"最简单的一个-mobx-操作\"><a href=\"#最简单的一个-mobx-操作\" class=\"headerlink\" title=\"最简单的一个 mobx 操作\"></a>最简单的一个 mobx 操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;observable, action&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mobxStore = observable(&#123;</div><div class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">add</span>: action(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.count += num;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">mobxStore.add(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>"},{"title":"DevOps 之 GitLab 安装、汉化及常见错误处理","comments":1,"fancybox":true,"toc":true,"date":"2018-01-03T03:12:37.000Z","description":null,"top":null,"_content":"公司现在开始实行 DevOps 的开发模式，代码托管采用了 GitLab 搭建私有代码仓库，本文记录了 GitLab 的安装、汉化及常见错误处理。\n\n<!--more-->\n\n## 安装GitLab\n\n**准备工作**\n\n```shell\nsudo yum install curl policycoreutils openssh-server openssh-clients\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\nsudo firewall-cmd --permanent --add-service=http\nsudo systemctl reload firewalld\n```\n\n**配置镜像源地址**\n\n```shell\ncurl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\nsudo yum install gitlab-ce\n```\n\n**安装完毕后执行注册启动**\n\n```shell\nsudo gitlab-ctl reconfigure\n```\n\n**修改访问 IP 和 端口号**\n\n1. `vim /etc/gitlab/gitlab.rb`\n2. 修改 `external_url` ，比如 `http://localhost:9080`\n\n**配置邮件发送服务**\n\n`vim /etc/gitlab/gitlab.rb` 修改与 email 有关的配置项\n\n```properties\n## 邮箱基础配置\ngitlab_rails['gitlab_email_enabled'] = true\ngitlab_rails['gitlab_email_from'] = '237497819@qq.com'\ngitlab_rails['gitlab_email_display_name'] = '237497819'\ngitlab_rails['gitlab_email_reply_to'] = '237497819@qq.com'\ngitlab_rails['gitlab_email_subject_suffix'] = ''\ngitlab_rails['gitlab_default_can_create_group'] = true\ngitlab_rails['gitlab_username_changing_enabled'] = true\n\n## smtp 配置\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.qq.com\"\ngitlab_rails['smtp_port'] = 25\ngitlab_rails['smtp_user_name'] = \"237497819@qq.com\"\ngitlab_rails['smtp_password'] = \"*********\"\ngitlab_rails['smtp_domain'] = \"smtp.qq.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\n\ngitlab_rails['smtp_openssl_verify_mode'] = 'none'\n\ngitlab_rails['smtp_ca_path'] = \"/etc/ssl/certs\"\ngitlab_rails['smtp_ca_file'] = \"/etc/ssl/certs/ca-certificates.crt\"\n\n## 用户配置\nuser['git_user_email'] = \"237497819@qq.com\"\n```\n\n## 汉化 GitLab\n\n> 注意：汉化之前是必须设置root密码登录过的，否则有些必须文件没有生成，汉化不成功。\n\n1. 汉化包版本选择：[version ≤ 8.8](https://gitlab.com/larryli/gitlab)、[version > 8.8](https://gitlab.com/xhang/gitlab)\n\n   查看安装的 GitLab 的版本\n\n   ```shell\n   cat /opt/gitlab/embedded/service/gitlab-rails/VERSION\n   10.3.2\n   ```\n\n2. 停止 GitLab 服务：`gitlab-ctl stop`\n\n3. `git clone https://gitlab.com/xhang/gitlab.git`\n\n4. 汉化操作：\n\n   ```shell\n   cd gitlab\n   yes|cp -rf ../gitlab/* /opt/gitlab/embedded/service/gitlab-rails/\n   ```\n\n5. 重新启动查看效果：`gitlab-ctl start`\n\n   ![个人首页](http://oriqjordg.bkt.clouddn.com/2018-01-03-15149489321563.jpg)\n\n   ![管理员区域](http://oriqjordg.bkt.clouddn.com/2018-01-03-15149489565891.jpg)\n\n## 日常 GitLab 管理\n\n```shell\ngitlab-ctl start|stop|status|restart\n```\n\n## 常见错误解决\n\n**在卸载 GitLab 然后再次安装执行 sudo gitlab-ctl reconfigure 的时候往往会出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行。**\n\n1. 按住 `CTRL+C` 强制结束；\n2. 运行：`sudo systemctl restart gitlab-runsvdir`\n3. 再次执行：`sudo gitlab-ctl reconfigure`\n\n**gitlab-ctl reconfigure 之后，访问浏览器出现如下错误：Whoops, GitLab is taking too much time to respond.**\n\n1. 使用 `gitlab-ctl tail` 查看完整的 `gitlab-ctl reconfigure` 日志\n\n2. 我出现这个的错误是因为日志中出现了端口占用\n\n    ```shell\n    ==> /var/log/gitlab/unicorn/unicorn_stderr.log <==\n\n    Errno::EADDRINUSE: Address already in use - bind(2) for 127.0.0.1:8080\n    ```\n\n\n\n3. `vim /etc/gitlab/gitlab.rb` 去修改 `unicorn` 的 url 和 port\n\n   ```properties\n   unicorn['listen'] = '127.0.0.1'\n   unicorn['port'] = 8888\n   ```\n\n4. 再次执行：`sudo gitlab-ctl reconfigure`\n\n5. 有时也可能是超时引起的这个错误，`vim /etc/gitlab/gitlab.rb` 去修改 `webhook_timeout`\n\n   ```properties\n   ## unicorn 连接超时\n   unicorn['worker_timeout'] = 90\n   ## WebHook 超时时间\n   gitlab_rails['webhook_timeout'] = 60\n   ```\n\n\n## 配置 push 操作时发送 diff 信息给指定人邮箱\n\n1. 创建用户的时候，邮箱保证正确。\n\n2. User Settings -->  Profile --> Main Settings --> email / public email 里是你的邮箱\n\n3. User Settings --> Emails 保证第二步里显示的 email在这里是 verified 状态\n\n4. User Settings --> Notifications 里 email保证正确，选择 level 为第一个，并勾选接收通知如下图\n\n   ![6801515572021_.pic_hd](http://static.xkcoding.com/2018-01-10-6801515572021_.pic_hd.jpg)\n\n5. 创建一个项目\n\n6. Settings --> Integrations --> email on push，具体如下图\n\n   ![6831515572084_.pic_hd](http://static.xkcoding.com/2018-01-10-6831515572084_.pic_hd.jpg)\n\n7. ❤️enjoy it ~~","source":"_posts/2018-01-03.devops-gitlab.md","raw":"---\ntitle: DevOps 之 GitLab 安装、汉化及常见错误处理\ncomments: true\nfancybox: true\ntoc: true\ndate: 2018-01-03 11:12:37\ntags:\n- gitlab\n- devops\ncategories:\n- 技术相关\n- devops\ndescription:\npermalink: devops-gitlab\ntop: \n---\n公司现在开始实行 DevOps 的开发模式，代码托管采用了 GitLab 搭建私有代码仓库，本文记录了 GitLab 的安装、汉化及常见错误处理。\n\n<!--more-->\n\n## 安装GitLab\n\n**准备工作**\n\n```shell\nsudo yum install curl policycoreutils openssh-server openssh-clients\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\nsudo firewall-cmd --permanent --add-service=http\nsudo systemctl reload firewalld\n```\n\n**配置镜像源地址**\n\n```shell\ncurl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash\nsudo yum install gitlab-ce\n```\n\n**安装完毕后执行注册启动**\n\n```shell\nsudo gitlab-ctl reconfigure\n```\n\n**修改访问 IP 和 端口号**\n\n1. `vim /etc/gitlab/gitlab.rb`\n2. 修改 `external_url` ，比如 `http://localhost:9080`\n\n**配置邮件发送服务**\n\n`vim /etc/gitlab/gitlab.rb` 修改与 email 有关的配置项\n\n```properties\n## 邮箱基础配置\ngitlab_rails['gitlab_email_enabled'] = true\ngitlab_rails['gitlab_email_from'] = '237497819@qq.com'\ngitlab_rails['gitlab_email_display_name'] = '237497819'\ngitlab_rails['gitlab_email_reply_to'] = '237497819@qq.com'\ngitlab_rails['gitlab_email_subject_suffix'] = ''\ngitlab_rails['gitlab_default_can_create_group'] = true\ngitlab_rails['gitlab_username_changing_enabled'] = true\n\n## smtp 配置\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.qq.com\"\ngitlab_rails['smtp_port'] = 25\ngitlab_rails['smtp_user_name'] = \"237497819@qq.com\"\ngitlab_rails['smtp_password'] = \"*********\"\ngitlab_rails['smtp_domain'] = \"smtp.qq.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\n\ngitlab_rails['smtp_openssl_verify_mode'] = 'none'\n\ngitlab_rails['smtp_ca_path'] = \"/etc/ssl/certs\"\ngitlab_rails['smtp_ca_file'] = \"/etc/ssl/certs/ca-certificates.crt\"\n\n## 用户配置\nuser['git_user_email'] = \"237497819@qq.com\"\n```\n\n## 汉化 GitLab\n\n> 注意：汉化之前是必须设置root密码登录过的，否则有些必须文件没有生成，汉化不成功。\n\n1. 汉化包版本选择：[version ≤ 8.8](https://gitlab.com/larryli/gitlab)、[version > 8.8](https://gitlab.com/xhang/gitlab)\n\n   查看安装的 GitLab 的版本\n\n   ```shell\n   cat /opt/gitlab/embedded/service/gitlab-rails/VERSION\n   10.3.2\n   ```\n\n2. 停止 GitLab 服务：`gitlab-ctl stop`\n\n3. `git clone https://gitlab.com/xhang/gitlab.git`\n\n4. 汉化操作：\n\n   ```shell\n   cd gitlab\n   yes|cp -rf ../gitlab/* /opt/gitlab/embedded/service/gitlab-rails/\n   ```\n\n5. 重新启动查看效果：`gitlab-ctl start`\n\n   ![个人首页](http://oriqjordg.bkt.clouddn.com/2018-01-03-15149489321563.jpg)\n\n   ![管理员区域](http://oriqjordg.bkt.clouddn.com/2018-01-03-15149489565891.jpg)\n\n## 日常 GitLab 管理\n\n```shell\ngitlab-ctl start|stop|status|restart\n```\n\n## 常见错误解决\n\n**在卸载 GitLab 然后再次安装执行 sudo gitlab-ctl reconfigure 的时候往往会出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行。**\n\n1. 按住 `CTRL+C` 强制结束；\n2. 运行：`sudo systemctl restart gitlab-runsvdir`\n3. 再次执行：`sudo gitlab-ctl reconfigure`\n\n**gitlab-ctl reconfigure 之后，访问浏览器出现如下错误：Whoops, GitLab is taking too much time to respond.**\n\n1. 使用 `gitlab-ctl tail` 查看完整的 `gitlab-ctl reconfigure` 日志\n\n2. 我出现这个的错误是因为日志中出现了端口占用\n\n    ```shell\n    ==> /var/log/gitlab/unicorn/unicorn_stderr.log <==\n\n    Errno::EADDRINUSE: Address already in use - bind(2) for 127.0.0.1:8080\n    ```\n\n\n\n3. `vim /etc/gitlab/gitlab.rb` 去修改 `unicorn` 的 url 和 port\n\n   ```properties\n   unicorn['listen'] = '127.0.0.1'\n   unicorn['port'] = 8888\n   ```\n\n4. 再次执行：`sudo gitlab-ctl reconfigure`\n\n5. 有时也可能是超时引起的这个错误，`vim /etc/gitlab/gitlab.rb` 去修改 `webhook_timeout`\n\n   ```properties\n   ## unicorn 连接超时\n   unicorn['worker_timeout'] = 90\n   ## WebHook 超时时间\n   gitlab_rails['webhook_timeout'] = 60\n   ```\n\n\n## 配置 push 操作时发送 diff 信息给指定人邮箱\n\n1. 创建用户的时候，邮箱保证正确。\n\n2. User Settings -->  Profile --> Main Settings --> email / public email 里是你的邮箱\n\n3. User Settings --> Emails 保证第二步里显示的 email在这里是 verified 状态\n\n4. User Settings --> Notifications 里 email保证正确，选择 level 为第一个，并勾选接收通知如下图\n\n   ![6801515572021_.pic_hd](http://static.xkcoding.com/2018-01-10-6801515572021_.pic_hd.jpg)\n\n5. 创建一个项目\n\n6. Settings --> Integrations --> email on push，具体如下图\n\n   ![6831515572084_.pic_hd](http://static.xkcoding.com/2018-01-10-6831515572084_.pic_hd.jpg)\n\n7. ❤️enjoy it ~~","slug":"devops-gitlab","published":1,"updated":"2019-01-21T09:21:11.551Z","layout":"post","photos":[],"link":"","_id":"cjr64il6i001mkds6236z0czv","content":"<p>公司现在开始实行 DevOps 的开发模式，代码托管采用了 GitLab 搭建私有代码仓库，本文记录了 GitLab 的安装、汉化及常见错误处理。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装GitLab\"><a href=\"#安装GitLab\" class=\"headerlink\" title=\"安装GitLab\"></a>安装GitLab</h2><p><strong>准备工作</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install curl policycoreutils openssh-server openssh-clients</div><div class=\"line\">sudo systemctl enable sshd</div><div class=\"line\">sudo systemctl start sshd</div><div class=\"line\">sudo yum install postfix</div><div class=\"line\">sudo systemctl enable postfix</div><div class=\"line\">sudo systemctl start postfix</div><div class=\"line\">sudo firewall-cmd --permanent --add-service=http</div><div class=\"line\">sudo systemctl reload firewalld</div></pre></td></tr></table></figure>\n<p><strong>配置镜像源地址</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</div><div class=\"line\">sudo yum install gitlab-ce</div></pre></td></tr></table></figure>\n<p><strong>安装完毕后执行注册启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>\n<p><strong>修改访问 IP 和 端口号</strong></p>\n<ol>\n<li><code>vim /etc/gitlab/gitlab.rb</code></li>\n<li>修改 <code>external_url</code> ，比如 <code>http://localhost:9080</code></li>\n</ol>\n<p><strong>配置邮件发送服务</strong></p>\n<p><code>vim /etc/gitlab/gitlab.rb</code> 修改与 email 有关的配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 邮箱基础配置</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_enabled&apos;] = true</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;237497819@qq.com&apos;</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_display_name&apos;] = &apos;237497819&apos;</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_reply_to&apos;] = &apos;237497819@qq.com&apos;</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_subject_suffix&apos;] = &apos;&apos;</div><div class=\"line\">gitlab_rails[&apos;gitlab_default_can_create_group&apos;] = true</div><div class=\"line\">gitlab_rails[&apos;gitlab_username_changing_enabled&apos;] = true</div><div class=\"line\"></div><div class=\"line\">## smtp 配置</div><div class=\"line\">gitlab_rails[&apos;smtp_enable&apos;] = true</div><div class=\"line\">gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.qq.com&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_port&apos;] = 25</div><div class=\"line\">gitlab_rails[&apos;smtp_user_name&apos;] = &quot;237497819@qq.com&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_password&apos;] = &quot;*********&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_domain&apos;] = &quot;smtp.qq.com&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</div><div class=\"line\">gitlab_rails[&apos;smtp_tls&apos;] = false</div><div class=\"line\"></div><div class=\"line\">gitlab_rails[&apos;smtp_openssl_verify_mode&apos;] = &apos;none&apos;</div><div class=\"line\"></div><div class=\"line\">gitlab_rails[&apos;smtp_ca_path&apos;] = &quot;/etc/ssl/certs&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_ca_file&apos;] = &quot;/etc/ssl/certs/ca-certificates.crt&quot;</div><div class=\"line\"></div><div class=\"line\">## 用户配置</div><div class=\"line\">user[&apos;git_user_email&apos;] = &quot;237497819@qq.com&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"汉化-GitLab\"><a href=\"#汉化-GitLab\" class=\"headerlink\" title=\"汉化 GitLab\"></a>汉化 GitLab</h2><blockquote>\n<p>注意：汉化之前是必须设置root密码登录过的，否则有些必须文件没有生成，汉化不成功。</p>\n</blockquote>\n<ol>\n<li><p>汉化包版本选择：<a href=\"https://gitlab.com/larryli/gitlab\" target=\"_blank\" rel=\"external\">version ≤ 8.8</a>、<a href=\"https://gitlab.com/xhang/gitlab\" target=\"_blank\" rel=\"external\">version &gt; 8.8</a></p>\n<p>查看安装的 GitLab 的版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div><div class=\"line\">10.3.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止 GitLab 服务：<code>gitlab-ctl stop</code></p>\n</li>\n<li><p><code>git clone https://gitlab.com/xhang/gitlab.git</code></p>\n</li>\n<li><p>汉化操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd gitlab</div><div class=\"line\">yes|cp -rf ../gitlab/* /opt/gitlab/embedded/service/gitlab-rails/</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新启动查看效果：<code>gitlab-ctl start</code></p>\n<p><img src=\"http://oriqjordg.bkt.clouddn.com/2018-01-03-15149489321563.jpg\" alt=\"个人首页\"></p>\n<p><img src=\"http://oriqjordg.bkt.clouddn.com/2018-01-03-15149489565891.jpg\" alt=\"管理员区域\"></p>\n</li>\n</ol>\n<h2 id=\"日常-GitLab-管理\"><a href=\"#日常-GitLab-管理\" class=\"headerlink\" title=\"日常 GitLab 管理\"></a>日常 GitLab 管理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gitlab-ctl start|stop|status|restart</div></pre></td></tr></table></figure>\n<h2 id=\"常见错误解决\"><a href=\"#常见错误解决\" class=\"headerlink\" title=\"常见错误解决\"></a>常见错误解决</h2><p><strong>在卸载 GitLab 然后再次安装执行 sudo gitlab-ctl reconfigure 的时候往往会出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行。</strong></p>\n<ol>\n<li>按住 <code>CTRL+C</code> 强制结束；</li>\n<li>运行：<code>sudo systemctl restart gitlab-runsvdir</code></li>\n<li>再次执行：<code>sudo gitlab-ctl reconfigure</code></li>\n</ol>\n<p><strong>gitlab-ctl reconfigure 之后，访问浏览器出现如下错误：Whoops, GitLab is taking too much time to respond.</strong></p>\n<ol>\n<li><p>使用 <code>gitlab-ctl tail</code> 查看完整的 <code>gitlab-ctl reconfigure</code> 日志</p>\n</li>\n<li><p>我出现这个的错误是因为日志中出现了端口占用</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">==&gt; /var/log/gitlab/unicorn/unicorn_stderr.log &lt;==</div><div class=\"line\"></div><div class=\"line\">Errno::EADDRINUSE: Address already in use - bind(2) for 127.0.0.1:8080</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>vim /etc/gitlab/gitlab.rb</code> 去修改 <code>unicorn</code> 的 url 和 port</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">unicorn[&apos;listen&apos;] = &apos;127.0.0.1&apos;</div><div class=\"line\">unicorn[&apos;port&apos;] = 8888</div></pre></td></tr></table></figure>\n</li>\n<li><p>再次执行：<code>sudo gitlab-ctl reconfigure</code></p>\n</li>\n<li><p>有时也可能是超时引起的这个错误，<code>vim /etc/gitlab/gitlab.rb</code> 去修改 <code>webhook_timeout</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">## unicorn 连接超时</div><div class=\"line\">unicorn[&apos;worker_timeout&apos;] = 90</div><div class=\"line\">## WebHook 超时时间</div><div class=\"line\">gitlab_rails[&apos;webhook_timeout&apos;] = 60</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"配置-push-操作时发送-diff-信息给指定人邮箱\"><a href=\"#配置-push-操作时发送-diff-信息给指定人邮箱\" class=\"headerlink\" title=\"配置 push 操作时发送 diff 信息给指定人邮箱\"></a>配置 push 操作时发送 diff 信息给指定人邮箱</h2><ol>\n<li><p>创建用户的时候，邮箱保证正确。</p>\n</li>\n<li><p>User Settings –&gt;  Profile –&gt; Main Settings –&gt; email / public email 里是你的邮箱</p>\n</li>\n<li><p>User Settings –&gt; Emails 保证第二步里显示的 email在这里是 verified 状态</p>\n</li>\n<li><p>User Settings –&gt; Notifications 里 email保证正确，选择 level 为第一个，并勾选接收通知如下图</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-10-6801515572021_.pic_hd.jpg\" alt=\"6801515572021_.pic_hd\"></p>\n</li>\n<li><p>创建一个项目</p>\n</li>\n<li><p>Settings –&gt; Integrations –&gt; email on push，具体如下图</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-10-6831515572084_.pic_hd.jpg\" alt=\"6831515572084_.pic_hd\"></p>\n</li>\n<li><p>❤️enjoy it ~~</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>公司现在开始实行 DevOps 的开发模式，代码托管采用了 GitLab 搭建私有代码仓库，本文记录了 GitLab 的安装、汉化及常见错误处理。</p>","more":"<h2 id=\"安装GitLab\"><a href=\"#安装GitLab\" class=\"headerlink\" title=\"安装GitLab\"></a>安装GitLab</h2><p><strong>准备工作</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install curl policycoreutils openssh-server openssh-clients</div><div class=\"line\">sudo systemctl enable sshd</div><div class=\"line\">sudo systemctl start sshd</div><div class=\"line\">sudo yum install postfix</div><div class=\"line\">sudo systemctl enable postfix</div><div class=\"line\">sudo systemctl start postfix</div><div class=\"line\">sudo firewall-cmd --permanent --add-service=http</div><div class=\"line\">sudo systemctl reload firewalld</div></pre></td></tr></table></figure>\n<p><strong>配置镜像源地址</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</div><div class=\"line\">sudo yum install gitlab-ce</div></pre></td></tr></table></figure>\n<p><strong>安装完毕后执行注册启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>\n<p><strong>修改访问 IP 和 端口号</strong></p>\n<ol>\n<li><code>vim /etc/gitlab/gitlab.rb</code></li>\n<li>修改 <code>external_url</code> ，比如 <code>http://localhost:9080</code></li>\n</ol>\n<p><strong>配置邮件发送服务</strong></p>\n<p><code>vim /etc/gitlab/gitlab.rb</code> 修改与 email 有关的配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 邮箱基础配置</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_enabled&apos;] = true</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;237497819@qq.com&apos;</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_display_name&apos;] = &apos;237497819&apos;</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_reply_to&apos;] = &apos;237497819@qq.com&apos;</div><div class=\"line\">gitlab_rails[&apos;gitlab_email_subject_suffix&apos;] = &apos;&apos;</div><div class=\"line\">gitlab_rails[&apos;gitlab_default_can_create_group&apos;] = true</div><div class=\"line\">gitlab_rails[&apos;gitlab_username_changing_enabled&apos;] = true</div><div class=\"line\"></div><div class=\"line\">## smtp 配置</div><div class=\"line\">gitlab_rails[&apos;smtp_enable&apos;] = true</div><div class=\"line\">gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.qq.com&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_port&apos;] = 25</div><div class=\"line\">gitlab_rails[&apos;smtp_user_name&apos;] = &quot;237497819@qq.com&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_password&apos;] = &quot;*********&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_domain&apos;] = &quot;smtp.qq.com&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</div><div class=\"line\">gitlab_rails[&apos;smtp_tls&apos;] = false</div><div class=\"line\"></div><div class=\"line\">gitlab_rails[&apos;smtp_openssl_verify_mode&apos;] = &apos;none&apos;</div><div class=\"line\"></div><div class=\"line\">gitlab_rails[&apos;smtp_ca_path&apos;] = &quot;/etc/ssl/certs&quot;</div><div class=\"line\">gitlab_rails[&apos;smtp_ca_file&apos;] = &quot;/etc/ssl/certs/ca-certificates.crt&quot;</div><div class=\"line\"></div><div class=\"line\">## 用户配置</div><div class=\"line\">user[&apos;git_user_email&apos;] = &quot;237497819@qq.com&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"汉化-GitLab\"><a href=\"#汉化-GitLab\" class=\"headerlink\" title=\"汉化 GitLab\"></a>汉化 GitLab</h2><blockquote>\n<p>注意：汉化之前是必须设置root密码登录过的，否则有些必须文件没有生成，汉化不成功。</p>\n</blockquote>\n<ol>\n<li><p>汉化包版本选择：<a href=\"https://gitlab.com/larryli/gitlab\" target=\"_blank\" rel=\"external\">version ≤ 8.8</a>、<a href=\"https://gitlab.com/xhang/gitlab\" target=\"_blank\" rel=\"external\">version &gt; 8.8</a></p>\n<p>查看安装的 GitLab 的版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div><div class=\"line\">10.3.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止 GitLab 服务：<code>gitlab-ctl stop</code></p>\n</li>\n<li><p><code>git clone https://gitlab.com/xhang/gitlab.git</code></p>\n</li>\n<li><p>汉化操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd gitlab</div><div class=\"line\">yes|cp -rf ../gitlab/* /opt/gitlab/embedded/service/gitlab-rails/</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新启动查看效果：<code>gitlab-ctl start</code></p>\n<p><img src=\"http://oriqjordg.bkt.clouddn.com/2018-01-03-15149489321563.jpg\" alt=\"个人首页\"></p>\n<p><img src=\"http://oriqjordg.bkt.clouddn.com/2018-01-03-15149489565891.jpg\" alt=\"管理员区域\"></p>\n</li>\n</ol>\n<h2 id=\"日常-GitLab-管理\"><a href=\"#日常-GitLab-管理\" class=\"headerlink\" title=\"日常 GitLab 管理\"></a>日常 GitLab 管理</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gitlab-ctl start|stop|status|restart</div></pre></td></tr></table></figure>\n<h2 id=\"常见错误解决\"><a href=\"#常见错误解决\" class=\"headerlink\" title=\"常见错误解决\"></a>常见错误解决</h2><p><strong>在卸载 GitLab 然后再次安装执行 sudo gitlab-ctl reconfigure 的时候往往会出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行。</strong></p>\n<ol>\n<li>按住 <code>CTRL+C</code> 强制结束；</li>\n<li>运行：<code>sudo systemctl restart gitlab-runsvdir</code></li>\n<li>再次执行：<code>sudo gitlab-ctl reconfigure</code></li>\n</ol>\n<p><strong>gitlab-ctl reconfigure 之后，访问浏览器出现如下错误：Whoops, GitLab is taking too much time to respond.</strong></p>\n<ol>\n<li><p>使用 <code>gitlab-ctl tail</code> 查看完整的 <code>gitlab-ctl reconfigure</code> 日志</p>\n</li>\n<li><p>我出现这个的错误是因为日志中出现了端口占用</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">==&gt; /var/log/gitlab/unicorn/unicorn_stderr.log &lt;==</div><div class=\"line\"></div><div class=\"line\">Errno::EADDRINUSE: Address already in use - bind(2) for 127.0.0.1:8080</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>vim /etc/gitlab/gitlab.rb</code> 去修改 <code>unicorn</code> 的 url 和 port</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">unicorn[&apos;listen&apos;] = &apos;127.0.0.1&apos;</div><div class=\"line\">unicorn[&apos;port&apos;] = 8888</div></pre></td></tr></table></figure>\n</li>\n<li><p>再次执行：<code>sudo gitlab-ctl reconfigure</code></p>\n</li>\n<li><p>有时也可能是超时引起的这个错误，<code>vim /etc/gitlab/gitlab.rb</code> 去修改 <code>webhook_timeout</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">## unicorn 连接超时</div><div class=\"line\">unicorn[&apos;worker_timeout&apos;] = 90</div><div class=\"line\">## WebHook 超时时间</div><div class=\"line\">gitlab_rails[&apos;webhook_timeout&apos;] = 60</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"配置-push-操作时发送-diff-信息给指定人邮箱\"><a href=\"#配置-push-操作时发送-diff-信息给指定人邮箱\" class=\"headerlink\" title=\"配置 push 操作时发送 diff 信息给指定人邮箱\"></a>配置 push 操作时发送 diff 信息给指定人邮箱</h2><ol>\n<li><p>创建用户的时候，邮箱保证正确。</p>\n</li>\n<li><p>User Settings –&gt;  Profile –&gt; Main Settings –&gt; email / public email 里是你的邮箱</p>\n</li>\n<li><p>User Settings –&gt; Emails 保证第二步里显示的 email在这里是 verified 状态</p>\n</li>\n<li><p>User Settings –&gt; Notifications 里 email保证正确，选择 level 为第一个，并勾选接收通知如下图</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-10-6801515572021_.pic_hd.jpg\" alt=\"6801515572021_.pic_hd\"></p>\n</li>\n<li><p>创建一个项目</p>\n</li>\n<li><p>Settings –&gt; Integrations –&gt; email on push，具体如下图</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-10-6831515572084_.pic_hd.jpg\" alt=\"6831515572084_.pic_hd\"></p>\n</li>\n<li><p>❤️enjoy it ~~</p>\n</li>\n</ol>"},{"title":"提升 JAVA 编程技能","comments":1,"fancybox":false,"toc":false,"date":"2017-12-11T05:18:56.000Z","description":null,"top":null,"_content":"翻译自： [How to improve Java programming skill](http://www.javatechblog.com/java/how-to-improve-java-programming-skill/)\n\n<!--more-->\n\n1. 深入理解 OO 思想\n2. 多读 JAVA 相关的书籍\n3. 多练习，只有多去写代码，才能更懂代码\n4. 阅读关键的 API（`java.lang.*`，`java.io.*`，`java.util.*`）的源码\n5. 处理问题之前，花更多的时间去分析问题，这其实是在节约时间\n6. 通过帮助他人来提升自己对问题的理解\n7. 尽量写简单、容易理解的逻辑代码，而不是通过复杂的代码来彰显自己的代码多么牛逼，好的代码本身就是文档\n8. 多阅读大牛的技术博客\n9. 保持跟进新的 JAVA 技术，可以不去精通，但是你不能落后\n10. 多阅读文档\n11. 不要去和他人比较（最后一点，但并不是关键性的），最大的敌人永远是你自己","source":"_posts/2017-12-11.tips-for-improve-java-skill.md","raw":"---\ntitle: 提升 JAVA 编程技能\ncomments: true\nfancybox: false\ntoc: false\ndate: 2017-12-11 13:18:56\ntags:\n- 技术相关\n- 翻译\ncategories:\n- 技术相关\ndescription:\npermalink: tips-for-improve-java-skill\ntop:\n---\n翻译自： [How to improve Java programming skill](http://www.javatechblog.com/java/how-to-improve-java-programming-skill/)\n\n<!--more-->\n\n1. 深入理解 OO 思想\n2. 多读 JAVA 相关的书籍\n3. 多练习，只有多去写代码，才能更懂代码\n4. 阅读关键的 API（`java.lang.*`，`java.io.*`，`java.util.*`）的源码\n5. 处理问题之前，花更多的时间去分析问题，这其实是在节约时间\n6. 通过帮助他人来提升自己对问题的理解\n7. 尽量写简单、容易理解的逻辑代码，而不是通过复杂的代码来彰显自己的代码多么牛逼，好的代码本身就是文档\n8. 多阅读大牛的技术博客\n9. 保持跟进新的 JAVA 技术，可以不去精通，但是你不能落后\n10. 多阅读文档\n11. 不要去和他人比较（最后一点，但并不是关键性的），最大的敌人永远是你自己","slug":"tips-for-improve-java-skill","published":1,"updated":"2017-12-11T05:33:09.581Z","layout":"post","photos":[],"link":"","_id":"cjr64il6k001okds6l0pic3pg","content":"<p>翻译自： <a href=\"http://www.javatechblog.com/java/how-to-improve-java-programming-skill/\" target=\"_blank\" rel=\"external\">How to improve Java programming skill</a></p>\n<a id=\"more\"></a>\n<ol>\n<li>深入理解 OO 思想</li>\n<li>多读 JAVA 相关的书籍</li>\n<li>多练习，只有多去写代码，才能更懂代码</li>\n<li>阅读关键的 API（<code>java.lang.*</code>，<code>java.io.*</code>，<code>java.util.*</code>）的源码</li>\n<li>处理问题之前，花更多的时间去分析问题，这其实是在节约时间</li>\n<li>通过帮助他人来提升自己对问题的理解</li>\n<li>尽量写简单、容易理解的逻辑代码，而不是通过复杂的代码来彰显自己的代码多么牛逼，好的代码本身就是文档</li>\n<li>多阅读大牛的技术博客</li>\n<li>保持跟进新的 JAVA 技术，可以不去精通，但是你不能落后</li>\n<li>多阅读文档</li>\n<li>不要去和他人比较（最后一点，但并不是关键性的），最大的敌人永远是你自己</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>翻译自： <a href=\"http://www.javatechblog.com/java/how-to-improve-java-programming-skill/\" target=\"_blank\" rel=\"external\">How to improve Java programming skill</a></p>","more":"<ol>\n<li>深入理解 OO 思想</li>\n<li>多读 JAVA 相关的书籍</li>\n<li>多练习，只有多去写代码，才能更懂代码</li>\n<li>阅读关键的 API（<code>java.lang.*</code>，<code>java.io.*</code>，<code>java.util.*</code>）的源码</li>\n<li>处理问题之前，花更多的时间去分析问题，这其实是在节约时间</li>\n<li>通过帮助他人来提升自己对问题的理解</li>\n<li>尽量写简单、容易理解的逻辑代码，而不是通过复杂的代码来彰显自己的代码多么牛逼，好的代码本身就是文档</li>\n<li>多阅读大牛的技术博客</li>\n<li>保持跟进新的 JAVA 技术，可以不去精通，但是你不能落后</li>\n<li>多阅读文档</li>\n<li>不要去和他人比较（最后一点，但并不是关键性的），最大的敌人永远是你自己</li>\n</ol>"},{"title":"DevOps 之 Jenkins 安装、配置、美化、插件及常见错误处理","comments":1,"fancybox":true,"toc":true,"date":"2018-01-04T05:19:13.000Z","description":null,"top":null,"_content":"继续上一篇的话题，既然已经搭建了 GitLab 的代码仓库，那么现在就可以开始进行下一步持续集成环境的搭建了。公司准备利用 Jenkins CI 进行持续集成，本文记录了  Jenkins 的安装、基础配置、界面美化、常用插件及常见错误处理。\n\n<!--more-->\n\n## 安装Jenkins\n\n**准备工作**\n\n1. 安装 JDK，并配置环境变量\n\n2. 安装 maven\n\n3. 配置阿里云的 maven 镜像源地址，`vim /usr/share/maven/conf/settings.xml` 将👇内容添加进 `mirrors` 节点\n\n   ```xml\n   <mirror>\n       <!--This sends everything else to /public -->\n       <id>nexus-aliyun</id>\n       <mirrorOf>*</mirrorOf>\n       <name>Nexus aliyun</name>\n       <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n   </mirror>\n   ```\n\n4. 安装 git\n\n**配置镜像源地址**\n\n```shell\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n\n**修改访问 IP 和 端口号**\n\n1. `vim /etc/sysconfig/jenkins`\n2. `JENKINS_PORT=\"10080\"`\n\n**配置 JDK 路径到 Jenkins 中**\n\n1. `vim /etc/init.d/jenkins`\n\n2. 将自己的 java 目录加入到 `candidates` 里\n\n   ```properties\n   candidates=\"\n   /etc/alternatives/java\n   /usr/lib/jvm/java-1.8.0/bin/java\n   /usr/lib/jvm/jre-1.8.0/bin/java\n   /usr/lib/jvm/java-1.7.0/bin/java\n   /usr/lib/jvm/jre-1.7.0/bin/java\n   /usr/bin/java\n   /opt/jdk1.8.0_144/bin/java\n   \"\n   ```\n\n**安装完毕后启动**\n\n```shell\nsudo service jenkins start # 启动jenkins服务 \n```\n\n## 配置 Jenkins\n\n1. **初始化密码**\n\n   `cat /var/lib/jenkins/secrets/initialAdminPassword`\n\n2. **安装插件**\n\n   选择左侧推荐的插件安装即可\n\n3. **配置管理员账号密码**\n\n4. **配置 JDK、Maven、Git、Docker**\n\n   系统管理 → 全局工具配置（尽量在服务器本地安装，然后输入安装路径，不推荐使用在线安装，因为在线安装有些资源都在国外，下载速度极慢）\n\n5. **配置邮件服务器信息**\n\n   系统管理 → 系统设置，①Jenkins Location→系统管理员邮件地址②Extended E-mail Notification③邮件通知。\n\n   其中**Extended E-mail Notification**的两个地方可以做个性化配置：\n\n   - Default Content Type 邮件的内容类型，改为`HTML(text/html)`。\n\n   - Default Subject 邮件的标题，改为`构建通知：$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!`。\n\n   - Default Content 邮件的内容，改为👇内容。\n\n     ```html\n     <!DOCTYPE html>\n     <html>\n     <head>\n     <meta charset=\"UTF-8\">\n     <title>${PROJECT_NAME}-第${BUILD_NUMBER}次构建日志</title>\n     </head>\n\n     <body leftmargin=\"8\" marginwidth=\"0\" topmargin=\"8\" marginheight=\"4\" offset=\"0\">\n         <table width=\"95%\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\">\n             <tr>\n                 <td>(本邮件是程序自动下发的，请勿回复！)</td>\n             </tr>\n             <tr>\n                 <td><h2>\n                         <font color=\"#0000FF\">构建结果 - ${BUILD_STATUS}</font>\n                     </h2></td>\n             </tr>\n             <tr>\n                 <td><br />\n                 <b><font color=\"#0B610B\">构建信息</font></b>\n                 <hr size=\"2\" width=\"100%\" align=\"center\" /></td>\n             </tr>\n             <tr>\n                 <td>\n                     <ul>\n                         <li>项目名称： ${PROJECT_NAME}</li>\n                         <li>构建编号： 第${BUILD_NUMBER}次构建</li>\n                         <li>触发原因： ${CAUSE}</li>\n                         <li>构建日志： <a href=\"${BUILD_URL}console\">${BUILD_URL}console</a></li>\n                         <li>构建Url： <a href=\"${BUILD_URL}\">${BUILD_URL}</a></li>\n                         <li>工作目录： <a href=\"${PROJECT_URL}ws\">${PROJECT_URL}ws</a></li>\n                         <li>项目Url： <a href=\"${PROJECT_URL}\">${PROJECT_URL}</a></li>\n                     </ul>\n                 </td>\n             </tr>\n             <tr>\n                 <td><b><font color=\"#0B610B\">Changes Since Last Successful Build:</font></b>\n                 <hr size=\"2\" width=\"100%\" align=\"center\" /></td>\n             </tr>\n             <tr>\n                 <td>\n                     <ul>\n                         <li>历史变更记录 : <a href=\"${PROJECT_URL}changes\">${PROJECT_URL}changes</a></li>\n                     </ul> ${CHANGES_SINCE_LAST_SUCCESS,reverse=true, format=\"Changes for Build #%n:<br />%c<br />\",showPaths=true,changesFormat=\"<pre>[%a]<br />%m</pre>\",pathFormat=\"    %p\"}  \n                 </td>\n             </tr>\n             <tr>\n                 <td><b>Test Informations</b>\n                 <hr size=\"2\" width=\"100%\" align=\"center\" /></td>\n             </tr>\n             <tr>\n                 <td><pre style=\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\">Total:${TEST_COUNTS,var=\"total\"},Pass:${TEST_COUNTS,var=\"pass\"},Failed:${TEST_COUNTS,var=\"fail\"},Skiped:${TEST_COUNTS,var=\"skip\"}</pre>\n                     <br /></td>\n             </tr>\n             <tr>\n                 <td><b><font color=\"#0B610B\">构建日志 (最后 100行):</font></b>\n                 <hr size=\"2\" width=\"100%\" align=\"center\" /></td>\n             </tr>\n             <tr>\n                 <td><textarea cols=\"80\" rows=\"30\" readonly=\"readonly\" style=\"font-family: Courier New\">${BUILD_LOG, maxLines=100}</textarea>\n                 </td>\n             </tr>\n         </table>\n     </body>\n     </html>\n     ```\n\n   - 勾选上 **Enable Debug Mode、Require Administrator for Template Testing、Enable watching for jobs、Allow sending to unregistered users**\n\n## 美化 Jenkins\n\n安利一款material风格的主题：http://afonsof.com/jenkins-material-theme/ ，支持使用 CDN，也支持自定义公司 logo 等等。\n\n## 常用插件\n\n1. Maven Integration plugin：用于构建 Maven 项目\n2. Gitlab Hook Plugin：用于触发 GitLab 的一些 WebHooks 来构建项目\n3. Simple Theme Plugin：配合上面的美化 Jenkins 使用\n4. FireLine Plugin：代码规范检查，已经集成了阿里巴巴的代码规约（P3C）检查\n5. HTML Publisher plugin：将一些测试结果变成 HTML 文档\n6. JUnit Plugin：JUnit 测试\n7. [Checkstyle Plug-in](https://plugins.jenkins.io/checkstyle)：检测代码风格\n8. [FindBugs Plug-in](https://plugins.jenkins.io/findbugs)：检测构建出来的 class 文件是否安全\n9. [Static Analysis Collector Plug-in](https://plugins.jenkins.io/analysis-collector)：对7、8两个插件检测出来的结果进行汇总\n10. Extended E-mail Notification：个性化邮件模板\n11.  [Dingding[钉钉] Plugin](https://wiki.jenkins.io/display/JENKINS/Dingding+Notification+Plugin)：钉钉通知插件\n\n## 常见错误解决\n\n**添加镜像源的时候出现如下错误：**\n\n```shell\nResolving pkg.jenkins-ci.org (pkg.jenkins-ci.org)... failed: Temporary failure in name resolution.\n\nwget: unable to resolve host address ‘pkg.jenkins-ci.org’\n```\n\n解决方法：\n\n`vim  /etc/resolv.conf` 添加一行 `nameserver 8.8.8.8`\n\n**HTML Publisher Plugin 插件在新的Jenkins版本中，打开生成的网页中无法加载CSS、无法点击按钮等情况：**\n\n由于 CSP（Content Security Policy）所致，可在 系统管理→脚本命令行 中执行：\n\n `System.setProperty(\"hudson.model.DirectoryBrowserSupport.CSP\",\"\")`","source":"_posts/2018-01-04.devops-jenkins.md","raw":"---\ntitle: DevOps 之 Jenkins 安装、配置、美化、插件及常见错误处理\ncomments: true\nfancybox: true\ntoc: true\ndate: 2018-01-04 13:19:13\ntags:\n- jenkins\n- devops\ncategories:\n- 技术相关\n- devops\ndescription:\npermalink: devops-jenkins\ntop:\n---\n继续上一篇的话题，既然已经搭建了 GitLab 的代码仓库，那么现在就可以开始进行下一步持续集成环境的搭建了。公司准备利用 Jenkins CI 进行持续集成，本文记录了  Jenkins 的安装、基础配置、界面美化、常用插件及常见错误处理。\n\n<!--more-->\n\n## 安装Jenkins\n\n**准备工作**\n\n1. 安装 JDK，并配置环境变量\n\n2. 安装 maven\n\n3. 配置阿里云的 maven 镜像源地址，`vim /usr/share/maven/conf/settings.xml` 将👇内容添加进 `mirrors` 节点\n\n   ```xml\n   <mirror>\n       <!--This sends everything else to /public -->\n       <id>nexus-aliyun</id>\n       <mirrorOf>*</mirrorOf>\n       <name>Nexus aliyun</name>\n       <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n   </mirror>\n   ```\n\n4. 安装 git\n\n**配置镜像源地址**\n\n```shell\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n\n**修改访问 IP 和 端口号**\n\n1. `vim /etc/sysconfig/jenkins`\n2. `JENKINS_PORT=\"10080\"`\n\n**配置 JDK 路径到 Jenkins 中**\n\n1. `vim /etc/init.d/jenkins`\n\n2. 将自己的 java 目录加入到 `candidates` 里\n\n   ```properties\n   candidates=\"\n   /etc/alternatives/java\n   /usr/lib/jvm/java-1.8.0/bin/java\n   /usr/lib/jvm/jre-1.8.0/bin/java\n   /usr/lib/jvm/java-1.7.0/bin/java\n   /usr/lib/jvm/jre-1.7.0/bin/java\n   /usr/bin/java\n   /opt/jdk1.8.0_144/bin/java\n   \"\n   ```\n\n**安装完毕后启动**\n\n```shell\nsudo service jenkins start # 启动jenkins服务 \n```\n\n## 配置 Jenkins\n\n1. **初始化密码**\n\n   `cat /var/lib/jenkins/secrets/initialAdminPassword`\n\n2. **安装插件**\n\n   选择左侧推荐的插件安装即可\n\n3. **配置管理员账号密码**\n\n4. **配置 JDK、Maven、Git、Docker**\n\n   系统管理 → 全局工具配置（尽量在服务器本地安装，然后输入安装路径，不推荐使用在线安装，因为在线安装有些资源都在国外，下载速度极慢）\n\n5. **配置邮件服务器信息**\n\n   系统管理 → 系统设置，①Jenkins Location→系统管理员邮件地址②Extended E-mail Notification③邮件通知。\n\n   其中**Extended E-mail Notification**的两个地方可以做个性化配置：\n\n   - Default Content Type 邮件的内容类型，改为`HTML(text/html)`。\n\n   - Default Subject 邮件的标题，改为`构建通知：$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!`。\n\n   - Default Content 邮件的内容，改为👇内容。\n\n     ```html\n     <!DOCTYPE html>\n     <html>\n     <head>\n     <meta charset=\"UTF-8\">\n     <title>${PROJECT_NAME}-第${BUILD_NUMBER}次构建日志</title>\n     </head>\n\n     <body leftmargin=\"8\" marginwidth=\"0\" topmargin=\"8\" marginheight=\"4\" offset=\"0\">\n         <table width=\"95%\" cellpadding=\"0\" cellspacing=\"0\" style=\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\">\n             <tr>\n                 <td>(本邮件是程序自动下发的，请勿回复！)</td>\n             </tr>\n             <tr>\n                 <td><h2>\n                         <font color=\"#0000FF\">构建结果 - ${BUILD_STATUS}</font>\n                     </h2></td>\n             </tr>\n             <tr>\n                 <td><br />\n                 <b><font color=\"#0B610B\">构建信息</font></b>\n                 <hr size=\"2\" width=\"100%\" align=\"center\" /></td>\n             </tr>\n             <tr>\n                 <td>\n                     <ul>\n                         <li>项目名称： ${PROJECT_NAME}</li>\n                         <li>构建编号： 第${BUILD_NUMBER}次构建</li>\n                         <li>触发原因： ${CAUSE}</li>\n                         <li>构建日志： <a href=\"${BUILD_URL}console\">${BUILD_URL}console</a></li>\n                         <li>构建Url： <a href=\"${BUILD_URL}\">${BUILD_URL}</a></li>\n                         <li>工作目录： <a href=\"${PROJECT_URL}ws\">${PROJECT_URL}ws</a></li>\n                         <li>项目Url： <a href=\"${PROJECT_URL}\">${PROJECT_URL}</a></li>\n                     </ul>\n                 </td>\n             </tr>\n             <tr>\n                 <td><b><font color=\"#0B610B\">Changes Since Last Successful Build:</font></b>\n                 <hr size=\"2\" width=\"100%\" align=\"center\" /></td>\n             </tr>\n             <tr>\n                 <td>\n                     <ul>\n                         <li>历史变更记录 : <a href=\"${PROJECT_URL}changes\">${PROJECT_URL}changes</a></li>\n                     </ul> ${CHANGES_SINCE_LAST_SUCCESS,reverse=true, format=\"Changes for Build #%n:<br />%c<br />\",showPaths=true,changesFormat=\"<pre>[%a]<br />%m</pre>\",pathFormat=\"    %p\"}  \n                 </td>\n             </tr>\n             <tr>\n                 <td><b>Test Informations</b>\n                 <hr size=\"2\" width=\"100%\" align=\"center\" /></td>\n             </tr>\n             <tr>\n                 <td><pre style=\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\">Total:${TEST_COUNTS,var=\"total\"},Pass:${TEST_COUNTS,var=\"pass\"},Failed:${TEST_COUNTS,var=\"fail\"},Skiped:${TEST_COUNTS,var=\"skip\"}</pre>\n                     <br /></td>\n             </tr>\n             <tr>\n                 <td><b><font color=\"#0B610B\">构建日志 (最后 100行):</font></b>\n                 <hr size=\"2\" width=\"100%\" align=\"center\" /></td>\n             </tr>\n             <tr>\n                 <td><textarea cols=\"80\" rows=\"30\" readonly=\"readonly\" style=\"font-family: Courier New\">${BUILD_LOG, maxLines=100}</textarea>\n                 </td>\n             </tr>\n         </table>\n     </body>\n     </html>\n     ```\n\n   - 勾选上 **Enable Debug Mode、Require Administrator for Template Testing、Enable watching for jobs、Allow sending to unregistered users**\n\n## 美化 Jenkins\n\n安利一款material风格的主题：http://afonsof.com/jenkins-material-theme/ ，支持使用 CDN，也支持自定义公司 logo 等等。\n\n## 常用插件\n\n1. Maven Integration plugin：用于构建 Maven 项目\n2. Gitlab Hook Plugin：用于触发 GitLab 的一些 WebHooks 来构建项目\n3. Simple Theme Plugin：配合上面的美化 Jenkins 使用\n4. FireLine Plugin：代码规范检查，已经集成了阿里巴巴的代码规约（P3C）检查\n5. HTML Publisher plugin：将一些测试结果变成 HTML 文档\n6. JUnit Plugin：JUnit 测试\n7. [Checkstyle Plug-in](https://plugins.jenkins.io/checkstyle)：检测代码风格\n8. [FindBugs Plug-in](https://plugins.jenkins.io/findbugs)：检测构建出来的 class 文件是否安全\n9. [Static Analysis Collector Plug-in](https://plugins.jenkins.io/analysis-collector)：对7、8两个插件检测出来的结果进行汇总\n10. Extended E-mail Notification：个性化邮件模板\n11.  [Dingding[钉钉] Plugin](https://wiki.jenkins.io/display/JENKINS/Dingding+Notification+Plugin)：钉钉通知插件\n\n## 常见错误解决\n\n**添加镜像源的时候出现如下错误：**\n\n```shell\nResolving pkg.jenkins-ci.org (pkg.jenkins-ci.org)... failed: Temporary failure in name resolution.\n\nwget: unable to resolve host address ‘pkg.jenkins-ci.org’\n```\n\n解决方法：\n\n`vim  /etc/resolv.conf` 添加一行 `nameserver 8.8.8.8`\n\n**HTML Publisher Plugin 插件在新的Jenkins版本中，打开生成的网页中无法加载CSS、无法点击按钮等情况：**\n\n由于 CSP（Content Security Policy）所致，可在 系统管理→脚本命令行 中执行：\n\n `System.setProperty(\"hudson.model.DirectoryBrowserSupport.CSP\",\"\")`","slug":"devops-jenkins","published":1,"updated":"2019-01-21T09:21:05.778Z","layout":"post","photos":[],"link":"","_id":"cjr64il6m001skds6h4spkvbl","content":"<p>继续上一篇的话题，既然已经搭建了 GitLab 的代码仓库，那么现在就可以开始进行下一步持续集成环境的搭建了。公司准备利用 Jenkins CI 进行持续集成，本文记录了  Jenkins 的安装、基础配置、界面美化、常用插件及常见错误处理。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h2><p><strong>准备工作</strong></p>\n<ol>\n<li><p>安装 JDK，并配置环境变量</p>\n</li>\n<li><p>安装 maven</p>\n</li>\n<li><p>配置阿里云的 maven 镜像源地址，<code>vim /usr/share/maven/conf/settings.xml</code> 将👇内容添加进 <code>mirrors</code> 节点</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--This sends everything else to /public --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 git</p>\n</li>\n</ol>\n<p><strong>配置镜像源地址</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</div><div class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</div><div class=\"line\">yum install jenkins</div></pre></td></tr></table></figure>\n<p><strong>修改访问 IP 和 端口号</strong></p>\n<ol>\n<li><code>vim /etc/sysconfig/jenkins</code></li>\n<li><code>JENKINS_PORT=&quot;10080&quot;</code></li>\n</ol>\n<p><strong>配置 JDK 路径到 Jenkins 中</strong></p>\n<ol>\n<li><p><code>vim /etc/init.d/jenkins</code></p>\n</li>\n<li><p>将自己的 java 目录加入到 <code>candidates</code> 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">candidates=&quot;</div><div class=\"line\">/etc/alternatives/java</div><div class=\"line\">/usr/lib/jvm/java-1.8.0/bin/java</div><div class=\"line\">/usr/lib/jvm/jre-1.8.0/bin/java</div><div class=\"line\">/usr/lib/jvm/java-1.7.0/bin/java</div><div class=\"line\">/usr/lib/jvm/jre-1.7.0/bin/java</div><div class=\"line\">/usr/bin/java</div><div class=\"line\">/opt/jdk1.8.0_144/bin/java</div><div class=\"line\">&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>安装完毕后启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service jenkins start # 启动jenkins服务</div></pre></td></tr></table></figure>\n<h2 id=\"配置-Jenkins\"><a href=\"#配置-Jenkins\" class=\"headerlink\" title=\"配置 Jenkins\"></a>配置 Jenkins</h2><ol>\n<li><p><strong>初始化密码</strong></p>\n<p><code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></p>\n</li>\n<li><p><strong>安装插件</strong></p>\n<p>选择左侧推荐的插件安装即可</p>\n</li>\n<li><p><strong>配置管理员账号密码</strong></p>\n</li>\n<li><p><strong>配置 JDK、Maven、Git、Docker</strong></p>\n<p>系统管理 → 全局工具配置（尽量在服务器本地安装，然后输入安装路径，不推荐使用在线安装，因为在线安装有些资源都在国外，下载速度极慢）</p>\n</li>\n<li><p><strong>配置邮件服务器信息</strong></p>\n<p>系统管理 → 系统设置，①Jenkins Location→系统管理员邮件地址②Extended E-mail Notification③邮件通知。</p>\n<p>其中<strong>Extended E-mail Notification</strong>的两个地方可以做个性化配置：</p>\n<ul>\n<li><p>Default Content Type 邮件的内容类型，改为<code>HTML(text/html)</code>。</p>\n</li>\n<li><p>Default Subject 邮件的标题，改为<code>构建通知：$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!</code>。</p>\n</li>\n<li><p>Default Content 邮件的内容，改为👇内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>$&#123;PROJECT_NAME&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">leftmargin</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">marginwidth</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">topmargin</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">marginheight</span>=<span class=\"string\">\"4\"</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">width</span>=<span class=\"string\">\"95%\"</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#0000FF\"</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#0B610B\"</span>&gt;</span>构建信息<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">size</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>项目名称： $&#123;PROJECT_NAME&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>构建编号： 第$&#123;BUILD_NUMBER&#125;次构建<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>触发原因： $&#123;CAUSE&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>构建日志： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;BUILD_URL&#125;console\"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>构建Url： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;BUILD_URL&#125;\"</span>&gt;</span>$&#123;BUILD_URL&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>工作目录： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;PROJECT_URL&#125;ws\"</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>项目Url： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;PROJECT_URL&#125;\"</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#0B610B\"</span>&gt;</span>Changes Since Last Successful Build:<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">size</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>历史变更记录 : <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;PROJECT_URL&#125;changes\"</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span> $&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format=\"Changes for Build #%n:<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>%c<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>\",showPaths=true,changesFormat=\"<span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>[%a]<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>%m<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span>\",pathFormat=\"    %p\"&#125;  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Test Informations<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">size</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">pre</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\"</span>&gt;</span>Total:$&#123;TEST_COUNTS,var=\"total\"&#125;,Pass:$&#123;TEST_COUNTS,var=\"pass\"&#125;,Failed:$&#123;TEST_COUNTS,var=\"fail\"&#125;,Skiped:$&#123;TEST_COUNTS,var=\"skip\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#0B610B\"</span>&gt;</span>构建日志 (最后 100行):<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">size</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">readonly</span>=<span class=\"string\">\"readonly\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-family: Courier New\"</span>&gt;</span>$&#123;BUILD_LOG, maxLines=100&#125;<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>勾选上 <strong>Enable Debug Mode、Require Administrator for Template Testing、Enable watching for jobs、Allow sending to unregistered users</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"美化-Jenkins\"><a href=\"#美化-Jenkins\" class=\"headerlink\" title=\"美化 Jenkins\"></a>美化 Jenkins</h2><p>安利一款material风格的主题：<a href=\"http://afonsof.com/jenkins-material-theme/\" target=\"_blank\" rel=\"external\">http://afonsof.com/jenkins-material-theme/</a> ，支持使用 CDN，也支持自定义公司 logo 等等。</p>\n<h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><ol>\n<li>Maven Integration plugin：用于构建 Maven 项目</li>\n<li>Gitlab Hook Plugin：用于触发 GitLab 的一些 WebHooks 来构建项目</li>\n<li>Simple Theme Plugin：配合上面的美化 Jenkins 使用</li>\n<li>FireLine Plugin：代码规范检查，已经集成了阿里巴巴的代码规约（P3C）检查</li>\n<li>HTML Publisher plugin：将一些测试结果变成 HTML 文档</li>\n<li>JUnit Plugin：JUnit 测试</li>\n<li><a href=\"https://plugins.jenkins.io/checkstyle\" target=\"_blank\" rel=\"external\">Checkstyle Plug-in</a>：检测代码风格</li>\n<li><a href=\"https://plugins.jenkins.io/findbugs\" target=\"_blank\" rel=\"external\">FindBugs Plug-in</a>：检测构建出来的 class 文件是否安全</li>\n<li><a href=\"https://plugins.jenkins.io/analysis-collector\" target=\"_blank\" rel=\"external\">Static Analysis Collector Plug-in</a>：对7、8两个插件检测出来的结果进行汇总</li>\n<li>Extended E-mail Notification：个性化邮件模板</li>\n<li><a href=\"https://wiki.jenkins.io/display/JENKINS/Dingding+Notification+Plugin\" target=\"_blank\" rel=\"external\">Dingding[钉钉] Plugin</a>：钉钉通知插件</li>\n</ol>\n<h2 id=\"常见错误解决\"><a href=\"#常见错误解决\" class=\"headerlink\" title=\"常见错误解决\"></a>常见错误解决</h2><p><strong>添加镜像源的时候出现如下错误：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Resolving pkg.jenkins-ci.org (pkg.jenkins-ci.org)... failed: Temporary failure in name resolution.</div><div class=\"line\"></div><div class=\"line\">wget: unable to resolve host address ‘pkg.jenkins-ci.org’</div></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<p><code>vim  /etc/resolv.conf</code> 添加一行 <code>nameserver 8.8.8.8</code></p>\n<p><strong>HTML Publisher Plugin 插件在新的Jenkins版本中，打开生成的网页中无法加载CSS、无法点击按钮等情况：</strong></p>\n<p>由于 CSP（Content Security Policy）所致，可在 系统管理→脚本命令行 中执行：</p>\n<p> <code>System.setProperty(&quot;hudson.model.DirectoryBrowserSupport.CSP&quot;,&quot;&quot;)</code></p>\n","site":{"data":{}},"excerpt":"<p>继续上一篇的话题，既然已经搭建了 GitLab 的代码仓库，那么现在就可以开始进行下一步持续集成环境的搭建了。公司准备利用 Jenkins CI 进行持续集成，本文记录了  Jenkins 的安装、基础配置、界面美化、常用插件及常见错误处理。</p>","more":"<h2 id=\"安装Jenkins\"><a href=\"#安装Jenkins\" class=\"headerlink\" title=\"安装Jenkins\"></a>安装Jenkins</h2><p><strong>准备工作</strong></p>\n<ol>\n<li><p>安装 JDK，并配置环境变量</p>\n</li>\n<li><p>安装 maven</p>\n</li>\n<li><p>配置阿里云的 maven 镜像源地址，<code>vim /usr/share/maven/conf/settings.xml</code> 将👇内容添加进 <code>mirrors</code> 节点</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--This sends everything else to /public --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 git</p>\n</li>\n</ol>\n<p><strong>配置镜像源地址</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</div><div class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</div><div class=\"line\">yum install jenkins</div></pre></td></tr></table></figure>\n<p><strong>修改访问 IP 和 端口号</strong></p>\n<ol>\n<li><code>vim /etc/sysconfig/jenkins</code></li>\n<li><code>JENKINS_PORT=&quot;10080&quot;</code></li>\n</ol>\n<p><strong>配置 JDK 路径到 Jenkins 中</strong></p>\n<ol>\n<li><p><code>vim /etc/init.d/jenkins</code></p>\n</li>\n<li><p>将自己的 java 目录加入到 <code>candidates</code> 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">candidates=&quot;</div><div class=\"line\">/etc/alternatives/java</div><div class=\"line\">/usr/lib/jvm/java-1.8.0/bin/java</div><div class=\"line\">/usr/lib/jvm/jre-1.8.0/bin/java</div><div class=\"line\">/usr/lib/jvm/java-1.7.0/bin/java</div><div class=\"line\">/usr/lib/jvm/jre-1.7.0/bin/java</div><div class=\"line\">/usr/bin/java</div><div class=\"line\">/opt/jdk1.8.0_144/bin/java</div><div class=\"line\">&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>安装完毕后启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service jenkins start # 启动jenkins服务</div></pre></td></tr></table></figure>\n<h2 id=\"配置-Jenkins\"><a href=\"#配置-Jenkins\" class=\"headerlink\" title=\"配置 Jenkins\"></a>配置 Jenkins</h2><ol>\n<li><p><strong>初始化密码</strong></p>\n<p><code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></p>\n</li>\n<li><p><strong>安装插件</strong></p>\n<p>选择左侧推荐的插件安装即可</p>\n</li>\n<li><p><strong>配置管理员账号密码</strong></p>\n</li>\n<li><p><strong>配置 JDK、Maven、Git、Docker</strong></p>\n<p>系统管理 → 全局工具配置（尽量在服务器本地安装，然后输入安装路径，不推荐使用在线安装，因为在线安装有些资源都在国外，下载速度极慢）</p>\n</li>\n<li><p><strong>配置邮件服务器信息</strong></p>\n<p>系统管理 → 系统设置，①Jenkins Location→系统管理员邮件地址②Extended E-mail Notification③邮件通知。</p>\n<p>其中<strong>Extended E-mail Notification</strong>的两个地方可以做个性化配置：</p>\n<ul>\n<li><p>Default Content Type 邮件的内容类型，改为<code>HTML(text/html)</code>。</p>\n</li>\n<li><p>Default Subject 邮件的标题，改为<code>构建通知：$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!</code>。</p>\n</li>\n<li><p>Default Content 邮件的内容，改为👇内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>$&#123;PROJECT_NAME&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">leftmargin</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">marginwidth</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">topmargin</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">marginheight</span>=<span class=\"string\">\"4\"</span> <span class=\"attr\">offset</span>=<span class=\"string\">\"0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">width</span>=<span class=\"string\">\"95%\"</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#0000FF\"</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#0B610B\"</span>&gt;</span>构建信息<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">size</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>项目名称： $&#123;PROJECT_NAME&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>构建编号： 第$&#123;BUILD_NUMBER&#125;次构建<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>触发原因： $&#123;CAUSE&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>构建日志： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;BUILD_URL&#125;console\"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>构建Url： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;BUILD_URL&#125;\"</span>&gt;</span>$&#123;BUILD_URL&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>工作目录： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;PROJECT_URL&#125;ws\"</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>项目Url： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;PROJECT_URL&#125;\"</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#0B610B\"</span>&gt;</span>Changes Since Last Successful Build:<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">size</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>历史变更记录 : <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;PROJECT_URL&#125;changes\"</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span> $&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format=\"Changes for Build #%n:<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>%c<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>\",showPaths=true,changesFormat=\"<span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>[%a]<span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span>%m<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span>\",pathFormat=\"    %p\"&#125;  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>Test Informations<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">size</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">pre</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\"</span>&gt;</span>Total:$&#123;TEST_COUNTS,var=\"total\"&#125;,Pass:$&#123;TEST_COUNTS,var=\"pass\"&#125;,Failed:$&#123;TEST_COUNTS,var=\"fail\"&#125;,Skiped:$&#123;TEST_COUNTS,var=\"skip\"&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#0B610B\"</span>&gt;</span>构建日志 (最后 100行):<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">size</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100%\"</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">readonly</span>=<span class=\"string\">\"readonly\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-family: Courier New\"</span>&gt;</span>$&#123;BUILD_LOG, maxLines=100&#125;<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>勾选上 <strong>Enable Debug Mode、Require Administrator for Template Testing、Enable watching for jobs、Allow sending to unregistered users</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"美化-Jenkins\"><a href=\"#美化-Jenkins\" class=\"headerlink\" title=\"美化 Jenkins\"></a>美化 Jenkins</h2><p>安利一款material风格的主题：<a href=\"http://afonsof.com/jenkins-material-theme/\" target=\"_blank\" rel=\"external\">http://afonsof.com/jenkins-material-theme/</a> ，支持使用 CDN，也支持自定义公司 logo 等等。</p>\n<h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><ol>\n<li>Maven Integration plugin：用于构建 Maven 项目</li>\n<li>Gitlab Hook Plugin：用于触发 GitLab 的一些 WebHooks 来构建项目</li>\n<li>Simple Theme Plugin：配合上面的美化 Jenkins 使用</li>\n<li>FireLine Plugin：代码规范检查，已经集成了阿里巴巴的代码规约（P3C）检查</li>\n<li>HTML Publisher plugin：将一些测试结果变成 HTML 文档</li>\n<li>JUnit Plugin：JUnit 测试</li>\n<li><a href=\"https://plugins.jenkins.io/checkstyle\" target=\"_blank\" rel=\"external\">Checkstyle Plug-in</a>：检测代码风格</li>\n<li><a href=\"https://plugins.jenkins.io/findbugs\" target=\"_blank\" rel=\"external\">FindBugs Plug-in</a>：检测构建出来的 class 文件是否安全</li>\n<li><a href=\"https://plugins.jenkins.io/analysis-collector\" target=\"_blank\" rel=\"external\">Static Analysis Collector Plug-in</a>：对7、8两个插件检测出来的结果进行汇总</li>\n<li>Extended E-mail Notification：个性化邮件模板</li>\n<li><a href=\"https://wiki.jenkins.io/display/JENKINS/Dingding+Notification+Plugin\" target=\"_blank\" rel=\"external\">Dingding[钉钉] Plugin</a>：钉钉通知插件</li>\n</ol>\n<h2 id=\"常见错误解决\"><a href=\"#常见错误解决\" class=\"headerlink\" title=\"常见错误解决\"></a>常见错误解决</h2><p><strong>添加镜像源的时候出现如下错误：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Resolving pkg.jenkins-ci.org (pkg.jenkins-ci.org)... failed: Temporary failure in name resolution.</div><div class=\"line\"></div><div class=\"line\">wget: unable to resolve host address ‘pkg.jenkins-ci.org’</div></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<p><code>vim  /etc/resolv.conf</code> 添加一行 <code>nameserver 8.8.8.8</code></p>\n<p><strong>HTML Publisher Plugin 插件在新的Jenkins版本中，打开生成的网页中无法加载CSS、无法点击按钮等情况：</strong></p>\n<p>由于 CSP（Content Security Policy）所致，可在 系统管理→脚本命令行 中执行：</p>\n<p> <code>System.setProperty(&quot;hudson.model.DirectoryBrowserSupport.CSP&quot;,&quot;&quot;)</code></p>"},{"title":"驼峰命名和下划线命名互相转化","comments":1,"fancybox":false,"toc":false,"date":"2018-01-11T01:47:10.000Z","description":"分享一个驼峰命名和下划线命名互相转化的工具类","top":null,"_content":"```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * <p>\n * 驼峰命名和下划线命名互转\n * </p>\n *\n * @package: com.xkcoding\n * @description： 驼峰命名和下划线命名互转\n * @author: yangkai.shen\n * @date: Created in 2018/1/11 上午9:49\n * @copyright: Copyright (c) 2018\n * @version: 0.0.1\n * @modified: yangkai.shen\n */\npublic class CasesUtil {\n\n\tprivate static final Pattern CAMELCASE_PATTERN = Pattern.compile(\"[A-Z]\");\n\tprivate static final Pattern UNDERLINE_PATTERN = Pattern.compile(\"_[a-z]\");\n\tprivate static final char UNDERLINE = '_';\n\n\t/**\n\t * 驼峰命名（形如：UserInfo）转化为下划线命名（user_info）\n\t *\n\t * @param camelCase 驼峰格式的字符串\n\t * @return 下划线形式的字符串\n\t */\n\tpublic static String camelCase2UnderlineCase(String camelCase) {\n\t\tMatcher matcher = CAMELCASE_PATTERN.matcher(camelCase);\n\t\tStringBuilder builder = new StringBuilder(camelCase);\n\t\tfor (int i = 0; matcher.find(); i++) {\n\t\t\tbuilder.replace(matcher.start() + i, matcher.end() + i, UNDERLINE + matcher.group().toLowerCase());\n\t\t}\n\t\tif (builder.charAt(0) == UNDERLINE) {\n\t\t\tbuilder.deleteCharAt(0);\n\t\t}\n\t\treturn builder.toString();\n\t}\n\n\t/**\n\t * 下划线命名（user_info）转化为驼峰命名（形如：userInfo）\n\t *\n\t * @param underlineCase 下划线形式的字符串\n\t * @return 驼峰格式的字符串\n\t */\n\tpublic static String underlineCase2CamelCase(String underlineCase) {\n\t\tMatcher matcher = UNDERLINE_PATTERN.matcher(underlineCase);\n\t\tStringBuilder builder = new StringBuilder(underlineCase);\n\t\tfor (int i = 0; matcher.find(); i++) {\n\t\t\tbuilder.replace(matcher.start() - i, matcher.end() - i, matcher.group().substring(1).toUpperCase());\n\t\t}\n\t\tif (Character.isUpperCase(builder.charAt(0))) {\n\t\t\tbuilder.replace(0, 1, String.valueOf(Character.toLowerCase(builder.charAt(0))));\n\t\t}\n\t\treturn builder.toString();\n\t}\n}\n```\n\n","source":"_posts/2018-01-11.camelcase-underline-transform.md","raw":"---\ntitle: 驼峰命名和下划线命名互相转化\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-01-11 09:47:10\ntags:\n- 代码片段\n- java\ncategories:\n- 代码片段\n- java\ndescription: 分享一个驼峰命名和下划线命名互相转化的工具类\npermalink: camelcase-underline-transform\ntop:\n---\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * <p>\n * 驼峰命名和下划线命名互转\n * </p>\n *\n * @package: com.xkcoding\n * @description： 驼峰命名和下划线命名互转\n * @author: yangkai.shen\n * @date: Created in 2018/1/11 上午9:49\n * @copyright: Copyright (c) 2018\n * @version: 0.0.1\n * @modified: yangkai.shen\n */\npublic class CasesUtil {\n\n\tprivate static final Pattern CAMELCASE_PATTERN = Pattern.compile(\"[A-Z]\");\n\tprivate static final Pattern UNDERLINE_PATTERN = Pattern.compile(\"_[a-z]\");\n\tprivate static final char UNDERLINE = '_';\n\n\t/**\n\t * 驼峰命名（形如：UserInfo）转化为下划线命名（user_info）\n\t *\n\t * @param camelCase 驼峰格式的字符串\n\t * @return 下划线形式的字符串\n\t */\n\tpublic static String camelCase2UnderlineCase(String camelCase) {\n\t\tMatcher matcher = CAMELCASE_PATTERN.matcher(camelCase);\n\t\tStringBuilder builder = new StringBuilder(camelCase);\n\t\tfor (int i = 0; matcher.find(); i++) {\n\t\t\tbuilder.replace(matcher.start() + i, matcher.end() + i, UNDERLINE + matcher.group().toLowerCase());\n\t\t}\n\t\tif (builder.charAt(0) == UNDERLINE) {\n\t\t\tbuilder.deleteCharAt(0);\n\t\t}\n\t\treturn builder.toString();\n\t}\n\n\t/**\n\t * 下划线命名（user_info）转化为驼峰命名（形如：userInfo）\n\t *\n\t * @param underlineCase 下划线形式的字符串\n\t * @return 驼峰格式的字符串\n\t */\n\tpublic static String underlineCase2CamelCase(String underlineCase) {\n\t\tMatcher matcher = UNDERLINE_PATTERN.matcher(underlineCase);\n\t\tStringBuilder builder = new StringBuilder(underlineCase);\n\t\tfor (int i = 0; matcher.find(); i++) {\n\t\t\tbuilder.replace(matcher.start() - i, matcher.end() - i, matcher.group().substring(1).toUpperCase());\n\t\t}\n\t\tif (Character.isUpperCase(builder.charAt(0))) {\n\t\t\tbuilder.replace(0, 1, String.valueOf(Character.toLowerCase(builder.charAt(0))));\n\t\t}\n\t\treturn builder.toString();\n\t}\n}\n```\n\n","slug":"camelcase-underline-transform","published":1,"updated":"2019-01-21T09:20:54.477Z","layout":"post","photos":[],"link":"","_id":"cjr64il6o001ukds6c9m0xsbf","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 驼峰命名和下划线命名互转</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： 驼峰命名和下划线命名互转</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/1/11 上午9:49</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: 0.0.1</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CasesUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern CAMELCASE_PATTERN = Pattern.compile(<span class=\"string\">\"[A-Z]\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern UNDERLINE_PATTERN = Pattern.compile(<span class=\"string\">\"_[a-z]\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> UNDERLINE = <span class=\"string\">'_'</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 驼峰命名（形如：UserInfo）转化为下划线命名（user_info）</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> camelCase 驼峰格式的字符串</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 下划线形式的字符串</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">camelCase2UnderlineCase</span><span class=\"params\">(String camelCase)</span> </span>&#123;</div><div class=\"line\">\t\tMatcher matcher = CAMELCASE_PATTERN.matcher(camelCase);</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(camelCase);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; matcher.find(); i++) &#123;</div><div class=\"line\">\t\t\tbuilder.replace(matcher.start() + i, matcher.end() + i, UNDERLINE + matcher.group().toLowerCase());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (builder.charAt(<span class=\"number\">0</span>) == UNDERLINE) &#123;</div><div class=\"line\">\t\t\tbuilder.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 下划线命名（user_info）转化为驼峰命名（形如：userInfo）</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> underlineCase 下划线形式的字符串</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 驼峰格式的字符串</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">underlineCase2CamelCase</span><span class=\"params\">(String underlineCase)</span> </span>&#123;</div><div class=\"line\">\t\tMatcher matcher = UNDERLINE_PATTERN.matcher(underlineCase);</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(underlineCase);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; matcher.find(); i++) &#123;</div><div class=\"line\">\t\t\tbuilder.replace(matcher.start() - i, matcher.end() - i, matcher.group().substring(<span class=\"number\">1</span>).toUpperCase());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (Character.isUpperCase(builder.charAt(<span class=\"number\">0</span>))) &#123;</div><div class=\"line\">\t\t\tbuilder.replace(<span class=\"number\">0</span>, <span class=\"number\">1</span>, String.valueOf(Character.toLowerCase(builder.charAt(<span class=\"number\">0</span>))));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 驼峰命名和下划线命名互转</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： 驼峰命名和下划线命名互转</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/1/11 上午9:49</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: 0.0.1</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CasesUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern CAMELCASE_PATTERN = Pattern.compile(<span class=\"string\">\"[A-Z]\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern UNDERLINE_PATTERN = Pattern.compile(<span class=\"string\">\"_[a-z]\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> UNDERLINE = <span class=\"string\">'_'</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 驼峰命名（形如：UserInfo）转化为下划线命名（user_info）</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> camelCase 驼峰格式的字符串</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 下划线形式的字符串</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">camelCase2UnderlineCase</span><span class=\"params\">(String camelCase)</span> </span>&#123;</div><div class=\"line\">\t\tMatcher matcher = CAMELCASE_PATTERN.matcher(camelCase);</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(camelCase);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; matcher.find(); i++) &#123;</div><div class=\"line\">\t\t\tbuilder.replace(matcher.start() + i, matcher.end() + i, UNDERLINE + matcher.group().toLowerCase());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (builder.charAt(<span class=\"number\">0</span>) == UNDERLINE) &#123;</div><div class=\"line\">\t\t\tbuilder.deleteCharAt(<span class=\"number\">0</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 下划线命名（user_info）转化为驼峰命名（形如：userInfo）</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> underlineCase 下划线形式的字符串</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 驼峰格式的字符串</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">underlineCase2CamelCase</span><span class=\"params\">(String underlineCase)</span> </span>&#123;</div><div class=\"line\">\t\tMatcher matcher = UNDERLINE_PATTERN.matcher(underlineCase);</div><div class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(underlineCase);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; matcher.find(); i++) &#123;</div><div class=\"line\">\t\t\tbuilder.replace(matcher.start() - i, matcher.end() - i, matcher.group().substring(<span class=\"number\">1</span>).toUpperCase());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (Character.isUpperCase(builder.charAt(<span class=\"number\">0</span>))) &#123;</div><div class=\"line\">\t\t\tbuilder.replace(<span class=\"number\">0</span>, <span class=\"number\">1</span>, String.valueOf(Character.toLowerCase(builder.charAt(<span class=\"number\">0</span>))));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"ElasticSearch 笔记","comments":1,"fancybox":true,"toc":true,"date":"2018-01-12T09:11:18.000Z","description":null,"top":null,"_content":"`ElasticSearch`是一个基于 `Lucene` 的分布式搜索引擎，业内简称ES。它提供了基于 `RESTful` 风格的全文搜索API。`Elasticsearch` 是用 `Java` 开发的，并作为 `Apache` 许可条款下的开放源码发布，是当前最流行的企业级搜索引擎。另外，它的分布式设计让它天生就适合用于云计算中，并能够达到准实时搜索，而且安装使用方便，还拥有稳定，可靠，快速等特性。本文是我对 ES 的一个完整记录，方便后期查阅。另外大家还可以查阅更多的相关资料对 `ElasticSearch` 有更深入的了解。\n\n<!--more-->\n\n## 安装\n\n### 单机安装\n\n> ElasticSearch 要求本地的 JDK 版本不低于**1.8**\n\n1. 去官网下载最新版的 ES 软件包 https://www.elastic.co/downloads/elasticsearch ，目前 ES 最新版本为6.1.1，我这里采用 wget 命令在终端下载\n\n   ```shell\n   cd apps\n   wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.1.1.tar.gz\n   ```\n\n2. 如果出现 `command not found: wget`，如果是 Linux，可以用 `yum install -y wget` 下载，如果是 Mac 就可以用 `brew install wget` 下载\n\n3. 检查本地 JDK 版本，必须保证为**1.8**版本以上\n\n   ```shell\n   $ java -version\n   java version \"1.8.0_131\"\n   Java(TM) SE Runtime Environment (build 1.8.0_131-b11)\n   Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\n   ```\n\n4. 解压软件包\n\n   ```java\n   tar -zxvf elasticsearch-6.1.1.tar.gz\n   ```\n\n5. 启动 ES\n\n   ```shell\n   cd elasticsearch-6.1.1\n   ./bin/elasticsearch\n   ```\n\n6. 测试，打开 PostMan 测试 http://localhost:9200 ，查看返回的 JSON 信息\n\n   ![PostMan测试单机部署结果](http://static.xkcoding.com/2018-01-12-15157443065618.jpg)\n\n### 分布式安装\n\n这里我会在本地启动3个 ES 节点，分别用不同的端口号来模拟分布式的环境，一个节点为 master，另外两个节点为 slave 节点。\n\n1. 下载安装包，解压3份，分别命名为 `elasticsearch-master`，`elasticsearch-slave1`，`elasticsearch-slave2`\n\n2. 修改 `elasticsearch-master` 的配置文件，`config/elasticsearch.yml`\n\n   ```yaml\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\"\n\n   ## 用于指定集群名称\n   cluster.name: xkcoding\n   ## 用于指定节点名称\n   node.name: master\n   ## 用于指定当前节点是 master 节点\n   node.master: true\n\n   network.host: 127.0.0.1\n   http.port: 9200\n   ```\n\n3. 修改 `elasticsearch-slave1` 的配置文件，`config/elasticsearch.yml`\n\n   ```yaml\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\"\n\n   ## 用于指定集群名称\n   cluster.name: xkcoding\n   ## 用于指定节点名称\n   node.name: slave1\n\n   network.host: 127.0.0.1\n   http.port: 8200\n\n   ## 用于发现 master 节点\n   discovery.zen.ping.unicast.hosts: [\"127.0.0.1\"]\n   ```\n\n4. 修改 `elasticsearch-slave2` 的配置文件，`config/elasticsearch.yml`\n\n   ```yaml\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\"\n\n   ## 用于指定集群名称\n   cluster.name: xkcoding\n   ## 用于指定节点名称\n   node.name: slave2\n\n   network.host: 127.0.0.1\n   http.port: 7200\n\n   ## 用于发现 master 节点\n   discovery.zen.ping.unicast.hosts: [\"127.0.0.1\"]\n   ```\n\n5. 启动 head 插件，打开浏览器，访问 http://localhost:9100，查看分布式节点的运行状态\n\n   ![分布式 ES 的集群状态](http://static.xkcoding.com/2018-01-12-15157518741687.jpg)\n\n### 插件安装\n\n#### head 插件\n\n##### 独立安装\n\n> 独立安装是指，head插件安装在es外部，\n> 独立安装 head 插件，要求本地的 Node 版本不低于8.0\n\n1. 前往 GitHub 搜索 `elasticsearch-head` ，这里我直接给出插件的 GitHub 仓库地址，https://github.com/mobz/elasticsearch-head ，clone 源代码\n\n   ```shell\n   cd ~/apps\n   git clone https://github.com/mobz/elasticsearch-head.git\n   ```\n\n2. 检查本地 Node 版本，必须保证为**8.0**版本以上\n\n   ```shell\n   $ node -v\n   v8.5.0\n   ```\n\n3. 编译 head 插件\n\n   ```shell\n   cd ~/apps/elasticsearch-head\n   npm install\n   ```\n\n   > 如果觉得这一步的依赖下载比较慢的话，有两种解决方式：\n   > 1. 可以选择科学上网\n   > 2. 使用国内阿里的镜像源，使用 cnpm 安装，具体如何配置，本文不做赘述。具体参考：http://npm.taobao.org/\n\n4. 配置 ES 支持跨域访问，让 head 插件可以访问到\n\n   ```shell\n   cd ~/apps/elasticsearch-6.1.1\n   vim config/elasticsearch.yml\n   ```\n\n   添加进下面两行对跨域的配置\n\n   ```yaml\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\"\n   ```\n\n   保存 `:wq!` 配置文件，启动 ES\n\n   ```shell\n   ./bin/elasticsearch\n   ```\n\n5. 运行 head 插件\n\n   ```shell\n   cd ~/apps/elasticsearch-head\n   npm run start\n   ```\n\n6. 打开浏览器，访问 http://localhost:9100/ ，查看 head 插件运行效果\n\n   ![运行 head 插件，查看单机 ES 状态](http://static.xkcoding.com/2018-01-12-15157472517495.jpg)\n\n##### 集成安装\n\n> ES 版本 5.x 以上，不支持这种方式安装，如果想使用head插件，请使用独立安装\n\n1. 使用ES提供的插件安装方式安装\n\n   ```shell\n   ./bin/plugin install mobz/elasticsearch-head\n   ```\n\n2. 打开浏览器，访问 http://localhost:9200/_plugin/head/ ，查看 head 插件运行效果\n\n#### ik 中文分词插件\n\n> ik 分词插件版本与ES版本对照，请查阅：https://github.com/medcl/elasticsearch-analysis-ik#versions \n\n##### 手动安装\n\n1. 在 ES 的 plugins 目录下创建 ik 目录\n\n   ```shell\n   cd ./plugins && mkdir ik\n   ```\n\n2. 下载编译包到 ik 目录，下载地址：https://github.com/medcl/elasticsearch-analysis-ik/releases \n\n3. 解压下载的压缩包\n\n   ```shell\n   unzip elasticsearch-analysis-ik-{ ES 版本 }.zip \n   ```\n\n4. 重启 ES\n\n##### 自动安装\n\n1. 使用 ES 提供的插件安装方式安装，替换下面的ES 版本，具体信息可以去 https://github.com/medcl/elasticsearch-analysis-ik/releases 查看\n\n   ```shell\n   ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/{ ES 版本 }/elasticsearch-analysis-ik-{ ES 版本 }.zip\n   ```\n\n2. 重启 ES\n\n------\n\n## 常见错误\n\n### 错误1：进程虚拟内存\n\n```bash\n[3]: max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\n```\n\nvm.max_map_count：限制一个进程可以拥有的VMA(虚拟内存区域)的数量。\n\n切换到root用户，修改配置文件：\n\n```bash\nvim /etc/sysctl.conf \n```\n\n添加下面的内容：\n\n```properties\nvm.max_map_count=655360\n```\n\n然后执行命令：\n\n```bash\nsysctl -p\n```\n\n### 错误2：文件权限不足\n\n```bash\n[1]: max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]\n```\n\n用的是es用户，而不是root，所以文件权限不足。\n\n**使用root用户登录**\n\n修改配置文件：\n\n```bash\nvim /etc/security/limits.conf\n```\n\n添加下面的内容：\n\n```properties\n* soft nofile 65536\n\n* hard nofile 131072\n\n* soft nproc 4096\n\n* hard nproc 4096\n```\n\n### 重启终端窗口\n\n所有错误修改完毕，一定要重启你的终端，否则配置无效。\n\n---\n\n## 基础概念\n\n### 集群和节点\n\n每个节点都是一个 ES 的单独实例，通过 node_name 来指定各个节点的名字。\n\n集群是通过配置cluster_name来使得节点找到集群。\n\n### 索引\n\n索引是含有相同属性的文档集合，在 ES 中是通过一个名字来识别的，而且要求是<span style=\"color:red\">**英文字母小写且不包含中划线**</span>\n\n索引对应于 SQL 的 database\n\n### 类型\n\n索引可以含有一个或者多个类型，文档必须属于一个类型\n\n类型对应于 SQL 的 table\n\n### 文档\n\n文档是可以被索引的基本数据单位\n\n文档对应于 SQL 的一条记录\n\n### 分片\n\n每个索引都有多个分片，每个分片都是一个 Lucene 索引\n\n### 备份\n\n拷贝一份分片就完成了分片的备份\n\n---\n\n## 基本用法\n\n### 请求方式\n\nAPI 基本格式：`http://<ip>:<port>/<索引>/<类型>/<文档 id>`\n\nAPI 请求方式：GET、POST、PUT、DELETE\n\n### 索引\n\n#### 创建\n\n假设创建一个 people 的索引，打开 PostMan，输入地址 http://localhost:9200/people ，将方法改为 <span style=\"color:red\">PUT</span> 方法，将👇的 json 放入 Body 请求体，点击 Send，若出现 `\"acknowledged\":true`，则代表索引创建成功。\n\n请求体的 json:\n\n```json\n{\n\t\"settings\":{\n\t\t\"number_of_shards\":3,\n\t\t\"number_of_replicas\":1\n\t},\n\t\"mappings\":{\n\t\t\"person\":{\n\t\t\t\"properties\":{\n\t\t\t\t\"name\":{\n\t\t\t\t\t\"type\":\"text\"\n\t\t\t\t},\n\t\t\t\t\"age\":{\n\t\t\t\t\t\"type\":\"integer\"\n\t\t\t\t},\n\t\t\t\t\"country\":{\n\t\t\t\t\t\"type\":\"keyword\"\n\t\t\t\t},\n\t\t\t\t\"birthday\":{\n\t\t\t\t\t\"type\":\"date\",\n\t\t\t\t\t\"format\":\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n{% note success %} \n\n**json 请求体字段解释：**\n\n1. settings 字段可以不指定\n2. number_of_shards 代表分片数（默认为5）\n3. number_of_replicas 代表备份数（默认为1）\n4. text 类型的字段搜索时将会被分词\n5. keyword 类型的字段搜索时将不会被分词\n6. epoch_millis 类型代表时间戳格式\n\n{% endnote %}\n\n返回值：\n\n```json\n{\n    \"acknowledged\": true,\n    \"shards_acknowledged\": true,\n    \"index\": \"people\"\n}\n```\n\n如图所示：\n\n![创建索引](http://static.xkcoding.com/2018-01-17-15161702463041.jpg)\n\n#### 删除\n\n打开 PostMan，输入地址 http://localhost:9200/people ，将方法改为 <span style=\"color:red\">DELETE</span> 方法，点击 Send。\n\n返回值：\n\n```json\n{\n    \"acknowledged\": true\n}\n```\n\n### 插入\n\n现在我们向之前创建的类型中添加一条文档记录，插入分为2种方式，一种是指定 ID，一种是不指定 ID，当不指定 ID 时，ID 由 ES 生成。\n\n#### 指定 ID 插入\n\n打开 PostMan，输入地址 http://localhost:9200/people/person/1 ，将文档的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">PUT</span> 方法，点击 Send。\n\n文档内容：\n\n```json\n{\n\t\"name\":\"xkcoding\",\n\t\"age\":24,\n\t\"country\":\"中国\",\n\t\"birthday\":\"1994-11-22\"\n}\n```\n\n返回值：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"1\",\n    \"_version\": 1,\n    \"result\": \"created\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 2,\n        \"failed\": 0\n    },\n    \"_seq_no\": 0,\n    \"_primary_term\": 1\n}\n```\n\n如图所示：\n\n![指定 id 插入](http://static.xkcoding.com/2018-01-17-15161719204773.jpg)\n\n#### 不指定 ID 插入\n\n打开 PostMan，输入地址 http://localhost:9200/people/person ，将文档的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">POST</span> 方法，点击 Send。\n\n文档内容：\n\n```json\n{\n\t\"name\":\"中年xkcoding\",\n\t\"age\":34,\n\t\"country\":\"中国\",\n\t\"birthday\":\"1984-11-22\"\n}\n```\n\n返回值：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"I4_sAmEBVnl1iCRF78pG\",\n    \"_version\": 1,\n    \"result\": \"created\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 2,\n        \"failed\": 0\n    },\n    \"_seq_no\": 0,\n    \"_primary_term\": 1\n}\n```\n\n如图所示：\n\n![不指定 id 插入](http://static.xkcoding.com/2018-01-17-15161725779321.jpg)\n\n然后前往 head 插件查看是否插入数据\n\n\n![head 插件中查看添加的文档记录](http://static.xkcoding.com/2018-01-17-15161727420397.jpg)\n\n### 修改\n\n修改文档数据，打开 PostMan，输入地址 http://localhost:9200/people/person/1/_update ，将请求的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">POST</span> 方法，点击 Send。\n\n请求体：\n\n```json\n{\n\t\"doc\":{\n\t\t\"name\":\"沈扬凯\"\n\t}\n}\n```\n\n{% note danger %} \n\n注意：修改的时候 URL 必须后面跟_update，然后要修改的字段必须放在 doc 字段里。\n\n{% endnote%}\n\n返回值：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"1\",\n    \"_version\": 2,\n    \"result\": \"updated\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 2,\n        \"failed\": 0\n    },\n    \"_seq_no\": 1,\n    \"_primary_term\": 1\n}\n```\n\n如图所示：\n\n![修改文档](http://static.xkcoding.com/2018-01-17-15161741012942.jpg)\n\n### 删除\n\n打开 PostMan，输入地址 http://localhost:9200/people/1 ，将方法改为 <span style=\"color:red\">DELETE</span> 方法，点击 Send。\n\n返回值：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"1\",\n    \"_version\": 3,\n    \"result\": \"deleted\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 2,\n        \"failed\": 0\n    },\n    \"_seq_no\": 2,\n    \"_primary_term\": 1\n}\n```\n\n### 查询\n\nES 正如其名，本就是为了 Search 而生，所以查询是 ES 最牛逼的地方。使用上面提到的插入语法，预先插入一堆原始数据，用 head 查看。\n\n![预先插入的原始数据](http://static.xkcoding.com/2018-01-17-15161767712389.jpg)\n\n#### 简单查询\n\n打开 PostMan，输入地址 http://localhost:9200/people/person/1 ，将方法改为 <span style=\"color:red\">GET</span> 方法，点击 Send。\n\n返回 id 为1的文档数据：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"1\",\n    \"_version\": 1,\n    \"found\": true,\n    \"_source\": {\n        \"name\": \"xkcoding\",\n        \"age\": 24,\n        \"country\": \"中国\",\n        \"birthday\": \"1994-11-22\"\n    }\n}\n```\n\n#### 条件查询\n\n这里还是使用 PostMan 来测试我们的条件查询\n\n请求地址：http://localhost:9200/people/_search\n\n请求方式：POST\n\n{% note danger %} \n\n返回值因为文章篇幅有限，就不将返回的内容贴在文章中了，请自行测试下方请求体，验证结果\n\n{% endnote %}\n\n1. 查询所有文档数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"match_all\":{}\n   \t}\n   }\n   ```\n\n2. 分页查询文档数据，第 0 条开始，每页 3 条数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"match_all\":{}\n   \t},\n   \t\"from\":0,\n   \t\"size\":3\n   }\n   ```\n\n3. 查询名字中包含「小」的文档\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"match\":{\n   \t\t\t\"name\":\"小\"\n   \t\t}\n   \t}\n   }\n   ```\n\n4. 查询名字中包含「小」的文档，并且按照生日降序排序\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"match\":{\n   \t\t\t\"name\":\"小\"\n   \t\t}\n   \t},\n   \t\"sort\":[\n   \t\t{\n   \t\t\t\"birthday\":{\n   \t\t\t\t\"order\":\"desc\"\n   \t\t\t}\n   \t\t}\n   \t]\n   }\n   ```\n\n#### 聚合查询\n\n请求地址：http://localhost:9200/people/_search\n\n请求方式：POST\n\n1. 按照年龄聚合数据，查出文档中不同年龄所占的人数\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"group_by_age\":{\n   \t\t\t\"terms\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n2. 多个聚合，分别按照年龄、生日聚合数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"group_by_age\":{\n   \t\t\t\"terms\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t},\n   \t\t\"group_by_birthday\":{\n   \t\t\t\"terms\":{\n   \t\t\t\t\"field\":\"birthday\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n3. 年龄最小\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"min\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n4. 年龄最大\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"max\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n5. 平均年龄\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"avg\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n6. 年龄总和\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"sum\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n7. 统计，将3、4、5、6的信息统一查询\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"stats\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n---\n\n## 高级查询\n\n### query\n\n#### 模糊匹配\n\n查询名字中包含「小」的文档\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"name\":\"小\"\n\t\t}\n\t}\n}\n```\n\n#### 词组匹配\n\n查询名字只包含「小凯」的文档，我们先使用如下的请求体查询\n\n```json\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"name\":\"小凯\"\n\t\t}\n\t}\n}\n```\n\n返回的结果：\n\n```json\n// 省略其余部分\n\"hits\": {\n  \"total\": 3,\n  \"max_score\": 1.8386619,\n  \"hits\": [\n    {\n      \"_index\": \"people\",\n      \"_type\": \"person\",\n      \"_id\": \"2\",\n      \"_score\": 1.8386619,\n      \"_source\": {\n        \"name\": \"年轻的小凯\",\n        \"age\": 14,\n        \"country\": \"中国\",\n        \"birthday\": \"2004-11-22\"\n      }\n    },\n    {\n      \"_index\": \"people\",\n      \"_type\": \"person\",\n      \"_id\": \"4\",\n      \"_score\": 0.8984401,\n      \"_source\": {\n        \"name\": \"狂小狗\",\n        \"age\": 20,\n        \"country\": \"中国\",\n        \"birthday\": \"1998-01-01\"\n      }\n    },\n    {\n      \"_index\": \"people\",\n      \"_type\": \"person\",\n      \"_id\": \"9\",\n      \"_score\": 0.8142733,\n      \"_source\": {\n        \"name\": \"小泽\",\n        \"age\": 32,\n        \"country\": \"日本\",\n        \"birthday\": \"1986-02-02\"\n      }\n    }\n  ]\n}\n```\n\n通过结果，可以发现，通过 match 去查询的时候，ES 返回的是分别包含「小」、「凯」的文档，如何去查询 name 字段只包含「小凯」的文档呢？使用 **match_phrase** 可以满足要求。\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"match_phrase\":{\n\t\t\t\"name\":\"小凯\"\n\t\t}\n\t}\n}\n```\n\n#### 字段查询\n\n查询所有的中国人\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"term\":{\n\t\t\t\"country\":\"中国\"\n\t\t}\n\t}\n}\n```\n\n#### 范围查询（支持数值型和日期型）\n\n查询年龄 24 ≤ age＜30 直接的数据\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"range\":{\n\t\t\t\"age\":{\n\t\t\t\t\"gte\":24,\n\t\t\t\t\"lt\":30\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### filter\n\n{% note danger%}\n\n一般结合 bool 一起使用，\n\n{% endnote %}\n\n查询年龄为23的文档数据\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"filter\":{\n\t\t\t\t\"term\":{\n\t\t\t\t\t\"age\":23\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### 复合条件查询\n\n#### 固定分数查询\n\n1. 查询名字中包含「小」的文档，并固定查询分数\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"constant_score\":{\n   \t\t\t\"filter\":{\n   \t\t\t\t\"match\":{\n   \t\t\t\t\t\"name\":\"小\"\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n2. 查询名字中包含「小」的文档，并固定查询分数为2\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"constant_score\":{\n   \t\t\t\"filter\":{\n   \t\t\t\t\"match\":{\n   \t\t\t\t\t\"name\":\"小\"\n   \t\t\t\t}\n   \t\t\t},\n   \t\t\t\"boost\":2\n   \t\t}\n   \t}\n   }\n   ```\n\n#### 布尔查询\n\n1. 查询是国家为中国或者年龄为30的数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"bool\":{\n   \t\t\t\"should\":[\n   \t\t\t\t{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"country\":\"中国\"\n   \t\t\t\t\t}\n   \t\t\t\t},{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"age\":30\n   \t\t\t\t\t}\n   \t\t\t\t}\t\n   \t\t\t]\n   \t\t}\n   \t}\n   }\n   ```\n\n2. 查询国家为中国并且年龄为23的数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"bool\":{\n   \t\t\t\"must\":[\n   \t\t\t\t{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"country\":\"中国\"\n   \t\t\t\t\t}\n   \t\t\t\t},{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"age\":23\n   \t\t\t\t\t}\n   \t\t\t\t}\t\n   \t\t\t]\n   \t\t}\n   \t}\n   }\n   ```\n\n3. 查询国家为中国并且年龄为23并且生日比1995-07-01早的数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"bool\":{\n   \t\t\t\"must\":[\n   \t\t\t\t{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"country\":\"中国\"\n   \t\t\t\t\t}\n   \t\t\t\t},{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"age\":23\n   \t\t\t\t\t}\n   \t\t\t\t}\t\n   \t\t\t],\n   \t\t\t\"filter\":[{\n   \t\t\t\t\"range\":{\n   \t\t\t\t\t\"birthday\":{\n   \t\t\t\t\t\t\"lt\":\"1995-07-01\"\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t}]\n   \t\t}\n   \t}\n   }\n   ```\n\n---\n\n## Spring Boot 集成 ES\n\n{% note success %}\n\n代码托管在 GitHub：[戳我获取源码](https://github.com/xkcoding/spring-boot-demo/tree/v-1.5.x/spring-boot-demo-elasticsearch)\n\n{% endnote %}\n\n### Spring Boot 集成 ES 的配置类\n\n在 Spring Boot 中配置类需要使用 `@Configuration` 来标注\n\n**application.yml**\n\n```yaml\nserver:\n  port: 8080\n  context-path: /demo\nelasticsearch:\n  host: 127.0.0.1\n  port: 9300\n  cluster:\n    name: xkcoding\n```\n\n**ElasticSearchConfig.java**\n\n```java\npackage com.xkcoding.springbootdemoelasticsearch.config;\n\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.common.transport.TransportAddress;\nimport org.elasticsearch.transport.client.PreBuiltTransportClient;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\n/**\n * <p>\n * ES 的配置类\n * </p>\n *\n * @package: com.xkcoding.springbootdemoelasticsearch.config\n * @description： ES 的配置类\n * @author: yangkai.shen\n * @date: Created in 2018/1/18 下午4:41\n * @copyright: Copyright (c) 2018\n * @version: 0.0.1\n * @modified: yangkai.shen\n */\n@Configuration\npublic class ElasticSearchConfig {\n\t@Value(\"${elasticsearch.host}\")\n\tprivate String host;\n\n\t@Value(\"${elasticsearch.port}\")\n\tprivate int port;\n\n\t@Value(\"${elasticsearch.cluster.name}\")\n\tprivate String clusterName;\n\n\t@Bean\n\tpublic TransportClient esClient() throws UnknownHostException {\n\t\tSettings settings = Settings.builder().put(\"cluster.name\", this.clusterName).put(\"client.transport.sniff\", true).build();\n\n\t\tTransportAddress master = new TransportAddress(InetAddress.getByName(host), port);\n\t\tTransportClient client = new PreBuiltTransportClient(settings).addTransportAddress(master);\n\t\treturn client;\n\t}\n}\n```\n\n### 插入\n\n```java\n/**\n * 插入一条数据到 ES 中，id 由 ES 生成\n *\n * @param name     名称\n * @param country  国籍\n * @param age      年龄\n * @param birthday 生日\n * @return 插入数据的主键\n */\n@PostMapping(\"/person\")\npublic ApiResponse add(@RequestParam String name,\n                       @RequestParam String country,\n                       @RequestParam Integer age,\n                       @RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\") Date birthday) {\n\ttry {\n\t\tXContentBuilder content = XContentFactory.jsonBuilder()\n\t\t\t\t.startObject()\n\t\t\t\t.field(\"name\", name)\n\t\t\t\t.field(\"country\", country)\n\t\t\t\t.field(\"age\", age)\n\t\t\t\t.field(\"birthday\", birthday.getTime())\n\t\t\t\t.endObject();\n\n\t\tIndexResponse response = esClient.prepareIndex(INDEX, TYPE).setSource(content).get();\n\t\treturn ApiResponse.ofSuccess(response.getId());\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);\n\t}\n}\n```\n\n### 修改\n\n```java\n/**\n * 根据主键，修改传递字段对应的值\n *\n * @param id       ES 中的 id\n * @param name     姓名\n * @param country  国籍\n * @param age      年龄\n * @param birthday 生日\n * @return UPDATED 代表文档修改成功\n */\n@PutMapping(\"/person/{id}\")\npublic ApiResponse update(@PathVariable String id, \n                          @RequestParam(value = \"name\", required = false) String name, \n                          @RequestParam(value = \"country\", required = false) String country, \n                          @RequestParam(value = \"age\", required = false) Integer age, \n                          @RequestParam(value = \"birthday\", required = false) @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\") Date birthday) {\n\tUpdateRequest request = new UpdateRequest(INDEX, TYPE, id);\n\ttry {\n\t\tXContentBuilder builder = XContentFactory.jsonBuilder().startObject();\n\t\tif (!Strings.isNullOrEmpty(name)) {\n\t\t\tbuilder.field(\"name\", name);\n\t\t}\n\t\tif (!Strings.isNullOrEmpty(country)) {\n\t\t\tbuilder.field(\"country\", country);\n\t\t}\n\t\tif (age != null && age > 0) {\n\t\t\tbuilder.field(\"age\", age);\n\t\t}\n\t\tif (birthday != null) {\n\t\t\tbuilder.field(\"birthday\", birthday.getTime());\n\t\t}\n\t\tbuilder.endObject();\n\t\trequest.doc(builder);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);\n\t}\n\ttry {\n\t\tUpdateResponse response = esClient.update(request).get();\n\t\treturn ApiResponse.ofSuccess(response);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);\n\t}\n}\n```\n\n### 删除\n\n```java\n/**\n * 根据 id 删除 ES 的一条记录\n *\n * @param id ES 中的 id\n * @return DELETED 代表删除\n */\n@DeleteMapping(\"/person/{id}\")\npublic ApiResponse delete(@PathVariable String id) {\n\tDeleteResponse response = esClient.prepareDelete(INDEX, TYPE, id).get();\n\treturn ApiResponse.ofSuccess(response.getResult());\n}\n```\n\n### 简单查询\n\n```java\n/**\n * 简单查询 根据 id 查 ES 中的文档内容\n *\n * @param id ES 中存储的 id\n * @return 对应 id 的文档内容\n */\n@GetMapping(\"/person/{id}\")\npublic ApiResponse get(@PathVariable String id) {\n\tGetResponse response = esClient.prepareGet(INDEX, TYPE, id).get();\n\tif (!response.isExists() || response.isSourceEmpty()) {\n\t\treturn ApiResponse.ofStatus(Status.NOT_FOUND);\n\t}\n\treturn ApiResponse.ofSuccess(response.getSource());\n}\n```\n\n### 复合查询\n\n```java\n/**\n * 复合查询，根据传进来的条件，查询具体内容\n *\n * @param name    根据姓名匹配\n * @param country 根据国籍匹配\n * @param gtAge   大于年龄\n * @param ltAge   小于年龄\n * @return 满足条件的文档内容\n */\n@PostMapping(\"/person/query\")\npublic ApiResponse query(@RequestParam(value = \"name\", required = false) String name,\n                         @RequestParam(value = \"country\", required = false) String country,\n                         @RequestParam(value = \"gt_age\", defaultValue = \"0\") int gtAge,\n                         @RequestParam(value = \"lt_age\", required = false) Integer ltAge) {\n\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n\tif (!Strings.isNullOrEmpty(name)) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"name\", name));\n\t}\n\n\tif (!Strings.isNullOrEmpty(country)) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"country\", country));\n\t}\n\n\tRangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(\"age\").from(gtAge);\n\n\tif (ltAge != null && ltAge > 0) {\n\t\trangeQueryBuilder.to(ltAge);\n\t}\n\n\tboolQueryBuilder.filter(rangeQueryBuilder);\n\n\tSearchRequestBuilder searchRequestBuilder = esClient.prepareSearch(INDEX)\n\t\t\t.setTypes(TYPE)\n\t\t\t.setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\n\t\t\t.setQuery(boolQueryBuilder)\n\t\t\t.setFrom(0)\n\t\t\t.setSize(20);\n\n\tlog.info(\"【query】:{}\", searchRequestBuilder);\n\n\tSearchResponse searchResponse = searchRequestBuilder.get();\n\tList<Map<String, Object>> result = Lists.newArrayList();\n\tsearchResponse.getHits().forEach(hit -> {\n\t\tresult.add(hit.getSourceAsMap());\n\t});\n\n\treturn ApiResponse.ofSuccess(result);\n}\n```\n\n### 搜索建议（有时间补充）\n\n### 聚合查询（有时间补充）\n\n## 结语\n\nElasticSearch 在现在是一个应用十分广泛，且火热的技术，本文只是我在入门 ES 的一点小小的记录，更多 ES 的专业知识，优化技巧，还需要大量的学习与实践！\n\n推荐学习地址：\n\n1. 官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html\n2. Elastic 中文社区：https://elasticsearch.cn/","source":"_posts/2018-01-12.elasticsearch-note.md","raw":"---\ntitle: ElasticSearch 笔记\ncomments: true\nfancybox: true\ntoc: true\ndate: 2018-01-12 17:11:18\ntags:\n- elasticsearch\ncategories:\n- 技术相关\n- elasticsearch\ndescription:\npermalink: elasticsearch_note\ntop:\n---\n`ElasticSearch`是一个基于 `Lucene` 的分布式搜索引擎，业内简称ES。它提供了基于 `RESTful` 风格的全文搜索API。`Elasticsearch` 是用 `Java` 开发的，并作为 `Apache` 许可条款下的开放源码发布，是当前最流行的企业级搜索引擎。另外，它的分布式设计让它天生就适合用于云计算中，并能够达到准实时搜索，而且安装使用方便，还拥有稳定，可靠，快速等特性。本文是我对 ES 的一个完整记录，方便后期查阅。另外大家还可以查阅更多的相关资料对 `ElasticSearch` 有更深入的了解。\n\n<!--more-->\n\n## 安装\n\n### 单机安装\n\n> ElasticSearch 要求本地的 JDK 版本不低于**1.8**\n\n1. 去官网下载最新版的 ES 软件包 https://www.elastic.co/downloads/elasticsearch ，目前 ES 最新版本为6.1.1，我这里采用 wget 命令在终端下载\n\n   ```shell\n   cd apps\n   wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.1.1.tar.gz\n   ```\n\n2. 如果出现 `command not found: wget`，如果是 Linux，可以用 `yum install -y wget` 下载，如果是 Mac 就可以用 `brew install wget` 下载\n\n3. 检查本地 JDK 版本，必须保证为**1.8**版本以上\n\n   ```shell\n   $ java -version\n   java version \"1.8.0_131\"\n   Java(TM) SE Runtime Environment (build 1.8.0_131-b11)\n   Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\n   ```\n\n4. 解压软件包\n\n   ```java\n   tar -zxvf elasticsearch-6.1.1.tar.gz\n   ```\n\n5. 启动 ES\n\n   ```shell\n   cd elasticsearch-6.1.1\n   ./bin/elasticsearch\n   ```\n\n6. 测试，打开 PostMan 测试 http://localhost:9200 ，查看返回的 JSON 信息\n\n   ![PostMan测试单机部署结果](http://static.xkcoding.com/2018-01-12-15157443065618.jpg)\n\n### 分布式安装\n\n这里我会在本地启动3个 ES 节点，分别用不同的端口号来模拟分布式的环境，一个节点为 master，另外两个节点为 slave 节点。\n\n1. 下载安装包，解压3份，分别命名为 `elasticsearch-master`，`elasticsearch-slave1`，`elasticsearch-slave2`\n\n2. 修改 `elasticsearch-master` 的配置文件，`config/elasticsearch.yml`\n\n   ```yaml\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\"\n\n   ## 用于指定集群名称\n   cluster.name: xkcoding\n   ## 用于指定节点名称\n   node.name: master\n   ## 用于指定当前节点是 master 节点\n   node.master: true\n\n   network.host: 127.0.0.1\n   http.port: 9200\n   ```\n\n3. 修改 `elasticsearch-slave1` 的配置文件，`config/elasticsearch.yml`\n\n   ```yaml\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\"\n\n   ## 用于指定集群名称\n   cluster.name: xkcoding\n   ## 用于指定节点名称\n   node.name: slave1\n\n   network.host: 127.0.0.1\n   http.port: 8200\n\n   ## 用于发现 master 节点\n   discovery.zen.ping.unicast.hosts: [\"127.0.0.1\"]\n   ```\n\n4. 修改 `elasticsearch-slave2` 的配置文件，`config/elasticsearch.yml`\n\n   ```yaml\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\"\n\n   ## 用于指定集群名称\n   cluster.name: xkcoding\n   ## 用于指定节点名称\n   node.name: slave2\n\n   network.host: 127.0.0.1\n   http.port: 7200\n\n   ## 用于发现 master 节点\n   discovery.zen.ping.unicast.hosts: [\"127.0.0.1\"]\n   ```\n\n5. 启动 head 插件，打开浏览器，访问 http://localhost:9100，查看分布式节点的运行状态\n\n   ![分布式 ES 的集群状态](http://static.xkcoding.com/2018-01-12-15157518741687.jpg)\n\n### 插件安装\n\n#### head 插件\n\n##### 独立安装\n\n> 独立安装是指，head插件安装在es外部，\n> 独立安装 head 插件，要求本地的 Node 版本不低于8.0\n\n1. 前往 GitHub 搜索 `elasticsearch-head` ，这里我直接给出插件的 GitHub 仓库地址，https://github.com/mobz/elasticsearch-head ，clone 源代码\n\n   ```shell\n   cd ~/apps\n   git clone https://github.com/mobz/elasticsearch-head.git\n   ```\n\n2. 检查本地 Node 版本，必须保证为**8.0**版本以上\n\n   ```shell\n   $ node -v\n   v8.5.0\n   ```\n\n3. 编译 head 插件\n\n   ```shell\n   cd ~/apps/elasticsearch-head\n   npm install\n   ```\n\n   > 如果觉得这一步的依赖下载比较慢的话，有两种解决方式：\n   > 1. 可以选择科学上网\n   > 2. 使用国内阿里的镜像源，使用 cnpm 安装，具体如何配置，本文不做赘述。具体参考：http://npm.taobao.org/\n\n4. 配置 ES 支持跨域访问，让 head 插件可以访问到\n\n   ```shell\n   cd ~/apps/elasticsearch-6.1.1\n   vim config/elasticsearch.yml\n   ```\n\n   添加进下面两行对跨域的配置\n\n   ```yaml\n   http.cors.enabled: true\n   http.cors.allow-origin: \"*\"\n   ```\n\n   保存 `:wq!` 配置文件，启动 ES\n\n   ```shell\n   ./bin/elasticsearch\n   ```\n\n5. 运行 head 插件\n\n   ```shell\n   cd ~/apps/elasticsearch-head\n   npm run start\n   ```\n\n6. 打开浏览器，访问 http://localhost:9100/ ，查看 head 插件运行效果\n\n   ![运行 head 插件，查看单机 ES 状态](http://static.xkcoding.com/2018-01-12-15157472517495.jpg)\n\n##### 集成安装\n\n> ES 版本 5.x 以上，不支持这种方式安装，如果想使用head插件，请使用独立安装\n\n1. 使用ES提供的插件安装方式安装\n\n   ```shell\n   ./bin/plugin install mobz/elasticsearch-head\n   ```\n\n2. 打开浏览器，访问 http://localhost:9200/_plugin/head/ ，查看 head 插件运行效果\n\n#### ik 中文分词插件\n\n> ik 分词插件版本与ES版本对照，请查阅：https://github.com/medcl/elasticsearch-analysis-ik#versions \n\n##### 手动安装\n\n1. 在 ES 的 plugins 目录下创建 ik 目录\n\n   ```shell\n   cd ./plugins && mkdir ik\n   ```\n\n2. 下载编译包到 ik 目录，下载地址：https://github.com/medcl/elasticsearch-analysis-ik/releases \n\n3. 解压下载的压缩包\n\n   ```shell\n   unzip elasticsearch-analysis-ik-{ ES 版本 }.zip \n   ```\n\n4. 重启 ES\n\n##### 自动安装\n\n1. 使用 ES 提供的插件安装方式安装，替换下面的ES 版本，具体信息可以去 https://github.com/medcl/elasticsearch-analysis-ik/releases 查看\n\n   ```shell\n   ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/{ ES 版本 }/elasticsearch-analysis-ik-{ ES 版本 }.zip\n   ```\n\n2. 重启 ES\n\n------\n\n## 常见错误\n\n### 错误1：进程虚拟内存\n\n```bash\n[3]: max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\n```\n\nvm.max_map_count：限制一个进程可以拥有的VMA(虚拟内存区域)的数量。\n\n切换到root用户，修改配置文件：\n\n```bash\nvim /etc/sysctl.conf \n```\n\n添加下面的内容：\n\n```properties\nvm.max_map_count=655360\n```\n\n然后执行命令：\n\n```bash\nsysctl -p\n```\n\n### 错误2：文件权限不足\n\n```bash\n[1]: max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]\n```\n\n用的是es用户，而不是root，所以文件权限不足。\n\n**使用root用户登录**\n\n修改配置文件：\n\n```bash\nvim /etc/security/limits.conf\n```\n\n添加下面的内容：\n\n```properties\n* soft nofile 65536\n\n* hard nofile 131072\n\n* soft nproc 4096\n\n* hard nproc 4096\n```\n\n### 重启终端窗口\n\n所有错误修改完毕，一定要重启你的终端，否则配置无效。\n\n---\n\n## 基础概念\n\n### 集群和节点\n\n每个节点都是一个 ES 的单独实例，通过 node_name 来指定各个节点的名字。\n\n集群是通过配置cluster_name来使得节点找到集群。\n\n### 索引\n\n索引是含有相同属性的文档集合，在 ES 中是通过一个名字来识别的，而且要求是<span style=\"color:red\">**英文字母小写且不包含中划线**</span>\n\n索引对应于 SQL 的 database\n\n### 类型\n\n索引可以含有一个或者多个类型，文档必须属于一个类型\n\n类型对应于 SQL 的 table\n\n### 文档\n\n文档是可以被索引的基本数据单位\n\n文档对应于 SQL 的一条记录\n\n### 分片\n\n每个索引都有多个分片，每个分片都是一个 Lucene 索引\n\n### 备份\n\n拷贝一份分片就完成了分片的备份\n\n---\n\n## 基本用法\n\n### 请求方式\n\nAPI 基本格式：`http://<ip>:<port>/<索引>/<类型>/<文档 id>`\n\nAPI 请求方式：GET、POST、PUT、DELETE\n\n### 索引\n\n#### 创建\n\n假设创建一个 people 的索引，打开 PostMan，输入地址 http://localhost:9200/people ，将方法改为 <span style=\"color:red\">PUT</span> 方法，将👇的 json 放入 Body 请求体，点击 Send，若出现 `\"acknowledged\":true`，则代表索引创建成功。\n\n请求体的 json:\n\n```json\n{\n\t\"settings\":{\n\t\t\"number_of_shards\":3,\n\t\t\"number_of_replicas\":1\n\t},\n\t\"mappings\":{\n\t\t\"person\":{\n\t\t\t\"properties\":{\n\t\t\t\t\"name\":{\n\t\t\t\t\t\"type\":\"text\"\n\t\t\t\t},\n\t\t\t\t\"age\":{\n\t\t\t\t\t\"type\":\"integer\"\n\t\t\t\t},\n\t\t\t\t\"country\":{\n\t\t\t\t\t\"type\":\"keyword\"\n\t\t\t\t},\n\t\t\t\t\"birthday\":{\n\t\t\t\t\t\"type\":\"date\",\n\t\t\t\t\t\"format\":\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n{% note success %} \n\n**json 请求体字段解释：**\n\n1. settings 字段可以不指定\n2. number_of_shards 代表分片数（默认为5）\n3. number_of_replicas 代表备份数（默认为1）\n4. text 类型的字段搜索时将会被分词\n5. keyword 类型的字段搜索时将不会被分词\n6. epoch_millis 类型代表时间戳格式\n\n{% endnote %}\n\n返回值：\n\n```json\n{\n    \"acknowledged\": true,\n    \"shards_acknowledged\": true,\n    \"index\": \"people\"\n}\n```\n\n如图所示：\n\n![创建索引](http://static.xkcoding.com/2018-01-17-15161702463041.jpg)\n\n#### 删除\n\n打开 PostMan，输入地址 http://localhost:9200/people ，将方法改为 <span style=\"color:red\">DELETE</span> 方法，点击 Send。\n\n返回值：\n\n```json\n{\n    \"acknowledged\": true\n}\n```\n\n### 插入\n\n现在我们向之前创建的类型中添加一条文档记录，插入分为2种方式，一种是指定 ID，一种是不指定 ID，当不指定 ID 时，ID 由 ES 生成。\n\n#### 指定 ID 插入\n\n打开 PostMan，输入地址 http://localhost:9200/people/person/1 ，将文档的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">PUT</span> 方法，点击 Send。\n\n文档内容：\n\n```json\n{\n\t\"name\":\"xkcoding\",\n\t\"age\":24,\n\t\"country\":\"中国\",\n\t\"birthday\":\"1994-11-22\"\n}\n```\n\n返回值：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"1\",\n    \"_version\": 1,\n    \"result\": \"created\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 2,\n        \"failed\": 0\n    },\n    \"_seq_no\": 0,\n    \"_primary_term\": 1\n}\n```\n\n如图所示：\n\n![指定 id 插入](http://static.xkcoding.com/2018-01-17-15161719204773.jpg)\n\n#### 不指定 ID 插入\n\n打开 PostMan，输入地址 http://localhost:9200/people/person ，将文档的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">POST</span> 方法，点击 Send。\n\n文档内容：\n\n```json\n{\n\t\"name\":\"中年xkcoding\",\n\t\"age\":34,\n\t\"country\":\"中国\",\n\t\"birthday\":\"1984-11-22\"\n}\n```\n\n返回值：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"I4_sAmEBVnl1iCRF78pG\",\n    \"_version\": 1,\n    \"result\": \"created\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 2,\n        \"failed\": 0\n    },\n    \"_seq_no\": 0,\n    \"_primary_term\": 1\n}\n```\n\n如图所示：\n\n![不指定 id 插入](http://static.xkcoding.com/2018-01-17-15161725779321.jpg)\n\n然后前往 head 插件查看是否插入数据\n\n\n![head 插件中查看添加的文档记录](http://static.xkcoding.com/2018-01-17-15161727420397.jpg)\n\n### 修改\n\n修改文档数据，打开 PostMan，输入地址 http://localhost:9200/people/person/1/_update ，将请求的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">POST</span> 方法，点击 Send。\n\n请求体：\n\n```json\n{\n\t\"doc\":{\n\t\t\"name\":\"沈扬凯\"\n\t}\n}\n```\n\n{% note danger %} \n\n注意：修改的时候 URL 必须后面跟_update，然后要修改的字段必须放在 doc 字段里。\n\n{% endnote%}\n\n返回值：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"1\",\n    \"_version\": 2,\n    \"result\": \"updated\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 2,\n        \"failed\": 0\n    },\n    \"_seq_no\": 1,\n    \"_primary_term\": 1\n}\n```\n\n如图所示：\n\n![修改文档](http://static.xkcoding.com/2018-01-17-15161741012942.jpg)\n\n### 删除\n\n打开 PostMan，输入地址 http://localhost:9200/people/1 ，将方法改为 <span style=\"color:red\">DELETE</span> 方法，点击 Send。\n\n返回值：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"1\",\n    \"_version\": 3,\n    \"result\": \"deleted\",\n    \"_shards\": {\n        \"total\": 2,\n        \"successful\": 2,\n        \"failed\": 0\n    },\n    \"_seq_no\": 2,\n    \"_primary_term\": 1\n}\n```\n\n### 查询\n\nES 正如其名，本就是为了 Search 而生，所以查询是 ES 最牛逼的地方。使用上面提到的插入语法，预先插入一堆原始数据，用 head 查看。\n\n![预先插入的原始数据](http://static.xkcoding.com/2018-01-17-15161767712389.jpg)\n\n#### 简单查询\n\n打开 PostMan，输入地址 http://localhost:9200/people/person/1 ，将方法改为 <span style=\"color:red\">GET</span> 方法，点击 Send。\n\n返回 id 为1的文档数据：\n\n```json\n{\n    \"_index\": \"people\",\n    \"_type\": \"person\",\n    \"_id\": \"1\",\n    \"_version\": 1,\n    \"found\": true,\n    \"_source\": {\n        \"name\": \"xkcoding\",\n        \"age\": 24,\n        \"country\": \"中国\",\n        \"birthday\": \"1994-11-22\"\n    }\n}\n```\n\n#### 条件查询\n\n这里还是使用 PostMan 来测试我们的条件查询\n\n请求地址：http://localhost:9200/people/_search\n\n请求方式：POST\n\n{% note danger %} \n\n返回值因为文章篇幅有限，就不将返回的内容贴在文章中了，请自行测试下方请求体，验证结果\n\n{% endnote %}\n\n1. 查询所有文档数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"match_all\":{}\n   \t}\n   }\n   ```\n\n2. 分页查询文档数据，第 0 条开始，每页 3 条数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"match_all\":{}\n   \t},\n   \t\"from\":0,\n   \t\"size\":3\n   }\n   ```\n\n3. 查询名字中包含「小」的文档\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"match\":{\n   \t\t\t\"name\":\"小\"\n   \t\t}\n   \t}\n   }\n   ```\n\n4. 查询名字中包含「小」的文档，并且按照生日降序排序\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"match\":{\n   \t\t\t\"name\":\"小\"\n   \t\t}\n   \t},\n   \t\"sort\":[\n   \t\t{\n   \t\t\t\"birthday\":{\n   \t\t\t\t\"order\":\"desc\"\n   \t\t\t}\n   \t\t}\n   \t]\n   }\n   ```\n\n#### 聚合查询\n\n请求地址：http://localhost:9200/people/_search\n\n请求方式：POST\n\n1. 按照年龄聚合数据，查出文档中不同年龄所占的人数\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"group_by_age\":{\n   \t\t\t\"terms\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n2. 多个聚合，分别按照年龄、生日聚合数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"group_by_age\":{\n   \t\t\t\"terms\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t},\n   \t\t\"group_by_birthday\":{\n   \t\t\t\"terms\":{\n   \t\t\t\t\"field\":\"birthday\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n3. 年龄最小\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"min\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n4. 年龄最大\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"max\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n5. 平均年龄\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"avg\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n6. 年龄总和\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"sum\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n7. 统计，将3、4、5、6的信息统一查询\n\n   请求体：\n\n   ```json\n   {\n   \t\"aggs\":{\n   \t\t\"grades_ages\":{\n   \t\t\t\"stats\":{\n   \t\t\t\t\"field\":\"age\"\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n---\n\n## 高级查询\n\n### query\n\n#### 模糊匹配\n\n查询名字中包含「小」的文档\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"name\":\"小\"\n\t\t}\n\t}\n}\n```\n\n#### 词组匹配\n\n查询名字只包含「小凯」的文档，我们先使用如下的请求体查询\n\n```json\n{\n\t\"query\":{\n\t\t\"match\":{\n\t\t\t\"name\":\"小凯\"\n\t\t}\n\t}\n}\n```\n\n返回的结果：\n\n```json\n// 省略其余部分\n\"hits\": {\n  \"total\": 3,\n  \"max_score\": 1.8386619,\n  \"hits\": [\n    {\n      \"_index\": \"people\",\n      \"_type\": \"person\",\n      \"_id\": \"2\",\n      \"_score\": 1.8386619,\n      \"_source\": {\n        \"name\": \"年轻的小凯\",\n        \"age\": 14,\n        \"country\": \"中国\",\n        \"birthday\": \"2004-11-22\"\n      }\n    },\n    {\n      \"_index\": \"people\",\n      \"_type\": \"person\",\n      \"_id\": \"4\",\n      \"_score\": 0.8984401,\n      \"_source\": {\n        \"name\": \"狂小狗\",\n        \"age\": 20,\n        \"country\": \"中国\",\n        \"birthday\": \"1998-01-01\"\n      }\n    },\n    {\n      \"_index\": \"people\",\n      \"_type\": \"person\",\n      \"_id\": \"9\",\n      \"_score\": 0.8142733,\n      \"_source\": {\n        \"name\": \"小泽\",\n        \"age\": 32,\n        \"country\": \"日本\",\n        \"birthday\": \"1986-02-02\"\n      }\n    }\n  ]\n}\n```\n\n通过结果，可以发现，通过 match 去查询的时候，ES 返回的是分别包含「小」、「凯」的文档，如何去查询 name 字段只包含「小凯」的文档呢？使用 **match_phrase** 可以满足要求。\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"match_phrase\":{\n\t\t\t\"name\":\"小凯\"\n\t\t}\n\t}\n}\n```\n\n#### 字段查询\n\n查询所有的中国人\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"term\":{\n\t\t\t\"country\":\"中国\"\n\t\t}\n\t}\n}\n```\n\n#### 范围查询（支持数值型和日期型）\n\n查询年龄 24 ≤ age＜30 直接的数据\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"range\":{\n\t\t\t\"age\":{\n\t\t\t\t\"gte\":24,\n\t\t\t\t\"lt\":30\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### filter\n\n{% note danger%}\n\n一般结合 bool 一起使用，\n\n{% endnote %}\n\n查询年龄为23的文档数据\n\n请求体：\n\n```json\n{\n\t\"query\":{\n\t\t\"bool\":{\n\t\t\t\"filter\":{\n\t\t\t\t\"term\":{\n\t\t\t\t\t\"age\":23\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### 复合条件查询\n\n#### 固定分数查询\n\n1. 查询名字中包含「小」的文档，并固定查询分数\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"constant_score\":{\n   \t\t\t\"filter\":{\n   \t\t\t\t\"match\":{\n   \t\t\t\t\t\"name\":\"小\"\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   \t}\n   }\n   ```\n\n2. 查询名字中包含「小」的文档，并固定查询分数为2\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"constant_score\":{\n   \t\t\t\"filter\":{\n   \t\t\t\t\"match\":{\n   \t\t\t\t\t\"name\":\"小\"\n   \t\t\t\t}\n   \t\t\t},\n   \t\t\t\"boost\":2\n   \t\t}\n   \t}\n   }\n   ```\n\n#### 布尔查询\n\n1. 查询是国家为中国或者年龄为30的数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"bool\":{\n   \t\t\t\"should\":[\n   \t\t\t\t{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"country\":\"中国\"\n   \t\t\t\t\t}\n   \t\t\t\t},{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"age\":30\n   \t\t\t\t\t}\n   \t\t\t\t}\t\n   \t\t\t]\n   \t\t}\n   \t}\n   }\n   ```\n\n2. 查询国家为中国并且年龄为23的数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"bool\":{\n   \t\t\t\"must\":[\n   \t\t\t\t{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"country\":\"中国\"\n   \t\t\t\t\t}\n   \t\t\t\t},{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"age\":23\n   \t\t\t\t\t}\n   \t\t\t\t}\t\n   \t\t\t]\n   \t\t}\n   \t}\n   }\n   ```\n\n3. 查询国家为中国并且年龄为23并且生日比1995-07-01早的数据\n\n   请求体：\n\n   ```json\n   {\n   \t\"query\":{\n   \t\t\"bool\":{\n   \t\t\t\"must\":[\n   \t\t\t\t{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"country\":\"中国\"\n   \t\t\t\t\t}\n   \t\t\t\t},{\n   \t\t\t\t\t\"match\":{\n   \t\t\t\t\t\t\"age\":23\n   \t\t\t\t\t}\n   \t\t\t\t}\t\n   \t\t\t],\n   \t\t\t\"filter\":[{\n   \t\t\t\t\"range\":{\n   \t\t\t\t\t\"birthday\":{\n   \t\t\t\t\t\t\"lt\":\"1995-07-01\"\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t}]\n   \t\t}\n   \t}\n   }\n   ```\n\n---\n\n## Spring Boot 集成 ES\n\n{% note success %}\n\n代码托管在 GitHub：[戳我获取源码](https://github.com/xkcoding/spring-boot-demo/tree/v-1.5.x/spring-boot-demo-elasticsearch)\n\n{% endnote %}\n\n### Spring Boot 集成 ES 的配置类\n\n在 Spring Boot 中配置类需要使用 `@Configuration` 来标注\n\n**application.yml**\n\n```yaml\nserver:\n  port: 8080\n  context-path: /demo\nelasticsearch:\n  host: 127.0.0.1\n  port: 9300\n  cluster:\n    name: xkcoding\n```\n\n**ElasticSearchConfig.java**\n\n```java\npackage com.xkcoding.springbootdemoelasticsearch.config;\n\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.common.transport.TransportAddress;\nimport org.elasticsearch.transport.client.PreBuiltTransportClient;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\n/**\n * <p>\n * ES 的配置类\n * </p>\n *\n * @package: com.xkcoding.springbootdemoelasticsearch.config\n * @description： ES 的配置类\n * @author: yangkai.shen\n * @date: Created in 2018/1/18 下午4:41\n * @copyright: Copyright (c) 2018\n * @version: 0.0.1\n * @modified: yangkai.shen\n */\n@Configuration\npublic class ElasticSearchConfig {\n\t@Value(\"${elasticsearch.host}\")\n\tprivate String host;\n\n\t@Value(\"${elasticsearch.port}\")\n\tprivate int port;\n\n\t@Value(\"${elasticsearch.cluster.name}\")\n\tprivate String clusterName;\n\n\t@Bean\n\tpublic TransportClient esClient() throws UnknownHostException {\n\t\tSettings settings = Settings.builder().put(\"cluster.name\", this.clusterName).put(\"client.transport.sniff\", true).build();\n\n\t\tTransportAddress master = new TransportAddress(InetAddress.getByName(host), port);\n\t\tTransportClient client = new PreBuiltTransportClient(settings).addTransportAddress(master);\n\t\treturn client;\n\t}\n}\n```\n\n### 插入\n\n```java\n/**\n * 插入一条数据到 ES 中，id 由 ES 生成\n *\n * @param name     名称\n * @param country  国籍\n * @param age      年龄\n * @param birthday 生日\n * @return 插入数据的主键\n */\n@PostMapping(\"/person\")\npublic ApiResponse add(@RequestParam String name,\n                       @RequestParam String country,\n                       @RequestParam Integer age,\n                       @RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\") Date birthday) {\n\ttry {\n\t\tXContentBuilder content = XContentFactory.jsonBuilder()\n\t\t\t\t.startObject()\n\t\t\t\t.field(\"name\", name)\n\t\t\t\t.field(\"country\", country)\n\t\t\t\t.field(\"age\", age)\n\t\t\t\t.field(\"birthday\", birthday.getTime())\n\t\t\t\t.endObject();\n\n\t\tIndexResponse response = esClient.prepareIndex(INDEX, TYPE).setSource(content).get();\n\t\treturn ApiResponse.ofSuccess(response.getId());\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);\n\t}\n}\n```\n\n### 修改\n\n```java\n/**\n * 根据主键，修改传递字段对应的值\n *\n * @param id       ES 中的 id\n * @param name     姓名\n * @param country  国籍\n * @param age      年龄\n * @param birthday 生日\n * @return UPDATED 代表文档修改成功\n */\n@PutMapping(\"/person/{id}\")\npublic ApiResponse update(@PathVariable String id, \n                          @RequestParam(value = \"name\", required = false) String name, \n                          @RequestParam(value = \"country\", required = false) String country, \n                          @RequestParam(value = \"age\", required = false) Integer age, \n                          @RequestParam(value = \"birthday\", required = false) @DateTimeFormat(pattern = \"yyyy-MM-dd HH:mm:ss\") Date birthday) {\n\tUpdateRequest request = new UpdateRequest(INDEX, TYPE, id);\n\ttry {\n\t\tXContentBuilder builder = XContentFactory.jsonBuilder().startObject();\n\t\tif (!Strings.isNullOrEmpty(name)) {\n\t\t\tbuilder.field(\"name\", name);\n\t\t}\n\t\tif (!Strings.isNullOrEmpty(country)) {\n\t\t\tbuilder.field(\"country\", country);\n\t\t}\n\t\tif (age != null && age > 0) {\n\t\t\tbuilder.field(\"age\", age);\n\t\t}\n\t\tif (birthday != null) {\n\t\t\tbuilder.field(\"birthday\", birthday.getTime());\n\t\t}\n\t\tbuilder.endObject();\n\t\trequest.doc(builder);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);\n\t}\n\ttry {\n\t\tUpdateResponse response = esClient.update(request).get();\n\t\treturn ApiResponse.ofSuccess(response);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);\n\t}\n}\n```\n\n### 删除\n\n```java\n/**\n * 根据 id 删除 ES 的一条记录\n *\n * @param id ES 中的 id\n * @return DELETED 代表删除\n */\n@DeleteMapping(\"/person/{id}\")\npublic ApiResponse delete(@PathVariable String id) {\n\tDeleteResponse response = esClient.prepareDelete(INDEX, TYPE, id).get();\n\treturn ApiResponse.ofSuccess(response.getResult());\n}\n```\n\n### 简单查询\n\n```java\n/**\n * 简单查询 根据 id 查 ES 中的文档内容\n *\n * @param id ES 中存储的 id\n * @return 对应 id 的文档内容\n */\n@GetMapping(\"/person/{id}\")\npublic ApiResponse get(@PathVariable String id) {\n\tGetResponse response = esClient.prepareGet(INDEX, TYPE, id).get();\n\tif (!response.isExists() || response.isSourceEmpty()) {\n\t\treturn ApiResponse.ofStatus(Status.NOT_FOUND);\n\t}\n\treturn ApiResponse.ofSuccess(response.getSource());\n}\n```\n\n### 复合查询\n\n```java\n/**\n * 复合查询，根据传进来的条件，查询具体内容\n *\n * @param name    根据姓名匹配\n * @param country 根据国籍匹配\n * @param gtAge   大于年龄\n * @param ltAge   小于年龄\n * @return 满足条件的文档内容\n */\n@PostMapping(\"/person/query\")\npublic ApiResponse query(@RequestParam(value = \"name\", required = false) String name,\n                         @RequestParam(value = \"country\", required = false) String country,\n                         @RequestParam(value = \"gt_age\", defaultValue = \"0\") int gtAge,\n                         @RequestParam(value = \"lt_age\", required = false) Integer ltAge) {\n\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n\tif (!Strings.isNullOrEmpty(name)) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"name\", name));\n\t}\n\n\tif (!Strings.isNullOrEmpty(country)) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"country\", country));\n\t}\n\n\tRangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(\"age\").from(gtAge);\n\n\tif (ltAge != null && ltAge > 0) {\n\t\trangeQueryBuilder.to(ltAge);\n\t}\n\n\tboolQueryBuilder.filter(rangeQueryBuilder);\n\n\tSearchRequestBuilder searchRequestBuilder = esClient.prepareSearch(INDEX)\n\t\t\t.setTypes(TYPE)\n\t\t\t.setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\n\t\t\t.setQuery(boolQueryBuilder)\n\t\t\t.setFrom(0)\n\t\t\t.setSize(20);\n\n\tlog.info(\"【query】:{}\", searchRequestBuilder);\n\n\tSearchResponse searchResponse = searchRequestBuilder.get();\n\tList<Map<String, Object>> result = Lists.newArrayList();\n\tsearchResponse.getHits().forEach(hit -> {\n\t\tresult.add(hit.getSourceAsMap());\n\t});\n\n\treturn ApiResponse.ofSuccess(result);\n}\n```\n\n### 搜索建议（有时间补充）\n\n### 聚合查询（有时间补充）\n\n## 结语\n\nElasticSearch 在现在是一个应用十分广泛，且火热的技术，本文只是我在入门 ES 的一点小小的记录，更多 ES 的专业知识，优化技巧，还需要大量的学习与实践！\n\n推荐学习地址：\n\n1. 官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html\n2. Elastic 中文社区：https://elasticsearch.cn/","slug":"elasticsearch_note","published":1,"updated":"2019-01-21T09:20:37.151Z","layout":"post","photos":[],"link":"","_id":"cjr64il6r001ykds6cfmylfij","content":"<p><code>ElasticSearch</code>是一个基于 <code>Lucene</code> 的分布式搜索引擎，业内简称ES。它提供了基于 <code>RESTful</code> 风格的全文搜索API。<code>Elasticsearch</code> 是用 <code>Java</code> 开发的，并作为 <code>Apache</code> 许可条款下的开放源码发布，是当前最流行的企业级搜索引擎。另外，它的分布式设计让它天生就适合用于云计算中，并能够达到准实时搜索，而且安装使用方便，还拥有稳定，可靠，快速等特性。本文是我对 ES 的一个完整记录，方便后期查阅。另外大家还可以查阅更多的相关资料对 <code>ElasticSearch</code> 有更深入的了解。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"单机安装\"><a href=\"#单机安装\" class=\"headerlink\" title=\"单机安装\"></a>单机安装</h3><blockquote>\n<p>ElasticSearch 要求本地的 JDK 版本不低于<strong>1.8</strong></p>\n</blockquote>\n<ol>\n<li><p>去官网下载最新版的 ES 软件包 <a href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"external\">https://www.elastic.co/downloads/elasticsearch</a> ，目前 ES 最新版本为6.1.1，我这里采用 wget 命令在终端下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd apps</div><div class=\"line\">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.1.1.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果出现 <code>command not found: wget</code>，如果是 Linux，可以用 <code>yum install -y wget</code> 下载，如果是 Mac 就可以用 <code>brew install wget</code> 下载</p>\n</li>\n<li><p>检查本地 JDK 版本，必须保证为<strong>1.8</strong>版本以上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -version</span></div><div class=\"line\">java version \"1.8.0_131\"</div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)</div></pre></td></tr></table></figure>\n</li>\n<li><p>解压软件包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf elasticsearch-<span class=\"number\">6.1</span>.1.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动 ES</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd elasticsearch-6.1.1</div><div class=\"line\">./bin/elasticsearch</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试，打开 PostMan 测试 <a href=\"http://localhost:9200\" target=\"_blank\" rel=\"external\">http://localhost:9200</a> ，查看返回的 JSON 信息</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-12-15157443065618.jpg\" alt=\"PostMan测试单机部署结果\"></p>\n</li>\n</ol>\n<h3 id=\"分布式安装\"><a href=\"#分布式安装\" class=\"headerlink\" title=\"分布式安装\"></a>分布式安装</h3><p>这里我会在本地启动3个 ES 节点，分别用不同的端口号来模拟分布式的环境，一个节点为 master，另外两个节点为 slave 节点。</p>\n<ol>\n<li><p>下载安装包，解压3份，分别命名为 <code>elasticsearch-master</code>，<code>elasticsearch-slave1</code>，<code>elasticsearch-slave2</code></p>\n</li>\n<li><p>修改 <code>elasticsearch-master</code> 的配置文件，<code>config/elasticsearch.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">http.cors.enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于指定集群名称</span></div><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">xkcoding</span></div><div class=\"line\"><span class=\"comment\">## 用于指定节点名称</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">master</span></div><div class=\"line\"><span class=\"comment\">## 用于指定当前节点是 master 节点</span></div><div class=\"line\"><span class=\"string\">node.master:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"string\">http.port:</span> <span class=\"number\">9200</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <code>elasticsearch-slave1</code> 的配置文件，<code>config/elasticsearch.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">http.cors.enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于指定集群名称</span></div><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">xkcoding</span></div><div class=\"line\"><span class=\"comment\">## 用于指定节点名称</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">slave1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"string\">http.port:</span> <span class=\"number\">8200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于发现 master 节点</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">[\"127.0.0.1\"]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <code>elasticsearch-slave2</code> 的配置文件，<code>config/elasticsearch.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">http.cors.enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于指定集群名称</span></div><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">xkcoding</span></div><div class=\"line\"><span class=\"comment\">## 用于指定节点名称</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">slave2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"string\">http.port:</span> <span class=\"number\">7200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于发现 master 节点</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">[\"127.0.0.1\"]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>启动 head 插件，打开浏览器，访问 <a href=\"http://localhost:9100，查看分布式节点的运行状态\" target=\"_blank\" rel=\"external\">http://localhost:9100，查看分布式节点的运行状态</a></p>\n<p><img src=\"http://static.xkcoding.com/2018-01-12-15157518741687.jpg\" alt=\"分布式 ES 的集群状态\"></p>\n</li>\n</ol>\n<h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><h4 id=\"head-插件\"><a href=\"#head-插件\" class=\"headerlink\" title=\"head 插件\"></a>head 插件</h4><h5 id=\"独立安装\"><a href=\"#独立安装\" class=\"headerlink\" title=\"独立安装\"></a>独立安装</h5><blockquote>\n<p>独立安装是指，head插件安装在es外部，<br>独立安装 head 插件，要求本地的 Node 版本不低于8.0</p>\n</blockquote>\n<ol>\n<li><p>前往 GitHub 搜索 <code>elasticsearch-head</code> ，这里我直接给出插件的 GitHub 仓库地址，<a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"external\">https://github.com/mobz/elasticsearch-head</a> ，clone 源代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/apps</div><div class=\"line\">git clone https://github.com/mobz/elasticsearch-head.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查本地 Node 版本，必须保证为<strong>8.0</strong>版本以上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node -v</span></div><div class=\"line\">v8.5.0</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译 head 插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/apps/elasticsearch-head</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果觉得这一步的依赖下载比较慢的话，有两种解决方式：</p>\n<ol>\n<li>可以选择科学上网</li>\n<li>使用国内阿里的镜像源，使用 cnpm 安装，具体如何配置，本文不做赘述。具体参考：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></li>\n</ol>\n</blockquote>\n</li>\n<li><p>配置 ES 支持跨域访问，让 head 插件可以访问到</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/apps/elasticsearch-6.1.1</div><div class=\"line\">vim config/elasticsearch.yml</div></pre></td></tr></table></figure>\n<p>添加进下面两行对跨域的配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">http.cors.enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></div></pre></td></tr></table></figure>\n<p>保存 <code>:wq!</code> 配置文件，启动 ES</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/elasticsearch</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行 head 插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/apps/elasticsearch-head</div><div class=\"line\">npm run start</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器，访问 <a href=\"http://localhost:9100/\" target=\"_blank\" rel=\"external\">http://localhost:9100/</a> ，查看 head 插件运行效果</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-12-15157472517495.jpg\" alt=\"运行 head 插件，查看单机 ES 状态\"></p>\n</li>\n</ol>\n<h5 id=\"集成安装\"><a href=\"#集成安装\" class=\"headerlink\" title=\"集成安装\"></a>集成安装</h5><blockquote>\n<p>ES 版本 5.x 以上，不支持这种方式安装，如果想使用head插件，请使用独立安装</p>\n</blockquote>\n<ol>\n<li><p>使用ES提供的插件安装方式安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/plugin install mobz/elasticsearch-head</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器，访问 <a href=\"http://localhost:9200/_plugin/head/\" target=\"_blank\" rel=\"external\">http://localhost:9200/_plugin/head/</a> ，查看 head 插件运行效果</p>\n</li>\n</ol>\n<h4 id=\"ik-中文分词插件\"><a href=\"#ik-中文分词插件\" class=\"headerlink\" title=\"ik 中文分词插件\"></a>ik 中文分词插件</h4><blockquote>\n<p>ik 分词插件版本与ES版本对照，请查阅：<a href=\"https://github.com/medcl/elasticsearch-analysis-ik#versions\" target=\"_blank\" rel=\"external\">https://github.com/medcl/elasticsearch-analysis-ik#versions</a> </p>\n</blockquote>\n<h5 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h5><ol>\n<li><p>在 ES 的 plugins 目录下创建 ik 目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ./plugins &amp;&amp; mkdir ik</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载编译包到 ik 目录，下载地址：<a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"external\">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> </p>\n</li>\n<li><p>解压下载的压缩包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip elasticsearch-analysis-ik-&#123; ES 版本 &#125;.zip</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启 ES</p>\n</li>\n</ol>\n<h5 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h5><ol>\n<li><p>使用 ES 提供的插件安装方式安装，替换下面的ES 版本，具体信息可以去 <a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"external\">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/&#123; ES 版本 &#125;/elasticsearch-analysis-ik-&#123; ES 版本 &#125;.zip</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启 ES</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><h3 id=\"错误1：进程虚拟内存\"><a href=\"#错误1：进程虚拟内存\" class=\"headerlink\" title=\"错误1：进程虚拟内存\"></a>错误1：进程虚拟内存</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[3]: max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</div></pre></td></tr></table></figure>\n<p>vm.max_map_count：限制一个进程可以拥有的VMA(虚拟内存区域)的数量。</p>\n<p>切换到root用户，修改配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysctl.conf</div></pre></td></tr></table></figure>\n<p>添加下面的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm.max_map_count=655360</div></pre></td></tr></table></figure>\n<p>然后执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sysctl -p</div></pre></td></tr></table></figure>\n<h3 id=\"错误2：文件权限不足\"><a href=\"#错误2：文件权限不足\" class=\"headerlink\" title=\"错误2：文件权限不足\"></a>错误2：文件权限不足</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1]: max file descriptors [4096] <span class=\"keyword\">for</span> elasticsearch process likely too low, increase to at least [65536]</div></pre></td></tr></table></figure>\n<p>用的是es用户，而不是root，所以文件权限不足。</p>\n<p><strong>使用root用户登录</strong></p>\n<p>修改配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/security/limits.conf</div></pre></td></tr></table></figure>\n<p>添加下面的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">* soft nofile 65536</div><div class=\"line\"></div><div class=\"line\">* hard nofile 131072</div><div class=\"line\"></div><div class=\"line\">* soft nproc 4096</div><div class=\"line\"></div><div class=\"line\">* hard nproc 4096</div></pre></td></tr></table></figure>\n<h3 id=\"重启终端窗口\"><a href=\"#重启终端窗口\" class=\"headerlink\" title=\"重启终端窗口\"></a>重启终端窗口</h3><p>所有错误修改完毕，一定要重启你的终端，否则配置无效。</p>\n<hr>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"集群和节点\"><a href=\"#集群和节点\" class=\"headerlink\" title=\"集群和节点\"></a>集群和节点</h3><p>每个节点都是一个 ES 的单独实例，通过 node_name 来指定各个节点的名字。</p>\n<p>集群是通过配置cluster_name来使得节点找到集群。</p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>索引是含有相同属性的文档集合，在 ES 中是通过一个名字来识别的，而且要求是<span style=\"color:red\"><strong>英文字母小写且不包含中划线</strong></span></p>\n<p>索引对应于 SQL 的 database</p>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><p>索引可以含有一个或者多个类型，文档必须属于一个类型</p>\n<p>类型对应于 SQL 的 table</p>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>文档是可以被索引的基本数据单位</p>\n<p>文档对应于 SQL 的一条记录</p>\n<h3 id=\"分片\"><a href=\"#分片\" class=\"headerlink\" title=\"分片\"></a>分片</h3><p>每个索引都有多个分片，每个分片都是一个 Lucene 索引</p>\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>拷贝一份分片就完成了分片的备份</p>\n<hr>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"请求方式\"><a href=\"#请求方式\" class=\"headerlink\" title=\"请求方式\"></a>请求方式</h3><p>API 基本格式：<code>http://&lt;ip&gt;:&lt;port&gt;/&lt;索引&gt;/&lt;类型&gt;/&lt;文档 id&gt;</code></p>\n<p>API 请求方式：GET、POST、PUT、DELETE</p>\n<h3 id=\"索引-1\"><a href=\"#索引-1\" class=\"headerlink\" title=\"索引\"></a>索引</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><p>假设创建一个 people 的索引，打开 PostMan，输入地址 <a href=\"http://localhost:9200/people\" target=\"_blank\" rel=\"external\">http://localhost:9200/people</a> ，将方法改为 <span style=\"color:red\">PUT</span> 方法，将👇的 json 放入 Body 请求体，点击 Send，若出现 <code>&quot;acknowledged&quot;:true</code>，则代表索引创建成功。</p>\n<p>请求体的 json:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"settings\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"number_of_shards\"</span>:<span class=\"number\">3</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"number_of_replicas\"</span>:<span class=\"number\">1</span></div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">\"mappings\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"person\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"properties\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"name\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"text\"</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"age\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"integer\"</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"country\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"keyword\"</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"birthday\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"date\"</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"format\"</span>:<span class=\"string\">\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\"</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<div class=\"note success\"><p><strong>json 请求体字段解释：</strong></p>\n<ol>\n<li>settings 字段可以不指定</li>\n<li>number_of_shards 代表分片数（默认为5）</li>\n<li>number_of_replicas 代表备份数（默认为1）</li>\n<li>text 类型的字段搜索时将会被分词</li>\n<li>keyword 类型的字段搜索时将不会被分词</li>\n<li>epoch_millis 类型代表时间戳格式</li>\n</ol>\n</div>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"acknowledged\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"shards_acknowledged\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"index\"</span>: <span class=\"string\">\"people\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161702463041.jpg\" alt=\"创建索引\"></p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people\" target=\"_blank\" rel=\"external\">http://localhost:9200/people</a> ，将方法改为 <span style=\"color:red\">DELETE</span> 方法，点击 Send。</p>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"acknowledged\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>现在我们向之前创建的类型中添加一条文档记录，插入分为2种方式，一种是指定 ID，一种是不指定 ID，当不指定 ID 时，ID 由 ES 生成。</p>\n<h4 id=\"指定-ID-插入\"><a href=\"#指定-ID-插入\" class=\"headerlink\" title=\"指定 ID 插入\"></a>指定 ID 插入</h4><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/person/1\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/person/1</a> ，将文档的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">PUT</span> 方法，点击 Send。</p>\n<p>文档内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"xkcoding\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">24</span>,</div><div class=\"line\">\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"birthday\"</span>:<span class=\"string\">\"1994-11-22\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: <span class=\"string\">\"created\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_shards\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"successful\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"failed\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"_seq_no\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">\"_primary_term\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161719204773.jpg\" alt=\"指定 id 插入\"></p>\n<h4 id=\"不指定-ID-插入\"><a href=\"#不指定-ID-插入\" class=\"headerlink\" title=\"不指定 ID 插入\"></a>不指定 ID 插入</h4><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/person\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/person</a> ，将文档的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">POST</span> 方法，点击 Send。</p>\n<p>文档内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"中年xkcoding\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">34</span>,</div><div class=\"line\">\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"birthday\"</span>:<span class=\"string\">\"1984-11-22\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"I4_sAmEBVnl1iCRF78pG\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: <span class=\"string\">\"created\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_shards\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"successful\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"failed\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"_seq_no\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">\"_primary_term\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161725779321.jpg\" alt=\"不指定 id 插入\"></p>\n<p>然后前往 head 插件查看是否插入数据</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161727420397.jpg\" alt=\"head 插件中查看添加的文档记录\"></p>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>修改文档数据，打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/person/1/_update\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/person/1/_update</a> ，将请求的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">POST</span> 方法，点击 Send。</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"doc\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"沈扬凯\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<div class=\"note danger\"><p>注意：修改的时候 URL 必须后面跟_update，然后要修改的字段必须放在 doc 字段里。</p>\n</div>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: <span class=\"string\">\"updated\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_shards\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"successful\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"failed\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"_seq_no\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"_primary_term\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161741012942.jpg\" alt=\"修改文档\"></p>\n<h3 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/1\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/1</a> ，将方法改为 <span style=\"color:red\">DELETE</span> 方法，点击 Send。</p>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: <span class=\"string\">\"deleted\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_shards\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"successful\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"failed\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"_seq_no\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"_primary_term\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>ES 正如其名，本就是为了 Search 而生，所以查询是 ES 最牛逼的地方。使用上面提到的插入语法，预先插入一堆原始数据，用 head 查看。</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161767712389.jpg\" alt=\"预先插入的原始数据\"></p>\n<h4 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h4><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/person/1\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/person/1</a> ，将方法改为 <span style=\"color:red\">GET</span> 方法，点击 Send。</p>\n<p>返回 id 为1的文档数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"found\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"_source\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"xkcoding\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"age\"</span>: <span class=\"number\">24</span>,</div><div class=\"line\">        <span class=\"attr\">\"country\"</span>: <span class=\"string\">\"中国\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"birthday\"</span>: <span class=\"string\">\"1994-11-22\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>这里还是使用 PostMan 来测试我们的条件查询</p>\n<p>请求地址：<a href=\"http://localhost:9200/people/_search\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/_search</a></p>\n<p>请求方式：POST</p>\n<div class=\"note danger\"><p>返回值因为文章篇幅有限，就不将返回的内容贴在文章中了，请自行测试下方请求体，验证结果</p>\n</div>\n<ol>\n<li><p>查询所有文档数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match_all\"</span>:&#123;&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>分页查询文档数据，第 0 条开始，每页 3 条数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match_all\"</span>:&#123;&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">\"from\"</span>:<span class=\"number\">0</span>,</div><div class=\"line\">\t<span class=\"attr\">\"size\"</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询名字中包含「小」的文档</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询名字中包含「小」的文档，并且按照生日降序排序</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">\"sort\"</span>:[</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"birthday\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"order\"</span>:<span class=\"string\">\"desc\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h4><p>请求地址：<a href=\"http://localhost:9200/people/_search\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/_search</a></p>\n<p>请求方式：POST</p>\n<ol>\n<li><p>按照年龄聚合数据，查出文档中不同年龄所占的人数</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"group_by_age\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"terms\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>多个聚合，分别按照年龄、生日聚合数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"group_by_age\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"terms\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">\"group_by_birthday\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"terms\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"birthday\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>年龄最小</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"min\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>年龄最大</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"max\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>平均年龄</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"avg\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>年龄总和</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"sum\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>统计，将3、4、5、6的信息统一查询</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"stats\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"高级查询\"><a href=\"#高级查询\" class=\"headerlink\" title=\"高级查询\"></a>高级查询</h2><h3 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h3><h4 id=\"模糊匹配\"><a href=\"#模糊匹配\" class=\"headerlink\" title=\"模糊匹配\"></a>模糊匹配</h4><p>查询名字中包含「小」的文档</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"词组匹配\"><a href=\"#词组匹配\" class=\"headerlink\" title=\"词组匹配\"></a>词组匹配</h4><p>查询名字只包含「小凯」的文档，我们先使用如下的请求体查询</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小凯\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回的结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 省略其余部分</div><div class=\"line\">\"hits\": &#123;</div><div class=\"line\">  \"total\": 3,</div><div class=\"line\">  \"max_score\": 1.8386619,</div><div class=\"line\">  \"hits\": [</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"_index\": \"people\",</div><div class=\"line\">      \"_type\": \"person\",</div><div class=\"line\">      \"_id\": \"2\",</div><div class=\"line\">      \"_score\": 1.8386619,</div><div class=\"line\">      \"_source\": &#123;</div><div class=\"line\">        \"name\": \"年轻的小凯\",</div><div class=\"line\">        \"age\": 14,</div><div class=\"line\">        \"country\": \"中国\",</div><div class=\"line\">        \"birthday\": \"2004-11-22\"</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"_index\": \"people\",</div><div class=\"line\">      \"_type\": \"person\",</div><div class=\"line\">      \"_id\": \"4\",</div><div class=\"line\">      \"_score\": 0.8984401,</div><div class=\"line\">      \"_source\": &#123;</div><div class=\"line\">        \"name\": \"狂小狗\",</div><div class=\"line\">        \"age\": 20,</div><div class=\"line\">        \"country\": \"中国\",</div><div class=\"line\">        \"birthday\": \"1998-01-01\"</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"_index\": \"people\",</div><div class=\"line\">      \"_type\": \"person\",</div><div class=\"line\">      \"_id\": \"9\",</div><div class=\"line\">      \"_score\": 0.8142733,</div><div class=\"line\">      \"_source\": &#123;</div><div class=\"line\">        \"name\": \"小泽\",</div><div class=\"line\">        \"age\": 32,</div><div class=\"line\">        \"country\": \"日本\",</div><div class=\"line\">        \"birthday\": \"1986-02-02\"</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过结果，可以发现，通过 match 去查询的时候，ES 返回的是分别包含「小」、「凯」的文档，如何去查询 name 字段只包含「小凯」的文档呢？使用 <strong>match_phrase</strong> 可以满足要求。</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match_phrase\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小凯\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"字段查询\"><a href=\"#字段查询\" class=\"headerlink\" title=\"字段查询\"></a>字段查询</h4><p>查询所有的中国人</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"term\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"范围查询（支持数值型和日期型）\"><a href=\"#范围查询（支持数值型和日期型）\" class=\"headerlink\" title=\"范围查询（支持数值型和日期型）\"></a>范围查询（支持数值型和日期型）</h4><p>查询年龄 24 ≤ age＜30 直接的数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"range\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"age\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"gte\"</span>:<span class=\"number\">24</span>,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"lt\"</span>:<span class=\"number\">30</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><div class=\"note danger\"><p>一般结合 bool 一起使用，</p>\n</div>\n<p>查询年龄为23的文档数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"bool\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"filter\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"term\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">23</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"复合条件查询\"><a href=\"#复合条件查询\" class=\"headerlink\" title=\"复合条件查询\"></a>复合条件查询</h3><h4 id=\"固定分数查询\"><a href=\"#固定分数查询\" class=\"headerlink\" title=\"固定分数查询\"></a>固定分数查询</h4><ol>\n<li><p>查询名字中包含「小」的文档，并固定查询分数</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"constant_score\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"filter\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询名字中包含「小」的文档，并固定查询分数为2</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"constant_score\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"filter\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"boost\"</span>:<span class=\"number\">2</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"布尔查询\"><a href=\"#布尔查询\" class=\"headerlink\" title=\"布尔查询\"></a>布尔查询</h4><ol>\n<li><p>查询是国家为中国或者年龄为30的数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"bool\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"should\"</span>:[</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;,&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">30</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;\t</div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询国家为中国并且年龄为23的数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"bool\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"must\"</span>:[</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;,&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">23</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;\t</div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询国家为中国并且年龄为23并且生日比1995-07-01早的数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"bool\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"must\"</span>:[</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;,&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">23</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;\t</div><div class=\"line\">\t\t\t],</div><div class=\"line\">\t\t\t<span class=\"attr\">\"filter\"</span>:[&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"range\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"birthday\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"lt\"</span>:<span class=\"string\">\"1995-07-01\"</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"Spring-Boot-集成-ES\"><a href=\"#Spring-Boot-集成-ES\" class=\"headerlink\" title=\"Spring Boot 集成 ES\"></a>Spring Boot 集成 ES</h2><div class=\"note success\"><p>代码托管在 GitHub：<a href=\"https://github.com/xkcoding/spring-boot-demo/tree/v-1.5.x/spring-boot-demo-elasticsearch\" target=\"_blank\" rel=\"external\">戳我获取源码</a></p>\n</div>\n<h3 id=\"Spring-Boot-集成-ES-的配置类\"><a href=\"#Spring-Boot-集成-ES-的配置类\" class=\"headerlink\" title=\"Spring Boot 集成 ES 的配置类\"></a>Spring Boot 集成 ES 的配置类</h3><p>在 Spring Boot 中配置类需要使用 <code>@Configuration</code> 来标注</p>\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8080</span></div><div class=\"line\"><span class=\"attr\">  context-path:</span> <span class=\"string\">/demo</span></div><div class=\"line\"><span class=\"attr\">elasticsearch:</span></div><div class=\"line\"><span class=\"attr\">  host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9300</span></div><div class=\"line\"><span class=\"attr\">  cluster:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">xkcoding</span></div></pre></td></tr></table></figure>\n<p><strong>ElasticSearchConfig.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.springbootdemoelasticsearch.config;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.transport.TransportClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.settings.Settings;</div><div class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.transport.TransportAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * ES 的配置类</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.springbootdemoelasticsearch.config</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： ES 的配置类</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/1/18 下午4:41</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: 0.0.1</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElasticSearchConfig</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;elasticsearch.host&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> String host;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;elasticsearch.port&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;elasticsearch.cluster.name&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> String clusterName;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> TransportClient <span class=\"title\">esClient</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> UnknownHostException </span>&#123;</div><div class=\"line\">\t\tSettings settings = Settings.builder().put(<span class=\"string\">\"cluster.name\"</span>, <span class=\"keyword\">this</span>.clusterName).put(<span class=\"string\">\"client.transport.sniff\"</span>, <span class=\"keyword\">true</span>).build();</div><div class=\"line\"></div><div class=\"line\">\t\tTransportAddress master = <span class=\"keyword\">new</span> TransportAddress(InetAddress.getByName(host), port);</div><div class=\"line\">\t\tTransportClient client = <span class=\"keyword\">new</span> PreBuiltTransportClient(settings).addTransportAddress(master);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> client;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 插入一条数据到 ES 中，id 由 ES 生成</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> name     名称</div><div class=\"line\"> * <span class=\"doctag\">@param</span> country  国籍</div><div class=\"line\"> * <span class=\"doctag\">@param</span> age      年龄</div><div class=\"line\"> * <span class=\"doctag\">@param</span> birthday 生日</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 插入数据的主键</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/person\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">add</span><span class=\"params\">(@RequestParam String name,</span></span></div><div class=\"line\">                       @RequestParam String country,</div><div class=\"line\">                       @RequestParam Integer age,</div><div class=\"line\">                       @RequestParam @DateTimeFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>) Date birthday) &#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\tXContentBuilder content = XContentFactory.jsonBuilder()</div><div class=\"line\">\t\t\t\t.startObject()</div><div class=\"line\">\t\t\t\t.field(<span class=\"string\">\"name\"</span>, name)</div><div class=\"line\">\t\t\t\t.field(<span class=\"string\">\"country\"</span>, country)</div><div class=\"line\">\t\t\t\t.field(<span class=\"string\">\"age\"</span>, age)</div><div class=\"line\">\t\t\t\t.field(<span class=\"string\">\"birthday\"</span>, birthday.getTime())</div><div class=\"line\">\t\t\t\t.endObject();</div><div class=\"line\"></div><div class=\"line\">\t\tIndexResponse response = esClient.prepareIndex(INDEX, TYPE).setSource(content).get();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(response.getId());</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"修改-1\"><a href=\"#修改-1\" class=\"headerlink\" title=\"修改\"></a>修改</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 根据主键，修改传递字段对应的值</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> id       ES 中的 id</div><div class=\"line\"> * <span class=\"doctag\">@param</span> name     姓名</div><div class=\"line\"> * <span class=\"doctag\">@param</span> country  国籍</div><div class=\"line\"> * <span class=\"doctag\">@param</span> age      年龄</div><div class=\"line\"> * <span class=\"doctag\">@param</span> birthday 生日</div><div class=\"line\"> * <span class=\"doctag\">@return</span> UPDATED 代表文档修改成功</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@PutMapping</span>(<span class=\"string\">\"/person/&#123;id&#125;\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">update</span><span class=\"params\">(@PathVariable String id, </span></span></div><div class=\"line\">                          @RequestParam(value = <span class=\"string\">\"name\"</span>, required = <span class=\"keyword\">false</span>) String name, </div><div class=\"line\">                          @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"country\"</span>, required = <span class=\"keyword\">false</span>)</span> String country, </div><div class=\"line\">                          @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"age\"</span>, required = <span class=\"keyword\">false</span>)</span> Integer age, </div><div class=\"line\">                          @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"birthday\"</span>, required = <span class=\"keyword\">false</span>)</span> @<span class=\"title\">DateTimeFormat</span><span class=\"params\">(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span> Date birthday) &#123;</div><div class=\"line\">\tUpdateRequest request = <span class=\"keyword\">new</span> UpdateRequest(INDEX, TYPE, id);</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\tXContentBuilder builder = XContentFactory.jsonBuilder().startObject();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!Strings.isNullOrEmpty(name)) &#123;</div><div class=\"line\">\t\t\tbuilder.field(<span class=\"string\">\"name\"</span>, name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!Strings.isNullOrEmpty(country)) &#123;</div><div class=\"line\">\t\t\tbuilder.field(<span class=\"string\">\"country\"</span>, country);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (age != <span class=\"keyword\">null</span> &amp;&amp; age &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tbuilder.field(<span class=\"string\">\"age\"</span>, age);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (birthday != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tbuilder.field(<span class=\"string\">\"birthday\"</span>, birthday.getTime());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tbuilder.endObject();</div><div class=\"line\">\t\trequest.doc(builder);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\tUpdateResponse response = esClient.update(request).get();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(response);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 根据 id 删除 ES 的一条记录</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> id ES 中的 id</div><div class=\"line\"> * <span class=\"doctag\">@return</span> DELETED 代表删除</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@DeleteMapping</span>(<span class=\"string\">\"/person/&#123;id&#125;\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">delete</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</div><div class=\"line\">\tDeleteResponse response = esClient.prepareDelete(INDEX, TYPE, id).get();</div><div class=\"line\">\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(response.getResult());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"简单查询-1\"><a href=\"#简单查询-1\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 简单查询 根据 id 查 ES 中的文档内容</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> id ES 中存储的 id</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 对应 id 的文档内容</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/person/&#123;id&#125;\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">get</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</div><div class=\"line\">\tGetResponse response = esClient.prepareGet(INDEX, TYPE, id).get();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!response.isExists() || response.isSourceEmpty()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofStatus(Status.NOT_FOUND);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(response.getSource());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"复合查询\"><a href=\"#复合查询\" class=\"headerlink\" title=\"复合查询\"></a>复合查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 复合查询，根据传进来的条件，查询具体内容</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> name    根据姓名匹配</div><div class=\"line\"> * <span class=\"doctag\">@param</span> country 根据国籍匹配</div><div class=\"line\"> * <span class=\"doctag\">@param</span> gtAge   大于年龄</div><div class=\"line\"> * <span class=\"doctag\">@param</span> ltAge   小于年龄</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 满足条件的文档内容</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/person/query\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">query</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"name\"</span>, required = <span class=\"keyword\">false</span>)</span> String name,</span></div><div class=\"line\">                         @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"country\"</span>, required = <span class=\"keyword\">false</span>)</span> String country,</div><div class=\"line\">                         @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"gt_age\"</span>, defaultValue = <span class=\"string\">\"0\"</span>)</span> <span class=\"keyword\">int</span> gtAge,</div><div class=\"line\">                         @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"lt_age\"</span>, required = <span class=\"keyword\">false</span>)</span> Integer ltAge) &#123;</div><div class=\"line\">\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!Strings.isNullOrEmpty(name)) &#123;</div><div class=\"line\">\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(<span class=\"string\">\"name\"</span>, name));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!Strings.isNullOrEmpty(country)) &#123;</div><div class=\"line\">\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(<span class=\"string\">\"country\"</span>, country));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tRangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(<span class=\"string\">\"age\"</span>).from(gtAge);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ltAge != <span class=\"keyword\">null</span> &amp;&amp; ltAge &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\trangeQueryBuilder.to(ltAge);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tboolQueryBuilder.filter(rangeQueryBuilder);</div><div class=\"line\"></div><div class=\"line\">\tSearchRequestBuilder searchRequestBuilder = esClient.prepareSearch(INDEX)</div><div class=\"line\">\t\t\t.setTypes(TYPE)</div><div class=\"line\">\t\t\t.setSearchType(SearchType.DFS_QUERY_THEN_FETCH)</div><div class=\"line\">\t\t\t.setQuery(boolQueryBuilder)</div><div class=\"line\">\t\t\t.setFrom(<span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t.setSize(<span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\">\tlog.info(<span class=\"string\">\"【query】:&#123;&#125;\"</span>, searchRequestBuilder);</div><div class=\"line\"></div><div class=\"line\">\tSearchResponse searchResponse = searchRequestBuilder.get();</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; result = Lists.newArrayList();</div><div class=\"line\">\tsearchResponse.getHits().forEach(hit -&gt; &#123;</div><div class=\"line\">\t\tresult.add(hit.getSourceAsMap());</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"搜索建议（有时间补充）\"><a href=\"#搜索建议（有时间补充）\" class=\"headerlink\" title=\"搜索建议（有时间补充）\"></a>搜索建议（有时间补充）</h3><h3 id=\"聚合查询（有时间补充）\"><a href=\"#聚合查询（有时间补充）\" class=\"headerlink\" title=\"聚合查询（有时间补充）\"></a>聚合查询（有时间补充）</h3><h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>ElasticSearch 在现在是一个应用十分广泛，且火热的技术，本文只是我在入门 ES 的一点小小的记录，更多 ES 的专业知识，优化技巧，还需要大量的学习与实践！</p>\n<p>推荐学习地址：</p>\n<ol>\n<li>官方文档：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html\" target=\"_blank\" rel=\"external\">https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html</a></li>\n<li>Elastic 中文社区：<a href=\"https://elasticsearch.cn/\" target=\"_blank\" rel=\"external\">https://elasticsearch.cn/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><code>ElasticSearch</code>是一个基于 <code>Lucene</code> 的分布式搜索引擎，业内简称ES。它提供了基于 <code>RESTful</code> 风格的全文搜索API。<code>Elasticsearch</code> 是用 <code>Java</code> 开发的，并作为 <code>Apache</code> 许可条款下的开放源码发布，是当前最流行的企业级搜索引擎。另外，它的分布式设计让它天生就适合用于云计算中，并能够达到准实时搜索，而且安装使用方便，还拥有稳定，可靠，快速等特性。本文是我对 ES 的一个完整记录，方便后期查阅。另外大家还可以查阅更多的相关资料对 <code>ElasticSearch</code> 有更深入的了解。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"单机安装\"><a href=\"#单机安装\" class=\"headerlink\" title=\"单机安装\"></a>单机安装</h3><blockquote>\n<p>ElasticSearch 要求本地的 JDK 版本不低于<strong>1.8</strong></p>\n</blockquote>\n<ol>\n<li><p>去官网下载最新版的 ES 软件包 <a href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"external\">https://www.elastic.co/downloads/elasticsearch</a> ，目前 ES 最新版本为6.1.1，我这里采用 wget 命令在终端下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd apps</div><div class=\"line\">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.1.1.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果出现 <code>command not found: wget</code>，如果是 Linux，可以用 <code>yum install -y wget</code> 下载，如果是 Mac 就可以用 <code>brew install wget</code> 下载</p>\n</li>\n<li><p>检查本地 JDK 版本，必须保证为<strong>1.8</strong>版本以上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> java -version</span></div><div class=\"line\">java version \"1.8.0_131\"</div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)</div></pre></td></tr></table></figure>\n</li>\n<li><p>解压软件包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf elasticsearch-<span class=\"number\">6.1</span>.1.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动 ES</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd elasticsearch-6.1.1</div><div class=\"line\">./bin/elasticsearch</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试，打开 PostMan 测试 <a href=\"http://localhost:9200\" target=\"_blank\" rel=\"external\">http://localhost:9200</a> ，查看返回的 JSON 信息</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-12-15157443065618.jpg\" alt=\"PostMan测试单机部署结果\"></p>\n</li>\n</ol>\n<h3 id=\"分布式安装\"><a href=\"#分布式安装\" class=\"headerlink\" title=\"分布式安装\"></a>分布式安装</h3><p>这里我会在本地启动3个 ES 节点，分别用不同的端口号来模拟分布式的环境，一个节点为 master，另外两个节点为 slave 节点。</p>\n<ol>\n<li><p>下载安装包，解压3份，分别命名为 <code>elasticsearch-master</code>，<code>elasticsearch-slave1</code>，<code>elasticsearch-slave2</code></p>\n</li>\n<li><p>修改 <code>elasticsearch-master</code> 的配置文件，<code>config/elasticsearch.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">http.cors.enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于指定集群名称</span></div><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">xkcoding</span></div><div class=\"line\"><span class=\"comment\">## 用于指定节点名称</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">master</span></div><div class=\"line\"><span class=\"comment\">## 用于指定当前节点是 master 节点</span></div><div class=\"line\"><span class=\"string\">node.master:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"string\">http.port:</span> <span class=\"number\">9200</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <code>elasticsearch-slave1</code> 的配置文件，<code>config/elasticsearch.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">http.cors.enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于指定集群名称</span></div><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">xkcoding</span></div><div class=\"line\"><span class=\"comment\">## 用于指定节点名称</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">slave1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"string\">http.port:</span> <span class=\"number\">8200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于发现 master 节点</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">[\"127.0.0.1\"]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <code>elasticsearch-slave2</code> 的配置文件，<code>config/elasticsearch.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">http.cors.enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于指定集群名称</span></div><div class=\"line\"><span class=\"string\">cluster.name:</span> <span class=\"string\">xkcoding</span></div><div class=\"line\"><span class=\"comment\">## 用于指定节点名称</span></div><div class=\"line\"><span class=\"string\">node.name:</span> <span class=\"string\">slave2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">network.host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"string\">http.port:</span> <span class=\"number\">7200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">## 用于发现 master 节点</span></div><div class=\"line\"><span class=\"string\">discovery.zen.ping.unicast.hosts:</span> <span class=\"string\">[\"127.0.0.1\"]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>启动 head 插件，打开浏览器，访问 <a href=\"http://localhost:9100，查看分布式节点的运行状态\" target=\"_blank\" rel=\"external\">http://localhost:9100，查看分布式节点的运行状态</a></p>\n<p><img src=\"http://static.xkcoding.com/2018-01-12-15157518741687.jpg\" alt=\"分布式 ES 的集群状态\"></p>\n</li>\n</ol>\n<h3 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h3><h4 id=\"head-插件\"><a href=\"#head-插件\" class=\"headerlink\" title=\"head 插件\"></a>head 插件</h4><h5 id=\"独立安装\"><a href=\"#独立安装\" class=\"headerlink\" title=\"独立安装\"></a>独立安装</h5><blockquote>\n<p>独立安装是指，head插件安装在es外部，<br>独立安装 head 插件，要求本地的 Node 版本不低于8.0</p>\n</blockquote>\n<ol>\n<li><p>前往 GitHub 搜索 <code>elasticsearch-head</code> ，这里我直接给出插件的 GitHub 仓库地址，<a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"external\">https://github.com/mobz/elasticsearch-head</a> ，clone 源代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/apps</div><div class=\"line\">git clone https://github.com/mobz/elasticsearch-head.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查本地 Node 版本，必须保证为<strong>8.0</strong>版本以上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node -v</span></div><div class=\"line\">v8.5.0</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译 head 插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/apps/elasticsearch-head</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果觉得这一步的依赖下载比较慢的话，有两种解决方式：</p>\n<ol>\n<li>可以选择科学上网</li>\n<li>使用国内阿里的镜像源，使用 cnpm 安装，具体如何配置，本文不做赘述。具体参考：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></li>\n</ol>\n</blockquote>\n</li>\n<li><p>配置 ES 支持跨域访问，让 head 插件可以访问到</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/apps/elasticsearch-6.1.1</div><div class=\"line\">vim config/elasticsearch.yml</div></pre></td></tr></table></figure>\n<p>添加进下面两行对跨域的配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">http.cors.enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"string\">http.cors.allow-origin:</span> <span class=\"string\">\"*\"</span></div></pre></td></tr></table></figure>\n<p>保存 <code>:wq!</code> 配置文件，启动 ES</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/elasticsearch</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行 head 插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/apps/elasticsearch-head</div><div class=\"line\">npm run start</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器，访问 <a href=\"http://localhost:9100/\" target=\"_blank\" rel=\"external\">http://localhost:9100/</a> ，查看 head 插件运行效果</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-12-15157472517495.jpg\" alt=\"运行 head 插件，查看单机 ES 状态\"></p>\n</li>\n</ol>\n<h5 id=\"集成安装\"><a href=\"#集成安装\" class=\"headerlink\" title=\"集成安装\"></a>集成安装</h5><blockquote>\n<p>ES 版本 5.x 以上，不支持这种方式安装，如果想使用head插件，请使用独立安装</p>\n</blockquote>\n<ol>\n<li><p>使用ES提供的插件安装方式安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/plugin install mobz/elasticsearch-head</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器，访问 <a href=\"http://localhost:9200/_plugin/head/\" target=\"_blank\" rel=\"external\">http://localhost:9200/_plugin/head/</a> ，查看 head 插件运行效果</p>\n</li>\n</ol>\n<h4 id=\"ik-中文分词插件\"><a href=\"#ik-中文分词插件\" class=\"headerlink\" title=\"ik 中文分词插件\"></a>ik 中文分词插件</h4><blockquote>\n<p>ik 分词插件版本与ES版本对照，请查阅：<a href=\"https://github.com/medcl/elasticsearch-analysis-ik#versions\" target=\"_blank\" rel=\"external\">https://github.com/medcl/elasticsearch-analysis-ik#versions</a> </p>\n</blockquote>\n<h5 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h5><ol>\n<li><p>在 ES 的 plugins 目录下创建 ik 目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ./plugins &amp;&amp; mkdir ik</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载编译包到 ik 目录，下载地址：<a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"external\">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> </p>\n</li>\n<li><p>解压下载的压缩包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip elasticsearch-analysis-ik-&#123; ES 版本 &#125;.zip</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启 ES</p>\n</li>\n</ol>\n<h5 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h5><ol>\n<li><p>使用 ES 提供的插件安装方式安装，替换下面的ES 版本，具体信息可以去 <a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"external\">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/&#123; ES 版本 &#125;/elasticsearch-analysis-ik-&#123; ES 版本 &#125;.zip</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启 ES</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><h3 id=\"错误1：进程虚拟内存\"><a href=\"#错误1：进程虚拟内存\" class=\"headerlink\" title=\"错误1：进程虚拟内存\"></a>错误1：进程虚拟内存</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[3]: max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</div></pre></td></tr></table></figure>\n<p>vm.max_map_count：限制一个进程可以拥有的VMA(虚拟内存区域)的数量。</p>\n<p>切换到root用户，修改配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysctl.conf</div></pre></td></tr></table></figure>\n<p>添加下面的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vm.max_map_count=655360</div></pre></td></tr></table></figure>\n<p>然后执行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sysctl -p</div></pre></td></tr></table></figure>\n<h3 id=\"错误2：文件权限不足\"><a href=\"#错误2：文件权限不足\" class=\"headerlink\" title=\"错误2：文件权限不足\"></a>错误2：文件权限不足</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1]: max file descriptors [4096] <span class=\"keyword\">for</span> elasticsearch process likely too low, increase to at least [65536]</div></pre></td></tr></table></figure>\n<p>用的是es用户，而不是root，所以文件权限不足。</p>\n<p><strong>使用root用户登录</strong></p>\n<p>修改配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/security/limits.conf</div></pre></td></tr></table></figure>\n<p>添加下面的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">* soft nofile 65536</div><div class=\"line\"></div><div class=\"line\">* hard nofile 131072</div><div class=\"line\"></div><div class=\"line\">* soft nproc 4096</div><div class=\"line\"></div><div class=\"line\">* hard nproc 4096</div></pre></td></tr></table></figure>\n<h3 id=\"重启终端窗口\"><a href=\"#重启终端窗口\" class=\"headerlink\" title=\"重启终端窗口\"></a>重启终端窗口</h3><p>所有错误修改完毕，一定要重启你的终端，否则配置无效。</p>\n<hr>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"集群和节点\"><a href=\"#集群和节点\" class=\"headerlink\" title=\"集群和节点\"></a>集群和节点</h3><p>每个节点都是一个 ES 的单独实例，通过 node_name 来指定各个节点的名字。</p>\n<p>集群是通过配置cluster_name来使得节点找到集群。</p>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>索引是含有相同属性的文档集合，在 ES 中是通过一个名字来识别的，而且要求是<span style=\"color:red\"><strong>英文字母小写且不包含中划线</strong></span></p>\n<p>索引对应于 SQL 的 database</p>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><p>索引可以含有一个或者多个类型，文档必须属于一个类型</p>\n<p>类型对应于 SQL 的 table</p>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>文档是可以被索引的基本数据单位</p>\n<p>文档对应于 SQL 的一条记录</p>\n<h3 id=\"分片\"><a href=\"#分片\" class=\"headerlink\" title=\"分片\"></a>分片</h3><p>每个索引都有多个分片，每个分片都是一个 Lucene 索引</p>\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>拷贝一份分片就完成了分片的备份</p>\n<hr>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"请求方式\"><a href=\"#请求方式\" class=\"headerlink\" title=\"请求方式\"></a>请求方式</h3><p>API 基本格式：<code>http://&lt;ip&gt;:&lt;port&gt;/&lt;索引&gt;/&lt;类型&gt;/&lt;文档 id&gt;</code></p>\n<p>API 请求方式：GET、POST、PUT、DELETE</p>\n<h3 id=\"索引-1\"><a href=\"#索引-1\" class=\"headerlink\" title=\"索引\"></a>索引</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><p>假设创建一个 people 的索引，打开 PostMan，输入地址 <a href=\"http://localhost:9200/people\" target=\"_blank\" rel=\"external\">http://localhost:9200/people</a> ，将方法改为 <span style=\"color:red\">PUT</span> 方法，将👇的 json 放入 Body 请求体，点击 Send，若出现 <code>&quot;acknowledged&quot;:true</code>，则代表索引创建成功。</p>\n<p>请求体的 json:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"settings\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"number_of_shards\"</span>:<span class=\"number\">3</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"number_of_replicas\"</span>:<span class=\"number\">1</span></div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">\"mappings\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"person\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"properties\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"name\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"text\"</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"age\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"integer\"</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"country\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"keyword\"</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"birthday\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"type\"</span>:<span class=\"string\">\"date\"</span>,</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"format\"</span>:<span class=\"string\">\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\"</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<div class=\"note success\"><p><strong>json 请求体字段解释：</strong></p>\n<ol>\n<li>settings 字段可以不指定</li>\n<li>number_of_shards 代表分片数（默认为5）</li>\n<li>number_of_replicas 代表备份数（默认为1）</li>\n<li>text 类型的字段搜索时将会被分词</li>\n<li>keyword 类型的字段搜索时将不会被分词</li>\n<li>epoch_millis 类型代表时间戳格式</li>\n</ol>\n</div>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"acknowledged\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"shards_acknowledged\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"index\"</span>: <span class=\"string\">\"people\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161702463041.jpg\" alt=\"创建索引\"></p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people\" target=\"_blank\" rel=\"external\">http://localhost:9200/people</a> ，将方法改为 <span style=\"color:red\">DELETE</span> 方法，点击 Send。</p>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"acknowledged\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>现在我们向之前创建的类型中添加一条文档记录，插入分为2种方式，一种是指定 ID，一种是不指定 ID，当不指定 ID 时，ID 由 ES 生成。</p>\n<h4 id=\"指定-ID-插入\"><a href=\"#指定-ID-插入\" class=\"headerlink\" title=\"指定 ID 插入\"></a>指定 ID 插入</h4><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/person/1\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/person/1</a> ，将文档的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">PUT</span> 方法，点击 Send。</p>\n<p>文档内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"xkcoding\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">24</span>,</div><div class=\"line\">\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"birthday\"</span>:<span class=\"string\">\"1994-11-22\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: <span class=\"string\">\"created\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_shards\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"successful\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"failed\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"_seq_no\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">\"_primary_term\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161719204773.jpg\" alt=\"指定 id 插入\"></p>\n<h4 id=\"不指定-ID-插入\"><a href=\"#不指定-ID-插入\" class=\"headerlink\" title=\"不指定 ID 插入\"></a>不指定 ID 插入</h4><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/person\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/person</a> ，将文档的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">POST</span> 方法，点击 Send。</p>\n<p>文档内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"中年xkcoding\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">34</span>,</div><div class=\"line\">\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"birthday\"</span>:<span class=\"string\">\"1984-11-22\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"I4_sAmEBVnl1iCRF78pG\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: <span class=\"string\">\"created\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_shards\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"successful\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"failed\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"_seq_no\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">\"_primary_term\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161725779321.jpg\" alt=\"不指定 id 插入\"></p>\n<p>然后前往 head 插件查看是否插入数据</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161727420397.jpg\" alt=\"head 插件中查看添加的文档记录\"></p>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>修改文档数据，打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/person/1/_update\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/person/1/_update</a> ，将请求的 json 放入 Body 请求体，将方法改为 <span style=\"color:red\">POST</span> 方法，点击 Send。</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"doc\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"沈扬凯\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<div class=\"note danger\"><p>注意：修改的时候 URL 必须后面跟_update，然后要修改的字段必须放在 doc 字段里。</p>\n</div>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: <span class=\"string\">\"updated\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_shards\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"successful\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"failed\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"_seq_no\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"_primary_term\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如图所示：</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161741012942.jpg\" alt=\"修改文档\"></p>\n<h3 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/1\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/1</a> ，将方法改为 <span style=\"color:red\">DELETE</span> 方法，点击 Send。</p>\n<p>返回值：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">\"result\"</span>: <span class=\"string\">\"deleted\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_shards\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"total\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"successful\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attr\">\"failed\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"_seq_no\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"_primary_term\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>ES 正如其名，本就是为了 Search 而生，所以查询是 ES 最牛逼的地方。使用上面提到的插入语法，预先插入一堆原始数据，用 head 查看。</p>\n<p><img src=\"http://static.xkcoding.com/2018-01-17-15161767712389.jpg\" alt=\"预先插入的原始数据\"></p>\n<h4 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h4><p>打开 PostMan，输入地址 <a href=\"http://localhost:9200/people/person/1\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/person/1</a> ，将方法改为 <span style=\"color:red\">GET</span> 方法，点击 Send。</p>\n<p>返回 id 为1的文档数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"_index\"</span>: <span class=\"string\">\"people\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_type\"</span>: <span class=\"string\">\"person\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"_version\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"found\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"_source\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"xkcoding\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"age\"</span>: <span class=\"number\">24</span>,</div><div class=\"line\">        <span class=\"attr\">\"country\"</span>: <span class=\"string\">\"中国\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"birthday\"</span>: <span class=\"string\">\"1994-11-22\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>这里还是使用 PostMan 来测试我们的条件查询</p>\n<p>请求地址：<a href=\"http://localhost:9200/people/_search\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/_search</a></p>\n<p>请求方式：POST</p>\n<div class=\"note danger\"><p>返回值因为文章篇幅有限，就不将返回的内容贴在文章中了，请自行测试下方请求体，验证结果</p>\n</div>\n<ol>\n<li><p>查询所有文档数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match_all\"</span>:&#123;&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>分页查询文档数据，第 0 条开始，每页 3 条数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match_all\"</span>:&#123;&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">\"from\"</span>:<span class=\"number\">0</span>,</div><div class=\"line\">\t<span class=\"attr\">\"size\"</span>:<span class=\"number\">3</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询名字中包含「小」的文档</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询名字中包含「小」的文档，并且按照生日降序排序</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">\"sort\"</span>:[</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"birthday\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"order\"</span>:<span class=\"string\">\"desc\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h4><p>请求地址：<a href=\"http://localhost:9200/people/_search\" target=\"_blank\" rel=\"external\">http://localhost:9200/people/_search</a></p>\n<p>请求方式：POST</p>\n<ol>\n<li><p>按照年龄聚合数据，查出文档中不同年龄所占的人数</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"group_by_age\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"terms\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>多个聚合，分别按照年龄、生日聚合数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"group_by_age\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"terms\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">\"group_by_birthday\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"terms\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"birthday\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>年龄最小</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"min\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>年龄最大</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"max\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>平均年龄</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"avg\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>年龄总和</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"sum\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>统计，将3、4、5、6的信息统一查询</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"aggs\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"grades_ages\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"stats\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"field\"</span>:<span class=\"string\">\"age\"</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"高级查询\"><a href=\"#高级查询\" class=\"headerlink\" title=\"高级查询\"></a>高级查询</h2><h3 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h3><h4 id=\"模糊匹配\"><a href=\"#模糊匹配\" class=\"headerlink\" title=\"模糊匹配\"></a>模糊匹配</h4><p>查询名字中包含「小」的文档</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"词组匹配\"><a href=\"#词组匹配\" class=\"headerlink\" title=\"词组匹配\"></a>词组匹配</h4><p>查询名字只包含「小凯」的文档，我们先使用如下的请求体查询</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小凯\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回的结果：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 省略其余部分</div><div class=\"line\">\"hits\": &#123;</div><div class=\"line\">  \"total\": 3,</div><div class=\"line\">  \"max_score\": 1.8386619,</div><div class=\"line\">  \"hits\": [</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"_index\": \"people\",</div><div class=\"line\">      \"_type\": \"person\",</div><div class=\"line\">      \"_id\": \"2\",</div><div class=\"line\">      \"_score\": 1.8386619,</div><div class=\"line\">      \"_source\": &#123;</div><div class=\"line\">        \"name\": \"年轻的小凯\",</div><div class=\"line\">        \"age\": 14,</div><div class=\"line\">        \"country\": \"中国\",</div><div class=\"line\">        \"birthday\": \"2004-11-22\"</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"_index\": \"people\",</div><div class=\"line\">      \"_type\": \"person\",</div><div class=\"line\">      \"_id\": \"4\",</div><div class=\"line\">      \"_score\": 0.8984401,</div><div class=\"line\">      \"_source\": &#123;</div><div class=\"line\">        \"name\": \"狂小狗\",</div><div class=\"line\">        \"age\": 20,</div><div class=\"line\">        \"country\": \"中国\",</div><div class=\"line\">        \"birthday\": \"1998-01-01\"</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"_index\": \"people\",</div><div class=\"line\">      \"_type\": \"person\",</div><div class=\"line\">      \"_id\": \"9\",</div><div class=\"line\">      \"_score\": 0.8142733,</div><div class=\"line\">      \"_source\": &#123;</div><div class=\"line\">        \"name\": \"小泽\",</div><div class=\"line\">        \"age\": 32,</div><div class=\"line\">        \"country\": \"日本\",</div><div class=\"line\">        \"birthday\": \"1986-02-02\"</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过结果，可以发现，通过 match 去查询的时候，ES 返回的是分别包含「小」、「凯」的文档，如何去查询 name 字段只包含「小凯」的文档呢？使用 <strong>match_phrase</strong> 可以满足要求。</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"match_phrase\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小凯\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"字段查询\"><a href=\"#字段查询\" class=\"headerlink\" title=\"字段查询\"></a>字段查询</h4><p>查询所有的中国人</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"term\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"范围查询（支持数值型和日期型）\"><a href=\"#范围查询（支持数值型和日期型）\" class=\"headerlink\" title=\"范围查询（支持数值型和日期型）\"></a>范围查询（支持数值型和日期型）</h4><p>查询年龄 24 ≤ age＜30 直接的数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"range\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"age\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"gte\"</span>:<span class=\"number\">24</span>,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"lt\"</span>:<span class=\"number\">30</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><div class=\"note danger\"><p>一般结合 bool 一起使用，</p>\n</div>\n<p>查询年龄为23的文档数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"bool\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"filter\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"term\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">23</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"复合条件查询\"><a href=\"#复合条件查询\" class=\"headerlink\" title=\"复合条件查询\"></a>复合条件查询</h3><h4 id=\"固定分数查询\"><a href=\"#固定分数查询\" class=\"headerlink\" title=\"固定分数查询\"></a>固定分数查询</h4><ol>\n<li><p>查询名字中包含「小」的文档，并固定查询分数</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"constant_score\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"filter\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询名字中包含「小」的文档，并固定查询分数为2</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"constant_score\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"filter\"</span>:&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小\"</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"boost\"</span>:<span class=\"number\">2</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"布尔查询\"><a href=\"#布尔查询\" class=\"headerlink\" title=\"布尔查询\"></a>布尔查询</h4><ol>\n<li><p>查询是国家为中国或者年龄为30的数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"bool\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"should\"</span>:[</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;,&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">30</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;\t</div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询国家为中国并且年龄为23的数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"bool\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"must\"</span>:[</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;,&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">23</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;\t</div><div class=\"line\">\t\t\t]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查询国家为中国并且年龄为23并且生日比1995-07-01早的数据</p>\n<p>请求体：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"query\"</span>:&#123;</div><div class=\"line\">\t\t<span class=\"attr\">\"bool\"</span>:&#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"must\"</span>:[</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"country\"</span>:<span class=\"string\">\"中国\"</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;,&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"match\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">23</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;\t</div><div class=\"line\">\t\t\t],</div><div class=\"line\">\t\t\t<span class=\"attr\">\"filter\"</span>:[&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"range\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"attr\">\"birthday\"</span>:&#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"attr\">\"lt\"</span>:<span class=\"string\">\"1995-07-01\"</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;]</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"Spring-Boot-集成-ES\"><a href=\"#Spring-Boot-集成-ES\" class=\"headerlink\" title=\"Spring Boot 集成 ES\"></a>Spring Boot 集成 ES</h2><div class=\"note success\"><p>代码托管在 GitHub：<a href=\"https://github.com/xkcoding/spring-boot-demo/tree/v-1.5.x/spring-boot-demo-elasticsearch\" target=\"_blank\" rel=\"external\">戳我获取源码</a></p>\n</div>\n<h3 id=\"Spring-Boot-集成-ES-的配置类\"><a href=\"#Spring-Boot-集成-ES-的配置类\" class=\"headerlink\" title=\"Spring Boot 集成 ES 的配置类\"></a>Spring Boot 集成 ES 的配置类</h3><p>在 Spring Boot 中配置类需要使用 <code>@Configuration</code> 来标注</p>\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8080</span></div><div class=\"line\"><span class=\"attr\">  context-path:</span> <span class=\"string\">/demo</span></div><div class=\"line\"><span class=\"attr\">elasticsearch:</span></div><div class=\"line\"><span class=\"attr\">  host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">9300</span></div><div class=\"line\"><span class=\"attr\">  cluster:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">xkcoding</span></div></pre></td></tr></table></figure>\n<p><strong>ElasticSearchConfig.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.springbootdemoelasticsearch.config;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.transport.TransportClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.settings.Settings;</div><div class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.transport.TransportAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.transport.client.PreBuiltTransportClient;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * ES 的配置类</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.springbootdemoelasticsearch.config</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： ES 的配置类</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/1/18 下午4:41</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: 0.0.1</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElasticSearchConfig</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;elasticsearch.host&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> String host;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;elasticsearch.port&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;elasticsearch.cluster.name&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> String clusterName;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> TransportClient <span class=\"title\">esClient</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> UnknownHostException </span>&#123;</div><div class=\"line\">\t\tSettings settings = Settings.builder().put(<span class=\"string\">\"cluster.name\"</span>, <span class=\"keyword\">this</span>.clusterName).put(<span class=\"string\">\"client.transport.sniff\"</span>, <span class=\"keyword\">true</span>).build();</div><div class=\"line\"></div><div class=\"line\">\t\tTransportAddress master = <span class=\"keyword\">new</span> TransportAddress(InetAddress.getByName(host), port);</div><div class=\"line\">\t\tTransportClient client = <span class=\"keyword\">new</span> PreBuiltTransportClient(settings).addTransportAddress(master);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> client;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 插入一条数据到 ES 中，id 由 ES 生成</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> name     名称</div><div class=\"line\"> * <span class=\"doctag\">@param</span> country  国籍</div><div class=\"line\"> * <span class=\"doctag\">@param</span> age      年龄</div><div class=\"line\"> * <span class=\"doctag\">@param</span> birthday 生日</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 插入数据的主键</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/person\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">add</span><span class=\"params\">(@RequestParam String name,</span></span></div><div class=\"line\">                       @RequestParam String country,</div><div class=\"line\">                       @RequestParam Integer age,</div><div class=\"line\">                       @RequestParam @DateTimeFormat(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>) Date birthday) &#123;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\tXContentBuilder content = XContentFactory.jsonBuilder()</div><div class=\"line\">\t\t\t\t.startObject()</div><div class=\"line\">\t\t\t\t.field(<span class=\"string\">\"name\"</span>, name)</div><div class=\"line\">\t\t\t\t.field(<span class=\"string\">\"country\"</span>, country)</div><div class=\"line\">\t\t\t\t.field(<span class=\"string\">\"age\"</span>, age)</div><div class=\"line\">\t\t\t\t.field(<span class=\"string\">\"birthday\"</span>, birthday.getTime())</div><div class=\"line\">\t\t\t\t.endObject();</div><div class=\"line\"></div><div class=\"line\">\t\tIndexResponse response = esClient.prepareIndex(INDEX, TYPE).setSource(content).get();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(response.getId());</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"修改-1\"><a href=\"#修改-1\" class=\"headerlink\" title=\"修改\"></a>修改</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 根据主键，修改传递字段对应的值</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> id       ES 中的 id</div><div class=\"line\"> * <span class=\"doctag\">@param</span> name     姓名</div><div class=\"line\"> * <span class=\"doctag\">@param</span> country  国籍</div><div class=\"line\"> * <span class=\"doctag\">@param</span> age      年龄</div><div class=\"line\"> * <span class=\"doctag\">@param</span> birthday 生日</div><div class=\"line\"> * <span class=\"doctag\">@return</span> UPDATED 代表文档修改成功</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@PutMapping</span>(<span class=\"string\">\"/person/&#123;id&#125;\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">update</span><span class=\"params\">(@PathVariable String id, </span></span></div><div class=\"line\">                          @RequestParam(value = <span class=\"string\">\"name\"</span>, required = <span class=\"keyword\">false</span>) String name, </div><div class=\"line\">                          @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"country\"</span>, required = <span class=\"keyword\">false</span>)</span> String country, </div><div class=\"line\">                          @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"age\"</span>, required = <span class=\"keyword\">false</span>)</span> Integer age, </div><div class=\"line\">                          @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"birthday\"</span>, required = <span class=\"keyword\">false</span>)</span> @<span class=\"title\">DateTimeFormat</span><span class=\"params\">(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span> Date birthday) &#123;</div><div class=\"line\">\tUpdateRequest request = <span class=\"keyword\">new</span> UpdateRequest(INDEX, TYPE, id);</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\tXContentBuilder builder = XContentFactory.jsonBuilder().startObject();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!Strings.isNullOrEmpty(name)) &#123;</div><div class=\"line\">\t\t\tbuilder.field(<span class=\"string\">\"name\"</span>, name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!Strings.isNullOrEmpty(country)) &#123;</div><div class=\"line\">\t\t\tbuilder.field(<span class=\"string\">\"country\"</span>, country);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (age != <span class=\"keyword\">null</span> &amp;&amp; age &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tbuilder.field(<span class=\"string\">\"age\"</span>, age);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (birthday != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tbuilder.field(<span class=\"string\">\"birthday\"</span>, birthday.getTime());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tbuilder.endObject();</div><div class=\"line\">\t\trequest.doc(builder);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\tUpdateResponse response = esClient.update(request).get();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(response);</div><div class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\te.printStackTrace();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofStatus(Status.INTERNAL_SERVER_ERROR);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 根据 id 删除 ES 的一条记录</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> id ES 中的 id</div><div class=\"line\"> * <span class=\"doctag\">@return</span> DELETED 代表删除</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@DeleteMapping</span>(<span class=\"string\">\"/person/&#123;id&#125;\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">delete</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</div><div class=\"line\">\tDeleteResponse response = esClient.prepareDelete(INDEX, TYPE, id).get();</div><div class=\"line\">\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(response.getResult());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"简单查询-1\"><a href=\"#简单查询-1\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 简单查询 根据 id 查 ES 中的文档内容</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> id ES 中存储的 id</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 对应 id 的文档内容</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/person/&#123;id&#125;\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">get</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</div><div class=\"line\">\tGetResponse response = esClient.prepareGet(INDEX, TYPE, id).get();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (!response.isExists() || response.isSourceEmpty()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ApiResponse.ofStatus(Status.NOT_FOUND);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(response.getSource());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"复合查询\"><a href=\"#复合查询\" class=\"headerlink\" title=\"复合查询\"></a>复合查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 复合查询，根据传进来的条件，查询具体内容</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> name    根据姓名匹配</div><div class=\"line\"> * <span class=\"doctag\">@param</span> country 根据国籍匹配</div><div class=\"line\"> * <span class=\"doctag\">@param</span> gtAge   大于年龄</div><div class=\"line\"> * <span class=\"doctag\">@param</span> ltAge   小于年龄</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 满足条件的文档内容</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/person/query\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ApiResponse <span class=\"title\">query</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"name\"</span>, required = <span class=\"keyword\">false</span>)</span> String name,</span></div><div class=\"line\">                         @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"country\"</span>, required = <span class=\"keyword\">false</span>)</span> String country,</div><div class=\"line\">                         @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"gt_age\"</span>, defaultValue = <span class=\"string\">\"0\"</span>)</span> <span class=\"keyword\">int</span> gtAge,</div><div class=\"line\">                         @<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"lt_age\"</span>, required = <span class=\"keyword\">false</span>)</span> Integer ltAge) &#123;</div><div class=\"line\">\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!Strings.isNullOrEmpty(name)) &#123;</div><div class=\"line\">\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(<span class=\"string\">\"name\"</span>, name));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!Strings.isNullOrEmpty(country)) &#123;</div><div class=\"line\">\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(<span class=\"string\">\"country\"</span>, country));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tRangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(<span class=\"string\">\"age\"</span>).from(gtAge);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ltAge != <span class=\"keyword\">null</span> &amp;&amp; ltAge &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\trangeQueryBuilder.to(ltAge);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tboolQueryBuilder.filter(rangeQueryBuilder);</div><div class=\"line\"></div><div class=\"line\">\tSearchRequestBuilder searchRequestBuilder = esClient.prepareSearch(INDEX)</div><div class=\"line\">\t\t\t.setTypes(TYPE)</div><div class=\"line\">\t\t\t.setSearchType(SearchType.DFS_QUERY_THEN_FETCH)</div><div class=\"line\">\t\t\t.setQuery(boolQueryBuilder)</div><div class=\"line\">\t\t\t.setFrom(<span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t.setSize(<span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\">\tlog.info(<span class=\"string\">\"【query】:&#123;&#125;\"</span>, searchRequestBuilder);</div><div class=\"line\"></div><div class=\"line\">\tSearchResponse searchResponse = searchRequestBuilder.get();</div><div class=\"line\">\tList&lt;Map&lt;String, Object&gt;&gt; result = Lists.newArrayList();</div><div class=\"line\">\tsearchResponse.getHits().forEach(hit -&gt; &#123;</div><div class=\"line\">\t\tresult.add(hit.getSourceAsMap());</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> ApiResponse.ofSuccess(result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"搜索建议（有时间补充）\"><a href=\"#搜索建议（有时间补充）\" class=\"headerlink\" title=\"搜索建议（有时间补充）\"></a>搜索建议（有时间补充）</h3><h3 id=\"聚合查询（有时间补充）\"><a href=\"#聚合查询（有时间补充）\" class=\"headerlink\" title=\"聚合查询（有时间补充）\"></a>聚合查询（有时间补充）</h3><h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>ElasticSearch 在现在是一个应用十分广泛，且火热的技术，本文只是我在入门 ES 的一点小小的记录，更多 ES 的专业知识，优化技巧，还需要大量的学习与实践！</p>\n<p>推荐学习地址：</p>\n<ol>\n<li>官方文档：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html\" target=\"_blank\" rel=\"external\">https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html</a></li>\n<li>Elastic 中文社区：<a href=\"https://elasticsearch.cn/\" target=\"_blank\" rel=\"external\">https://elasticsearch.cn/</a></li>\n</ol>"},{"title":"关于 MSSQL/MYSQL/ORACLE 的分页语句","comments":1,"fancybox":false,"toc":false,"date":"2018-01-16T06:07:37.000Z","description":"不同数据库的前 N 条或者第 N 条到第 M 条记录的 SQL 语句","top":null,"_content":"**MSSQL 的前 N 条记录**\n\n```sql\n--查询前 N 条记录，可以改成需要的数字\nSELECT TOP N * FROM TABLE_NAME\n```\n\n**MSSQL 的分页语句，第 N 条到第 M 条记录**\n\n```sql\nSELECT TOP N T.* FROM ( SELECT TOP M * FROM TABLE_NAME ORDER BY COLUMN_NAME ) T ORDER BY T.COLUMN_NAME DESC\n```\n\n**MYSQL 的前 N 条记录**\n\n```sql\n-- 通常0是可以省略的，直接写成 LIMIT N。0代表从第0条记录后面开始，也就是从第一条开始\nSELECT * FROM TABLE_NAME LIMIT 0,N\n```\n\n**MYSQL 的分页语句，第 N 条开始，每页 M 条**\n\n```sql\nSELECT * FROM TABLE_NAME LIMIT N,M\n```\n\n**ORACLE 的前 N 条记录**\n\n```sql\n-- N 为前多少条记录\nSELECT * FROM TABLE_NAME WHERE ROWNUM < N\n```\n\n**ORACLE 的分页语句，第 N 条到第 M 条记录**\n\n```sql\n-- 这句就是从 N 到 M 的数据，分为三层结构\nSELECT * FROM ( SELECT T.*,T.ROWNUM RN FROM ( SELECT * FROM TABLE_NAME ) T WHERE T.ROWNUM < M ) WHERE RN > N\n```\n\n","source":"_posts/2018-01-16.db-page-sqls.md","raw":"---\ntitle: 关于 MSSQL/MYSQL/ORACLE 的分页语句\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-01-16 14:07:37\ntags:\n- 代码片段\n- sql\ncategories:\n- 代码片段\n- sql\ndescription: 不同数据库的前 N 条或者第 N 条到第 M 条记录的 SQL 语句\npermalink: db-page-sqls\ntop:\n---\n**MSSQL 的前 N 条记录**\n\n```sql\n--查询前 N 条记录，可以改成需要的数字\nSELECT TOP N * FROM TABLE_NAME\n```\n\n**MSSQL 的分页语句，第 N 条到第 M 条记录**\n\n```sql\nSELECT TOP N T.* FROM ( SELECT TOP M * FROM TABLE_NAME ORDER BY COLUMN_NAME ) T ORDER BY T.COLUMN_NAME DESC\n```\n\n**MYSQL 的前 N 条记录**\n\n```sql\n-- 通常0是可以省略的，直接写成 LIMIT N。0代表从第0条记录后面开始，也就是从第一条开始\nSELECT * FROM TABLE_NAME LIMIT 0,N\n```\n\n**MYSQL 的分页语句，第 N 条开始，每页 M 条**\n\n```sql\nSELECT * FROM TABLE_NAME LIMIT N,M\n```\n\n**ORACLE 的前 N 条记录**\n\n```sql\n-- N 为前多少条记录\nSELECT * FROM TABLE_NAME WHERE ROWNUM < N\n```\n\n**ORACLE 的分页语句，第 N 条到第 M 条记录**\n\n```sql\n-- 这句就是从 N 到 M 的数据，分为三层结构\nSELECT * FROM ( SELECT T.*,T.ROWNUM RN FROM ( SELECT * FROM TABLE_NAME ) T WHERE T.ROWNUM < M ) WHERE RN > N\n```\n\n","slug":"db-page-sqls","published":1,"updated":"2019-01-21T09:20:28.617Z","layout":"post","photos":[],"link":"","_id":"cjr64il6t001zkds6fp374nl6","content":"<p><strong>MSSQL 的前 N 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">--查询前 N 条记录，可以改成需要的数字</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> TOP N * <span class=\"keyword\">FROM</span> TABLE_NAME</div></pre></td></tr></table></figure>\n<p><strong>MSSQL 的分页语句，第 N 条到第 M 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> TOP N T.* <span class=\"keyword\">FROM</span> ( <span class=\"keyword\">SELECT</span> TOP M * <span class=\"keyword\">FROM</span> TABLE_NAME <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> COLUMN_NAME ) T <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> T.COLUMN_NAME <span class=\"keyword\">DESC</span></div></pre></td></tr></table></figure>\n<p><strong>MYSQL 的前 N 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 通常0是可以省略的，直接写成 LIMIT N。0代表从第0条记录后面开始，也就是从第一条开始</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> TABLE_NAME <span class=\"keyword\">LIMIT</span> <span class=\"number\">0</span>,N</div></pre></td></tr></table></figure>\n<p><strong>MYSQL 的分页语句，第 N 条开始，每页 M 条</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> TABLE_NAME <span class=\"keyword\">LIMIT</span> N,M</div></pre></td></tr></table></figure>\n<p><strong>ORACLE 的前 N 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- N 为前多少条记录</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> TABLE_NAME <span class=\"keyword\">WHERE</span> <span class=\"keyword\">ROWNUM</span> &lt; N</div></pre></td></tr></table></figure>\n<p><strong>ORACLE 的分页语句，第 N 条到第 M 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 这句就是从 N 到 M 的数据，分为三层结构</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> ( <span class=\"keyword\">SELECT</span> T.*,T.ROWNUM RN <span class=\"keyword\">FROM</span> ( <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> TABLE_NAME ) T <span class=\"keyword\">WHERE</span> T.ROWNUM &lt; M ) <span class=\"keyword\">WHERE</span> RN &gt; N</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>MSSQL 的前 N 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">--查询前 N 条记录，可以改成需要的数字</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> TOP N * <span class=\"keyword\">FROM</span> TABLE_NAME</div></pre></td></tr></table></figure>\n<p><strong>MSSQL 的分页语句，第 N 条到第 M 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> TOP N T.* <span class=\"keyword\">FROM</span> ( <span class=\"keyword\">SELECT</span> TOP M * <span class=\"keyword\">FROM</span> TABLE_NAME <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> COLUMN_NAME ) T <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> T.COLUMN_NAME <span class=\"keyword\">DESC</span></div></pre></td></tr></table></figure>\n<p><strong>MYSQL 的前 N 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 通常0是可以省略的，直接写成 LIMIT N。0代表从第0条记录后面开始，也就是从第一条开始</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> TABLE_NAME <span class=\"keyword\">LIMIT</span> <span class=\"number\">0</span>,N</div></pre></td></tr></table></figure>\n<p><strong>MYSQL 的分页语句，第 N 条开始，每页 M 条</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> TABLE_NAME <span class=\"keyword\">LIMIT</span> N,M</div></pre></td></tr></table></figure>\n<p><strong>ORACLE 的前 N 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- N 为前多少条记录</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> TABLE_NAME <span class=\"keyword\">WHERE</span> <span class=\"keyword\">ROWNUM</span> &lt; N</div></pre></td></tr></table></figure>\n<p><strong>ORACLE 的分页语句，第 N 条到第 M 条记录</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 这句就是从 N 到 M 的数据，分为三层结构</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> ( <span class=\"keyword\">SELECT</span> T.*,T.ROWNUM RN <span class=\"keyword\">FROM</span> ( <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> TABLE_NAME ) T <span class=\"keyword\">WHERE</span> T.ROWNUM &lt; M ) <span class=\"keyword\">WHERE</span> RN &gt; N</div></pre></td></tr></table></figure>\n"},{"title":"OSX 常用软件汇总","comments":1,"fancybox":false,"toc":false,"date":"2018-02-05T05:41:03.000Z","description":null,"top":null,"_content":"每次重装系统，或者新电脑到手的时候，最麻烦的莫过于重新安装之前常用的一些软件了。但是，平时常用的软件实在有点多，于是乎，整理一个 OSX 常用软件的列表，便于以后查找使用，以下整理的软件仅代表我个人平时常用的软件，不喜勿喷。\n\n<!--more-->\n\n最喜欢的一个「免（破）费（解）」的 osx 软件下载网址：[xclient.info](http://xclient.info/) ，有经济能力的童鞋还是请支持正版。。。\n\n## 聊天类软件\n\n| 软件   | 介绍及下载地址                                  |\n| ---- | ---------------------------------------- |\n| QQ   | 略，http://im.qq.com/macqq/                |\n| 微信   | 略，Mac App Store                          |\n| 阿里旺旺 | 淘宝买家与卖家之间的沟通工具，https://alimarket.taobao.com/markets/qnww/portal-group/ww/download |\n| 钉钉   | 智能移动办公平台，https://www.dingtalk.com/       |\n\n## 影音类软件\n\n| 软件     | 介绍及下载地址                                  |\n| ------ | ---------------------------------------- |\n| 网易云音乐  | 网易一款良心之作，听歌很棒，听歌看评论更棒，https://music.163.com/#/download |\n| Movist | 对比过很多视频播放器，最终这款我比较喜欢，http://xclient.info/s/movist.html?_=80fb58a8555e8bf529af34d2f81df569 |\n\n## 笔记类软件\n\n| 软件       | 介绍及下载地址                                  |\n| -------- | ---------------------------------------- |\n| 有道云笔记    | 略，http://note.youdao.com/download.html#mac |\n| Evernote | 略，https://www.yinxiang.com/download/     |\n| MWeb     | 一款 `markdown` 编辑器，比较喜欢的是可以将图片上传至七牛云等地方，适合做笔记，http://xclient.info/s/mweb.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Typora   | 和 MWeb 一样，是一款 `markdown` 编辑器，本文就是用这个软件写的，所见即所得，适合写博客文章，https://www.typora.io/ |\n\n## 摄影类软件\n\n| 软件                 | 介绍及下载地址                                  |\n| ------------------ | ---------------------------------------- |\n| 泼辣修图               | 国人开发的一款好用的修图软件，包含及其丰富的滤镜，http://xclient.info/s/polarr-photo-editor.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Snapseed           | 一款国内外知名的修图软件，需要一定的操作，Mac App Store       |\n| Super PhotoCut Pro | 超级抠图，http://xclient.info/s/super-photocut.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Photoshop          | 这个就不介绍了，摄影、修图必备，http://xclient.info/s/adobe-photoshop-cc.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Lightroom          | 对 RAW 格式的照片做处理，http://xclient.info/s/adobe-lightroom-cc.html?_=80fb58a8555e8bf529af34d2f81df569 |\n\n## 效率类软件\n\n| 软件                   | 介绍及下载地址                                  |\n| -------------------- | ---------------------------------------- |\n| Alfred               | 效率神器，可以不用鼠标，召唤出你想要的一切，http://xclient.info/s/alfred.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Clean My Mac 3       | Mac 的一款包含磁盘垃圾清理及硬件资源监控等功能的软件，http://www.mycleanmymac.com/ |\n| CheetSheat           | 长按⌘键，展示当前窗口应用的快捷键，https://www.mediaatelier.com/CheatSheet/ |\n| Dash                 | 开发者必备 API文档聚合，http://xclient.info/s/dash.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| MindNote             | 思维导图工具，http://xclient.info/s/mind-node-pro.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| XMind                | 思维导图工具，https://www.xmind.cn/download/    |\n| iTerm                | 替换自带的 Terminal 程序，更好用，http://www.iterm2.com/ |\n| Moom                 | 强大的窗口布局工具，http://xclient.info/s/moom.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Microsoft PowerPoint | PPT，Microsoft Office 2016 for Mac 套件中，http://xclient.info/s/office-for-mac-2016.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Microsoft Excel      | Excel，Microsoft Office 2016 for Mac 套件中，同上 |\n| Microsoft Word       | Word，Microsoft Office 2016 for Mac 套件中，同上 |\n| Microsoft OneNote    | OneNote，Microsoft Office 2016 for Mac 套件中，同上 |\n| Pages                | 一款文字处理和页面排版工具，类似 Word，Mac App Store      |\n| Keynote              | 运行于Mac OS X操作系统下的演示幻灯片应用软件，类似 PPT，Mac App Store |\n| Numbers              | 一款电子表单应用程序，类似 Excel，Mac App Store        |\n| OmniPlan             | 最NB的项目管理流程软件，http://xclient.info/s/omni-plan.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| OmniGraffle          | 强大的图形工具，可以用来绘制图表，流程图，组织结构图以及插图，http://xclient.info/s/omnigraffle.html?_=80fb58a8555e8bf529af34d2f81df569 |\n\n## 实用工具类软件\n\n| 软件                            | 介绍及下载地址                                  |\n| ----------------------------- | ---------------------------------------- |\n| NewFileMenu                   | 可以在 Mac 上使用右键创建文档，http://xclient.info/s/new-file-menu.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| ScreenFlow                    | 一款优秀的屏幕录像软件，http://xclient.info/s/screenflow.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| 百度网盘                          | 提供文件的网络备份、同步和分享服务，https://pan.baidu.com/download#pan |\n| FlashFTP                      | 一款高效的FTP、SFTP文件传输客户端，Mac App Store       |\n| 迅雷                            | 下载工具，http://mac.xunlei.com/              |\n| SpechtLite                    | 科学上网工具，需配合「[熊猫翻滚](https://ezssl.net/?r=109610)」使用，https://upcloud-pic.b0.upaiyun.com/panda/spechlite/0.10.7.zip |\n| PDF Expert                    | 一款可以对 PDF 进行标注的阅读器，Mac App Store         |\n| Rar Sharp                     | rar文件解压工具，Mac App Store                  |\n| Things 3                      | 一款优秀的 GTD 任务管理工具，http://xclient.info/s/things.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| VMware Fusion                 | 强大的虚拟机应用，http://xclient.info/s/vmware-fusion.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Gemini 2                      | 高效的重复文件查找器，http://xclient.info/s/gemini.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| EdrawMax                      | 基于矢量的绘图工具，轻松绘制流程图                        |\n| PP助手                          | 可以将文件传给 iPhone，不喜欢 iTunes，https://pro.25pp.com/pp_mac_ios |\n| Charles                       | 抓包工具，http://charles.iiilab.com/          |\n| VirtualBox                    | 免费的虚拟机软件，https://www.virtualbox.org/     |\n| duet                          | 可以将 mac 屏幕投影到 iPhone 或者 ipad 上，将其作为第二屏，https://www.duetdisplay.com/ |\n| Lantern                       | 免费的科学上网神器，https://github.com/getlantern/lantern/releases/tag/latest |\n| TeamViewer                    | 远程支持、远程访问、在线协作和会议，https://www.teamviewer.com/zhcn/download/mac/ |\n| Microsoft Remote Desktop Beta | 支持让 Mac 远程连接到 windows 服务器，https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06/ |\n| Xee<sup>3</sup>               | 支持多格式的图片浏览工具，http://xclient.info/s/xee3.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Tuxera Disk Manager           | 让你的 Mac 支持读取 NTFS 格式的硬盘                  |\n| iStatistica                   | 一款高颜值的系统监控工具，http://xclient.info/s/istatistica.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| TinyCal                       | 一款小而美的日历，可以放置在通知栏上，支持阴历，http://xclient.info/s/tinycal.html?_=80fb58a8555e8bf529af34d2f81df569 |\n\n## 开发类软件\n\n| 软件                | 介绍及下载地址                                               |\n| ------------------- | ------------------------------------------------------------ |\n| IntelliJ IDEA       | Java 主力开发软件，http://www.jetbrains.com/idea/            |\n| WebStorm            | 前端开发，http://www.jetbrains.com/webstorm/                 |\n| PyCharm             | Python 开发，http://www.jetbrains.com/pycharm/               |\n| Android Studio      | Android 开发，https://developer.android.com/studio/index.html |\n| Xcode               | IOS 开发，Mac App Store                                      |\n| HBuilder            | 跨平台的 mui 应用开发，http://www.dcloud.io/                 |\n| Sublime text        | 文本编辑器，https://www.sublimetext.com/                     |\n| Virtual Studio Code | 文本编辑器，https://code.visualstudio.com/download           |\n| Navicat Premium     | 一个可多重连接的数据库管理工具，支持的数据库有： MySQL、SQL Server、SQLite、Oracle 及 PostgreSQL，http://xclient.info/s/navicat-premium.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| JD-GUI              | 反编译 class 文件，http://jd.benow.ca/                       |\n| docker              | 容器，https://www.docker.com/get-docker                      |\n| rdm                 | redis 桌面管理软件，https://github.com/uglide/RedisDesktopManager |\n| Genymotion          | 安卓模拟器，https://www.genymotion.com/                      |\n| Beyond Compare      | 文件比对软件                                                 |\n| Mock Plus           | 原型图软件，https://www.mockplus.cn/                         |\n| Sketch              | 移动应用矢量绘图设计工具，http://xclient.info/s/sketch.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Axure RP 8          | 快速原型设计工具，http://xclient.info/s/axure-rp.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Postman             | HTTP 模拟请求工具，https://www.getpostman.com/               |\n| Insomnia            | HTTP 模拟请求工具，比 Postman 界面更干净，https://insomnia.rest/ |\n| SSH Shell           | 远程连接到 Linux 服务器，管理多个 SSH 会话，http://xclient.info/s/ssh-shell.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| LaunchRocket        | 统一管理 Mac 上的一些服务，比如说 redis、mysql、zookeeper、rabbitmq等等服务，https://github.com/jimbojsb/launchrocket |","source":"_posts/2018-02-05.osx-software-lists.md","raw":"---\ntitle: OSX 常用软件汇总\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-02-05 13:41:03\ntags:\n- 软件\ncategories:\n- 软件\ndescription:\npermalink: osx-software-lists\ntop:\n---\n每次重装系统，或者新电脑到手的时候，最麻烦的莫过于重新安装之前常用的一些软件了。但是，平时常用的软件实在有点多，于是乎，整理一个 OSX 常用软件的列表，便于以后查找使用，以下整理的软件仅代表我个人平时常用的软件，不喜勿喷。\n\n<!--more-->\n\n最喜欢的一个「免（破）费（解）」的 osx 软件下载网址：[xclient.info](http://xclient.info/) ，有经济能力的童鞋还是请支持正版。。。\n\n## 聊天类软件\n\n| 软件   | 介绍及下载地址                                  |\n| ---- | ---------------------------------------- |\n| QQ   | 略，http://im.qq.com/macqq/                |\n| 微信   | 略，Mac App Store                          |\n| 阿里旺旺 | 淘宝买家与卖家之间的沟通工具，https://alimarket.taobao.com/markets/qnww/portal-group/ww/download |\n| 钉钉   | 智能移动办公平台，https://www.dingtalk.com/       |\n\n## 影音类软件\n\n| 软件     | 介绍及下载地址                                  |\n| ------ | ---------------------------------------- |\n| 网易云音乐  | 网易一款良心之作，听歌很棒，听歌看评论更棒，https://music.163.com/#/download |\n| Movist | 对比过很多视频播放器，最终这款我比较喜欢，http://xclient.info/s/movist.html?_=80fb58a8555e8bf529af34d2f81df569 |\n\n## 笔记类软件\n\n| 软件       | 介绍及下载地址                                  |\n| -------- | ---------------------------------------- |\n| 有道云笔记    | 略，http://note.youdao.com/download.html#mac |\n| Evernote | 略，https://www.yinxiang.com/download/     |\n| MWeb     | 一款 `markdown` 编辑器，比较喜欢的是可以将图片上传至七牛云等地方，适合做笔记，http://xclient.info/s/mweb.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Typora   | 和 MWeb 一样，是一款 `markdown` 编辑器，本文就是用这个软件写的，所见即所得，适合写博客文章，https://www.typora.io/ |\n\n## 摄影类软件\n\n| 软件                 | 介绍及下载地址                                  |\n| ------------------ | ---------------------------------------- |\n| 泼辣修图               | 国人开发的一款好用的修图软件，包含及其丰富的滤镜，http://xclient.info/s/polarr-photo-editor.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Snapseed           | 一款国内外知名的修图软件，需要一定的操作，Mac App Store       |\n| Super PhotoCut Pro | 超级抠图，http://xclient.info/s/super-photocut.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Photoshop          | 这个就不介绍了，摄影、修图必备，http://xclient.info/s/adobe-photoshop-cc.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Lightroom          | 对 RAW 格式的照片做处理，http://xclient.info/s/adobe-lightroom-cc.html?_=80fb58a8555e8bf529af34d2f81df569 |\n\n## 效率类软件\n\n| 软件                   | 介绍及下载地址                                  |\n| -------------------- | ---------------------------------------- |\n| Alfred               | 效率神器，可以不用鼠标，召唤出你想要的一切，http://xclient.info/s/alfred.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Clean My Mac 3       | Mac 的一款包含磁盘垃圾清理及硬件资源监控等功能的软件，http://www.mycleanmymac.com/ |\n| CheetSheat           | 长按⌘键，展示当前窗口应用的快捷键，https://www.mediaatelier.com/CheatSheet/ |\n| Dash                 | 开发者必备 API文档聚合，http://xclient.info/s/dash.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| MindNote             | 思维导图工具，http://xclient.info/s/mind-node-pro.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| XMind                | 思维导图工具，https://www.xmind.cn/download/    |\n| iTerm                | 替换自带的 Terminal 程序，更好用，http://www.iterm2.com/ |\n| Moom                 | 强大的窗口布局工具，http://xclient.info/s/moom.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Microsoft PowerPoint | PPT，Microsoft Office 2016 for Mac 套件中，http://xclient.info/s/office-for-mac-2016.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Microsoft Excel      | Excel，Microsoft Office 2016 for Mac 套件中，同上 |\n| Microsoft Word       | Word，Microsoft Office 2016 for Mac 套件中，同上 |\n| Microsoft OneNote    | OneNote，Microsoft Office 2016 for Mac 套件中，同上 |\n| Pages                | 一款文字处理和页面排版工具，类似 Word，Mac App Store      |\n| Keynote              | 运行于Mac OS X操作系统下的演示幻灯片应用软件，类似 PPT，Mac App Store |\n| Numbers              | 一款电子表单应用程序，类似 Excel，Mac App Store        |\n| OmniPlan             | 最NB的项目管理流程软件，http://xclient.info/s/omni-plan.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| OmniGraffle          | 强大的图形工具，可以用来绘制图表，流程图，组织结构图以及插图，http://xclient.info/s/omnigraffle.html?_=80fb58a8555e8bf529af34d2f81df569 |\n\n## 实用工具类软件\n\n| 软件                            | 介绍及下载地址                                  |\n| ----------------------------- | ---------------------------------------- |\n| NewFileMenu                   | 可以在 Mac 上使用右键创建文档，http://xclient.info/s/new-file-menu.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| ScreenFlow                    | 一款优秀的屏幕录像软件，http://xclient.info/s/screenflow.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| 百度网盘                          | 提供文件的网络备份、同步和分享服务，https://pan.baidu.com/download#pan |\n| FlashFTP                      | 一款高效的FTP、SFTP文件传输客户端，Mac App Store       |\n| 迅雷                            | 下载工具，http://mac.xunlei.com/              |\n| SpechtLite                    | 科学上网工具，需配合「[熊猫翻滚](https://ezssl.net/?r=109610)」使用，https://upcloud-pic.b0.upaiyun.com/panda/spechlite/0.10.7.zip |\n| PDF Expert                    | 一款可以对 PDF 进行标注的阅读器，Mac App Store         |\n| Rar Sharp                     | rar文件解压工具，Mac App Store                  |\n| Things 3                      | 一款优秀的 GTD 任务管理工具，http://xclient.info/s/things.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| VMware Fusion                 | 强大的虚拟机应用，http://xclient.info/s/vmware-fusion.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Gemini 2                      | 高效的重复文件查找器，http://xclient.info/s/gemini.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| EdrawMax                      | 基于矢量的绘图工具，轻松绘制流程图                        |\n| PP助手                          | 可以将文件传给 iPhone，不喜欢 iTunes，https://pro.25pp.com/pp_mac_ios |\n| Charles                       | 抓包工具，http://charles.iiilab.com/          |\n| VirtualBox                    | 免费的虚拟机软件，https://www.virtualbox.org/     |\n| duet                          | 可以将 mac 屏幕投影到 iPhone 或者 ipad 上，将其作为第二屏，https://www.duetdisplay.com/ |\n| Lantern                       | 免费的科学上网神器，https://github.com/getlantern/lantern/releases/tag/latest |\n| TeamViewer                    | 远程支持、远程访问、在线协作和会议，https://www.teamviewer.com/zhcn/download/mac/ |\n| Microsoft Remote Desktop Beta | 支持让 Mac 远程连接到 windows 服务器，https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06/ |\n| Xee<sup>3</sup>               | 支持多格式的图片浏览工具，http://xclient.info/s/xee3.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Tuxera Disk Manager           | 让你的 Mac 支持读取 NTFS 格式的硬盘                  |\n| iStatistica                   | 一款高颜值的系统监控工具，http://xclient.info/s/istatistica.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| TinyCal                       | 一款小而美的日历，可以放置在通知栏上，支持阴历，http://xclient.info/s/tinycal.html?_=80fb58a8555e8bf529af34d2f81df569 |\n\n## 开发类软件\n\n| 软件                | 介绍及下载地址                                               |\n| ------------------- | ------------------------------------------------------------ |\n| IntelliJ IDEA       | Java 主力开发软件，http://www.jetbrains.com/idea/            |\n| WebStorm            | 前端开发，http://www.jetbrains.com/webstorm/                 |\n| PyCharm             | Python 开发，http://www.jetbrains.com/pycharm/               |\n| Android Studio      | Android 开发，https://developer.android.com/studio/index.html |\n| Xcode               | IOS 开发，Mac App Store                                      |\n| HBuilder            | 跨平台的 mui 应用开发，http://www.dcloud.io/                 |\n| Sublime text        | 文本编辑器，https://www.sublimetext.com/                     |\n| Virtual Studio Code | 文本编辑器，https://code.visualstudio.com/download           |\n| Navicat Premium     | 一个可多重连接的数据库管理工具，支持的数据库有： MySQL、SQL Server、SQLite、Oracle 及 PostgreSQL，http://xclient.info/s/navicat-premium.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| JD-GUI              | 反编译 class 文件，http://jd.benow.ca/                       |\n| docker              | 容器，https://www.docker.com/get-docker                      |\n| rdm                 | redis 桌面管理软件，https://github.com/uglide/RedisDesktopManager |\n| Genymotion          | 安卓模拟器，https://www.genymotion.com/                      |\n| Beyond Compare      | 文件比对软件                                                 |\n| Mock Plus           | 原型图软件，https://www.mockplus.cn/                         |\n| Sketch              | 移动应用矢量绘图设计工具，http://xclient.info/s/sketch.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Axure RP 8          | 快速原型设计工具，http://xclient.info/s/axure-rp.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| Postman             | HTTP 模拟请求工具，https://www.getpostman.com/               |\n| Insomnia            | HTTP 模拟请求工具，比 Postman 界面更干净，https://insomnia.rest/ |\n| SSH Shell           | 远程连接到 Linux 服务器，管理多个 SSH 会话，http://xclient.info/s/ssh-shell.html?_=80fb58a8555e8bf529af34d2f81df569 |\n| LaunchRocket        | 统一管理 Mac 上的一些服务，比如说 redis、mysql、zookeeper、rabbitmq等等服务，https://github.com/jimbojsb/launchrocket |","slug":"osx-software-lists","published":1,"updated":"2018-02-09T10:07:11.758Z","layout":"post","photos":[],"link":"","_id":"cjr64il6u0022kds6kfwodzvs","content":"<p>每次重装系统，或者新电脑到手的时候，最麻烦的莫过于重新安装之前常用的一些软件了。但是，平时常用的软件实在有点多，于是乎，整理一个 OSX 常用软件的列表，便于以后查找使用，以下整理的软件仅代表我个人平时常用的软件，不喜勿喷。</p>\n<a id=\"more\"></a>\n<p>最喜欢的一个「免（破）费（解）」的 osx 软件下载网址：<a href=\"http://xclient.info/\" target=\"_blank\" rel=\"external\">xclient.info</a> ，有经济能力的童鞋还是请支持正版。。。</p>\n<h2 id=\"聊天类软件\"><a href=\"#聊天类软件\" class=\"headerlink\" title=\"聊天类软件\"></a>聊天类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>QQ</td>\n<td>略，<a href=\"http://im.qq.com/macqq/\" target=\"_blank\" rel=\"external\">http://im.qq.com/macqq/</a></td>\n</tr>\n<tr>\n<td>微信</td>\n<td>略，Mac App Store</td>\n</tr>\n<tr>\n<td>阿里旺旺</td>\n<td>淘宝买家与卖家之间的沟通工具，<a href=\"https://alimarket.taobao.com/markets/qnww/portal-group/ww/download\" target=\"_blank\" rel=\"external\">https://alimarket.taobao.com/markets/qnww/portal-group/ww/download</a></td>\n</tr>\n<tr>\n<td>钉钉</td>\n<td>智能移动办公平台，<a href=\"https://www.dingtalk.com/\" target=\"_blank\" rel=\"external\">https://www.dingtalk.com/</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"影音类软件\"><a href=\"#影音类软件\" class=\"headerlink\" title=\"影音类软件\"></a>影音类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网易云音乐</td>\n<td>网易一款良心之作，听歌很棒，听歌看评论更棒，<a href=\"https://music.163.com/#/download\" target=\"_blank\" rel=\"external\">https://music.163.com/#/download</a></td>\n</tr>\n<tr>\n<td>Movist</td>\n<td>对比过很多视频播放器，最终这款我比较喜欢，<a href=\"http://xclient.info/s/movist.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/movist.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"笔记类软件\"><a href=\"#笔记类软件\" class=\"headerlink\" title=\"笔记类软件\"></a>笔记类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>有道云笔记</td>\n<td>略，<a href=\"http://note.youdao.com/download.html#mac\" target=\"_blank\" rel=\"external\">http://note.youdao.com/download.html#mac</a></td>\n</tr>\n<tr>\n<td>Evernote</td>\n<td>略，<a href=\"https://www.yinxiang.com/download/\" target=\"_blank\" rel=\"external\">https://www.yinxiang.com/download/</a></td>\n</tr>\n<tr>\n<td>MWeb</td>\n<td>一款 <code>markdown</code> 编辑器，比较喜欢的是可以将图片上传至七牛云等地方，适合做笔记，<a href=\"http://xclient.info/s/mweb.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/mweb.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Typora</td>\n<td>和 MWeb 一样，是一款 <code>markdown</code> 编辑器，本文就是用这个软件写的，所见即所得，适合写博客文章，<a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"external\">https://www.typora.io/</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"摄影类软件\"><a href=\"#摄影类软件\" class=\"headerlink\" title=\"摄影类软件\"></a>摄影类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>泼辣修图</td>\n<td>国人开发的一款好用的修图软件，包含及其丰富的滤镜，<a href=\"http://xclient.info/s/polarr-photo-editor.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/polarr-photo-editor.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Snapseed</td>\n<td>一款国内外知名的修图软件，需要一定的操作，Mac App Store</td>\n</tr>\n<tr>\n<td>Super PhotoCut Pro</td>\n<td>超级抠图，<a href=\"http://xclient.info/s/super-photocut.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/super-photocut.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Photoshop</td>\n<td>这个就不介绍了，摄影、修图必备，<a href=\"http://xclient.info/s/adobe-photoshop-cc.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/adobe-photoshop-cc.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Lightroom</td>\n<td>对 RAW 格式的照片做处理，<a href=\"http://xclient.info/s/adobe-lightroom-cc.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/adobe-lightroom-cc.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"效率类软件\"><a href=\"#效率类软件\" class=\"headerlink\" title=\"效率类软件\"></a>效率类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alfred</td>\n<td>效率神器，可以不用鼠标，召唤出你想要的一切，<a href=\"http://xclient.info/s/alfred.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/alfred.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Clean My Mac 3</td>\n<td>Mac 的一款包含磁盘垃圾清理及硬件资源监控等功能的软件，<a href=\"http://www.mycleanmymac.com/\" target=\"_blank\" rel=\"external\">http://www.mycleanmymac.com/</a></td>\n</tr>\n<tr>\n<td>CheetSheat</td>\n<td>长按⌘键，展示当前窗口应用的快捷键，<a href=\"https://www.mediaatelier.com/CheatSheet/\" target=\"_blank\" rel=\"external\">https://www.mediaatelier.com/CheatSheet/</a></td>\n</tr>\n<tr>\n<td>Dash</td>\n<td>开发者必备 API文档聚合，<a href=\"http://xclient.info/s/dash.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/dash.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>MindNote</td>\n<td>思维导图工具，<a href=\"http://xclient.info/s/mind-node-pro.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/mind-node-pro.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>XMind</td>\n<td>思维导图工具，<a href=\"https://www.xmind.cn/download/\" target=\"_blank\" rel=\"external\">https://www.xmind.cn/download/</a></td>\n</tr>\n<tr>\n<td>iTerm</td>\n<td>替换自带的 Terminal 程序，更好用，<a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">http://www.iterm2.com/</a></td>\n</tr>\n<tr>\n<td>Moom</td>\n<td>强大的窗口布局工具，<a href=\"http://xclient.info/s/moom.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/moom.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Microsoft PowerPoint</td>\n<td>PPT，Microsoft Office 2016 for Mac 套件中，<a href=\"http://xclient.info/s/office-for-mac-2016.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/office-for-mac-2016.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Microsoft Excel</td>\n<td>Excel，Microsoft Office 2016 for Mac 套件中，同上</td>\n</tr>\n<tr>\n<td>Microsoft Word</td>\n<td>Word，Microsoft Office 2016 for Mac 套件中，同上</td>\n</tr>\n<tr>\n<td>Microsoft OneNote</td>\n<td>OneNote，Microsoft Office 2016 for Mac 套件中，同上</td>\n</tr>\n<tr>\n<td>Pages</td>\n<td>一款文字处理和页面排版工具，类似 Word，Mac App Store</td>\n</tr>\n<tr>\n<td>Keynote</td>\n<td>运行于Mac OS X操作系统下的演示幻灯片应用软件，类似 PPT，Mac App Store</td>\n</tr>\n<tr>\n<td>Numbers</td>\n<td>一款电子表单应用程序，类似 Excel，Mac App Store</td>\n</tr>\n<tr>\n<td>OmniPlan</td>\n<td>最NB的项目管理流程软件，<a href=\"http://xclient.info/s/omni-plan.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/omni-plan.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>OmniGraffle</td>\n<td>强大的图形工具，可以用来绘制图表，流程图，组织结构图以及插图，<a href=\"http://xclient.info/s/omnigraffle.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/omnigraffle.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实用工具类软件\"><a href=\"#实用工具类软件\" class=\"headerlink\" title=\"实用工具类软件\"></a>实用工具类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NewFileMenu</td>\n<td>可以在 Mac 上使用右键创建文档，<a href=\"http://xclient.info/s/new-file-menu.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/new-file-menu.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>ScreenFlow</td>\n<td>一款优秀的屏幕录像软件，<a href=\"http://xclient.info/s/screenflow.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/screenflow.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>百度网盘</td>\n<td>提供文件的网络备份、同步和分享服务，<a href=\"https://pan.baidu.com/download#pan\" target=\"_blank\" rel=\"external\">https://pan.baidu.com/download#pan</a></td>\n</tr>\n<tr>\n<td>FlashFTP</td>\n<td>一款高效的FTP、SFTP文件传输客户端，Mac App Store</td>\n</tr>\n<tr>\n<td>迅雷</td>\n<td>下载工具，<a href=\"http://mac.xunlei.com/\" target=\"_blank\" rel=\"external\">http://mac.xunlei.com/</a></td>\n</tr>\n<tr>\n<td>SpechtLite</td>\n<td>科学上网工具，需配合「<a href=\"https://ezssl.net/?r=109610\" target=\"_blank\" rel=\"external\">熊猫翻滚</a>」使用，<a href=\"https://upcloud-pic.b0.upaiyun.com/panda/spechlite/0.10.7.zip\" target=\"_blank\" rel=\"external\">https://upcloud-pic.b0.upaiyun.com/panda/spechlite/0.10.7.zip</a></td>\n</tr>\n<tr>\n<td>PDF Expert</td>\n<td>一款可以对 PDF 进行标注的阅读器，Mac App Store</td>\n</tr>\n<tr>\n<td>Rar Sharp</td>\n<td>rar文件解压工具，Mac App Store</td>\n</tr>\n<tr>\n<td>Things 3</td>\n<td>一款优秀的 GTD 任务管理工具，<a href=\"http://xclient.info/s/things.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/things.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>VMware Fusion</td>\n<td>强大的虚拟机应用，<a href=\"http://xclient.info/s/vmware-fusion.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/vmware-fusion.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Gemini 2</td>\n<td>高效的重复文件查找器，<a href=\"http://xclient.info/s/gemini.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/gemini.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>EdrawMax</td>\n<td>基于矢量的绘图工具，轻松绘制流程图</td>\n</tr>\n<tr>\n<td>PP助手</td>\n<td>可以将文件传给 iPhone，不喜欢 iTunes，<a href=\"https://pro.25pp.com/pp_mac_ios\" target=\"_blank\" rel=\"external\">https://pro.25pp.com/pp_mac_ios</a></td>\n</tr>\n<tr>\n<td>Charles</td>\n<td>抓包工具，<a href=\"http://charles.iiilab.com/\" target=\"_blank\" rel=\"external\">http://charles.iiilab.com/</a></td>\n</tr>\n<tr>\n<td>VirtualBox</td>\n<td>免费的虚拟机软件，<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">https://www.virtualbox.org/</a></td>\n</tr>\n<tr>\n<td>duet</td>\n<td>可以将 mac 屏幕投影到 iPhone 或者 ipad 上，将其作为第二屏，<a href=\"https://www.duetdisplay.com/\" target=\"_blank\" rel=\"external\">https://www.duetdisplay.com/</a></td>\n</tr>\n<tr>\n<td>Lantern</td>\n<td>免费的科学上网神器，<a href=\"https://github.com/getlantern/lantern/releases/tag/latest\" target=\"_blank\" rel=\"external\">https://github.com/getlantern/lantern/releases/tag/latest</a></td>\n</tr>\n<tr>\n<td>TeamViewer</td>\n<td>远程支持、远程访问、在线协作和会议，<a href=\"https://www.teamviewer.com/zhcn/download/mac/\" target=\"_blank\" rel=\"external\">https://www.teamviewer.com/zhcn/download/mac/</a></td>\n</tr>\n<tr>\n<td>Microsoft Remote Desktop Beta</td>\n<td>支持让 Mac 远程连接到 windows 服务器，<a href=\"https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06/\" target=\"_blank\" rel=\"external\">https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06/</a></td>\n</tr>\n<tr>\n<td>Xee<sup>3</sup></td>\n<td>支持多格式的图片浏览工具，<a href=\"http://xclient.info/s/xee3.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/xee3.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Tuxera Disk Manager</td>\n<td>让你的 Mac 支持读取 NTFS 格式的硬盘</td>\n</tr>\n<tr>\n<td>iStatistica</td>\n<td>一款高颜值的系统监控工具，<a href=\"http://xclient.info/s/istatistica.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/istatistica.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>TinyCal</td>\n<td>一款小而美的日历，可以放置在通知栏上，支持阴历，<a href=\"http://xclient.info/s/tinycal.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/tinycal.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"开发类软件\"><a href=\"#开发类软件\" class=\"headerlink\" title=\"开发类软件\"></a>开发类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IntelliJ IDEA</td>\n<td>Java 主力开发软件，<a href=\"http://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"external\">http://www.jetbrains.com/idea/</a></td>\n</tr>\n<tr>\n<td>WebStorm</td>\n<td>前端开发，<a href=\"http://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"external\">http://www.jetbrains.com/webstorm/</a></td>\n</tr>\n<tr>\n<td>PyCharm</td>\n<td>Python 开发，<a href=\"http://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"external\">http://www.jetbrains.com/pycharm/</a></td>\n</tr>\n<tr>\n<td>Android Studio</td>\n<td>Android 开发，<a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/studio/index.html</a></td>\n</tr>\n<tr>\n<td>Xcode</td>\n<td>IOS 开发，Mac App Store</td>\n</tr>\n<tr>\n<td>HBuilder</td>\n<td>跨平台的 mui 应用开发，<a href=\"http://www.dcloud.io/\" target=\"_blank\" rel=\"external\">http://www.dcloud.io/</a></td>\n</tr>\n<tr>\n<td>Sublime text</td>\n<td>文本编辑器，<a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">https://www.sublimetext.com/</a></td>\n</tr>\n<tr>\n<td>Virtual Studio Code</td>\n<td>文本编辑器，<a href=\"https://code.visualstudio.com/download\" target=\"_blank\" rel=\"external\">https://code.visualstudio.com/download</a></td>\n</tr>\n<tr>\n<td>Navicat Premium</td>\n<td>一个可多重连接的数据库管理工具，支持的数据库有： MySQL、SQL Server、SQLite、Oracle 及 PostgreSQL，<a href=\"http://xclient.info/s/navicat-premium.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/navicat-premium.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>JD-GUI</td>\n<td>反编译 class 文件，<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"external\">http://jd.benow.ca/</a></td>\n</tr>\n<tr>\n<td>docker</td>\n<td>容器，<a href=\"https://www.docker.com/get-docker\" target=\"_blank\" rel=\"external\">https://www.docker.com/get-docker</a></td>\n</tr>\n<tr>\n<td>rdm</td>\n<td>redis 桌面管理软件，<a href=\"https://github.com/uglide/RedisDesktopManager\" target=\"_blank\" rel=\"external\">https://github.com/uglide/RedisDesktopManager</a></td>\n</tr>\n<tr>\n<td>Genymotion</td>\n<td>安卓模拟器，<a href=\"https://www.genymotion.com/\" target=\"_blank\" rel=\"external\">https://www.genymotion.com/</a></td>\n</tr>\n<tr>\n<td>Beyond Compare</td>\n<td>文件比对软件</td>\n</tr>\n<tr>\n<td>Mock Plus</td>\n<td>原型图软件，<a href=\"https://www.mockplus.cn/\" target=\"_blank\" rel=\"external\">https://www.mockplus.cn/</a></td>\n</tr>\n<tr>\n<td>Sketch</td>\n<td>移动应用矢量绘图设计工具，<a href=\"http://xclient.info/s/sketch.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/sketch.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Axure RP 8</td>\n<td>快速原型设计工具，<a href=\"http://xclient.info/s/axure-rp.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/axure-rp.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Postman</td>\n<td>HTTP 模拟请求工具，<a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">https://www.getpostman.com/</a></td>\n</tr>\n<tr>\n<td>Insomnia</td>\n<td>HTTP 模拟请求工具，比 Postman 界面更干净，<a href=\"https://insomnia.rest/\" target=\"_blank\" rel=\"external\">https://insomnia.rest/</a></td>\n</tr>\n<tr>\n<td>SSH Shell</td>\n<td>远程连接到 Linux 服务器，管理多个 SSH 会话，<a href=\"http://xclient.info/s/ssh-shell.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/ssh-shell.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>LaunchRocket</td>\n<td>统一管理 Mac 上的一些服务，比如说 redis、mysql、zookeeper、rabbitmq等等服务，<a href=\"https://github.com/jimbojsb/launchrocket\" target=\"_blank\" rel=\"external\">https://github.com/jimbojsb/launchrocket</a></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>每次重装系统，或者新电脑到手的时候，最麻烦的莫过于重新安装之前常用的一些软件了。但是，平时常用的软件实在有点多，于是乎，整理一个 OSX 常用软件的列表，便于以后查找使用，以下整理的软件仅代表我个人平时常用的软件，不喜勿喷。</p>","more":"<p>最喜欢的一个「免（破）费（解）」的 osx 软件下载网址：<a href=\"http://xclient.info/\" target=\"_blank\" rel=\"external\">xclient.info</a> ，有经济能力的童鞋还是请支持正版。。。</p>\n<h2 id=\"聊天类软件\"><a href=\"#聊天类软件\" class=\"headerlink\" title=\"聊天类软件\"></a>聊天类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>QQ</td>\n<td>略，<a href=\"http://im.qq.com/macqq/\" target=\"_blank\" rel=\"external\">http://im.qq.com/macqq/</a></td>\n</tr>\n<tr>\n<td>微信</td>\n<td>略，Mac App Store</td>\n</tr>\n<tr>\n<td>阿里旺旺</td>\n<td>淘宝买家与卖家之间的沟通工具，<a href=\"https://alimarket.taobao.com/markets/qnww/portal-group/ww/download\" target=\"_blank\" rel=\"external\">https://alimarket.taobao.com/markets/qnww/portal-group/ww/download</a></td>\n</tr>\n<tr>\n<td>钉钉</td>\n<td>智能移动办公平台，<a href=\"https://www.dingtalk.com/\" target=\"_blank\" rel=\"external\">https://www.dingtalk.com/</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"影音类软件\"><a href=\"#影音类软件\" class=\"headerlink\" title=\"影音类软件\"></a>影音类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>网易云音乐</td>\n<td>网易一款良心之作，听歌很棒，听歌看评论更棒，<a href=\"https://music.163.com/#/download\" target=\"_blank\" rel=\"external\">https://music.163.com/#/download</a></td>\n</tr>\n<tr>\n<td>Movist</td>\n<td>对比过很多视频播放器，最终这款我比较喜欢，<a href=\"http://xclient.info/s/movist.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/movist.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"笔记类软件\"><a href=\"#笔记类软件\" class=\"headerlink\" title=\"笔记类软件\"></a>笔记类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>有道云笔记</td>\n<td>略，<a href=\"http://note.youdao.com/download.html#mac\" target=\"_blank\" rel=\"external\">http://note.youdao.com/download.html#mac</a></td>\n</tr>\n<tr>\n<td>Evernote</td>\n<td>略，<a href=\"https://www.yinxiang.com/download/\" target=\"_blank\" rel=\"external\">https://www.yinxiang.com/download/</a></td>\n</tr>\n<tr>\n<td>MWeb</td>\n<td>一款 <code>markdown</code> 编辑器，比较喜欢的是可以将图片上传至七牛云等地方，适合做笔记，<a href=\"http://xclient.info/s/mweb.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/mweb.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Typora</td>\n<td>和 MWeb 一样，是一款 <code>markdown</code> 编辑器，本文就是用这个软件写的，所见即所得，适合写博客文章，<a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"external\">https://www.typora.io/</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"摄影类软件\"><a href=\"#摄影类软件\" class=\"headerlink\" title=\"摄影类软件\"></a>摄影类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>泼辣修图</td>\n<td>国人开发的一款好用的修图软件，包含及其丰富的滤镜，<a href=\"http://xclient.info/s/polarr-photo-editor.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/polarr-photo-editor.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Snapseed</td>\n<td>一款国内外知名的修图软件，需要一定的操作，Mac App Store</td>\n</tr>\n<tr>\n<td>Super PhotoCut Pro</td>\n<td>超级抠图，<a href=\"http://xclient.info/s/super-photocut.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/super-photocut.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Photoshop</td>\n<td>这个就不介绍了，摄影、修图必备，<a href=\"http://xclient.info/s/adobe-photoshop-cc.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/adobe-photoshop-cc.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Lightroom</td>\n<td>对 RAW 格式的照片做处理，<a href=\"http://xclient.info/s/adobe-lightroom-cc.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/adobe-lightroom-cc.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"效率类软件\"><a href=\"#效率类软件\" class=\"headerlink\" title=\"效率类软件\"></a>效率类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Alfred</td>\n<td>效率神器，可以不用鼠标，召唤出你想要的一切，<a href=\"http://xclient.info/s/alfred.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/alfred.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Clean My Mac 3</td>\n<td>Mac 的一款包含磁盘垃圾清理及硬件资源监控等功能的软件，<a href=\"http://www.mycleanmymac.com/\" target=\"_blank\" rel=\"external\">http://www.mycleanmymac.com/</a></td>\n</tr>\n<tr>\n<td>CheetSheat</td>\n<td>长按⌘键，展示当前窗口应用的快捷键，<a href=\"https://www.mediaatelier.com/CheatSheet/\" target=\"_blank\" rel=\"external\">https://www.mediaatelier.com/CheatSheet/</a></td>\n</tr>\n<tr>\n<td>Dash</td>\n<td>开发者必备 API文档聚合，<a href=\"http://xclient.info/s/dash.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/dash.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>MindNote</td>\n<td>思维导图工具，<a href=\"http://xclient.info/s/mind-node-pro.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/mind-node-pro.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>XMind</td>\n<td>思维导图工具，<a href=\"https://www.xmind.cn/download/\" target=\"_blank\" rel=\"external\">https://www.xmind.cn/download/</a></td>\n</tr>\n<tr>\n<td>iTerm</td>\n<td>替换自带的 Terminal 程序，更好用，<a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">http://www.iterm2.com/</a></td>\n</tr>\n<tr>\n<td>Moom</td>\n<td>强大的窗口布局工具，<a href=\"http://xclient.info/s/moom.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/moom.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Microsoft PowerPoint</td>\n<td>PPT，Microsoft Office 2016 for Mac 套件中，<a href=\"http://xclient.info/s/office-for-mac-2016.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/office-for-mac-2016.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Microsoft Excel</td>\n<td>Excel，Microsoft Office 2016 for Mac 套件中，同上</td>\n</tr>\n<tr>\n<td>Microsoft Word</td>\n<td>Word，Microsoft Office 2016 for Mac 套件中，同上</td>\n</tr>\n<tr>\n<td>Microsoft OneNote</td>\n<td>OneNote，Microsoft Office 2016 for Mac 套件中，同上</td>\n</tr>\n<tr>\n<td>Pages</td>\n<td>一款文字处理和页面排版工具，类似 Word，Mac App Store</td>\n</tr>\n<tr>\n<td>Keynote</td>\n<td>运行于Mac OS X操作系统下的演示幻灯片应用软件，类似 PPT，Mac App Store</td>\n</tr>\n<tr>\n<td>Numbers</td>\n<td>一款电子表单应用程序，类似 Excel，Mac App Store</td>\n</tr>\n<tr>\n<td>OmniPlan</td>\n<td>最NB的项目管理流程软件，<a href=\"http://xclient.info/s/omni-plan.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/omni-plan.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>OmniGraffle</td>\n<td>强大的图形工具，可以用来绘制图表，流程图，组织结构图以及插图，<a href=\"http://xclient.info/s/omnigraffle.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/omnigraffle.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实用工具类软件\"><a href=\"#实用工具类软件\" class=\"headerlink\" title=\"实用工具类软件\"></a>实用工具类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NewFileMenu</td>\n<td>可以在 Mac 上使用右键创建文档，<a href=\"http://xclient.info/s/new-file-menu.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/new-file-menu.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>ScreenFlow</td>\n<td>一款优秀的屏幕录像软件，<a href=\"http://xclient.info/s/screenflow.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/screenflow.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>百度网盘</td>\n<td>提供文件的网络备份、同步和分享服务，<a href=\"https://pan.baidu.com/download#pan\" target=\"_blank\" rel=\"external\">https://pan.baidu.com/download#pan</a></td>\n</tr>\n<tr>\n<td>FlashFTP</td>\n<td>一款高效的FTP、SFTP文件传输客户端，Mac App Store</td>\n</tr>\n<tr>\n<td>迅雷</td>\n<td>下载工具，<a href=\"http://mac.xunlei.com/\" target=\"_blank\" rel=\"external\">http://mac.xunlei.com/</a></td>\n</tr>\n<tr>\n<td>SpechtLite</td>\n<td>科学上网工具，需配合「<a href=\"https://ezssl.net/?r=109610\" target=\"_blank\" rel=\"external\">熊猫翻滚</a>」使用，<a href=\"https://upcloud-pic.b0.upaiyun.com/panda/spechlite/0.10.7.zip\" target=\"_blank\" rel=\"external\">https://upcloud-pic.b0.upaiyun.com/panda/spechlite/0.10.7.zip</a></td>\n</tr>\n<tr>\n<td>PDF Expert</td>\n<td>一款可以对 PDF 进行标注的阅读器，Mac App Store</td>\n</tr>\n<tr>\n<td>Rar Sharp</td>\n<td>rar文件解压工具，Mac App Store</td>\n</tr>\n<tr>\n<td>Things 3</td>\n<td>一款优秀的 GTD 任务管理工具，<a href=\"http://xclient.info/s/things.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/things.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>VMware Fusion</td>\n<td>强大的虚拟机应用，<a href=\"http://xclient.info/s/vmware-fusion.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/vmware-fusion.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Gemini 2</td>\n<td>高效的重复文件查找器，<a href=\"http://xclient.info/s/gemini.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/gemini.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>EdrawMax</td>\n<td>基于矢量的绘图工具，轻松绘制流程图</td>\n</tr>\n<tr>\n<td>PP助手</td>\n<td>可以将文件传给 iPhone，不喜欢 iTunes，<a href=\"https://pro.25pp.com/pp_mac_ios\" target=\"_blank\" rel=\"external\">https://pro.25pp.com/pp_mac_ios</a></td>\n</tr>\n<tr>\n<td>Charles</td>\n<td>抓包工具，<a href=\"http://charles.iiilab.com/\" target=\"_blank\" rel=\"external\">http://charles.iiilab.com/</a></td>\n</tr>\n<tr>\n<td>VirtualBox</td>\n<td>免费的虚拟机软件，<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">https://www.virtualbox.org/</a></td>\n</tr>\n<tr>\n<td>duet</td>\n<td>可以将 mac 屏幕投影到 iPhone 或者 ipad 上，将其作为第二屏，<a href=\"https://www.duetdisplay.com/\" target=\"_blank\" rel=\"external\">https://www.duetdisplay.com/</a></td>\n</tr>\n<tr>\n<td>Lantern</td>\n<td>免费的科学上网神器，<a href=\"https://github.com/getlantern/lantern/releases/tag/latest\" target=\"_blank\" rel=\"external\">https://github.com/getlantern/lantern/releases/tag/latest</a></td>\n</tr>\n<tr>\n<td>TeamViewer</td>\n<td>远程支持、远程访问、在线协作和会议，<a href=\"https://www.teamviewer.com/zhcn/download/mac/\" target=\"_blank\" rel=\"external\">https://www.teamviewer.com/zhcn/download/mac/</a></td>\n</tr>\n<tr>\n<td>Microsoft Remote Desktop Beta</td>\n<td>支持让 Mac 远程连接到 windows 服务器，<a href=\"https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06/\" target=\"_blank\" rel=\"external\">https://rink.hockeyapp.net/apps/5e0c144289a51fca2d3bfa39ce7f2b06/</a></td>\n</tr>\n<tr>\n<td>Xee<sup>3</sup></td>\n<td>支持多格式的图片浏览工具，<a href=\"http://xclient.info/s/xee3.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/xee3.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Tuxera Disk Manager</td>\n<td>让你的 Mac 支持读取 NTFS 格式的硬盘</td>\n</tr>\n<tr>\n<td>iStatistica</td>\n<td>一款高颜值的系统监控工具，<a href=\"http://xclient.info/s/istatistica.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/istatistica.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>TinyCal</td>\n<td>一款小而美的日历，可以放置在通知栏上，支持阴历，<a href=\"http://xclient.info/s/tinycal.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/tinycal.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"开发类软件\"><a href=\"#开发类软件\" class=\"headerlink\" title=\"开发类软件\"></a>开发类软件</h2><table>\n<thead>\n<tr>\n<th>软件</th>\n<th>介绍及下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IntelliJ IDEA</td>\n<td>Java 主力开发软件，<a href=\"http://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"external\">http://www.jetbrains.com/idea/</a></td>\n</tr>\n<tr>\n<td>WebStorm</td>\n<td>前端开发，<a href=\"http://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"external\">http://www.jetbrains.com/webstorm/</a></td>\n</tr>\n<tr>\n<td>PyCharm</td>\n<td>Python 开发，<a href=\"http://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"external\">http://www.jetbrains.com/pycharm/</a></td>\n</tr>\n<tr>\n<td>Android Studio</td>\n<td>Android 开发，<a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/studio/index.html</a></td>\n</tr>\n<tr>\n<td>Xcode</td>\n<td>IOS 开发，Mac App Store</td>\n</tr>\n<tr>\n<td>HBuilder</td>\n<td>跨平台的 mui 应用开发，<a href=\"http://www.dcloud.io/\" target=\"_blank\" rel=\"external\">http://www.dcloud.io/</a></td>\n</tr>\n<tr>\n<td>Sublime text</td>\n<td>文本编辑器，<a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">https://www.sublimetext.com/</a></td>\n</tr>\n<tr>\n<td>Virtual Studio Code</td>\n<td>文本编辑器，<a href=\"https://code.visualstudio.com/download\" target=\"_blank\" rel=\"external\">https://code.visualstudio.com/download</a></td>\n</tr>\n<tr>\n<td>Navicat Premium</td>\n<td>一个可多重连接的数据库管理工具，支持的数据库有： MySQL、SQL Server、SQLite、Oracle 及 PostgreSQL，<a href=\"http://xclient.info/s/navicat-premium.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/navicat-premium.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>JD-GUI</td>\n<td>反编译 class 文件，<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"external\">http://jd.benow.ca/</a></td>\n</tr>\n<tr>\n<td>docker</td>\n<td>容器，<a href=\"https://www.docker.com/get-docker\" target=\"_blank\" rel=\"external\">https://www.docker.com/get-docker</a></td>\n</tr>\n<tr>\n<td>rdm</td>\n<td>redis 桌面管理软件，<a href=\"https://github.com/uglide/RedisDesktopManager\" target=\"_blank\" rel=\"external\">https://github.com/uglide/RedisDesktopManager</a></td>\n</tr>\n<tr>\n<td>Genymotion</td>\n<td>安卓模拟器，<a href=\"https://www.genymotion.com/\" target=\"_blank\" rel=\"external\">https://www.genymotion.com/</a></td>\n</tr>\n<tr>\n<td>Beyond Compare</td>\n<td>文件比对软件</td>\n</tr>\n<tr>\n<td>Mock Plus</td>\n<td>原型图软件，<a href=\"https://www.mockplus.cn/\" target=\"_blank\" rel=\"external\">https://www.mockplus.cn/</a></td>\n</tr>\n<tr>\n<td>Sketch</td>\n<td>移动应用矢量绘图设计工具，<a href=\"http://xclient.info/s/sketch.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/sketch.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Axure RP 8</td>\n<td>快速原型设计工具，<a href=\"http://xclient.info/s/axure-rp.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/axure-rp.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>Postman</td>\n<td>HTTP 模拟请求工具，<a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">https://www.getpostman.com/</a></td>\n</tr>\n<tr>\n<td>Insomnia</td>\n<td>HTTP 模拟请求工具，比 Postman 界面更干净，<a href=\"https://insomnia.rest/\" target=\"_blank\" rel=\"external\">https://insomnia.rest/</a></td>\n</tr>\n<tr>\n<td>SSH Shell</td>\n<td>远程连接到 Linux 服务器，管理多个 SSH 会话，<a href=\"http://xclient.info/s/ssh-shell.html?_=80fb58a8555e8bf529af34d2f81df569\" target=\"_blank\" rel=\"external\">http://xclient.info/s/ssh-shell.html?_=80fb58a8555e8bf529af34d2f81df569</a></td>\n</tr>\n<tr>\n<td>LaunchRocket</td>\n<td>统一管理 Mac 上的一些服务，比如说 redis、mysql、zookeeper、rabbitmq等等服务，<a href=\"https://github.com/jimbojsb/launchrocket\" target=\"_blank\" rel=\"external\">https://github.com/jimbojsb/launchrocket</a></td>\n</tr>\n</tbody>\n</table>"},{"title":"常用正则表达式","comments":1,"fancybox":false,"toc":false,"date":"2018-02-07T03:45:02.000Z","description":"最全的常用正则表达式大全——包括校验数字、字符、一些特殊的需求等等","top":null,"_content":"## 校验数字的表达式\n\n```js\n数字：^[0-9]*$\nn位的数字：^\\d{n}$\n至少n位的数字：^\\d{n,}$\nm-n位的数字：^\\d{m,n}$\n零和非零开头的数字：^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数：^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$\n非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$\n非零的负整数：^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$\n非负整数：^\\d+$ 或 ^[1-9]\\d*|0$\n非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$\n非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$\n正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n\n## 校验字符的表达式\n\n```js\n汉字：^[\\u4e00-\\u9fa5]{0,}$\n英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$\n长度为3-20的所有字符：^.{3,20}$\n由26个英文字母组成的字符串：^[A-Za-z]+$\n由26个大写英文字母组成的字符串：^[A-Z]+$\n由26个小写英文字母组成的字符串：^[a-z]+$\n由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n可以输入含有^%&',;=?$\\\"等字符：[^%&',;=?$\\x22]+\n禁止输入含有~的字符：[^~\\x22]+\n```\n\n## 特殊需求表达式\n\n```js\nEmail地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nInternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n手机号码：^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\\d{8}$\n电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)：^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$ \n国内电话号码(0511-4405222、021-87888822)：\\d{3}-\\d{8}|\\d{4}-\\d{7} \n18位身份证号码(数字、字母x结尾)：^((\\d{18})|([0-9x]{18})|([0-9X]{18}))$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$  \n日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ \n钱的输入格式：\n   1.有四种钱的表示形式我们可以接受:\"10000.00\" 和 \"10,000.00\", 和没有 \"分\" 的 \"10000\" 和 \"10,000\"：^[1-9][0-9]*$ \n   2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符\"0\"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ \n   3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ \n   4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ \n   5.必须说明的是,小数点后面至少应该有1位数,所以\"10.\"是不通过的,但是 \"10\" 和 \"10.2\" 是通过的：^[0-9]+(.[0-9]{2})?$ \n   6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ \n   7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ \n   8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ \n   备注：这就是最终结果了,别忘了\"+\"可以用\"*\"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里\nxml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$\n中文字符的正则表达式：[\\u4e00-\\u9fa5]\n双字节字符：[^\\x00-\\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))\n空白行的正则表达式：\\n\\s*\\r    (可以用来删除空白行)\nHTML标记的正则表达式：<(\\S*?)[^>]*>.*?</\\1>|<.*? />    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)\n首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)\n腾讯QQ号：[1-9][0-9]{4,}    (腾讯QQ号从10000开始)\n中国邮政编码：[1-9]\\d{5}(?!\\d)    (中国邮政编码为6位数字)\nIP地址：\\d+\\.\\d+\\.\\d+\\.\\d+    (提取IP地址时有用)\nIP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))\n```\n\n","source":"_posts/2018-02-07.regular-expression-list.md","raw":"---\ntitle: 常用正则表达式\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-02-07 11:45:02\ntags:\n- 代码片段\n- regex\ncategories:\n- 代码片段\n- regex\ndescription: 最全的常用正则表达式大全——包括校验数字、字符、一些特殊的需求等等\npermalink: regular-expression-list\ntop:\n---\n## 校验数字的表达式\n\n```js\n数字：^[0-9]*$\nn位的数字：^\\d{n}$\n至少n位的数字：^\\d{n,}$\nm-n位的数字：^\\d{m,n}$\n零和非零开头的数字：^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数：^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$\n非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$\n非零的负整数：^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$\n非负整数：^\\d+$ 或 ^[1-9]\\d*|0$\n非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$\n非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$\n正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n\n## 校验字符的表达式\n\n```js\n汉字：^[\\u4e00-\\u9fa5]{0,}$\n英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$\n长度为3-20的所有字符：^.{3,20}$\n由26个英文字母组成的字符串：^[A-Za-z]+$\n由26个大写英文字母组成的字符串：^[A-Z]+$\n由26个小写英文字母组成的字符串：^[a-z]+$\n由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n可以输入含有^%&',;=?$\\\"等字符：[^%&',;=?$\\x22]+\n禁止输入含有~的字符：[^~\\x22]+\n```\n\n## 特殊需求表达式\n\n```js\nEmail地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nInternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n手机号码：^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\\d{8}$\n电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)：^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$ \n国内电话号码(0511-4405222、021-87888822)：\\d{3}-\\d{8}|\\d{4}-\\d{7} \n18位身份证号码(数字、字母x结尾)：^((\\d{18})|([0-9x]{18})|([0-9X]{18}))$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$  \n日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ \n钱的输入格式：\n   1.有四种钱的表示形式我们可以接受:\"10000.00\" 和 \"10,000.00\", 和没有 \"分\" 的 \"10000\" 和 \"10,000\"：^[1-9][0-9]*$ \n   2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符\"0\"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ \n   3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ \n   4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ \n   5.必须说明的是,小数点后面至少应该有1位数,所以\"10.\"是不通过的,但是 \"10\" 和 \"10.2\" 是通过的：^[0-9]+(.[0-9]{2})?$ \n   6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ \n   7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ \n   8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ \n   备注：这就是最终结果了,别忘了\"+\"可以用\"*\"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里\nxml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$\n中文字符的正则表达式：[\\u4e00-\\u9fa5]\n双字节字符：[^\\x00-\\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))\n空白行的正则表达式：\\n\\s*\\r    (可以用来删除空白行)\nHTML标记的正则表达式：<(\\S*?)[^>]*>.*?</\\1>|<.*? />    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)\n首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)\n腾讯QQ号：[1-9][0-9]{4,}    (腾讯QQ号从10000开始)\n中国邮政编码：[1-9]\\d{5}(?!\\d)    (中国邮政编码为6位数字)\nIP地址：\\d+\\.\\d+\\.\\d+\\.\\d+    (提取IP地址时有用)\nIP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))\n```\n\n","slug":"regular-expression-list","published":1,"updated":"2019-01-21T09:20:18.089Z","layout":"post","photos":[],"link":"","_id":"cjr64il6w0024kds6n3nnkolc","content":"<h2 id=\"校验数字的表达式\"><a href=\"#校验数字的表达式\" class=\"headerlink\" title=\"校验数字的表达式\"></a>校验数字的表达式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">数字：^[0-9]*$</div><div class=\"line\">n位的数字：^\\d&#123;n&#125;$</div><div class=\"line\">至少n位的数字：^\\d&#123;n,&#125;$</div><div class=\"line\">m-n位的数字：^\\d&#123;m,n&#125;$</div><div class=\"line\">零和非零开头的数字：^(0|[1-9][0-9]*)$</div><div class=\"line\">非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</div><div class=\"line\">带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</div><div class=\"line\">正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$</div><div class=\"line\">有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</div><div class=\"line\">有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</div><div class=\"line\">非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$</div><div class=\"line\">非零的负整数：^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$</div><div class=\"line\">非负整数：^\\d+$ 或 ^[1-9]\\d*|0$</div><div class=\"line\">非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$</div><div class=\"line\">非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</div><div class=\"line\">非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$</div><div class=\"line\">正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</div><div class=\"line\">负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</div><div class=\"line\">浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$</div></pre></td></tr></table></figure>\n<h2 id=\"校验字符的表达式\"><a href=\"#校验字符的表达式\" class=\"headerlink\" title=\"校验字符的表达式\"></a>校验字符的表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">汉字：^[\\u4e00-\\u9fa5]&#123;<span class=\"number\">0</span>,&#125;$</div><div class=\"line\">英文和数字：^[A-Za-z0<span class=\"number\">-9</span>]+$ 或 ^[A-Za-z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">4</span>,<span class=\"number\">40</span>&#125;$</div><div class=\"line\">长度为<span class=\"number\">3</span><span class=\"number\">-20</span>的所有字符：^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</div><div class=\"line\">由<span class=\"number\">26</span>个英文字母组成的字符串：^[A-Za-z]+$</div><div class=\"line\">由<span class=\"number\">26</span>个大写英文字母组成的字符串：^[A-Z]+$</div><div class=\"line\">由<span class=\"number\">26</span>个小写英文字母组成的字符串：^[a-z]+$</div><div class=\"line\">由数字和<span class=\"number\">26</span>个英文字母组成的字符串：^[A-Za-z0<span class=\"number\">-9</span>]+$</div><div class=\"line\">由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</div><div class=\"line\">中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0<span class=\"number\">-9</span>_]+$</div><div class=\"line\">中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0<span class=\"number\">-9</span>]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</div><div class=\"line\">可以输入含有^%&amp;<span class=\"string\">',;=?$\\\"等字符：[^%&amp;'</span>,;=?$\\x22]+</div><div class=\"line\">禁止输入含有~的字符：[^~\\x22]+</div></pre></td></tr></table></figure>\n<h2 id=\"特殊需求表达式\"><a href=\"#特殊需求表达式\" class=\"headerlink\" title=\"特殊需求表达式\"></a>特殊需求表达式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</div><div class=\"line\">域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</div><div class=\"line\">InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</div><div class=\"line\">手机号码：^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\\d&#123;8&#125;$</div><div class=\"line\">电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$ </div><div class=\"line\">国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125; </div><div class=\"line\">18位身份证号码(数字、字母x结尾)：^((\\d&#123;18&#125;)|([0-9x]&#123;18&#125;)|([0-9X]&#123;18&#125;))$</div><div class=\"line\">帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</div><div class=\"line\">密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$</div><div class=\"line\">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$  </div><div class=\"line\">日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</div><div class=\"line\">一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</div><div class=\"line\">一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </div><div class=\"line\">钱的输入格式：</div><div class=\"line\">   1.有四种钱的表示形式我们可以接受:\"10000.00\" 和 \"10,000.00\", 和没有 \"分\" 的 \"10000\" 和 \"10,000\"：^[1-9][0-9]*$ </div><div class=\"line\">   2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符\"0\"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </div><div class=\"line\">   3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </div><div class=\"line\">   4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </div><div class=\"line\">   5.必须说明的是,小数点后面至少应该有1位数,所以\"10.\"是不通过的,但是 \"10\" 和 \"10.2\" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ </div><div class=\"line\">   6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ </div><div class=\"line\">   7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ </div><div class=\"line\">   8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ </div><div class=\"line\">   备注：这就是最终结果了,别忘了\"+\"可以用\"*\"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</div><div class=\"line\">xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$</div><div class=\"line\">中文字符的正则表达式：[\\u4e00-\\u9fa5]</div><div class=\"line\">双字节字符：[^\\x00-\\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</div><div class=\"line\">空白行的正则表达式：\\n\\s*\\r    (可以用来删除空白行)</div><div class=\"line\">HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</div><div class=\"line\">首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</div><div class=\"line\">腾讯QQ号：[1-9][0-9]&#123;4,&#125;    (腾讯QQ号从10000开始)</div><div class=\"line\">中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d)    (中国邮政编码为6位数字)</div><div class=\"line\">IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+    (提取IP地址时有用)</div><div class=\"line\">IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"校验数字的表达式\"><a href=\"#校验数字的表达式\" class=\"headerlink\" title=\"校验数字的表达式\"></a>校验数字的表达式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">数字：^[0-9]*$</div><div class=\"line\">n位的数字：^\\d&#123;n&#125;$</div><div class=\"line\">至少n位的数字：^\\d&#123;n,&#125;$</div><div class=\"line\">m-n位的数字：^\\d&#123;m,n&#125;$</div><div class=\"line\">零和非零开头的数字：^(0|[1-9][0-9]*)$</div><div class=\"line\">非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</div><div class=\"line\">带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</div><div class=\"line\">正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$</div><div class=\"line\">有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</div><div class=\"line\">有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</div><div class=\"line\">非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$</div><div class=\"line\">非零的负整数：^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$</div><div class=\"line\">非负整数：^\\d+$ 或 ^[1-9]\\d*|0$</div><div class=\"line\">非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$</div><div class=\"line\">非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</div><div class=\"line\">非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$</div><div class=\"line\">正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</div><div class=\"line\">负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</div><div class=\"line\">浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$</div></pre></td></tr></table></figure>\n<h2 id=\"校验字符的表达式\"><a href=\"#校验字符的表达式\" class=\"headerlink\" title=\"校验字符的表达式\"></a>校验字符的表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">汉字：^[\\u4e00-\\u9fa5]&#123;<span class=\"number\">0</span>,&#125;$</div><div class=\"line\">英文和数字：^[A-Za-z0<span class=\"number\">-9</span>]+$ 或 ^[A-Za-z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">4</span>,<span class=\"number\">40</span>&#125;$</div><div class=\"line\">长度为<span class=\"number\">3</span><span class=\"number\">-20</span>的所有字符：^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</div><div class=\"line\">由<span class=\"number\">26</span>个英文字母组成的字符串：^[A-Za-z]+$</div><div class=\"line\">由<span class=\"number\">26</span>个大写英文字母组成的字符串：^[A-Z]+$</div><div class=\"line\">由<span class=\"number\">26</span>个小写英文字母组成的字符串：^[a-z]+$</div><div class=\"line\">由数字和<span class=\"number\">26</span>个英文字母组成的字符串：^[A-Za-z0<span class=\"number\">-9</span>]+$</div><div class=\"line\">由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</div><div class=\"line\">中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0<span class=\"number\">-9</span>_]+$</div><div class=\"line\">中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0<span class=\"number\">-9</span>]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0<span class=\"number\">-9</span>]&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</div><div class=\"line\">可以输入含有^%&amp;<span class=\"string\">',;=?$\\\"等字符：[^%&amp;'</span>,;=?$\\x22]+</div><div class=\"line\">禁止输入含有~的字符：[^~\\x22]+</div></pre></td></tr></table></figure>\n<h2 id=\"特殊需求表达式\"><a href=\"#特殊需求表达式\" class=\"headerlink\" title=\"特殊需求表达式\"></a>特殊需求表达式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</div><div class=\"line\">域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</div><div class=\"line\">InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</div><div class=\"line\">手机号码：^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\\d&#123;8&#125;$</div><div class=\"line\">电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$ </div><div class=\"line\">国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125; </div><div class=\"line\">18位身份证号码(数字、字母x结尾)：^((\\d&#123;18&#125;)|([0-9x]&#123;18&#125;)|([0-9X]&#123;18&#125;))$</div><div class=\"line\">帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</div><div class=\"line\">密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$</div><div class=\"line\">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$  </div><div class=\"line\">日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</div><div class=\"line\">一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</div><div class=\"line\">一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </div><div class=\"line\">钱的输入格式：</div><div class=\"line\">   1.有四种钱的表示形式我们可以接受:\"10000.00\" 和 \"10,000.00\", 和没有 \"分\" 的 \"10000\" 和 \"10,000\"：^[1-9][0-9]*$ </div><div class=\"line\">   2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符\"0\"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </div><div class=\"line\">   3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </div><div class=\"line\">   4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </div><div class=\"line\">   5.必须说明的是,小数点后面至少应该有1位数,所以\"10.\"是不通过的,但是 \"10\" 和 \"10.2\" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ </div><div class=\"line\">   6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ </div><div class=\"line\">   7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ </div><div class=\"line\">   8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ </div><div class=\"line\">   备注：这就是最终结果了,别忘了\"+\"可以用\"*\"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</div><div class=\"line\">xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$</div><div class=\"line\">中文字符的正则表达式：[\\u4e00-\\u9fa5]</div><div class=\"line\">双字节字符：[^\\x00-\\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</div><div class=\"line\">空白行的正则表达式：\\n\\s*\\r    (可以用来删除空白行)</div><div class=\"line\">HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</div><div class=\"line\">首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</div><div class=\"line\">腾讯QQ号：[1-9][0-9]&#123;4,&#125;    (腾讯QQ号从10000开始)</div><div class=\"line\">中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d)    (中国邮政编码为6位数字)</div><div class=\"line\">IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+    (提取IP地址时有用)</div><div class=\"line\">IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))</div></pre></td></tr></table></figure>\n"},{"title":"git 如何更新 fork 的项目到原项目的最新版本","comments":1,"fancybox":false,"toc":false,"date":"2018-09-18T01:04:23.000Z","description":null,"top":null,"_content":"\n在 github 上 fork 了一个项目之后，如何使自己 fork 的项目和原先作者的项目分支保持同步呢，下面我使用 hutool 的项目做示范，手摸手示范如何使 fork 的项目与原项目分支保持同步。\n\n<!--more-->\n\n1. **查看远程的版本库地址** \n\n   ```bash\n   $ git remote -v \n   origin https://github.com/xkcoding/hutool.git (fetch) \n   origin https://github.com/xkcoding/hutool.git (push) \n   ```\n\n2. **添加原项目 git 地址到本地版本库** \n\n   ```bash\n   $ git remote add upstream https://github.com/looly/hutool.git \n   ```\n\n3. **检查版本库是否添加成功** \n\n   ```bash\n   $ git remote -v\n   origin  https://github.com/xkcoding/hutool.git (fetch)\n   origin  https://github.com/xkcoding/hutool.git (push)\n   upstream        https://github.com/looly/hutool.git (fetch)\n   upstream        https://github.com/looly/hutool.git (push)\n   ```\n\n4. **原项目更新内容同步到本地** \n\n   ```bash\n   $ git fetch upstream                             \n   remote: Counting objects: 360, done.\n   remote: Compressing objects: 100% (148/148), done.\n   remote: Total 360 (delta 158), reused 339 (delta 137), pack-reused 0\n   Receiving objects: 100% (360/360), 87.95 KiB | 45.00 KiB/s, done.\n   Resolving deltas: 100% (158/158), completed with 66 local objects.\n   From https://github.com/looly/hutool\n    * [new branch]        v4-dev     -> upstream/v4-dev\n    * [new branch]        v4-master  -> upstream/v4-master\n   ```\n\n5. **查看本地分支** \n\n   ```bash\n   $ git branch -a \n   * v4-master \n   remotes/origin/HEAD -> origin/v4-master \n   remotes/origin/v4-dev \n   remotes/origin/v4-master \n   remotes/upstream/v4-dev \n   remotes/upstream/v4-master \n   ```\n\n6. **同步更新内容到本地对应分支** \n\n   ```bash\n   $ git merge upstream/v4-master \n   ```\n\n7. **提交更新内容到 fork 地址** \n\n   ```bash\n   git push \n   ```\n","source":"_posts/2018-09-18.how-to-update-the-fork-project.md","raw":"---\ntitle: git 如何更新 fork 的项目到原项目的最新版本\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-09-18 09:04:23\ntags:\n- git\ncategories:\n- 技术相关\n- git\ndescription:\npermalink: how-to-update-the-fork-project\ntop:\n---\n\n在 github 上 fork 了一个项目之后，如何使自己 fork 的项目和原先作者的项目分支保持同步呢，下面我使用 hutool 的项目做示范，手摸手示范如何使 fork 的项目与原项目分支保持同步。\n\n<!--more-->\n\n1. **查看远程的版本库地址** \n\n   ```bash\n   $ git remote -v \n   origin https://github.com/xkcoding/hutool.git (fetch) \n   origin https://github.com/xkcoding/hutool.git (push) \n   ```\n\n2. **添加原项目 git 地址到本地版本库** \n\n   ```bash\n   $ git remote add upstream https://github.com/looly/hutool.git \n   ```\n\n3. **检查版本库是否添加成功** \n\n   ```bash\n   $ git remote -v\n   origin  https://github.com/xkcoding/hutool.git (fetch)\n   origin  https://github.com/xkcoding/hutool.git (push)\n   upstream        https://github.com/looly/hutool.git (fetch)\n   upstream        https://github.com/looly/hutool.git (push)\n   ```\n\n4. **原项目更新内容同步到本地** \n\n   ```bash\n   $ git fetch upstream                             \n   remote: Counting objects: 360, done.\n   remote: Compressing objects: 100% (148/148), done.\n   remote: Total 360 (delta 158), reused 339 (delta 137), pack-reused 0\n   Receiving objects: 100% (360/360), 87.95 KiB | 45.00 KiB/s, done.\n   Resolving deltas: 100% (158/158), completed with 66 local objects.\n   From https://github.com/looly/hutool\n    * [new branch]        v4-dev     -> upstream/v4-dev\n    * [new branch]        v4-master  -> upstream/v4-master\n   ```\n\n5. **查看本地分支** \n\n   ```bash\n   $ git branch -a \n   * v4-master \n   remotes/origin/HEAD -> origin/v4-master \n   remotes/origin/v4-dev \n   remotes/origin/v4-master \n   remotes/upstream/v4-dev \n   remotes/upstream/v4-master \n   ```\n\n6. **同步更新内容到本地对应分支** \n\n   ```bash\n   $ git merge upstream/v4-master \n   ```\n\n7. **提交更新内容到 fork 地址** \n\n   ```bash\n   git push \n   ```\n","slug":"how-to-update-the-fork-project","published":1,"updated":"2018-09-18T02:13:49.382Z","layout":"post","photos":[],"link":"","_id":"cjr64il6y0026kds6h7ogzobq","content":"<p>在 github 上 fork 了一个项目之后，如何使自己 fork 的项目和原先作者的项目分支保持同步呢，下面我使用 hutool 的项目做示范，手摸手示范如何使 fork 的项目与原项目分支保持同步。</p>\n<a id=\"more\"></a>\n<ol>\n<li><p><strong>查看远程的版本库地址</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v </div><div class=\"line\">origin https://github.com/xkcoding/hutool.git (fetch) </div><div class=\"line\">origin https://github.com/xkcoding/hutool.git (push)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>添加原项目 git 地址到本地版本库</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add upstream https://github.com/looly/hutool.git</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查版本库是否添加成功</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  https://github.com/xkcoding/hutool.git (fetch)</div><div class=\"line\">origin  https://github.com/xkcoding/hutool.git (push)</div><div class=\"line\">upstream        https://github.com/looly/hutool.git (fetch)</div><div class=\"line\">upstream        https://github.com/looly/hutool.git (push)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>原项目更新内容同步到本地</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch upstream                             </div><div class=\"line\">remote: Counting objects: 360, <span class=\"keyword\">done</span>.</div><div class=\"line\">remote: Compressing objects: 100% (148/148), <span class=\"keyword\">done</span>.</div><div class=\"line\">remote: Total 360 (delta 158), reused 339 (delta 137), pack-reused 0</div><div class=\"line\">Receiving objects: 100% (360/360), 87.95 KiB | 45.00 KiB/s, <span class=\"keyword\">done</span>.</div><div class=\"line\">Resolving deltas: 100% (158/158), completed with 66 <span class=\"built_in\">local</span> objects.</div><div class=\"line\">From https://github.com/looly/hutool</div><div class=\"line\"> * [new branch]        v4-dev     -&gt; upstream/v4-dev</div><div class=\"line\"> * [new branch]        v4-master  -&gt; upstream/v4-master</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看本地分支</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -a </div><div class=\"line\">* v4-master </div><div class=\"line\">remotes/origin/HEAD -&gt; origin/v4-master </div><div class=\"line\">remotes/origin/v4-dev </div><div class=\"line\">remotes/origin/v4-master </div><div class=\"line\">remotes/upstream/v4-dev </div><div class=\"line\">remotes/upstream/v4-master</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>同步更新内容到本地对应分支</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge upstream/v4-master</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>提交更新内容到 fork 地址</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>在 github 上 fork 了一个项目之后，如何使自己 fork 的项目和原先作者的项目分支保持同步呢，下面我使用 hutool 的项目做示范，手摸手示范如何使 fork 的项目与原项目分支保持同步。</p>","more":"<ol>\n<li><p><strong>查看远程的版本库地址</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v </div><div class=\"line\">origin https://github.com/xkcoding/hutool.git (fetch) </div><div class=\"line\">origin https://github.com/xkcoding/hutool.git (push)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>添加原项目 git 地址到本地版本库</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add upstream https://github.com/looly/hutool.git</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>检查版本库是否添加成功</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  https://github.com/xkcoding/hutool.git (fetch)</div><div class=\"line\">origin  https://github.com/xkcoding/hutool.git (push)</div><div class=\"line\">upstream        https://github.com/looly/hutool.git (fetch)</div><div class=\"line\">upstream        https://github.com/looly/hutool.git (push)</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>原项目更新内容同步到本地</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch upstream                             </div><div class=\"line\">remote: Counting objects: 360, <span class=\"keyword\">done</span>.</div><div class=\"line\">remote: Compressing objects: 100% (148/148), <span class=\"keyword\">done</span>.</div><div class=\"line\">remote: Total 360 (delta 158), reused 339 (delta 137), pack-reused 0</div><div class=\"line\">Receiving objects: 100% (360/360), 87.95 KiB | 45.00 KiB/s, <span class=\"keyword\">done</span>.</div><div class=\"line\">Resolving deltas: 100% (158/158), completed with 66 <span class=\"built_in\">local</span> objects.</div><div class=\"line\">From https://github.com/looly/hutool</div><div class=\"line\"> * [new branch]        v4-dev     -&gt; upstream/v4-dev</div><div class=\"line\"> * [new branch]        v4-master  -&gt; upstream/v4-master</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看本地分支</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -a </div><div class=\"line\">* v4-master </div><div class=\"line\">remotes/origin/HEAD -&gt; origin/v4-master </div><div class=\"line\">remotes/origin/v4-dev </div><div class=\"line\">remotes/origin/v4-master </div><div class=\"line\">remotes/upstream/v4-dev </div><div class=\"line\">remotes/upstream/v4-master</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>同步更新内容到本地对应分支</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge upstream/v4-master</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>提交更新内容到 fork 地址</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"Neo4j 和 Mysql 查询基本语法的区别","comments":1,"fancybox":false,"toc":false,"date":"2018-09-20T05:54:31.000Z","description":null,"top":null,"_content":"每种数据库都有自己的一套查询语言或者标准，即使是同为关系型数据库的Oracle、Sql Server 和 MySQL，其在一些语法细节上也有差异，更别说 Mongo, Redis 类似的非关系型数据库了。Neo4j 也一样，有自己专属的查询语言 Cypher。深入学习其实发现 Neo4j 的查询语法并不难去学习，因为 Cypher 的语意确实简洁，直观。\n\n<!--more-->\n\n```\n-- 1. 全表扫描 --\n-- mysql --\nSELECT p.*\nFROM products as p;\n\n-- neo4j --\nMATCH (p:Product)\nRETURN p;\n\n-- 2. 查询价格最贵的10个商品，只返回商品名字和单价 --\n-- mysql --\nSELECT p.ProductName, p.UnitPrice\nFROM products as p\nORDER BY p.UnitPrice DESC\nLIMIT 10;\n\n-- neo4j --\nMATCH (p:Product)\nRETURN p.productName, p.unitPrice\nORDER BY p.unitPrice DESC\nLIMIT 10;\n\n-- 3. 按照商品名字筛选 --\n-- mysql --\nSELECT p.ProductName, p.UnitPrice\nFROM products AS p\nWHERE p.ProductName = 'Chocolade';\n\n-- neo4j --\nMATCH (p:Product)\nWHERE p.productName = \"Chocolade\"\nRETURN p.productName, p.unitPrice;\n\n-- 其他的写法 --\nMATCH (p:Product {productName:\"Chocolade\"})\nRETURN p.productName, p.unitPrice;\n\n-- 4. 按照商品名字筛选2 --\n-- mysql --\nSELECT p.ProductName, p.UnitPrice\nFROM products as p\nWHERE p.ProductName IN ('Chocolade','Chai');\n\n-- neo4j --\nMATCH (p:Product)\nWHERE p.productName IN ['Chocolade','Chai']\nRETURN p.productName, p.unitPrice;\n\n-- 5. 模糊查询和数值过滤 --\n-- mysql --\nSELECT p.ProductName, p.UnitPrice\nFROM products AS p\nWHERE p.ProductName LIKE 'C%' AND p.UnitPrice  100;\n\n-- neo4j --\nMATCH (p:Product)\nWHERE p.productName STARTS WITH \"C\" AND p.unitPrice  100\nRETURN p.productName, p.unitPrice;\n\n-- 6. 多表联合查询--\n-- mysql --\nSELECT DISTINCT c.CompanyName\nFROM customers AS c\nJOIN orders AS o ON (c.CustomerID = o.CustomerID)\nJOIN order_details AS od ON (o.OrderID = od.OrderID)\nJOIN products AS p ON (od.ProductID = p.ProductID)\nWHERE p.ProductName = 'Chocolade';\n\n-- neo4j --\nMATCH (p:Product {productName:\"Chocolade\"})<-[:PRODUCT]-(:Order)<-[:PURCHASED]-(c:Customer)\nRETURN distinct c.companyName;\n\n-- 7. 分组查询 --\n-- mysql --\nSELECT e.EmployeeID, count(*) AS Count\nFROM Employee AS e\nJOIN Order AS o ON (o.EmployeeID = e.EmployeeID)\nGROUP BY e.EmployeeID\nORDER BY Count DESC LIMIT 10;\n\n-- neo4j --\nMATCH (:Order)<-[:SOLD]-(e:Employee)\nRETURN e.name, count(*) AS cnt\nORDER BY cnt DESC LIMIT 10\n```\n\n","source":"_posts/2018-09-20.query-language-differences-between-neo4j-and-mysql.md","raw":"---\ntitle: Neo4j 和 Mysql 查询基本语法的区别\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-09-20 13:54:31\ntags:\n- neo4j\ncategories:\n- 技术相关\n- neo4j\ndescription:\npermalink: query-language-differences-between-neo4j-and-mysql\ntop:\n---\n每种数据库都有自己的一套查询语言或者标准，即使是同为关系型数据库的Oracle、Sql Server 和 MySQL，其在一些语法细节上也有差异，更别说 Mongo, Redis 类似的非关系型数据库了。Neo4j 也一样，有自己专属的查询语言 Cypher。深入学习其实发现 Neo4j 的查询语法并不难去学习，因为 Cypher 的语意确实简洁，直观。\n\n<!--more-->\n\n```\n-- 1. 全表扫描 --\n-- mysql --\nSELECT p.*\nFROM products as p;\n\n-- neo4j --\nMATCH (p:Product)\nRETURN p;\n\n-- 2. 查询价格最贵的10个商品，只返回商品名字和单价 --\n-- mysql --\nSELECT p.ProductName, p.UnitPrice\nFROM products as p\nORDER BY p.UnitPrice DESC\nLIMIT 10;\n\n-- neo4j --\nMATCH (p:Product)\nRETURN p.productName, p.unitPrice\nORDER BY p.unitPrice DESC\nLIMIT 10;\n\n-- 3. 按照商品名字筛选 --\n-- mysql --\nSELECT p.ProductName, p.UnitPrice\nFROM products AS p\nWHERE p.ProductName = 'Chocolade';\n\n-- neo4j --\nMATCH (p:Product)\nWHERE p.productName = \"Chocolade\"\nRETURN p.productName, p.unitPrice;\n\n-- 其他的写法 --\nMATCH (p:Product {productName:\"Chocolade\"})\nRETURN p.productName, p.unitPrice;\n\n-- 4. 按照商品名字筛选2 --\n-- mysql --\nSELECT p.ProductName, p.UnitPrice\nFROM products as p\nWHERE p.ProductName IN ('Chocolade','Chai');\n\n-- neo4j --\nMATCH (p:Product)\nWHERE p.productName IN ['Chocolade','Chai']\nRETURN p.productName, p.unitPrice;\n\n-- 5. 模糊查询和数值过滤 --\n-- mysql --\nSELECT p.ProductName, p.UnitPrice\nFROM products AS p\nWHERE p.ProductName LIKE 'C%' AND p.UnitPrice  100;\n\n-- neo4j --\nMATCH (p:Product)\nWHERE p.productName STARTS WITH \"C\" AND p.unitPrice  100\nRETURN p.productName, p.unitPrice;\n\n-- 6. 多表联合查询--\n-- mysql --\nSELECT DISTINCT c.CompanyName\nFROM customers AS c\nJOIN orders AS o ON (c.CustomerID = o.CustomerID)\nJOIN order_details AS od ON (o.OrderID = od.OrderID)\nJOIN products AS p ON (od.ProductID = p.ProductID)\nWHERE p.ProductName = 'Chocolade';\n\n-- neo4j --\nMATCH (p:Product {productName:\"Chocolade\"})<-[:PRODUCT]-(:Order)<-[:PURCHASED]-(c:Customer)\nRETURN distinct c.companyName;\n\n-- 7. 分组查询 --\n-- mysql --\nSELECT e.EmployeeID, count(*) AS Count\nFROM Employee AS e\nJOIN Order AS o ON (o.EmployeeID = e.EmployeeID)\nGROUP BY e.EmployeeID\nORDER BY Count DESC LIMIT 10;\n\n-- neo4j --\nMATCH (:Order)<-[:SOLD]-(e:Employee)\nRETURN e.name, count(*) AS cnt\nORDER BY cnt DESC LIMIT 10\n```\n\n","slug":"query-language-differences-between-neo4j-and-mysql","published":1,"updated":"2018-09-20T06:05:25.352Z","layout":"post","photos":[],"link":"","_id":"cjr64il6z0028kds6w3wx1qim","content":"<p>每种数据库都有自己的一套查询语言或者标准，即使是同为关系型数据库的Oracle、Sql Server 和 MySQL，其在一些语法细节上也有差异，更别说 Mongo, Redis 类似的非关系型数据库了。Neo4j 也一样，有自己专属的查询语言 Cypher。深入学习其实发现 Neo4j 的查询语法并不难去学习，因为 Cypher 的语意确实简洁，直观。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">-- 1. 全表扫描 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.*</div><div class=\"line\">FROM products as p;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">RETURN p;</div><div class=\"line\"></div><div class=\"line\">-- 2. 查询价格最贵的10个商品，只返回商品名字和单价 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.ProductName, p.UnitPrice</div><div class=\"line\">FROM products as p</div><div class=\"line\">ORDER BY p.UnitPrice DESC</div><div class=\"line\">LIMIT 10;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">RETURN p.productName, p.unitPrice</div><div class=\"line\">ORDER BY p.unitPrice DESC</div><div class=\"line\">LIMIT 10;</div><div class=\"line\"></div><div class=\"line\">-- 3. 按照商品名字筛选 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.ProductName, p.UnitPrice</div><div class=\"line\">FROM products AS p</div><div class=\"line\">WHERE p.ProductName = &apos;Chocolade&apos;;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">WHERE p.productName = &quot;Chocolade&quot;</div><div class=\"line\">RETURN p.productName, p.unitPrice;</div><div class=\"line\"></div><div class=\"line\">-- 其他的写法 --</div><div class=\"line\">MATCH (p:Product &#123;productName:&quot;Chocolade&quot;&#125;)</div><div class=\"line\">RETURN p.productName, p.unitPrice;</div><div class=\"line\"></div><div class=\"line\">-- 4. 按照商品名字筛选2 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.ProductName, p.UnitPrice</div><div class=\"line\">FROM products as p</div><div class=\"line\">WHERE p.ProductName IN (&apos;Chocolade&apos;,&apos;Chai&apos;);</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">WHERE p.productName IN [&apos;Chocolade&apos;,&apos;Chai&apos;]</div><div class=\"line\">RETURN p.productName, p.unitPrice;</div><div class=\"line\"></div><div class=\"line\">-- 5. 模糊查询和数值过滤 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.ProductName, p.UnitPrice</div><div class=\"line\">FROM products AS p</div><div class=\"line\">WHERE p.ProductName LIKE &apos;C%&apos; AND p.UnitPrice  100;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">WHERE p.productName STARTS WITH &quot;C&quot; AND p.unitPrice  100</div><div class=\"line\">RETURN p.productName, p.unitPrice;</div><div class=\"line\"></div><div class=\"line\">-- 6. 多表联合查询--</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT DISTINCT c.CompanyName</div><div class=\"line\">FROM customers AS c</div><div class=\"line\">JOIN orders AS o ON (c.CustomerID = o.CustomerID)</div><div class=\"line\">JOIN order_details AS od ON (o.OrderID = od.OrderID)</div><div class=\"line\">JOIN products AS p ON (od.ProductID = p.ProductID)</div><div class=\"line\">WHERE p.ProductName = &apos;Chocolade&apos;;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product &#123;productName:&quot;Chocolade&quot;&#125;)&lt;-[:PRODUCT]-(:Order)&lt;-[:PURCHASED]-(c:Customer)</div><div class=\"line\">RETURN distinct c.companyName;</div><div class=\"line\"></div><div class=\"line\">-- 7. 分组查询 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT e.EmployeeID, count(*) AS Count</div><div class=\"line\">FROM Employee AS e</div><div class=\"line\">JOIN Order AS o ON (o.EmployeeID = e.EmployeeID)</div><div class=\"line\">GROUP BY e.EmployeeID</div><div class=\"line\">ORDER BY Count DESC LIMIT 10;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (:Order)&lt;-[:SOLD]-(e:Employee)</div><div class=\"line\">RETURN e.name, count(*) AS cnt</div><div class=\"line\">ORDER BY cnt DESC LIMIT 10</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>每种数据库都有自己的一套查询语言或者标准，即使是同为关系型数据库的Oracle、Sql Server 和 MySQL，其在一些语法细节上也有差异，更别说 Mongo, Redis 类似的非关系型数据库了。Neo4j 也一样，有自己专属的查询语言 Cypher。深入学习其实发现 Neo4j 的查询语法并不难去学习，因为 Cypher 的语意确实简洁，直观。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">-- 1. 全表扫描 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.*</div><div class=\"line\">FROM products as p;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">RETURN p;</div><div class=\"line\"></div><div class=\"line\">-- 2. 查询价格最贵的10个商品，只返回商品名字和单价 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.ProductName, p.UnitPrice</div><div class=\"line\">FROM products as p</div><div class=\"line\">ORDER BY p.UnitPrice DESC</div><div class=\"line\">LIMIT 10;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">RETURN p.productName, p.unitPrice</div><div class=\"line\">ORDER BY p.unitPrice DESC</div><div class=\"line\">LIMIT 10;</div><div class=\"line\"></div><div class=\"line\">-- 3. 按照商品名字筛选 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.ProductName, p.UnitPrice</div><div class=\"line\">FROM products AS p</div><div class=\"line\">WHERE p.ProductName = &apos;Chocolade&apos;;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">WHERE p.productName = &quot;Chocolade&quot;</div><div class=\"line\">RETURN p.productName, p.unitPrice;</div><div class=\"line\"></div><div class=\"line\">-- 其他的写法 --</div><div class=\"line\">MATCH (p:Product &#123;productName:&quot;Chocolade&quot;&#125;)</div><div class=\"line\">RETURN p.productName, p.unitPrice;</div><div class=\"line\"></div><div class=\"line\">-- 4. 按照商品名字筛选2 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.ProductName, p.UnitPrice</div><div class=\"line\">FROM products as p</div><div class=\"line\">WHERE p.ProductName IN (&apos;Chocolade&apos;,&apos;Chai&apos;);</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">WHERE p.productName IN [&apos;Chocolade&apos;,&apos;Chai&apos;]</div><div class=\"line\">RETURN p.productName, p.unitPrice;</div><div class=\"line\"></div><div class=\"line\">-- 5. 模糊查询和数值过滤 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT p.ProductName, p.UnitPrice</div><div class=\"line\">FROM products AS p</div><div class=\"line\">WHERE p.ProductName LIKE &apos;C%&apos; AND p.UnitPrice  100;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product)</div><div class=\"line\">WHERE p.productName STARTS WITH &quot;C&quot; AND p.unitPrice  100</div><div class=\"line\">RETURN p.productName, p.unitPrice;</div><div class=\"line\"></div><div class=\"line\">-- 6. 多表联合查询--</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT DISTINCT c.CompanyName</div><div class=\"line\">FROM customers AS c</div><div class=\"line\">JOIN orders AS o ON (c.CustomerID = o.CustomerID)</div><div class=\"line\">JOIN order_details AS od ON (o.OrderID = od.OrderID)</div><div class=\"line\">JOIN products AS p ON (od.ProductID = p.ProductID)</div><div class=\"line\">WHERE p.ProductName = &apos;Chocolade&apos;;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (p:Product &#123;productName:&quot;Chocolade&quot;&#125;)&lt;-[:PRODUCT]-(:Order)&lt;-[:PURCHASED]-(c:Customer)</div><div class=\"line\">RETURN distinct c.companyName;</div><div class=\"line\"></div><div class=\"line\">-- 7. 分组查询 --</div><div class=\"line\">-- mysql --</div><div class=\"line\">SELECT e.EmployeeID, count(*) AS Count</div><div class=\"line\">FROM Employee AS e</div><div class=\"line\">JOIN Order AS o ON (o.EmployeeID = e.EmployeeID)</div><div class=\"line\">GROUP BY e.EmployeeID</div><div class=\"line\">ORDER BY Count DESC LIMIT 10;</div><div class=\"line\"></div><div class=\"line\">-- neo4j --</div><div class=\"line\">MATCH (:Order)&lt;-[:SOLD]-(e:Employee)</div><div class=\"line\">RETURN e.name, count(*) AS cnt</div><div class=\"line\">ORDER BY cnt DESC LIMIT 10</div></pre></td></tr></table></figure>"},{"title":"后台运行node服务","comments":1,"fancybox":false,"toc":false,"date":"2018-09-28T01:46:37.000Z","description":null,"top":null,"_content":"<h2 id=\"intro\">前言</h2>\n\n很多时候，我们需要后台运行我们的 node 服务，有3种方式可以实现。\n\n1. 使用Linux自带的`nohup`命令\n2. 使用`forever`命令\n3. 使用`PM2`管理node进程\n\n这里推荐使用PM2来管理和运行我们的node服务\n\n<!--more-->\n\n## 简介\n\nPM2 是一个开源的带有负载均衡功能的 node 应用的进程管理器，包括守护进程，监控，日志的一整套完整的功能，基本是Nodejs应用程序不二的守护进程选择，事实上它并不仅仅可以启动Nodejs的程序，只要是一般的脚本的程序它同样可以胜任。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载，PM2是完美的选择。\n\n## 安装\n\n```bash\nnpm install pm2 -g\n```\n\n## 命令\n\n```bash\n$ pm2 start app.js              # 启动app.js应用程序\n\n$ pm2 start app.js -i 4         # cluster mode 模式启动4个app.js的应用实例     # 4个应用程序会自动进行负载均衡\n\n$ pm2 start app.js --name=\"api\" # 启动应用程序并命名为 \"api\"\n\n$ pm2 start app.js --watch      # 当文件变化时自动重启应用\n\n$ pm2 start npm -- start        # 当前目录执行npm start\n\n$ pm2 start npm --name \"es-head\" -- start # 当前目录执行npm start并命名为 \"es-head\"\n\n$ pm2 start script.sh           # 启动 bash 脚本\n\n$ pm2 list                      # 列表 PM2 启动的所有的应用程序\n\n$ pm2 monit                     # 显示每个应用程序的CPU和内存占用情况\n\n$ pm2 show [app-name]           # 显示应用程序的所有信息\n\n$ pm2 logs                      # 显示所有应用程序的日志\n\n$ pm2 logs [app-name]           # 显示指定应用程序的日志\n\n$ pm2 stop all                  # 停止所有的应用程序\n\n$ pm2 stop 0                    # 停止 id为 0的指定应用程序\n\n$ pm2 restart all               # 重启所有应用\n\n$ pm2 reload all                # 重启 cluster mode下的所有应用\n\n$ pm2 gracefulReload all        # Graceful reload all apps in cluster mode\n\n$ pm2 delete all                # 关闭并删除所有应用\n\n$ pm2 delete 0                  # 删除指定应用 id 0\n\n$ pm2 scale api 10              # 把名字叫api的应用扩展到10个实例\n\n$ pm2 reset [app-name]          # 重置重启数量\n\n$ pm2 startup                   # 创建开机自启动命令\n\n$ pm2 save                      # 保存当前应用列表\n\n$ pm2 resurrect                 # 重新加载保存的应用列表\n```\n\n## 参考\n\n1. [PM2官方文档](https://pm2.io/doc/en/runtime/overview/?utm_source=pm2&utm_medium=website&utm_campaign=rebranding)","source":"_posts/2018-09-28.run-node-service-in-background.md","raw":"---\ntitle: 后台运行node服务\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-09-28 09:46:37\ntags:\n- node\ncategories:\n- 技术相关\n- node\ndescription:\npermalink: run-node-service-in-background\ntop:\n---\n<h2 id=\"intro\">前言</h2>\n\n很多时候，我们需要后台运行我们的 node 服务，有3种方式可以实现。\n\n1. 使用Linux自带的`nohup`命令\n2. 使用`forever`命令\n3. 使用`PM2`管理node进程\n\n这里推荐使用PM2来管理和运行我们的node服务\n\n<!--more-->\n\n## 简介\n\nPM2 是一个开源的带有负载均衡功能的 node 应用的进程管理器，包括守护进程，监控，日志的一整套完整的功能，基本是Nodejs应用程序不二的守护进程选择，事实上它并不仅仅可以启动Nodejs的程序，只要是一般的脚本的程序它同样可以胜任。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载，PM2是完美的选择。\n\n## 安装\n\n```bash\nnpm install pm2 -g\n```\n\n## 命令\n\n```bash\n$ pm2 start app.js              # 启动app.js应用程序\n\n$ pm2 start app.js -i 4         # cluster mode 模式启动4个app.js的应用实例     # 4个应用程序会自动进行负载均衡\n\n$ pm2 start app.js --name=\"api\" # 启动应用程序并命名为 \"api\"\n\n$ pm2 start app.js --watch      # 当文件变化时自动重启应用\n\n$ pm2 start npm -- start        # 当前目录执行npm start\n\n$ pm2 start npm --name \"es-head\" -- start # 当前目录执行npm start并命名为 \"es-head\"\n\n$ pm2 start script.sh           # 启动 bash 脚本\n\n$ pm2 list                      # 列表 PM2 启动的所有的应用程序\n\n$ pm2 monit                     # 显示每个应用程序的CPU和内存占用情况\n\n$ pm2 show [app-name]           # 显示应用程序的所有信息\n\n$ pm2 logs                      # 显示所有应用程序的日志\n\n$ pm2 logs [app-name]           # 显示指定应用程序的日志\n\n$ pm2 stop all                  # 停止所有的应用程序\n\n$ pm2 stop 0                    # 停止 id为 0的指定应用程序\n\n$ pm2 restart all               # 重启所有应用\n\n$ pm2 reload all                # 重启 cluster mode下的所有应用\n\n$ pm2 gracefulReload all        # Graceful reload all apps in cluster mode\n\n$ pm2 delete all                # 关闭并删除所有应用\n\n$ pm2 delete 0                  # 删除指定应用 id 0\n\n$ pm2 scale api 10              # 把名字叫api的应用扩展到10个实例\n\n$ pm2 reset [app-name]          # 重置重启数量\n\n$ pm2 startup                   # 创建开机自启动命令\n\n$ pm2 save                      # 保存当前应用列表\n\n$ pm2 resurrect                 # 重新加载保存的应用列表\n```\n\n## 参考\n\n1. [PM2官方文档](https://pm2.io/doc/en/runtime/overview/?utm_source=pm2&utm_medium=website&utm_campaign=rebranding)","slug":"run-node-service-in-background","published":1,"updated":"2018-09-28T01:59:21.540Z","layout":"post","photos":[],"link":"","_id":"cjr64il71002bkds64xilrdiq","content":"<h2 id=\"intro\">前言</h2>\n\n<p>很多时候，我们需要后台运行我们的 node 服务，有3种方式可以实现。</p>\n<ol>\n<li>使用Linux自带的<code>nohup</code>命令</li>\n<li>使用<code>forever</code>命令</li>\n<li>使用<code>PM2</code>管理node进程</li>\n</ol>\n<p>这里推荐使用PM2来管理和运行我们的node服务</p>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>PM2 是一个开源的带有负载均衡功能的 node 应用的进程管理器，包括守护进程，监控，日志的一整套完整的功能，基本是Nodejs应用程序不二的守护进程选择，事实上它并不仅仅可以启动Nodejs的程序，只要是一般的脚本的程序它同样可以胜任。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载，PM2是完美的选择。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install pm2 -g</div></pre></td></tr></table></figure>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pm2 start app.js              <span class=\"comment\"># 启动app.js应用程序</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start app.js -i 4         <span class=\"comment\"># cluster mode 模式启动4个app.js的应用实例     # 4个应用程序会自动进行负载均衡</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start app.js --name=<span class=\"string\">\"api\"</span> <span class=\"comment\"># 启动应用程序并命名为 \"api\"</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start app.js --watch      <span class=\"comment\"># 当文件变化时自动重启应用</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start npm -- start        <span class=\"comment\"># 当前目录执行npm start</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start npm --name <span class=\"string\">\"es-head\"</span> -- start <span class=\"comment\"># 当前目录执行npm start并命名为 \"es-head\"</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start script.sh           <span class=\"comment\"># 启动 bash 脚本</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 list                      <span class=\"comment\"># 列表 PM2 启动的所有的应用程序</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 monit                     <span class=\"comment\"># 显示每个应用程序的CPU和内存占用情况</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 show [app-name]           <span class=\"comment\"># 显示应用程序的所有信息</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 logs                      <span class=\"comment\"># 显示所有应用程序的日志</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 logs [app-name]           <span class=\"comment\"># 显示指定应用程序的日志</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 stop all                  <span class=\"comment\"># 停止所有的应用程序</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 stop 0                    <span class=\"comment\"># 停止 id为 0的指定应用程序</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 restart all               <span class=\"comment\"># 重启所有应用</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 reload all                <span class=\"comment\"># 重启 cluster mode下的所有应用</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 gracefulReload all        <span class=\"comment\"># Graceful reload all apps in cluster mode</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 delete all                <span class=\"comment\"># 关闭并删除所有应用</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 delete 0                  <span class=\"comment\"># 删除指定应用 id 0</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 scale api 10              <span class=\"comment\"># 把名字叫api的应用扩展到10个实例</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 reset [app-name]          <span class=\"comment\"># 重置重启数量</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 startup                   <span class=\"comment\"># 创建开机自启动命令</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 save                      <span class=\"comment\"># 保存当前应用列表</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 resurrect                 <span class=\"comment\"># 重新加载保存的应用列表</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://pm2.io/doc/en/runtime/overview/?utm_source=pm2&amp;utm_medium=website&amp;utm_campaign=rebranding\" target=\"_blank\" rel=\"external\">PM2官方文档</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"intro\">前言</h2>\n\n<p>很多时候，我们需要后台运行我们的 node 服务，有3种方式可以实现。</p>\n<ol>\n<li>使用Linux自带的<code>nohup</code>命令</li>\n<li>使用<code>forever</code>命令</li>\n<li>使用<code>PM2</code>管理node进程</li>\n</ol>\n<p>这里推荐使用PM2来管理和运行我们的node服务</p>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>PM2 是一个开源的带有负载均衡功能的 node 应用的进程管理器，包括守护进程，监控，日志的一整套完整的功能，基本是Nodejs应用程序不二的守护进程选择，事实上它并不仅仅可以启动Nodejs的程序，只要是一般的脚本的程序它同样可以胜任。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载，PM2是完美的选择。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install pm2 -g</div></pre></td></tr></table></figure>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pm2 start app.js              <span class=\"comment\"># 启动app.js应用程序</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start app.js -i 4         <span class=\"comment\"># cluster mode 模式启动4个app.js的应用实例     # 4个应用程序会自动进行负载均衡</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start app.js --name=<span class=\"string\">\"api\"</span> <span class=\"comment\"># 启动应用程序并命名为 \"api\"</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start app.js --watch      <span class=\"comment\"># 当文件变化时自动重启应用</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start npm -- start        <span class=\"comment\"># 当前目录执行npm start</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start npm --name <span class=\"string\">\"es-head\"</span> -- start <span class=\"comment\"># 当前目录执行npm start并命名为 \"es-head\"</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 start script.sh           <span class=\"comment\"># 启动 bash 脚本</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 list                      <span class=\"comment\"># 列表 PM2 启动的所有的应用程序</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 monit                     <span class=\"comment\"># 显示每个应用程序的CPU和内存占用情况</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 show [app-name]           <span class=\"comment\"># 显示应用程序的所有信息</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 logs                      <span class=\"comment\"># 显示所有应用程序的日志</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 logs [app-name]           <span class=\"comment\"># 显示指定应用程序的日志</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 stop all                  <span class=\"comment\"># 停止所有的应用程序</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 stop 0                    <span class=\"comment\"># 停止 id为 0的指定应用程序</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 restart all               <span class=\"comment\"># 重启所有应用</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 reload all                <span class=\"comment\"># 重启 cluster mode下的所有应用</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 gracefulReload all        <span class=\"comment\"># Graceful reload all apps in cluster mode</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 delete all                <span class=\"comment\"># 关闭并删除所有应用</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 delete 0                  <span class=\"comment\"># 删除指定应用 id 0</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 scale api 10              <span class=\"comment\"># 把名字叫api的应用扩展到10个实例</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 reset [app-name]          <span class=\"comment\"># 重置重启数量</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 startup                   <span class=\"comment\"># 创建开机自启动命令</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 save                      <span class=\"comment\"># 保存当前应用列表</span></div><div class=\"line\"></div><div class=\"line\">$ pm2 resurrect                 <span class=\"comment\"># 重新加载保存的应用列表</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://pm2.io/doc/en/runtime/overview/?utm_source=pm2&amp;utm_medium=website&amp;utm_campaign=rebranding\" target=\"_blank\" rel=\"external\">PM2官方文档</a></li>\n</ol>"},{"title":"解决 Mac 安装最新版 minikube 出现的问题","comments":1,"fancybox":true,"toc":false,"date":"2019-01-14T06:22:11.000Z","description":null,"top":null,"_content":"kubernetes (本文后续简称 k8s )，是一个开源的，用于管理云平台中多个主机上的容器化的应用。Mac 本地运行 k8s 最快的方式，肯定是基于单节点的 minikube 来搭建。人人都说 minikube 搭建 k8s 最简单、快速、只需要傻瓜式输入命令就可以搭建成功，可事实并非如此，比如笔者在搭建的过程中就遇到了 **版本** 和 **代理** 的问题。\n\n下面我将对遇到的问题一一进行解答。\n\n<!--more-->\n\n## 硬件环境\n\n- 系统：`MacOS Mojave 10.14.2 (18C54)`\n\n## 软件环境\n\n### 虚拟机\n\n这里我使用的是 VirtualBox，使用版本`Virtual Box 5.2.22 r126460 (Qt5.6.3)`，当然也可以使用其他虚拟软件，参考：https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor\n\n### 安装 kubectl\n\n> 笔者安装的时候，最新版本为 `v1.13.1` \n\n有2种安装方式：\n\n1. 使用 `brew` 安装，`brew install kubernetes-cli`\n\n2. 使用二进制方式安装\n\n   - 下载二进制文件\n     `curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.13.1/bin/darwin/amd64/kubectl`\n   - 修改文件权限\n     `chmod +x ./kubectl`\n   - 移动文件到用户 bin 目录\n     `sudo mv ./kubectl /usr/local/bin/kubectl`\n\n### 安装 minikube\n\n> 笔者安装的时候，最新版本为 `v0.32.0`\n\n有2种安装方式：\n\n1. 使用 `brew` 安装，`brew cask install minikube`\n\n2. 使用二进制方式安装\n\n   - 下载二进制文件并修改文件权限\n      `curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.32.0/minikube-darwin-amd64 \\ && chmod +x minikube` \n   - 移动文件到用户 bin 目录\n      `sudo cp minikube /usr/local/bin && rm minikube`\n\n## 使用 minikube 启动 k8s\n\n`minikube start`\n\n## 💣 异常 💣\n\n1. minikube 默认使用的 k8s 版本与本地 `kubecli` 版本不一致，部分错误日志如下：\n\n   ```bash\n   $ minikube start\n   Starting local Kubernetes v1.12.4 cluster...\n   Starting VM...\n   Downloading Minikube ISO\n    178.88 MB / 178.88 MB [============================================] 100.00% 0s\n   Getting VM IP address...\n   E0109 17:30:57.090762   47169 start.go:211] Error parsing version semver:  Version string empty\n   Moving files into cluster...\n   Downloading kubeadm v1.12.4\n   Downloading kubelet v1.12.4\n   Finished Downloading kubeadm v1.12.4\n   Finished Downloading kubelet v1.12.4\n   Setting up certs...\n   Connecting to cluster...\n   Setting up kubeconfig...\n   Stopping extra container runtimes...\n   Starting cluster components...\n   E0109 17:38:49.423563   47169 start.go:343] Error starting cluster:  kubeadm init error\n   sudo /usr/bin/kubeadm init --config /var/lib/kubeadm.yaml --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --ignore-preflight-errors=DirAvailable--data-minikube --ignore-preflight-errors=Port-10250 --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-etcd.yaml --ignore-preflight-errors=Swap --ignore-preflight-errors=CRI\n    running command: : Process exited with status 2\n   ================================================================================\n   An error has occurred. Would you like to opt in to sending anonymized crash\n   information to minikube to help prevent future errors?\n   To opt out of these messages, run the command:\n   \tminikube config set WantReportErrorPrompt false\n   ================================================================================\n   Please enter your response [Y/n]: %\n   ```\n\n   **解决：**\n   https://github.com/kubernetes/minikube/issues/3517#issuecomment-453035044\n   因为 minikube 默认使用的 v1.12.x 版本的 k8s，但是我们安装的 kubectl 版本为 v1.13.1，所以可以使用如下命令解决，`minikube start --alsologtostderr --kubernetes-version v1.13.1`\n\n2. 代理问题，因为我们伟大的祖国繁荣富强，导致无法下载k8s镜像，部分错误日志如下：\n\n   ```bash\n   I0114 10:47:38.727892    4695 utils.go:224] ! error execution phase preflight: [preflight] Some fatal errors occurred:\n   I0114 10:47:38.727931    4695 utils.go:224] ! \t[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-apiserver:v1.13.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: proxyconnect tcp: dial tcp :80: connect: connection refused\n   I0114 10:47:38.727941    4695 utils.go:224] ! , error: exit status 1\n   I0114 10:47:38.727963    4695 utils.go:224] ! \t[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-controller-manager:v1.13.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: proxyconnect tcp: dial tcp :80: connect: connection refused\n   I0114 10:47:38.727975    4695 utils.go:224] ! , error: exit status 1\n   ```\n\n   **解决：**\n   https://github.com/kubernetes/minikube/issues/3517#issuecomment-453906287\n   在启动 minikube 的时候加上代(fan)理(qiang)地址，使用 `--docker-env` 参数添加系统环境变量，完整命令如下：\n   `minikube start --alsologtostderr --kubernetes-version v1.13.1 --docker-env HTTP_PROXY=http://10.0.2.2:1087 --docker-env HTTPS_PROXY=http://10.0.2.2:1087 --docker-env NO_PROXY=10.0.2.2,$(minikube ip)`\n   **参数解析：**\n   `10.0.2.2` 这个ip其实是因为 virtual box 里虚拟机如果使用NAT模式的网卡的时候 `10.0.2.2 `默认指向的是宿主机的 `127.0.0.1`，参考地址：https://forums.docker.com/t/beginner-having-trouble-with-docker-behind-company-proxy/3968\n\n## 启动\n\n1. 部分启动成功日志信息：\n\n   ```bash\n   .....\n   I0114 13:35:19.102229    7316 utils.go:224] > Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n   I0114 13:35:19.102246    7316 utils.go:224] >   https://kubernetes.io/docs/concepts/cluster-administration/addons/\n   I0114 13:35:19.102260    7316 utils.go:224] > You can now join any number of machines by running the following on each node\n   I0114 13:35:19.102287    7316 utils.go:224] > as root:\n   I0114 13:35:19.102307    7316 utils.go:224] >   kubeadm join localhost:8443 --token agf5vb.45h4fw6jqy7o2yff --discovery-token-ca-cert-hash sha256:c60ce3456d2ac3225edc119d1792d1b6c20b40b03cf0812ddf8d2fc867f21bf3\n   Verifying kubelet health ...I0114 13:35:19.134467    7316 ssh_runner.go:137] Run with output: sudo systemctl is-active kubelet\n   I0114 13:35:19.141912    7316 utils.go:224] > active\n   \n   Verifying apiserver health ...I0114 13:35:19.149990    7316 kubeadm.go:99] https://192.168.99.101:8443/healthz response: <nil> &{Status:200 OK StatusCode:200 Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Date:[Mon, 14 Jan 2019 05:35:19 GMT] Content-Length:[2] Content-Type:[text/plain; charset=utf-8]] Body:0xc0004b9d00 ContentLength:2 TransferEncoding:[] Close:false Uncompressed:false Trailer:map[] Request:0xc0002da500 TLS:0xc000354000}\n   Kubectl is now configured to use the cluster.\n   Loading cached images from config file.\n   \n   \n   Everything looks great. Please enjoy minikube!\n   ```\n\n2. `minikube dashboard` 之后，启动 dashboad 截图：\n\n   ![dashboard](http://static.xkcoding.com/blog/solve-mac-install-minikube-problem/image-minikube-dashboard.png)","source":"_posts/2019-01-14.solve-mac-install-minikube-problem.md","raw":"---\ntitle: 解决 Mac 安装最新版 minikube 出现的问题\ncomments: true\nfancybox: true\ntoc: false\ndate: 2019-01-14 14:22:11\ntags: \n- kubernetes\n- docker\n- minikube\ncategories:\n- 技术相关\n- kubernetes\ndescription:\npermalink: solve-mac-install-minikube-problem\ntop:\n---\nkubernetes (本文后续简称 k8s )，是一个开源的，用于管理云平台中多个主机上的容器化的应用。Mac 本地运行 k8s 最快的方式，肯定是基于单节点的 minikube 来搭建。人人都说 minikube 搭建 k8s 最简单、快速、只需要傻瓜式输入命令就可以搭建成功，可事实并非如此，比如笔者在搭建的过程中就遇到了 **版本** 和 **代理** 的问题。\n\n下面我将对遇到的问题一一进行解答。\n\n<!--more-->\n\n## 硬件环境\n\n- 系统：`MacOS Mojave 10.14.2 (18C54)`\n\n## 软件环境\n\n### 虚拟机\n\n这里我使用的是 VirtualBox，使用版本`Virtual Box 5.2.22 r126460 (Qt5.6.3)`，当然也可以使用其他虚拟软件，参考：https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor\n\n### 安装 kubectl\n\n> 笔者安装的时候，最新版本为 `v1.13.1` \n\n有2种安装方式：\n\n1. 使用 `brew` 安装，`brew install kubernetes-cli`\n\n2. 使用二进制方式安装\n\n   - 下载二进制文件\n     `curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.13.1/bin/darwin/amd64/kubectl`\n   - 修改文件权限\n     `chmod +x ./kubectl`\n   - 移动文件到用户 bin 目录\n     `sudo mv ./kubectl /usr/local/bin/kubectl`\n\n### 安装 minikube\n\n> 笔者安装的时候，最新版本为 `v0.32.0`\n\n有2种安装方式：\n\n1. 使用 `brew` 安装，`brew cask install minikube`\n\n2. 使用二进制方式安装\n\n   - 下载二进制文件并修改文件权限\n      `curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.32.0/minikube-darwin-amd64 \\ && chmod +x minikube` \n   - 移动文件到用户 bin 目录\n      `sudo cp minikube /usr/local/bin && rm minikube`\n\n## 使用 minikube 启动 k8s\n\n`minikube start`\n\n## 💣 异常 💣\n\n1. minikube 默认使用的 k8s 版本与本地 `kubecli` 版本不一致，部分错误日志如下：\n\n   ```bash\n   $ minikube start\n   Starting local Kubernetes v1.12.4 cluster...\n   Starting VM...\n   Downloading Minikube ISO\n    178.88 MB / 178.88 MB [============================================] 100.00% 0s\n   Getting VM IP address...\n   E0109 17:30:57.090762   47169 start.go:211] Error parsing version semver:  Version string empty\n   Moving files into cluster...\n   Downloading kubeadm v1.12.4\n   Downloading kubelet v1.12.4\n   Finished Downloading kubeadm v1.12.4\n   Finished Downloading kubelet v1.12.4\n   Setting up certs...\n   Connecting to cluster...\n   Setting up kubeconfig...\n   Stopping extra container runtimes...\n   Starting cluster components...\n   E0109 17:38:49.423563   47169 start.go:343] Error starting cluster:  kubeadm init error\n   sudo /usr/bin/kubeadm init --config /var/lib/kubeadm.yaml --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --ignore-preflight-errors=DirAvailable--data-minikube --ignore-preflight-errors=Port-10250 --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-etcd.yaml --ignore-preflight-errors=Swap --ignore-preflight-errors=CRI\n    running command: : Process exited with status 2\n   ================================================================================\n   An error has occurred. Would you like to opt in to sending anonymized crash\n   information to minikube to help prevent future errors?\n   To opt out of these messages, run the command:\n   \tminikube config set WantReportErrorPrompt false\n   ================================================================================\n   Please enter your response [Y/n]: %\n   ```\n\n   **解决：**\n   https://github.com/kubernetes/minikube/issues/3517#issuecomment-453035044\n   因为 minikube 默认使用的 v1.12.x 版本的 k8s，但是我们安装的 kubectl 版本为 v1.13.1，所以可以使用如下命令解决，`minikube start --alsologtostderr --kubernetes-version v1.13.1`\n\n2. 代理问题，因为我们伟大的祖国繁荣富强，导致无法下载k8s镜像，部分错误日志如下：\n\n   ```bash\n   I0114 10:47:38.727892    4695 utils.go:224] ! error execution phase preflight: [preflight] Some fatal errors occurred:\n   I0114 10:47:38.727931    4695 utils.go:224] ! \t[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-apiserver:v1.13.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: proxyconnect tcp: dial tcp :80: connect: connection refused\n   I0114 10:47:38.727941    4695 utils.go:224] ! , error: exit status 1\n   I0114 10:47:38.727963    4695 utils.go:224] ! \t[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-controller-manager:v1.13.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: proxyconnect tcp: dial tcp :80: connect: connection refused\n   I0114 10:47:38.727975    4695 utils.go:224] ! , error: exit status 1\n   ```\n\n   **解决：**\n   https://github.com/kubernetes/minikube/issues/3517#issuecomment-453906287\n   在启动 minikube 的时候加上代(fan)理(qiang)地址，使用 `--docker-env` 参数添加系统环境变量，完整命令如下：\n   `minikube start --alsologtostderr --kubernetes-version v1.13.1 --docker-env HTTP_PROXY=http://10.0.2.2:1087 --docker-env HTTPS_PROXY=http://10.0.2.2:1087 --docker-env NO_PROXY=10.0.2.2,$(minikube ip)`\n   **参数解析：**\n   `10.0.2.2` 这个ip其实是因为 virtual box 里虚拟机如果使用NAT模式的网卡的时候 `10.0.2.2 `默认指向的是宿主机的 `127.0.0.1`，参考地址：https://forums.docker.com/t/beginner-having-trouble-with-docker-behind-company-proxy/3968\n\n## 启动\n\n1. 部分启动成功日志信息：\n\n   ```bash\n   .....\n   I0114 13:35:19.102229    7316 utils.go:224] > Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n   I0114 13:35:19.102246    7316 utils.go:224] >   https://kubernetes.io/docs/concepts/cluster-administration/addons/\n   I0114 13:35:19.102260    7316 utils.go:224] > You can now join any number of machines by running the following on each node\n   I0114 13:35:19.102287    7316 utils.go:224] > as root:\n   I0114 13:35:19.102307    7316 utils.go:224] >   kubeadm join localhost:8443 --token agf5vb.45h4fw6jqy7o2yff --discovery-token-ca-cert-hash sha256:c60ce3456d2ac3225edc119d1792d1b6c20b40b03cf0812ddf8d2fc867f21bf3\n   Verifying kubelet health ...I0114 13:35:19.134467    7316 ssh_runner.go:137] Run with output: sudo systemctl is-active kubelet\n   I0114 13:35:19.141912    7316 utils.go:224] > active\n   \n   Verifying apiserver health ...I0114 13:35:19.149990    7316 kubeadm.go:99] https://192.168.99.101:8443/healthz response: <nil> &{Status:200 OK StatusCode:200 Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Date:[Mon, 14 Jan 2019 05:35:19 GMT] Content-Length:[2] Content-Type:[text/plain; charset=utf-8]] Body:0xc0004b9d00 ContentLength:2 TransferEncoding:[] Close:false Uncompressed:false Trailer:map[] Request:0xc0002da500 TLS:0xc000354000}\n   Kubectl is now configured to use the cluster.\n   Loading cached images from config file.\n   \n   \n   Everything looks great. Please enjoy minikube!\n   ```\n\n2. `minikube dashboard` 之后，启动 dashboad 截图：\n\n   ![dashboard](http://static.xkcoding.com/blog/solve-mac-install-minikube-problem/image-minikube-dashboard.png)","slug":"solve-mac-install-minikube-problem","published":1,"updated":"2019-01-14T07:30:26.514Z","layout":"post","photos":[],"link":"","_id":"cjr64il73002ekds695ls76j8","content":"<p>kubernetes (本文后续简称 k8s )，是一个开源的，用于管理云平台中多个主机上的容器化的应用。Mac 本地运行 k8s 最快的方式，肯定是基于单节点的 minikube 来搭建。人人都说 minikube 搭建 k8s 最简单、快速、只需要傻瓜式输入命令就可以搭建成功，可事实并非如此，比如笔者在搭建的过程中就遇到了 <strong>版本</strong> 和 <strong>代理</strong> 的问题。</p>\n<p>下面我将对遇到的问题一一进行解答。</p>\n<a id=\"more\"></a>\n<h2 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h2><ul>\n<li>系统：<code>MacOS Mojave 10.14.2 (18C54)</code></li>\n</ul>\n<h2 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h2><h3 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h3><p>这里我使用的是 VirtualBox，使用版本<code>Virtual Box 5.2.22 r126460 (Qt5.6.3)</code>，当然也可以使用其他虚拟软件，参考：<a href=\"https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor\" target=\"_blank\" rel=\"external\">https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor</a></p>\n<h3 id=\"安装-kubectl\"><a href=\"#安装-kubectl\" class=\"headerlink\" title=\"安装 kubectl\"></a>安装 kubectl</h3><blockquote>\n<p>笔者安装的时候，最新版本为 <code>v1.13.1</code> </p>\n</blockquote>\n<p>有2种安装方式：</p>\n<ol>\n<li><p>使用 <code>brew</code> 安装，<code>brew install kubernetes-cli</code></p>\n</li>\n<li><p>使用二进制方式安装</p>\n<ul>\n<li>下载二进制文件<br><code>curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.13.1/bin/darwin/amd64/kubectl</code></li>\n<li>修改文件权限<br><code>chmod +x ./kubectl</code></li>\n<li>移动文件到用户 bin 目录<br><code>sudo mv ./kubectl /usr/local/bin/kubectl</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装-minikube\"><a href=\"#安装-minikube\" class=\"headerlink\" title=\"安装 minikube\"></a>安装 minikube</h3><blockquote>\n<p>笔者安装的时候，最新版本为 <code>v0.32.0</code></p>\n</blockquote>\n<p>有2种安装方式：</p>\n<ol>\n<li><p>使用 <code>brew</code> 安装，<code>brew cask install minikube</code></p>\n</li>\n<li><p>使用二进制方式安装</p>\n<ul>\n<li>下载二进制文件并修改文件权限<br> <code>curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.32.0/minikube-darwin-amd64 \\ &amp;&amp; chmod +x minikube</code> </li>\n<li>移动文件到用户 bin 目录<br> <code>sudo cp minikube /usr/local/bin &amp;&amp; rm minikube</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"使用-minikube-启动-k8s\"><a href=\"#使用-minikube-启动-k8s\" class=\"headerlink\" title=\"使用 minikube 启动 k8s\"></a>使用 minikube 启动 k8s</h2><p><code>minikube start</code></p>\n<h2 id=\"💣-异常-💣\"><a href=\"#💣-异常-💣\" class=\"headerlink\" title=\"💣 异常 💣\"></a>💣 异常 💣</h2><ol>\n<li><p>minikube 默认使用的 k8s 版本与本地 <code>kubecli</code> 版本不一致，部分错误日志如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ minikube start</div><div class=\"line\">Starting <span class=\"built_in\">local</span> Kubernetes v1.12.4 cluster...</div><div class=\"line\">Starting VM...</div><div class=\"line\">Downloading Minikube ISO</div><div class=\"line\"> 178.88 MB / 178.88 MB [============================================] 100.00% 0s</div><div class=\"line\">Getting VM IP address...</div><div class=\"line\">E0109 17:30:57.090762   47169 start.go:211] Error parsing version semver:  Version string empty</div><div class=\"line\">Moving files into cluster...</div><div class=\"line\">Downloading kubeadm v1.12.4</div><div class=\"line\">Downloading kubelet v1.12.4</div><div class=\"line\">Finished Downloading kubeadm v1.12.4</div><div class=\"line\">Finished Downloading kubelet v1.12.4</div><div class=\"line\">Setting up certs...</div><div class=\"line\">Connecting to cluster...</div><div class=\"line\">Setting up kubeconfig...</div><div class=\"line\">Stopping extra container runtimes...</div><div class=\"line\">Starting cluster components...</div><div class=\"line\">E0109 17:38:49.423563   47169 start.go:343] Error starting cluster:  kubeadm init error</div><div class=\"line\">sudo /usr/bin/kubeadm init --config /var/lib/kubeadm.yaml --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --ignore-preflight-errors=DirAvailable--data-minikube --ignore-preflight-errors=Port-10250 --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-etcd.yaml --ignore-preflight-errors=Swap --ignore-preflight-errors=CRI</div><div class=\"line\"> running <span class=\"built_in\">command</span>: : Process exited with status 2</div><div class=\"line\">================================================================================</div><div class=\"line\">An error has occurred. Would you like to opt <span class=\"keyword\">in</span> to sending anonymized crash</div><div class=\"line\">information to minikube to <span class=\"built_in\">help</span> prevent future errors?</div><div class=\"line\">To opt out of these messages, run the <span class=\"built_in\">command</span>:</div><div class=\"line\">\tminikube config <span class=\"built_in\">set</span> WantReportErrorPrompt <span class=\"literal\">false</span></div><div class=\"line\">================================================================================</div><div class=\"line\">Please enter your response [Y/n]: %</div></pre></td></tr></table></figure>\n<p><strong>解决：</strong><br><a href=\"https://github.com/kubernetes/minikube/issues/3517#issuecomment-453035044\" target=\"_blank\" rel=\"external\">https://github.com/kubernetes/minikube/issues/3517#issuecomment-453035044</a><br>因为 minikube 默认使用的 v1.12.x 版本的 k8s，但是我们安装的 kubectl 版本为 v1.13.1，所以可以使用如下命令解决，<code>minikube start --alsologtostderr --kubernetes-version v1.13.1</code></p>\n</li>\n<li><p>代理问题，因为我们伟大的祖国繁荣富强，导致无法下载k8s镜像，部分错误日志如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">I0114 10:47:38.727892    4695 utils.go:224] ! error execution phase preflight: [preflight] Some fatal errors occurred:</div><div class=\"line\">I0114 10:47:38.727931    4695 utils.go:224] ! \t[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-apiserver:v1.13.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: proxyconnect tcp: dial tcp :80: connect: connection refused</div><div class=\"line\">I0114 10:47:38.727941    4695 utils.go:224] ! , error: <span class=\"built_in\">exit</span> status 1</div><div class=\"line\">I0114 10:47:38.727963    4695 utils.go:224] ! \t[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-controller-manager:v1.13.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: proxyconnect tcp: dial tcp :80: connect: connection refused</div><div class=\"line\">I0114 10:47:38.727975    4695 utils.go:224] ! , error: <span class=\"built_in\">exit</span> status 1</div></pre></td></tr></table></figure>\n<p><strong>解决：</strong><br><a href=\"https://github.com/kubernetes/minikube/issues/3517#issuecomment-453906287\" target=\"_blank\" rel=\"external\">https://github.com/kubernetes/minikube/issues/3517#issuecomment-453906287</a><br>在启动 minikube 的时候加上代(fan)理(qiang)地址，使用 <code>--docker-env</code> 参数添加系统环境变量，完整命令如下：<br><code>minikube start --alsologtostderr --kubernetes-version v1.13.1 --docker-env HTTP_PROXY=http://10.0.2.2:1087 --docker-env HTTPS_PROXY=http://10.0.2.2:1087 --docker-env NO_PROXY=10.0.2.2,$(minikube ip)</code><br><strong>参数解析：</strong><br><code>10.0.2.2</code> 这个ip其实是因为 virtual box 里虚拟机如果使用NAT模式的网卡的时候 <code>10.0.2.2</code>默认指向的是宿主机的 <code>127.0.0.1</code>，参考地址：<a href=\"https://forums.docker.com/t/beginner-having-trouble-with-docker-behind-company-proxy/3968\" target=\"_blank\" rel=\"external\">https://forums.docker.com/t/beginner-having-trouble-with-docker-behind-company-proxy/3968</a></p>\n</li>\n</ol>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><ol>\n<li><p>部分启动成功日志信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">.....</div><div class=\"line\">I0114 13:35:19.102229    7316 utils.go:224] &gt; Run <span class=\"string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:</div><div class=\"line\">I0114 13:35:19.102246    7316 utils.go:224] &gt;   https://kubernetes.io/docs/concepts/cluster-administration/addons/</div><div class=\"line\">I0114 13:35:19.102260    7316 utils.go:224] &gt; You can now join any number of machines by running the following on each node</div><div class=\"line\">I0114 13:35:19.102287    7316 utils.go:224] &gt; as root:</div><div class=\"line\">I0114 13:35:19.102307    7316 utils.go:224] &gt;   kubeadm join localhost:8443 --token agf5vb.45h4fw6jqy7o2yff --discovery-token-ca-cert-hash sha256:c60ce3456d2ac3225edc119d1792d1b6c20b40b03cf0812ddf8d2fc867f21bf3</div><div class=\"line\">Verifying kubelet health ...I0114 13:35:19.134467    7316 ssh_runner.go:137] Run with output: sudo systemctl is-active kubelet</div><div class=\"line\">I0114 13:35:19.141912    7316 utils.go:224] &gt; active</div><div class=\"line\"></div><div class=\"line\">Verifying apiserver health ...I0114 13:35:19.149990    7316 kubeadm.go:99] https://192.168.99.101:8443/healthz response: &lt;nil&gt; &amp;&#123;Status:200 OK StatusCode:200 Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Date:[Mon, 14 Jan 2019 05:35:19 GMT] Content-Length:[2] Content-Type:[text/plain; charset=utf-8]] Body:0xc0004b9d00 ContentLength:2 TransferEncoding:[] Close:<span class=\"literal\">false</span> Uncompressed:<span class=\"literal\">false</span> Trailer:map[] Request:0xc0002da500 TLS:0xc000354000&#125;</div><div class=\"line\">Kubectl is now configured to use the cluster.</div><div class=\"line\">Loading cached images from config file.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Everything looks great. Please enjoy minikube!</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>minikube dashboard</code> 之后，启动 dashboad 截图：</p>\n<p><img src=\"http://static.xkcoding.com/blog/solve-mac-install-minikube-problem/image-minikube-dashboard.png\" alt=\"dashboard\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>kubernetes (本文后续简称 k8s )，是一个开源的，用于管理云平台中多个主机上的容器化的应用。Mac 本地运行 k8s 最快的方式，肯定是基于单节点的 minikube 来搭建。人人都说 minikube 搭建 k8s 最简单、快速、只需要傻瓜式输入命令就可以搭建成功，可事实并非如此，比如笔者在搭建的过程中就遇到了 <strong>版本</strong> 和 <strong>代理</strong> 的问题。</p>\n<p>下面我将对遇到的问题一一进行解答。</p>","more":"<h2 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h2><ul>\n<li>系统：<code>MacOS Mojave 10.14.2 (18C54)</code></li>\n</ul>\n<h2 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h2><h3 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h3><p>这里我使用的是 VirtualBox，使用版本<code>Virtual Box 5.2.22 r126460 (Qt5.6.3)</code>，当然也可以使用其他虚拟软件，参考：<a href=\"https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor\" target=\"_blank\" rel=\"external\">https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor</a></p>\n<h3 id=\"安装-kubectl\"><a href=\"#安装-kubectl\" class=\"headerlink\" title=\"安装 kubectl\"></a>安装 kubectl</h3><blockquote>\n<p>笔者安装的时候，最新版本为 <code>v1.13.1</code> </p>\n</blockquote>\n<p>有2种安装方式：</p>\n<ol>\n<li><p>使用 <code>brew</code> 安装，<code>brew install kubernetes-cli</code></p>\n</li>\n<li><p>使用二进制方式安装</p>\n<ul>\n<li>下载二进制文件<br><code>curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.13.1/bin/darwin/amd64/kubectl</code></li>\n<li>修改文件权限<br><code>chmod +x ./kubectl</code></li>\n<li>移动文件到用户 bin 目录<br><code>sudo mv ./kubectl /usr/local/bin/kubectl</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装-minikube\"><a href=\"#安装-minikube\" class=\"headerlink\" title=\"安装 minikube\"></a>安装 minikube</h3><blockquote>\n<p>笔者安装的时候，最新版本为 <code>v0.32.0</code></p>\n</blockquote>\n<p>有2种安装方式：</p>\n<ol>\n<li><p>使用 <code>brew</code> 安装，<code>brew cask install minikube</code></p>\n</li>\n<li><p>使用二进制方式安装</p>\n<ul>\n<li>下载二进制文件并修改文件权限<br> <code>curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.32.0/minikube-darwin-amd64 \\ &amp;&amp; chmod +x minikube</code> </li>\n<li>移动文件到用户 bin 目录<br> <code>sudo cp minikube /usr/local/bin &amp;&amp; rm minikube</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"使用-minikube-启动-k8s\"><a href=\"#使用-minikube-启动-k8s\" class=\"headerlink\" title=\"使用 minikube 启动 k8s\"></a>使用 minikube 启动 k8s</h2><p><code>minikube start</code></p>\n<h2 id=\"💣-异常-💣\"><a href=\"#💣-异常-💣\" class=\"headerlink\" title=\"💣 异常 💣\"></a>💣 异常 💣</h2><ol>\n<li><p>minikube 默认使用的 k8s 版本与本地 <code>kubecli</code> 版本不一致，部分错误日志如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ minikube start</div><div class=\"line\">Starting <span class=\"built_in\">local</span> Kubernetes v1.12.4 cluster...</div><div class=\"line\">Starting VM...</div><div class=\"line\">Downloading Minikube ISO</div><div class=\"line\"> 178.88 MB / 178.88 MB [============================================] 100.00% 0s</div><div class=\"line\">Getting VM IP address...</div><div class=\"line\">E0109 17:30:57.090762   47169 start.go:211] Error parsing version semver:  Version string empty</div><div class=\"line\">Moving files into cluster...</div><div class=\"line\">Downloading kubeadm v1.12.4</div><div class=\"line\">Downloading kubelet v1.12.4</div><div class=\"line\">Finished Downloading kubeadm v1.12.4</div><div class=\"line\">Finished Downloading kubelet v1.12.4</div><div class=\"line\">Setting up certs...</div><div class=\"line\">Connecting to cluster...</div><div class=\"line\">Setting up kubeconfig...</div><div class=\"line\">Stopping extra container runtimes...</div><div class=\"line\">Starting cluster components...</div><div class=\"line\">E0109 17:38:49.423563   47169 start.go:343] Error starting cluster:  kubeadm init error</div><div class=\"line\">sudo /usr/bin/kubeadm init --config /var/lib/kubeadm.yaml --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests --ignore-preflight-errors=DirAvailable--data-minikube --ignore-preflight-errors=Port-10250 --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml --ignore-preflight-errors=FileAvailable--etc-kubernetes-manifests-etcd.yaml --ignore-preflight-errors=Swap --ignore-preflight-errors=CRI</div><div class=\"line\"> running <span class=\"built_in\">command</span>: : Process exited with status 2</div><div class=\"line\">================================================================================</div><div class=\"line\">An error has occurred. Would you like to opt <span class=\"keyword\">in</span> to sending anonymized crash</div><div class=\"line\">information to minikube to <span class=\"built_in\">help</span> prevent future errors?</div><div class=\"line\">To opt out of these messages, run the <span class=\"built_in\">command</span>:</div><div class=\"line\">\tminikube config <span class=\"built_in\">set</span> WantReportErrorPrompt <span class=\"literal\">false</span></div><div class=\"line\">================================================================================</div><div class=\"line\">Please enter your response [Y/n]: %</div></pre></td></tr></table></figure>\n<p><strong>解决：</strong><br><a href=\"https://github.com/kubernetes/minikube/issues/3517#issuecomment-453035044\" target=\"_blank\" rel=\"external\">https://github.com/kubernetes/minikube/issues/3517#issuecomment-453035044</a><br>因为 minikube 默认使用的 v1.12.x 版本的 k8s，但是我们安装的 kubectl 版本为 v1.13.1，所以可以使用如下命令解决，<code>minikube start --alsologtostderr --kubernetes-version v1.13.1</code></p>\n</li>\n<li><p>代理问题，因为我们伟大的祖国繁荣富强，导致无法下载k8s镜像，部分错误日志如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">I0114 10:47:38.727892    4695 utils.go:224] ! error execution phase preflight: [preflight] Some fatal errors occurred:</div><div class=\"line\">I0114 10:47:38.727931    4695 utils.go:224] ! \t[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-apiserver:v1.13.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: proxyconnect tcp: dial tcp :80: connect: connection refused</div><div class=\"line\">I0114 10:47:38.727941    4695 utils.go:224] ! , error: <span class=\"built_in\">exit</span> status 1</div><div class=\"line\">I0114 10:47:38.727963    4695 utils.go:224] ! \t[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-controller-manager:v1.13.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: proxyconnect tcp: dial tcp :80: connect: connection refused</div><div class=\"line\">I0114 10:47:38.727975    4695 utils.go:224] ! , error: <span class=\"built_in\">exit</span> status 1</div></pre></td></tr></table></figure>\n<p><strong>解决：</strong><br><a href=\"https://github.com/kubernetes/minikube/issues/3517#issuecomment-453906287\" target=\"_blank\" rel=\"external\">https://github.com/kubernetes/minikube/issues/3517#issuecomment-453906287</a><br>在启动 minikube 的时候加上代(fan)理(qiang)地址，使用 <code>--docker-env</code> 参数添加系统环境变量，完整命令如下：<br><code>minikube start --alsologtostderr --kubernetes-version v1.13.1 --docker-env HTTP_PROXY=http://10.0.2.2:1087 --docker-env HTTPS_PROXY=http://10.0.2.2:1087 --docker-env NO_PROXY=10.0.2.2,$(minikube ip)</code><br><strong>参数解析：</strong><br><code>10.0.2.2</code> 这个ip其实是因为 virtual box 里虚拟机如果使用NAT模式的网卡的时候 <code>10.0.2.2</code>默认指向的是宿主机的 <code>127.0.0.1</code>，参考地址：<a href=\"https://forums.docker.com/t/beginner-having-trouble-with-docker-behind-company-proxy/3968\" target=\"_blank\" rel=\"external\">https://forums.docker.com/t/beginner-having-trouble-with-docker-behind-company-proxy/3968</a></p>\n</li>\n</ol>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><ol>\n<li><p>部分启动成功日志信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">.....</div><div class=\"line\">I0114 13:35:19.102229    7316 utils.go:224] &gt; Run <span class=\"string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:</div><div class=\"line\">I0114 13:35:19.102246    7316 utils.go:224] &gt;   https://kubernetes.io/docs/concepts/cluster-administration/addons/</div><div class=\"line\">I0114 13:35:19.102260    7316 utils.go:224] &gt; You can now join any number of machines by running the following on each node</div><div class=\"line\">I0114 13:35:19.102287    7316 utils.go:224] &gt; as root:</div><div class=\"line\">I0114 13:35:19.102307    7316 utils.go:224] &gt;   kubeadm join localhost:8443 --token agf5vb.45h4fw6jqy7o2yff --discovery-token-ca-cert-hash sha256:c60ce3456d2ac3225edc119d1792d1b6c20b40b03cf0812ddf8d2fc867f21bf3</div><div class=\"line\">Verifying kubelet health ...I0114 13:35:19.134467    7316 ssh_runner.go:137] Run with output: sudo systemctl is-active kubelet</div><div class=\"line\">I0114 13:35:19.141912    7316 utils.go:224] &gt; active</div><div class=\"line\"></div><div class=\"line\">Verifying apiserver health ...I0114 13:35:19.149990    7316 kubeadm.go:99] https://192.168.99.101:8443/healthz response: &lt;nil&gt; &amp;&#123;Status:200 OK StatusCode:200 Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[Date:[Mon, 14 Jan 2019 05:35:19 GMT] Content-Length:[2] Content-Type:[text/plain; charset=utf-8]] Body:0xc0004b9d00 ContentLength:2 TransferEncoding:[] Close:<span class=\"literal\">false</span> Uncompressed:<span class=\"literal\">false</span> Trailer:map[] Request:0xc0002da500 TLS:0xc000354000&#125;</div><div class=\"line\">Kubectl is now configured to use the cluster.</div><div class=\"line\">Loading cached images from config file.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Everything looks great. Please enjoy minikube!</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>minikube dashboard</code> 之后，启动 dashboad 截图：</p>\n<p><img src=\"http://static.xkcoding.com/blog/solve-mac-install-minikube-problem/image-minikube-dashboard.png\" alt=\"dashboard\"></p>\n</li>\n</ol>"},{"title":"解决 Nginx 413 Request Entity Too Large 问题","comments":1,"fancybox":false,"toc":false,"date":"2019-01-17T02:44:21.000Z","description":null,"top":null,"_content":"使用 Spring Boot 文件上传的时候，前端使用 nginx 代理后端请求，出现如下 **413 Request Entity Too Large** 这个错误。\n\n![nginx-413](http://static.xkcoding.com/blog/solve-nginx-413-problem/image-nginx.png)\n\n<!--more-->\n\n解决方法其实也十分简单，只需要在 nginx 配置文件里添加如下内容，重启 nginx，即可解决。\n\n```nginx\nserver {  \n    # ...\n    listen       80;\n    server_name  localhost;\n    client_max_body_size 20M;\n    # ...\n}\n```\n\n重启 nginx，`nginx -s reload`，大功告成！","source":"_posts/2019-01-17.solve-nginx-413-problem.md","raw":"---\ntitle: 解决 Nginx 413 Request Entity Too Large 问题\ncomments: true\nfancybox: false\ntoc: false\ndate: 2019-01-17 10:44:21\ntags:\n- nginx\ncategories:\n- 技术相关\n- nginx\ndescription:\npermalink: solve-nginx-413-problem\ntop:\n---\n使用 Spring Boot 文件上传的时候，前端使用 nginx 代理后端请求，出现如下 **413 Request Entity Too Large** 这个错误。\n\n![nginx-413](http://static.xkcoding.com/blog/solve-nginx-413-problem/image-nginx.png)\n\n<!--more-->\n\n解决方法其实也十分简单，只需要在 nginx 配置文件里添加如下内容，重启 nginx，即可解决。\n\n```nginx\nserver {  \n    # ...\n    listen       80;\n    server_name  localhost;\n    client_max_body_size 20M;\n    # ...\n}\n```\n\n重启 nginx，`nginx -s reload`，大功告成！","slug":"solve-nginx-413-problem","published":1,"updated":"2019-01-17T02:56:23.812Z","layout":"post","photos":[],"link":"","_id":"cjr64il76002hkds6ph9h19f0","content":"<p>使用 Spring Boot 文件上传的时候，前端使用 nginx 代理后端请求，出现如下 <strong>413 Request Entity Too Large</strong> 这个错误。</p>\n<p><img src=\"http://static.xkcoding.com/blog/solve-nginx-413-problem/image-nginx.png\" alt=\"nginx-413\"></p>\n<a id=\"more\"></a>\n<p>解决方法其实也十分简单，只需要在 nginx 配置文件里添加如下内容，重启 nginx，即可解决。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;  </div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</div><div class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</div><div class=\"line\">    <span class=\"attribute\">client_max_body_size</span> <span class=\"number\">20M</span>;</div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重启 nginx，<code>nginx -s reload</code>，大功告成！</p>\n","site":{"data":{}},"excerpt":"<p>使用 Spring Boot 文件上传的时候，前端使用 nginx 代理后端请求，出现如下 <strong>413 Request Entity Too Large</strong> 这个错误。</p>\n<p><img src=\"http://static.xkcoding.com/blog/solve-nginx-413-problem/image-nginx.png\" alt=\"nginx-413\"></p>","more":"<p>解决方法其实也十分简单，只需要在 nginx 配置文件里添加如下内容，重启 nginx，即可解决。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;  </div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</div><div class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</div><div class=\"line\">    <span class=\"attribute\">client_max_body_size</span> <span class=\"number\">20M</span>;</div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重启 nginx，<code>nginx -s reload</code>，大功告成！</p>"},{"title":"溜了溜了2018，来了来了2019","comments":1,"fancybox":true,"toc":false,"date":"2018-12-31T16:00:00.000Z","description":null,"top":null,"_content":"18年不知不觉已到尽头，但自己总觉得好像18年只过了9个月一样。抓住18年的小尾巴，给自己的2018做个年终总结，为2019做个展望。\n\n<!--more-->\n\n## 总结18\n\n### 生活方面\n\n今年相比去年，少了一次旅游，但是吃的方面，比去年更讲究了不少。有她的日子都很精致。\n\n### 感情方面\n\n18年算是迈出了关键的一步吧。正月里去了她家，见了下她的父母，经历了下那儿的过年的风俗，还算顺利。5月带她回家，见了爸妈，虽然还有些小意外，不过我坚信自己可以处理好。\n\n### 工作方面\n\n18年3月初，毅然决然的离开了北京，离开了那个氛围很好的图迹，回到杭州，不过生活并没想象中的美好，说实话，挺后悔的。嗯，不过，在美创的日子也还算不错，组长人好，团队成员也好相处，但总没有图迹的感觉，也可能是想那群“哥文化”的小伙伴了吧。\n\n今年工作上最大的收货应该就是，之前东哥、明哥安排工作，我去依照时间计划执行，现在需要我去定todo-list，定工作量，安排小伙伴一起开发；之前只需对自己得代码负责，现在需要对自己得产品负责；之前考虑代码功能实现，现在考虑产品整体架构。\n\n### 技术方面\n\n作为一个“伪全栈”，今年几乎没写前端，应该是最大的遗憾了。不过好在后端技术没落下，给team一起组织了几场topic，分享了下《Java8新特性》《微服务架构》，为团队引入优秀的开源框架hutool、guava、lombok等，并定义一套web开发规范，team也按照这个在执行，对团队也还算有些贡献。\n\n负责元数据产品的开发，也对elasticsearch和neo4j等技术更加熟练的使用。\n\nswarm，k8s，rancher自己瞎玩的也还算顺溜。\n\n### 开源方面\n\n![2018年github贡献率](http://static.xkcoding.com/blog/bye2018-hello2019/image-2018-github-contributions.png)\n\n今年最大的坚持应该就是spring-boot-demo，地址：<https://github.com/xkcoding/spring-boot-demo> ，稍微介绍下吧，基于SpringBoot版本2.1.0.RELEASE版本，里面总共包含47个demo，当然都不仅仅是简单的demo而已，从基础的功能集成，到定时任务的管理，再到大家比较关注的前后端分离的动态权限管理、工作流等等都有涉及，希望可以做成入门SpringBoot最快，集成最简单的demo。\n\n然后就是shiny-telegram，地址：<https://github.com/xkcoding/shiny-telegram> ，主要就是爬虫，爬取Mac破解软件网站<https://xclient.info/> 的破解软件下载地址和版本信息，主要使用技术点xpath、jsoup、selenium和phantomjs。\n\n还有个半成品 scaffold，地址：<https://github.com/xkcoding/scaffold> ，主要就是一个快速开发的脚手架工程，前后端分离，包含基础权限管理，用户管理，日志管理，菜单管理，定时任务管理，工作流等功能，希望明年可以给它完善。\n\n还有最后一个spring-cloud-learning-simple-demo，地址：<https://github.com/xkcoding/spring-cloud-learning-simple-demo> ，主要就是给team分享微服务的时候写的一个springcloud的集成demo，帮助学习各个组件使用的，当然啦，也是基于SpringBoot 2.X的。总得来说，对自己今年的执行力还算满意。\n\n### 博客方面\n\nemmm... 这是今年最大的痛，今年更新的博文频率比较低，不找理由，就是自己太懒。\n\n## 展望19\n\n1. 希望父母头发可以白的慢一点，希望自己和她可以相处的更好，希望父母可以更好的接纳她，希望自己可以成为精致的猪猪男孩，希望来一次旅游。\n2. 希望19年博客可以每月保底3篇。\n3. 希望19年可以每天都在github留下足迹，不管有没有人star自己的项目，但是我想对已经star的小伙伴和我自己的代码负责到底，这是我的态度。\n4. 希望自己可以有些存款，17、18年底都是口袋空空，希望19的年底可以不空了。\n5. 希望自己仍然可以保持对代码的热爱，对技术执着，我一直相信自己的能力，我一直在等待一个合适的机会。","source":"_posts/2019-01-01.bye2018-hello2019.md","raw":"---\ntitle: 溜了溜了2018，来了来了2019\ncomments: true\nfancybox: true\ntoc: false\ndate: 2019-01-01 00:00:00\ntags: \n- 总结展望\ncategories:\n- 总结展望\ndescription:\npermalink: bye2018-hello2019\ntop:\n---\n18年不知不觉已到尽头，但自己总觉得好像18年只过了9个月一样。抓住18年的小尾巴，给自己的2018做个年终总结，为2019做个展望。\n\n<!--more-->\n\n## 总结18\n\n### 生活方面\n\n今年相比去年，少了一次旅游，但是吃的方面，比去年更讲究了不少。有她的日子都很精致。\n\n### 感情方面\n\n18年算是迈出了关键的一步吧。正月里去了她家，见了下她的父母，经历了下那儿的过年的风俗，还算顺利。5月带她回家，见了爸妈，虽然还有些小意外，不过我坚信自己可以处理好。\n\n### 工作方面\n\n18年3月初，毅然决然的离开了北京，离开了那个氛围很好的图迹，回到杭州，不过生活并没想象中的美好，说实话，挺后悔的。嗯，不过，在美创的日子也还算不错，组长人好，团队成员也好相处，但总没有图迹的感觉，也可能是想那群“哥文化”的小伙伴了吧。\n\n今年工作上最大的收货应该就是，之前东哥、明哥安排工作，我去依照时间计划执行，现在需要我去定todo-list，定工作量，安排小伙伴一起开发；之前只需对自己得代码负责，现在需要对自己得产品负责；之前考虑代码功能实现，现在考虑产品整体架构。\n\n### 技术方面\n\n作为一个“伪全栈”，今年几乎没写前端，应该是最大的遗憾了。不过好在后端技术没落下，给team一起组织了几场topic，分享了下《Java8新特性》《微服务架构》，为团队引入优秀的开源框架hutool、guava、lombok等，并定义一套web开发规范，team也按照这个在执行，对团队也还算有些贡献。\n\n负责元数据产品的开发，也对elasticsearch和neo4j等技术更加熟练的使用。\n\nswarm，k8s，rancher自己瞎玩的也还算顺溜。\n\n### 开源方面\n\n![2018年github贡献率](http://static.xkcoding.com/blog/bye2018-hello2019/image-2018-github-contributions.png)\n\n今年最大的坚持应该就是spring-boot-demo，地址：<https://github.com/xkcoding/spring-boot-demo> ，稍微介绍下吧，基于SpringBoot版本2.1.0.RELEASE版本，里面总共包含47个demo，当然都不仅仅是简单的demo而已，从基础的功能集成，到定时任务的管理，再到大家比较关注的前后端分离的动态权限管理、工作流等等都有涉及，希望可以做成入门SpringBoot最快，集成最简单的demo。\n\n然后就是shiny-telegram，地址：<https://github.com/xkcoding/shiny-telegram> ，主要就是爬虫，爬取Mac破解软件网站<https://xclient.info/> 的破解软件下载地址和版本信息，主要使用技术点xpath、jsoup、selenium和phantomjs。\n\n还有个半成品 scaffold，地址：<https://github.com/xkcoding/scaffold> ，主要就是一个快速开发的脚手架工程，前后端分离，包含基础权限管理，用户管理，日志管理，菜单管理，定时任务管理，工作流等功能，希望明年可以给它完善。\n\n还有最后一个spring-cloud-learning-simple-demo，地址：<https://github.com/xkcoding/spring-cloud-learning-simple-demo> ，主要就是给team分享微服务的时候写的一个springcloud的集成demo，帮助学习各个组件使用的，当然啦，也是基于SpringBoot 2.X的。总得来说，对自己今年的执行力还算满意。\n\n### 博客方面\n\nemmm... 这是今年最大的痛，今年更新的博文频率比较低，不找理由，就是自己太懒。\n\n## 展望19\n\n1. 希望父母头发可以白的慢一点，希望自己和她可以相处的更好，希望父母可以更好的接纳她，希望自己可以成为精致的猪猪男孩，希望来一次旅游。\n2. 希望19年博客可以每月保底3篇。\n3. 希望19年可以每天都在github留下足迹，不管有没有人star自己的项目，但是我想对已经star的小伙伴和我自己的代码负责到底，这是我的态度。\n4. 希望自己可以有些存款，17、18年底都是口袋空空，希望19的年底可以不空了。\n5. 希望自己仍然可以保持对代码的热爱，对技术执着，我一直相信自己的能力，我一直在等待一个合适的机会。","slug":"bye2018-hello2019","published":1,"updated":"2019-01-15T03:17:08.657Z","layout":"post","photos":[],"link":"","_id":"cjr64il78002jkds67frr5j27","content":"<p>18年不知不觉已到尽头，但自己总觉得好像18年只过了9个月一样。抓住18年的小尾巴，给自己的2018做个年终总结，为2019做个展望。</p>\n<a id=\"more\"></a>\n<h2 id=\"总结18\"><a href=\"#总结18\" class=\"headerlink\" title=\"总结18\"></a>总结18</h2><h3 id=\"生活方面\"><a href=\"#生活方面\" class=\"headerlink\" title=\"生活方面\"></a>生活方面</h3><p>今年相比去年，少了一次旅游，但是吃的方面，比去年更讲究了不少。有她的日子都很精致。</p>\n<h3 id=\"感情方面\"><a href=\"#感情方面\" class=\"headerlink\" title=\"感情方面\"></a>感情方面</h3><p>18年算是迈出了关键的一步吧。正月里去了她家，见了下她的父母，经历了下那儿的过年的风俗，还算顺利。5月带她回家，见了爸妈，虽然还有些小意外，不过我坚信自己可以处理好。</p>\n<h3 id=\"工作方面\"><a href=\"#工作方面\" class=\"headerlink\" title=\"工作方面\"></a>工作方面</h3><p>18年3月初，毅然决然的离开了北京，离开了那个氛围很好的图迹，回到杭州，不过生活并没想象中的美好，说实话，挺后悔的。嗯，不过，在美创的日子也还算不错，组长人好，团队成员也好相处，但总没有图迹的感觉，也可能是想那群“哥文化”的小伙伴了吧。</p>\n<p>今年工作上最大的收货应该就是，之前东哥、明哥安排工作，我去依照时间计划执行，现在需要我去定todo-list，定工作量，安排小伙伴一起开发；之前只需对自己得代码负责，现在需要对自己得产品负责；之前考虑代码功能实现，现在考虑产品整体架构。</p>\n<h3 id=\"技术方面\"><a href=\"#技术方面\" class=\"headerlink\" title=\"技术方面\"></a>技术方面</h3><p>作为一个“伪全栈”，今年几乎没写前端，应该是最大的遗憾了。不过好在后端技术没落下，给team一起组织了几场topic，分享了下《Java8新特性》《微服务架构》，为团队引入优秀的开源框架hutool、guava、lombok等，并定义一套web开发规范，team也按照这个在执行，对团队也还算有些贡献。</p>\n<p>负责元数据产品的开发，也对elasticsearch和neo4j等技术更加熟练的使用。</p>\n<p>swarm，k8s，rancher自己瞎玩的也还算顺溜。</p>\n<h3 id=\"开源方面\"><a href=\"#开源方面\" class=\"headerlink\" title=\"开源方面\"></a>开源方面</h3><p><img src=\"http://static.xkcoding.com/blog/bye2018-hello2019/image-2018-github-contributions.png\" alt=\"2018年github贡献率\"></p>\n<p>今年最大的坚持应该就是spring-boot-demo，地址：<a href=\"https://github.com/xkcoding/spring-boot-demo\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/spring-boot-demo</a> ，稍微介绍下吧，基于SpringBoot版本2.1.0.RELEASE版本，里面总共包含47个demo，当然都不仅仅是简单的demo而已，从基础的功能集成，到定时任务的管理，再到大家比较关注的前后端分离的动态权限管理、工作流等等都有涉及，希望可以做成入门SpringBoot最快，集成最简单的demo。</p>\n<p>然后就是shiny-telegram，地址：<a href=\"https://github.com/xkcoding/shiny-telegram\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/shiny-telegram</a> ，主要就是爬虫，爬取Mac破解软件网站<a href=\"https://xclient.info/\" target=\"_blank\" rel=\"external\">https://xclient.info/</a> 的破解软件下载地址和版本信息，主要使用技术点xpath、jsoup、selenium和phantomjs。</p>\n<p>还有个半成品 scaffold，地址：<a href=\"https://github.com/xkcoding/scaffold\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/scaffold</a> ，主要就是一个快速开发的脚手架工程，前后端分离，包含基础权限管理，用户管理，日志管理，菜单管理，定时任务管理，工作流等功能，希望明年可以给它完善。</p>\n<p>还有最后一个spring-cloud-learning-simple-demo，地址：<a href=\"https://github.com/xkcoding/spring-cloud-learning-simple-demo\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/spring-cloud-learning-simple-demo</a> ，主要就是给team分享微服务的时候写的一个springcloud的集成demo，帮助学习各个组件使用的，当然啦，也是基于SpringBoot 2.X的。总得来说，对自己今年的执行力还算满意。</p>\n<h3 id=\"博客方面\"><a href=\"#博客方面\" class=\"headerlink\" title=\"博客方面\"></a>博客方面</h3><p>emmm… 这是今年最大的痛，今年更新的博文频率比较低，不找理由，就是自己太懒。</p>\n<h2 id=\"展望19\"><a href=\"#展望19\" class=\"headerlink\" title=\"展望19\"></a>展望19</h2><ol>\n<li>希望父母头发可以白的慢一点，希望自己和她可以相处的更好，希望父母可以更好的接纳她，希望自己可以成为精致的猪猪男孩，希望来一次旅游。</li>\n<li>希望19年博客可以每月保底3篇。</li>\n<li>希望19年可以每天都在github留下足迹，不管有没有人star自己的项目，但是我想对已经star的小伙伴和我自己的代码负责到底，这是我的态度。</li>\n<li>希望自己可以有些存款，17、18年底都是口袋空空，希望19的年底可以不空了。</li>\n<li>希望自己仍然可以保持对代码的热爱，对技术执着，我一直相信自己的能力，我一直在等待一个合适的机会。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>18年不知不觉已到尽头，但自己总觉得好像18年只过了9个月一样。抓住18年的小尾巴，给自己的2018做个年终总结，为2019做个展望。</p>","more":"<h2 id=\"总结18\"><a href=\"#总结18\" class=\"headerlink\" title=\"总结18\"></a>总结18</h2><h3 id=\"生活方面\"><a href=\"#生活方面\" class=\"headerlink\" title=\"生活方面\"></a>生活方面</h3><p>今年相比去年，少了一次旅游，但是吃的方面，比去年更讲究了不少。有她的日子都很精致。</p>\n<h3 id=\"感情方面\"><a href=\"#感情方面\" class=\"headerlink\" title=\"感情方面\"></a>感情方面</h3><p>18年算是迈出了关键的一步吧。正月里去了她家，见了下她的父母，经历了下那儿的过年的风俗，还算顺利。5月带她回家，见了爸妈，虽然还有些小意外，不过我坚信自己可以处理好。</p>\n<h3 id=\"工作方面\"><a href=\"#工作方面\" class=\"headerlink\" title=\"工作方面\"></a>工作方面</h3><p>18年3月初，毅然决然的离开了北京，离开了那个氛围很好的图迹，回到杭州，不过生活并没想象中的美好，说实话，挺后悔的。嗯，不过，在美创的日子也还算不错，组长人好，团队成员也好相处，但总没有图迹的感觉，也可能是想那群“哥文化”的小伙伴了吧。</p>\n<p>今年工作上最大的收货应该就是，之前东哥、明哥安排工作，我去依照时间计划执行，现在需要我去定todo-list，定工作量，安排小伙伴一起开发；之前只需对自己得代码负责，现在需要对自己得产品负责；之前考虑代码功能实现，现在考虑产品整体架构。</p>\n<h3 id=\"技术方面\"><a href=\"#技术方面\" class=\"headerlink\" title=\"技术方面\"></a>技术方面</h3><p>作为一个“伪全栈”，今年几乎没写前端，应该是最大的遗憾了。不过好在后端技术没落下，给team一起组织了几场topic，分享了下《Java8新特性》《微服务架构》，为团队引入优秀的开源框架hutool、guava、lombok等，并定义一套web开发规范，team也按照这个在执行，对团队也还算有些贡献。</p>\n<p>负责元数据产品的开发，也对elasticsearch和neo4j等技术更加熟练的使用。</p>\n<p>swarm，k8s，rancher自己瞎玩的也还算顺溜。</p>\n<h3 id=\"开源方面\"><a href=\"#开源方面\" class=\"headerlink\" title=\"开源方面\"></a>开源方面</h3><p><img src=\"http://static.xkcoding.com/blog/bye2018-hello2019/image-2018-github-contributions.png\" alt=\"2018年github贡献率\"></p>\n<p>今年最大的坚持应该就是spring-boot-demo，地址：<a href=\"https://github.com/xkcoding/spring-boot-demo\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/spring-boot-demo</a> ，稍微介绍下吧，基于SpringBoot版本2.1.0.RELEASE版本，里面总共包含47个demo，当然都不仅仅是简单的demo而已，从基础的功能集成，到定时任务的管理，再到大家比较关注的前后端分离的动态权限管理、工作流等等都有涉及，希望可以做成入门SpringBoot最快，集成最简单的demo。</p>\n<p>然后就是shiny-telegram，地址：<a href=\"https://github.com/xkcoding/shiny-telegram\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/shiny-telegram</a> ，主要就是爬虫，爬取Mac破解软件网站<a href=\"https://xclient.info/\" target=\"_blank\" rel=\"external\">https://xclient.info/</a> 的破解软件下载地址和版本信息，主要使用技术点xpath、jsoup、selenium和phantomjs。</p>\n<p>还有个半成品 scaffold，地址：<a href=\"https://github.com/xkcoding/scaffold\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/scaffold</a> ，主要就是一个快速开发的脚手架工程，前后端分离，包含基础权限管理，用户管理，日志管理，菜单管理，定时任务管理，工作流等功能，希望明年可以给它完善。</p>\n<p>还有最后一个spring-cloud-learning-simple-demo，地址：<a href=\"https://github.com/xkcoding/spring-cloud-learning-simple-demo\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/spring-cloud-learning-simple-demo</a> ，主要就是给team分享微服务的时候写的一个springcloud的集成demo，帮助学习各个组件使用的，当然啦，也是基于SpringBoot 2.X的。总得来说，对自己今年的执行力还算满意。</p>\n<h3 id=\"博客方面\"><a href=\"#博客方面\" class=\"headerlink\" title=\"博客方面\"></a>博客方面</h3><p>emmm… 这是今年最大的痛，今年更新的博文频率比较低，不找理由，就是自己太懒。</p>\n<h2 id=\"展望19\"><a href=\"#展望19\" class=\"headerlink\" title=\"展望19\"></a>展望19</h2><ol>\n<li>希望父母头发可以白的慢一点，希望自己和她可以相处的更好，希望父母可以更好的接纳她，希望自己可以成为精致的猪猪男孩，希望来一次旅游。</li>\n<li>希望19年博客可以每月保底3篇。</li>\n<li>希望19年可以每天都在github留下足迹，不管有没有人star自己的项目，但是我想对已经star的小伙伴和我自己的代码负责到底，这是我的态度。</li>\n<li>希望自己可以有些存款，17、18年底都是口袋空空，希望19的年底可以不空了。</li>\n<li>希望自己仍然可以保持对代码的热爱，对技术执着，我一直相信自己的能力，我一直在等待一个合适的机会。</li>\n</ol>"},{"title":"修改 git 提交的时间","comments":1,"fancybox":false,"toc":false,"date":"2019-01-21T09:10:03.000Z","description":null,"top":null,"_content":"有时候我们需要修改 `git commit` 时间，可以通过下面的方法解决。\n\n修改当前本地提交的commit时间\n\n```bash\ngit commit --amend --date=\"2019-01-01T00:00:00+0800\" -am \":memo: 更新 TODO.md\"\n```\n\n修改之前提交的某次commit时间，首先通过 `git log` 获取提交的唯一id，然后\n\n```bash\ngit commit --amend --date=\"2019-01-01T00:00:00+0800\" -C edd2dbbe31fbab492f337628011119493a12a9c6\n```\n\n对于之前已经提交到远程仓库的，需要再 `git push` 一次，即可推送到远程仓库","source":"_posts/2019-01-21.modify-git-commit-timestamp.md","raw":"---\ntitle: 修改 git 提交的时间\ncomments: true\nfancybox: false\ntoc: false\ndate: 2019-01-21 17:10:03\ntags:\n- git\ncategories:\n- 技术相关\n- git\ndescription:\npermalink: modify-git-commit-timestamp\ntop:\n---\n有时候我们需要修改 `git commit` 时间，可以通过下面的方法解决。\n\n修改当前本地提交的commit时间\n\n```bash\ngit commit --amend --date=\"2019-01-01T00:00:00+0800\" -am \":memo: 更新 TODO.md\"\n```\n\n修改之前提交的某次commit时间，首先通过 `git log` 获取提交的唯一id，然后\n\n```bash\ngit commit --amend --date=\"2019-01-01T00:00:00+0800\" -C edd2dbbe31fbab492f337628011119493a12a9c6\n```\n\n对于之前已经提交到远程仓库的，需要再 `git push` 一次，即可推送到远程仓库","slug":"modify-git-commit-timestamp","published":1,"updated":"2019-01-21T09:25:02.646Z","_id":"cjr64il7a002mkds6r5rut60h","layout":"post","photos":[],"link":"","content":"<p>有时候我们需要修改 <code>git commit</code> 时间，可以通过下面的方法解决。</p>\n<p>修改当前本地提交的commit时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend --date=<span class=\"string\">\"2019-01-01T00:00:00+0800\"</span> -am <span class=\"string\">\":memo: 更新 TODO.md\"</span></div></pre></td></tr></table></figure>\n<p>修改之前提交的某次commit时间，首先通过 <code>git log</code> 获取提交的唯一id，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend --date=<span class=\"string\">\"2019-01-01T00:00:00+0800\"</span> -C edd2dbbe31fbab492f337628011119493a12a9c6</div></pre></td></tr></table></figure>\n<p>对于之前已经提交到远程仓库的，需要再 <code>git push</code> 一次，即可推送到远程仓库</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候我们需要修改 <code>git commit</code> 时间，可以通过下面的方法解决。</p>\n<p>修改当前本地提交的commit时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend --date=<span class=\"string\">\"2019-01-01T00:00:00+0800\"</span> -am <span class=\"string\">\":memo: 更新 TODO.md\"</span></div></pre></td></tr></table></figure>\n<p>修改之前提交的某次commit时间，首先通过 <code>git log</code> 获取提交的唯一id，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend --date=<span class=\"string\">\"2019-01-01T00:00:00+0800\"</span> -C edd2dbbe31fbab492f337628011119493a12a9c6</div></pre></td></tr></table></figure>\n<p>对于之前已经提交到远程仓库的，需要再 <code>git push</code> 一次，即可推送到远程仓库</p>\n"},{"title":"Spring Boot 全局异常处理","comments":1,"fancybox":false,"toc":false,"date":"2018-08-20T01:39:36.000Z","description":null,"top":null,"_content":"我们在做 `Web` 应用的时候，请求处理过程中发生错误异常是一个非常常见的情况，但是异常的处理方式和放回的异常内容并没有做一个统一的处理。在现在这种前后端分离的时代，不论响应成功还是失败的数据格式都需要保持一致。\n\n<!--more-->\n\n## 返回格式统一封装\n\n**Api.java**\n\n```java\npackage com.xkcoding.scaffold.common;\n\nimport com.xkcoding.scaffold.common.status.Status;\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * <p>\n * API 统一返回格式封装\n * </p>\n *\n * @package: com.xkcoding.scaffold.common\n * @description： API 统一返回格式封装\n * @author: yangkai.shen\n * @date: Created in 2018/8/2 下午6:15\n * @copyright: Copyright (c) 2018\n * @version: V1.0\n * @modified: yangkai.shen\n */\n@Data\npublic class Api implements Serializable {\n\n\tprivate static final long serialVersionUID = 1672493411204459264L;\n\n\t/**\n\t * 返回码\n\t */\n\tprivate Integer code;\n\n\t/**\n\t * 返回信息\n\t */\n\tprivate String msg;\n\n\t/**\n\t * 返回数据\n\t */\n\tprivate Object data;\n\n\t/**\n\t * 默认构造\n\t */\n\tpublic Api() {\n\t\tthis.code = Status.SUCCESS.getCode();\n\t\tthis.msg = Status.SUCCESS.getMsg();\n\t}\n\n\t/**\n\t * 构造 API 返回对象\n\t *\n\t * @param code 返回码\n\t * @param msg  返回信息\n\t * @param data 数据\n\t */\n\tpublic Api(Integer code, String msg, Object data) {\n\t\tthis.code = code;\n\t\tthis.msg = msg;\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * 通用构造包含返回信息的 Api <br>\n\t * 主要用于只包含返回信息，不包含数据时的返回\n\t *\n\t * @param code 状态码\n\t * @param msg  信息\n\t * @return Api\n\t */\n\tpublic static Api of(int code, String msg, Object data) {\n\t\treturn new Api(code, msg, data);\n\t}\n\n\t/**\n\t * 通用构造包含返回信息的 Api <br>\n\t * 主要用于只包含返回信息，不包含数据时的返回\n\t *\n\t * @param code 状态码\n\t * @param msg  信息\n\t * @return Api\n\t */\n\tpublic static Api ofMessage(int code, String msg) {\n\t\treturn new Api(code, msg, null);\n\t}\n\n\t/**\n\t * 通用构造包含返回信息的 Api <br>\n\t * 主要用于只包含返回信息，不包含数据时的返回\n\t *\n\t * @param msg 信息\n\t * @return Api\n\t */\n\tpublic static Api ofMessage(String msg) {\n\t\treturn new Api(Status.SUCCESS.getCode(), msg, null);\n\t}\n\n\t/**\n\t * 通用构造包含返回数据的 Api <br>\n\t * 主要用于操作成功时的返回(不带数据)\n\t *\n\t * @return Api\n\t */\n\tpublic static Api ofSuccess() {\n\t\treturn new Api(Status.SUCCESS.getCode(), Status.SUCCESS.getMsg(), null);\n\t}\n\n\t/**\n\t * 通用构造包含返回数据的 Api <br>\n\t * 主要用于操作成功时的返回\n\t *\n\t * @param data 操作成功时需要返回的数据\n\t * @return Api\n\t */\n\tpublic static Api ofSuccess(Object data) {\n\t\treturn new Api(Status.SUCCESS.getCode(), Status.SUCCESS.getMsg(), data);\n\t}\n\n\t/**\n\t * 通过 Status 构造 Api <br>\n\t * 主要用于出现异常时的返回\n\t *\n\t * @param status {@link Status}\n\t * @return Api\n\t */\n\tpublic static Api ofStatus(Status status) {\n\t\treturn new Api(status.getCode(), status.getMsg(), null);\n\t}\n\n}\n```\n\n## 通用状态统一封装\n\n**Status.java**\n\n```java\npackage com.xkcoding.scaffold.common.status;\n\nimport com.xkcoding.scaffold.common.BaseEnum;\nimport lombok.Getter;\n\n/**\n * <p>\n * 状态码枚举\n * </p>\n *\n * @package: com.xkcoding.scaffold.common\n * @description： 状态码枚举\n * @author: yangkai.shen\n * @date: Created in 2018/8/2 下午7:49\n * @copyright: Copyright (c) 2018\n * @version: V1.0\n * @modified: yangkai.shen\n */\n@Getter\npublic enum Status implements BaseEnum {\n\t/**\n\t * 成功\n\t */\n\tSUCCESS(200, \"成功\"),\n\n\t/**\n\t * 请求错误\n\t */\n\tBAD_REQUEST(400, \"请求错误\"),\n\n\t/**\n\t * 尚未登录\n\t */\n\tUNAUTHORIZED(401, \"尚未登录\"),\n\n\t/**\n\t * 权限不够\n\t */\n\tFORBIDDEN(403, \"权限不够\"),\n\n\t/**\n\t * 请求不存在\n\t */\n\tREQUEST_NOT_FOUND(404, \"请求不存在\"),\n\n\t/**\n\t * 服务器内部错误\n\t */\n\tINTERNAL_SERVER_ERROR(500, \"服务器内部错误\"),\n\n\t/**\n\t * 用户名或密码错误\n\t */\n\tUSERNAME_OR_PASSWORD_ERROR(50000, \"用户名或密码错误\"),\n\n\t/**\n\t * 用户不存在\n\t */\n\tUSER_NOT_EXIST(50001, \"账号不存在\"),\n\n\t/**\n\t * 用户已被禁用\n\t */\n\tUSER_DISABLE(50002, \"账号已被禁用\"),\n\n\t/**\n\t * 账号已删除\n\t */\n\tUSER_DELETED(50003, \"账号已删除\"),\n\n\t/**\n\t * 验证码错误\n\t */\n\tVERIFY_CODE_ERROR(50004, \"验证码错误\"),\n\n\t/**\n\t * 登录成功\n\t */\n\tLOGIN_SUCCESS(50005, \"登录成功\"),\n\n\t/**\n\t * 退出成功\n\t */\n\tLOGOUT_SUCCESS(50006, \"退出成功\"),\n\n\t/**\n\t * 验证码异常\n\t */\n\tCODE_ERROR(50007, \"验证码异常\"),\n\n\t/**\n\t * 获取验证码的值失败\n\t */\n\tCODE_GET_ERROR(50008, \"获取验证码的值失败\"),\n\n\t/**\n\t * 验证码的值不能为空\n\t */\n\tCODE_VALUE_NOT_NULL(50009, \"验证码的值不能为空\"),\n\n\t/**\n\t * 验证码不存在\n\t */\n\tCODE_NOT_FOUND(50010, \"验证码不存在\"),\n\n\t/**\n\t * 验证码已过期\n\t */\n\tCODE_IS_EXPIRED(50011, \"验证码已过期\"),\n\n\t/**\n\t * 验证码不匹配\n\t */\n\tCODE_NOT_MATCH(50012, \"验证码不匹配\"),\n\n\t/**\n\t * 验证码发送异常\n\t */\n\tCODE_SEND_ERROR(50012, \"验证码发送异常\");\n\n\tprivate Integer code;\n\tprivate String msg;\n\n\tStatus(Integer code, String msg) {\n\t\tthis.code = code;\n\t\tthis.msg = msg;\n\t}\n}\n```\n\n## 自定义业务异常类\n\n**ScaffoldException.java**\n\n```java\npackage com.xkcoding.scaffold.exception;\n\nimport com.xkcoding.scaffold.common.status.Status;\nimport lombok.Getter;\n\n/**\n * <p>\n * 通用全局异常\n * </p>\n *\n * @package: com.xkcoding.scaffold.exception\n * @description： 通用全局异常\n * @author: yangkai.shen\n * @date: Created in 2018/8/2 下午7:59\n * @copyright: Copyright (c) 2018\n * @version: V1.0\n * @modified: yangkai.shen\n */\n@Getter\npublic class ScaffoldException extends Exception {\n\t/**\n\t * 异常码\n\t */\n\tprivate Integer code;\n\n\t/**\n\t * 返回信息\n\t */\n\tprivate String msg;\n\n\t/**\n\t * 返回内容\n\t */\n\tprivate Object data;\n\n\tpublic ScaffoldException(Integer code, String msg) {\n\t\tsuper(msg);\n\t\tthis.code = code;\n\t\tthis.msg = msg;\n\t}\n\n\tpublic ScaffoldException(Integer code, String msg, Object data) {\n\t\tsuper(msg);\n\t\tthis.code = code;\n\t\tthis.msg = msg;\n\t\tthis.data = data;\n\t}\n\n\tpublic ScaffoldException(Status status) {\n\t\tsuper(status.getMsg());\n\t\tthis.code = status.getCode();\n\t\tthis.msg = status.getMsg();\n\t}\n\n\tpublic ScaffoldException(Status status, Object data) {\n\t\tsuper(status.getMsg());\n\t\tthis.code = status.getCode();\n\t\tthis.msg = status.getMsg();\n\t\tthis.data = data;\n\t}\n}\n```\n\n## 配置 Spring Boot\n\n配置 **application.yml** 主要是为了对404错误作处理\n\n```yaml\nspring:\n  ### 开启404异常抛出 ###\n  mvc:\n    throw-exception-if-no-handler-found: true\n  ### 关闭静态资源映射 ###\n  resources:\n    add-mappings: false\n```\n\n## 统一异常处理\n\n**GlobalExceptionHandler.java**\n\n```java\npackage com.xkcoding.scaffold.handler;\n\nimport com.xkcoding.scaffold.common.Api;\nimport com.xkcoding.scaffold.common.status.Status;\nimport com.xkcoding.scaffold.exception.ScaffoldException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.NoHandlerFoundException;\n\n/**\n * <p>\n * 全局异常处理\n * </p>\n *\n * @package: com.xkcoding.scaffold.handler\n * @description： 全局异常处理\n * @author: yangkai.shen\n * @date: Created in 2018/8/2 下午8:05\n * @copyright: Copyright (c) 2018\n * @version: V1.0\n * @modified: yangkai.shen\n */\n@Slf4j\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n\t@ExceptionHandler(value = Exception.class)\n\t@ResponseBody\n\tpublic Api handlerException(Exception e) {\n\t\tif (e instanceof NoHandlerFoundException) {\n\t\t\tlog.error(\"【全局异常拦截】NoHandlerFoundException: 请求方法 {}, 请求路径 {}\", ((NoHandlerFoundException) e).getRequestURL(), ((NoHandlerFoundException) e).getHttpMethod());\n\t\t\treturn Api.ofStatus(Status.REQUEST_NOT_FOUND);\n\t\t} else if (e instanceof ScaffoldException) {\n\t\t\tlog.error(\"【全局异常拦截】ScaffoldException: 状态码 {}, 异常信息 {}\", ((ScaffoldException) e).getCode(), e.getMessage());\n\t\t\treturn new Api(((ScaffoldException) e).getCode(), e.getMessage(), ((ScaffoldException) e).getData());\n\t\t} else if (e instanceof AccessDeniedException) {\n\t\t\tlog.error(\"【全局异常拦截】AccessDeniedException: 异常信息 {}\", e.getMessage());\n\t\t\treturn Api.ofStatus(Status.FORBIDDEN);\n\t\t}\n\n\t\tlog.error(\"【全局异常拦截】: 异常信息 {} \", e.getMessage());\n\t\treturn Api.ofStatus(Status.INTERNAL_SERVER_ERROR);\n\t}\n}\n```\n\n## Tip\n\n异常处理的时候，务必在全局异常处理类中，**打印异常日志**，**打印异常日志**，**打印异常日志**！\n\n相关代码地址：https://github.com/xkcoding/scaffold","source":"_posts/2018-08-20.spring-boot-global-exception-handler.md","raw":"---\ntitle: Spring Boot 全局异常处理\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-08-20 09:39:36\ntags: \n- spring boot\ncategories:\n- 技术相关\n- spring boot\ndescription:\npermalink: spring-boot-global-exception-handler\ntop:\n---\n我们在做 `Web` 应用的时候，请求处理过程中发生错误异常是一个非常常见的情况，但是异常的处理方式和放回的异常内容并没有做一个统一的处理。在现在这种前后端分离的时代，不论响应成功还是失败的数据格式都需要保持一致。\n\n<!--more-->\n\n## 返回格式统一封装\n\n**Api.java**\n\n```java\npackage com.xkcoding.scaffold.common;\n\nimport com.xkcoding.scaffold.common.status.Status;\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n/**\n * <p>\n * API 统一返回格式封装\n * </p>\n *\n * @package: com.xkcoding.scaffold.common\n * @description： API 统一返回格式封装\n * @author: yangkai.shen\n * @date: Created in 2018/8/2 下午6:15\n * @copyright: Copyright (c) 2018\n * @version: V1.0\n * @modified: yangkai.shen\n */\n@Data\npublic class Api implements Serializable {\n\n\tprivate static final long serialVersionUID = 1672493411204459264L;\n\n\t/**\n\t * 返回码\n\t */\n\tprivate Integer code;\n\n\t/**\n\t * 返回信息\n\t */\n\tprivate String msg;\n\n\t/**\n\t * 返回数据\n\t */\n\tprivate Object data;\n\n\t/**\n\t * 默认构造\n\t */\n\tpublic Api() {\n\t\tthis.code = Status.SUCCESS.getCode();\n\t\tthis.msg = Status.SUCCESS.getMsg();\n\t}\n\n\t/**\n\t * 构造 API 返回对象\n\t *\n\t * @param code 返回码\n\t * @param msg  返回信息\n\t * @param data 数据\n\t */\n\tpublic Api(Integer code, String msg, Object data) {\n\t\tthis.code = code;\n\t\tthis.msg = msg;\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * 通用构造包含返回信息的 Api <br>\n\t * 主要用于只包含返回信息，不包含数据时的返回\n\t *\n\t * @param code 状态码\n\t * @param msg  信息\n\t * @return Api\n\t */\n\tpublic static Api of(int code, String msg, Object data) {\n\t\treturn new Api(code, msg, data);\n\t}\n\n\t/**\n\t * 通用构造包含返回信息的 Api <br>\n\t * 主要用于只包含返回信息，不包含数据时的返回\n\t *\n\t * @param code 状态码\n\t * @param msg  信息\n\t * @return Api\n\t */\n\tpublic static Api ofMessage(int code, String msg) {\n\t\treturn new Api(code, msg, null);\n\t}\n\n\t/**\n\t * 通用构造包含返回信息的 Api <br>\n\t * 主要用于只包含返回信息，不包含数据时的返回\n\t *\n\t * @param msg 信息\n\t * @return Api\n\t */\n\tpublic static Api ofMessage(String msg) {\n\t\treturn new Api(Status.SUCCESS.getCode(), msg, null);\n\t}\n\n\t/**\n\t * 通用构造包含返回数据的 Api <br>\n\t * 主要用于操作成功时的返回(不带数据)\n\t *\n\t * @return Api\n\t */\n\tpublic static Api ofSuccess() {\n\t\treturn new Api(Status.SUCCESS.getCode(), Status.SUCCESS.getMsg(), null);\n\t}\n\n\t/**\n\t * 通用构造包含返回数据的 Api <br>\n\t * 主要用于操作成功时的返回\n\t *\n\t * @param data 操作成功时需要返回的数据\n\t * @return Api\n\t */\n\tpublic static Api ofSuccess(Object data) {\n\t\treturn new Api(Status.SUCCESS.getCode(), Status.SUCCESS.getMsg(), data);\n\t}\n\n\t/**\n\t * 通过 Status 构造 Api <br>\n\t * 主要用于出现异常时的返回\n\t *\n\t * @param status {@link Status}\n\t * @return Api\n\t */\n\tpublic static Api ofStatus(Status status) {\n\t\treturn new Api(status.getCode(), status.getMsg(), null);\n\t}\n\n}\n```\n\n## 通用状态统一封装\n\n**Status.java**\n\n```java\npackage com.xkcoding.scaffold.common.status;\n\nimport com.xkcoding.scaffold.common.BaseEnum;\nimport lombok.Getter;\n\n/**\n * <p>\n * 状态码枚举\n * </p>\n *\n * @package: com.xkcoding.scaffold.common\n * @description： 状态码枚举\n * @author: yangkai.shen\n * @date: Created in 2018/8/2 下午7:49\n * @copyright: Copyright (c) 2018\n * @version: V1.0\n * @modified: yangkai.shen\n */\n@Getter\npublic enum Status implements BaseEnum {\n\t/**\n\t * 成功\n\t */\n\tSUCCESS(200, \"成功\"),\n\n\t/**\n\t * 请求错误\n\t */\n\tBAD_REQUEST(400, \"请求错误\"),\n\n\t/**\n\t * 尚未登录\n\t */\n\tUNAUTHORIZED(401, \"尚未登录\"),\n\n\t/**\n\t * 权限不够\n\t */\n\tFORBIDDEN(403, \"权限不够\"),\n\n\t/**\n\t * 请求不存在\n\t */\n\tREQUEST_NOT_FOUND(404, \"请求不存在\"),\n\n\t/**\n\t * 服务器内部错误\n\t */\n\tINTERNAL_SERVER_ERROR(500, \"服务器内部错误\"),\n\n\t/**\n\t * 用户名或密码错误\n\t */\n\tUSERNAME_OR_PASSWORD_ERROR(50000, \"用户名或密码错误\"),\n\n\t/**\n\t * 用户不存在\n\t */\n\tUSER_NOT_EXIST(50001, \"账号不存在\"),\n\n\t/**\n\t * 用户已被禁用\n\t */\n\tUSER_DISABLE(50002, \"账号已被禁用\"),\n\n\t/**\n\t * 账号已删除\n\t */\n\tUSER_DELETED(50003, \"账号已删除\"),\n\n\t/**\n\t * 验证码错误\n\t */\n\tVERIFY_CODE_ERROR(50004, \"验证码错误\"),\n\n\t/**\n\t * 登录成功\n\t */\n\tLOGIN_SUCCESS(50005, \"登录成功\"),\n\n\t/**\n\t * 退出成功\n\t */\n\tLOGOUT_SUCCESS(50006, \"退出成功\"),\n\n\t/**\n\t * 验证码异常\n\t */\n\tCODE_ERROR(50007, \"验证码异常\"),\n\n\t/**\n\t * 获取验证码的值失败\n\t */\n\tCODE_GET_ERROR(50008, \"获取验证码的值失败\"),\n\n\t/**\n\t * 验证码的值不能为空\n\t */\n\tCODE_VALUE_NOT_NULL(50009, \"验证码的值不能为空\"),\n\n\t/**\n\t * 验证码不存在\n\t */\n\tCODE_NOT_FOUND(50010, \"验证码不存在\"),\n\n\t/**\n\t * 验证码已过期\n\t */\n\tCODE_IS_EXPIRED(50011, \"验证码已过期\"),\n\n\t/**\n\t * 验证码不匹配\n\t */\n\tCODE_NOT_MATCH(50012, \"验证码不匹配\"),\n\n\t/**\n\t * 验证码发送异常\n\t */\n\tCODE_SEND_ERROR(50012, \"验证码发送异常\");\n\n\tprivate Integer code;\n\tprivate String msg;\n\n\tStatus(Integer code, String msg) {\n\t\tthis.code = code;\n\t\tthis.msg = msg;\n\t}\n}\n```\n\n## 自定义业务异常类\n\n**ScaffoldException.java**\n\n```java\npackage com.xkcoding.scaffold.exception;\n\nimport com.xkcoding.scaffold.common.status.Status;\nimport lombok.Getter;\n\n/**\n * <p>\n * 通用全局异常\n * </p>\n *\n * @package: com.xkcoding.scaffold.exception\n * @description： 通用全局异常\n * @author: yangkai.shen\n * @date: Created in 2018/8/2 下午7:59\n * @copyright: Copyright (c) 2018\n * @version: V1.0\n * @modified: yangkai.shen\n */\n@Getter\npublic class ScaffoldException extends Exception {\n\t/**\n\t * 异常码\n\t */\n\tprivate Integer code;\n\n\t/**\n\t * 返回信息\n\t */\n\tprivate String msg;\n\n\t/**\n\t * 返回内容\n\t */\n\tprivate Object data;\n\n\tpublic ScaffoldException(Integer code, String msg) {\n\t\tsuper(msg);\n\t\tthis.code = code;\n\t\tthis.msg = msg;\n\t}\n\n\tpublic ScaffoldException(Integer code, String msg, Object data) {\n\t\tsuper(msg);\n\t\tthis.code = code;\n\t\tthis.msg = msg;\n\t\tthis.data = data;\n\t}\n\n\tpublic ScaffoldException(Status status) {\n\t\tsuper(status.getMsg());\n\t\tthis.code = status.getCode();\n\t\tthis.msg = status.getMsg();\n\t}\n\n\tpublic ScaffoldException(Status status, Object data) {\n\t\tsuper(status.getMsg());\n\t\tthis.code = status.getCode();\n\t\tthis.msg = status.getMsg();\n\t\tthis.data = data;\n\t}\n}\n```\n\n## 配置 Spring Boot\n\n配置 **application.yml** 主要是为了对404错误作处理\n\n```yaml\nspring:\n  ### 开启404异常抛出 ###\n  mvc:\n    throw-exception-if-no-handler-found: true\n  ### 关闭静态资源映射 ###\n  resources:\n    add-mappings: false\n```\n\n## 统一异常处理\n\n**GlobalExceptionHandler.java**\n\n```java\npackage com.xkcoding.scaffold.handler;\n\nimport com.xkcoding.scaffold.common.Api;\nimport com.xkcoding.scaffold.common.status.Status;\nimport com.xkcoding.scaffold.exception.ScaffoldException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.NoHandlerFoundException;\n\n/**\n * <p>\n * 全局异常处理\n * </p>\n *\n * @package: com.xkcoding.scaffold.handler\n * @description： 全局异常处理\n * @author: yangkai.shen\n * @date: Created in 2018/8/2 下午8:05\n * @copyright: Copyright (c) 2018\n * @version: V1.0\n * @modified: yangkai.shen\n */\n@Slf4j\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n\t@ExceptionHandler(value = Exception.class)\n\t@ResponseBody\n\tpublic Api handlerException(Exception e) {\n\t\tif (e instanceof NoHandlerFoundException) {\n\t\t\tlog.error(\"【全局异常拦截】NoHandlerFoundException: 请求方法 {}, 请求路径 {}\", ((NoHandlerFoundException) e).getRequestURL(), ((NoHandlerFoundException) e).getHttpMethod());\n\t\t\treturn Api.ofStatus(Status.REQUEST_NOT_FOUND);\n\t\t} else if (e instanceof ScaffoldException) {\n\t\t\tlog.error(\"【全局异常拦截】ScaffoldException: 状态码 {}, 异常信息 {}\", ((ScaffoldException) e).getCode(), e.getMessage());\n\t\t\treturn new Api(((ScaffoldException) e).getCode(), e.getMessage(), ((ScaffoldException) e).getData());\n\t\t} else if (e instanceof AccessDeniedException) {\n\t\t\tlog.error(\"【全局异常拦截】AccessDeniedException: 异常信息 {}\", e.getMessage());\n\t\t\treturn Api.ofStatus(Status.FORBIDDEN);\n\t\t}\n\n\t\tlog.error(\"【全局异常拦截】: 异常信息 {} \", e.getMessage());\n\t\treturn Api.ofStatus(Status.INTERNAL_SERVER_ERROR);\n\t}\n}\n```\n\n## Tip\n\n异常处理的时候，务必在全局异常处理类中，**打印异常日志**，**打印异常日志**，**打印异常日志**！\n\n相关代码地址：https://github.com/xkcoding/scaffold","slug":"spring-boot-global-exception-handler","published":1,"updated":"2018-08-21T09:34:50.922Z","layout":"post","photos":[],"link":"","_id":"cjr64il7b002pkds6yb5q9rvc","content":"<p>我们在做 <code>Web</code> 应用的时候，请求处理过程中发生错误异常是一个非常常见的情况，但是异常的处理方式和放回的异常内容并没有做一个统一的处理。在现在这种前后端分离的时代，不论响应成功还是失败的数据格式都需要保持一致。</p>\n<a id=\"more\"></a>\n<h2 id=\"返回格式统一封装\"><a href=\"#返回格式统一封装\" class=\"headerlink\" title=\"返回格式统一封装\"></a>返回格式统一封装</h2><p><strong>Api.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.scaffold.common;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.status.Status;</div><div class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * API 统一返回格式封装</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.scaffold.common</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： API 统一返回格式封装</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/8/2 下午6:15</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: V1.0</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Data</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Api</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1672493411204459264L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回码</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer code;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回信息</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> String msg;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回数据</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> Object data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 默认构造</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Api</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = Status.SUCCESS.getCode();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = Status.SUCCESS.getMsg();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 构造 API 返回对象</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> code 返回码</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> msg  返回信息</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> data 数据</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Api</span><span class=\"params\">(Integer code, String msg, Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回信息的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于只包含返回信息，不包含数据时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> code 状态码</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> msg  信息</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">of</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg, Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(code, msg, data);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回信息的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于只包含返回信息，不包含数据时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> code 状态码</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> msg  信息</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(code, msg, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回信息的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于只包含返回信息，不包含数据时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> msg 信息</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofMessage</span><span class=\"params\">(String msg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(Status.SUCCESS.getCode(), msg, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回数据的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于操作成功时的返回(不带数据)</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(Status.SUCCESS.getCode(), Status.SUCCESS.getMsg(), <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回数据的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于操作成功时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> data 操作成功时需要返回的数据</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofSuccess</span><span class=\"params\">(Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(Status.SUCCESS.getCode(), Status.SUCCESS.getMsg(), data);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通过 Status 构造 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于出现异常时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> status &#123;<span class=\"doctag\">@link</span> Status&#125;</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofStatus</span><span class=\"params\">(Status status)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(status.getCode(), status.getMsg(), <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"通用状态统一封装\"><a href=\"#通用状态统一封装\" class=\"headerlink\" title=\"通用状态统一封装\"></a>通用状态统一封装</h2><p><strong>Status.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.scaffold.common.status;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.BaseEnum;</div><div class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 状态码枚举</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.scaffold.common</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： 状态码枚举</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/8/2 下午7:49</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: V1.0</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Getter</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Status implements BaseEnum &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 成功</div><div class=\"line\">\t */</div><div class=\"line\">\tSUCCESS(<span class=\"number\">200</span>, <span class=\"string\">\"成功\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 请求错误</div><div class=\"line\">\t */</div><div class=\"line\">\tBAD_REQUEST(<span class=\"number\">400</span>, <span class=\"string\">\"请求错误\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 尚未登录</div><div class=\"line\">\t */</div><div class=\"line\">\tUNAUTHORIZED(<span class=\"number\">401</span>, <span class=\"string\">\"尚未登录\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 权限不够</div><div class=\"line\">\t */</div><div class=\"line\">\tFORBIDDEN(<span class=\"number\">403</span>, <span class=\"string\">\"权限不够\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 请求不存在</div><div class=\"line\">\t */</div><div class=\"line\">\tREQUEST_NOT_FOUND(<span class=\"number\">404</span>, <span class=\"string\">\"请求不存在\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 服务器内部错误</div><div class=\"line\">\t */</div><div class=\"line\">\tINTERNAL_SERVER_ERROR(<span class=\"number\">500</span>, <span class=\"string\">\"服务器内部错误\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 用户名或密码错误</div><div class=\"line\">\t */</div><div class=\"line\">\tUSERNAME_OR_PASSWORD_ERROR(<span class=\"number\">50000</span>, <span class=\"string\">\"用户名或密码错误\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 用户不存在</div><div class=\"line\">\t */</div><div class=\"line\">\tUSER_NOT_EXIST(<span class=\"number\">50001</span>, <span class=\"string\">\"账号不存在\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 用户已被禁用</div><div class=\"line\">\t */</div><div class=\"line\">\tUSER_DISABLE(<span class=\"number\">50002</span>, <span class=\"string\">\"账号已被禁用\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 账号已删除</div><div class=\"line\">\t */</div><div class=\"line\">\tUSER_DELETED(<span class=\"number\">50003</span>, <span class=\"string\">\"账号已删除\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码错误</div><div class=\"line\">\t */</div><div class=\"line\">\tVERIFY_CODE_ERROR(<span class=\"number\">50004</span>, <span class=\"string\">\"验证码错误\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 登录成功</div><div class=\"line\">\t */</div><div class=\"line\">\tLOGIN_SUCCESS(<span class=\"number\">50005</span>, <span class=\"string\">\"登录成功\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 退出成功</div><div class=\"line\">\t */</div><div class=\"line\">\tLOGOUT_SUCCESS(<span class=\"number\">50006</span>, <span class=\"string\">\"退出成功\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码异常</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_ERROR(<span class=\"number\">50007</span>, <span class=\"string\">\"验证码异常\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取验证码的值失败</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_GET_ERROR(<span class=\"number\">50008</span>, <span class=\"string\">\"获取验证码的值失败\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码的值不能为空</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_VALUE_NOT_NULL(<span class=\"number\">50009</span>, <span class=\"string\">\"验证码的值不能为空\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码不存在</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_NOT_FOUND(<span class=\"number\">50010</span>, <span class=\"string\">\"验证码不存在\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码已过期</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_IS_EXPIRED(<span class=\"number\">50011</span>, <span class=\"string\">\"验证码已过期\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码不匹配</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_NOT_MATCH(<span class=\"number\">50012</span>, <span class=\"string\">\"验证码不匹配\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码发送异常</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_SEND_ERROR(<span class=\"number\">50012</span>, <span class=\"string\">\"验证码发送异常\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer code;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String msg;</div><div class=\"line\"></div><div class=\"line\">\tStatus(Integer code, String msg) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义业务异常类\"><a href=\"#自定义业务异常类\" class=\"headerlink\" title=\"自定义业务异常类\"></a>自定义业务异常类</h2><p><strong>ScaffoldException.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.scaffold.exception;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.status.Status;</div><div class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 通用全局异常</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.scaffold.exception</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： 通用全局异常</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/8/2 下午7:59</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: V1.0</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Getter</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScaffoldException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 异常码</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer code;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回信息</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> String msg;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回内容</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> Object data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaffoldException</span><span class=\"params\">(Integer code, String msg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(msg);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaffoldException</span><span class=\"params\">(Integer code, String msg, Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(msg);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaffoldException</span><span class=\"params\">(Status status)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(status.getMsg());</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = status.getCode();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = status.getMsg();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaffoldException</span><span class=\"params\">(Status status, Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(status.getMsg());</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = status.getCode();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = status.getMsg();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"配置-Spring-Boot\"><a href=\"#配置-Spring-Boot\" class=\"headerlink\" title=\"配置 Spring Boot\"></a>配置 Spring Boot</h2><p>配置 <strong>application.yml</strong> 主要是为了对404错误作处理</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\">  <span class=\"comment\">### 开启404异常抛出 ###</span></div><div class=\"line\"><span class=\"attr\">  mvc:</span></div><div class=\"line\"><span class=\"attr\">    throw-exception-if-no-handler-found:</span> <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"comment\">### 关闭静态资源映射 ###</span></div><div class=\"line\"><span class=\"attr\">  resources:</span></div><div class=\"line\"><span class=\"attr\">    add-mappings:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"统一异常处理\"><a href=\"#统一异常处理\" class=\"headerlink\" title=\"统一异常处理\"></a>统一异常处理</h2><p><strong>GlobalExceptionHandler.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.scaffold.handler;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.Api;</div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.status.Status;</div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.exception.ScaffoldException;</div><div class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.access.AccessDeniedException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.NoHandlerFoundException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 全局异常处理</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.scaffold.handler</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： 全局异常处理</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/8/2 下午8:05</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: V1.0</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Slf</span>4j</div><div class=\"line\"><span class=\"meta\">@ControllerAdvice</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalExceptionHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@ExceptionHandler</span>(value = Exception.class)</div><div class=\"line\">\t<span class=\"meta\">@ResponseBody</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Api <span class=\"title\">handlerException</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> NoHandlerFoundException) &#123;</div><div class=\"line\">\t\t\tlog.error(<span class=\"string\">\"【全局异常拦截】NoHandlerFoundException: 请求方法 &#123;&#125;, 请求路径 &#123;&#125;\"</span>, ((NoHandlerFoundException) e).getRequestURL(), ((NoHandlerFoundException) e).getHttpMethod());</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> Api.ofStatus(Status.REQUEST_NOT_FOUND);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> ScaffoldException) &#123;</div><div class=\"line\">\t\t\tlog.error(<span class=\"string\">\"【全局异常拦截】ScaffoldException: 状态码 &#123;&#125;, 异常信息 &#123;&#125;\"</span>, ((ScaffoldException) e).getCode(), e.getMessage());</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(((ScaffoldException) e).getCode(), e.getMessage(), ((ScaffoldException) e).getData());</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> AccessDeniedException) &#123;</div><div class=\"line\">\t\t\tlog.error(<span class=\"string\">\"【全局异常拦截】AccessDeniedException: 异常信息 &#123;&#125;\"</span>, e.getMessage());</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> Api.ofStatus(Status.FORBIDDEN);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tlog.error(<span class=\"string\">\"【全局异常拦截】: 异常信息 &#123;&#125; \"</span>, e.getMessage());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> Api.ofStatus(Status.INTERNAL_SERVER_ERROR);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><p>异常处理的时候，务必在全局异常处理类中，<strong>打印异常日志</strong>，<strong>打印异常日志</strong>，<strong>打印异常日志</strong>！</p>\n<p>相关代码地址：<a href=\"https://github.com/xkcoding/scaffold\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/scaffold</a></p>\n","site":{"data":{}},"excerpt":"<p>我们在做 <code>Web</code> 应用的时候，请求处理过程中发生错误异常是一个非常常见的情况，但是异常的处理方式和放回的异常内容并没有做一个统一的处理。在现在这种前后端分离的时代，不论响应成功还是失败的数据格式都需要保持一致。</p>","more":"<h2 id=\"返回格式统一封装\"><a href=\"#返回格式统一封装\" class=\"headerlink\" title=\"返回格式统一封装\"></a>返回格式统一封装</h2><p><strong>Api.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.scaffold.common;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.status.Status;</div><div class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * API 统一返回格式封装</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.scaffold.common</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： API 统一返回格式封装</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/8/2 下午6:15</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: V1.0</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Data</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Api</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1672493411204459264L</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回码</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer code;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回信息</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> String msg;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回数据</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> Object data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 默认构造</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Api</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = Status.SUCCESS.getCode();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = Status.SUCCESS.getMsg();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 构造 API 返回对象</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> code 返回码</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> msg  返回信息</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> data 数据</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Api</span><span class=\"params\">(Integer code, String msg, Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回信息的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于只包含返回信息，不包含数据时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> code 状态码</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> msg  信息</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">of</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg, Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(code, msg, data);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回信息的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于只包含返回信息，不包含数据时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> code 状态码</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> msg  信息</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(code, msg, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回信息的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于只包含返回信息，不包含数据时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> msg 信息</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofMessage</span><span class=\"params\">(String msg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(Status.SUCCESS.getCode(), msg, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回数据的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于操作成功时的返回(不带数据)</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(Status.SUCCESS.getCode(), Status.SUCCESS.getMsg(), <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通用构造包含返回数据的 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于操作成功时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> data 操作成功时需要返回的数据</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofSuccess</span><span class=\"params\">(Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(Status.SUCCESS.getCode(), Status.SUCCESS.getMsg(), data);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 通过 Status 构造 Api &lt;br&gt;</div><div class=\"line\">\t * 主要用于出现异常时的返回</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> status &#123;<span class=\"doctag\">@link</span> Status&#125;</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> Api</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Api <span class=\"title\">ofStatus</span><span class=\"params\">(Status status)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(status.getCode(), status.getMsg(), <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"通用状态统一封装\"><a href=\"#通用状态统一封装\" class=\"headerlink\" title=\"通用状态统一封装\"></a>通用状态统一封装</h2><p><strong>Status.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.scaffold.common.status;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.BaseEnum;</div><div class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 状态码枚举</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.scaffold.common</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： 状态码枚举</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/8/2 下午7:49</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: V1.0</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Getter</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Status implements BaseEnum &#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 成功</div><div class=\"line\">\t */</div><div class=\"line\">\tSUCCESS(<span class=\"number\">200</span>, <span class=\"string\">\"成功\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 请求错误</div><div class=\"line\">\t */</div><div class=\"line\">\tBAD_REQUEST(<span class=\"number\">400</span>, <span class=\"string\">\"请求错误\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 尚未登录</div><div class=\"line\">\t */</div><div class=\"line\">\tUNAUTHORIZED(<span class=\"number\">401</span>, <span class=\"string\">\"尚未登录\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 权限不够</div><div class=\"line\">\t */</div><div class=\"line\">\tFORBIDDEN(<span class=\"number\">403</span>, <span class=\"string\">\"权限不够\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 请求不存在</div><div class=\"line\">\t */</div><div class=\"line\">\tREQUEST_NOT_FOUND(<span class=\"number\">404</span>, <span class=\"string\">\"请求不存在\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 服务器内部错误</div><div class=\"line\">\t */</div><div class=\"line\">\tINTERNAL_SERVER_ERROR(<span class=\"number\">500</span>, <span class=\"string\">\"服务器内部错误\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 用户名或密码错误</div><div class=\"line\">\t */</div><div class=\"line\">\tUSERNAME_OR_PASSWORD_ERROR(<span class=\"number\">50000</span>, <span class=\"string\">\"用户名或密码错误\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 用户不存在</div><div class=\"line\">\t */</div><div class=\"line\">\tUSER_NOT_EXIST(<span class=\"number\">50001</span>, <span class=\"string\">\"账号不存在\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 用户已被禁用</div><div class=\"line\">\t */</div><div class=\"line\">\tUSER_DISABLE(<span class=\"number\">50002</span>, <span class=\"string\">\"账号已被禁用\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 账号已删除</div><div class=\"line\">\t */</div><div class=\"line\">\tUSER_DELETED(<span class=\"number\">50003</span>, <span class=\"string\">\"账号已删除\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码错误</div><div class=\"line\">\t */</div><div class=\"line\">\tVERIFY_CODE_ERROR(<span class=\"number\">50004</span>, <span class=\"string\">\"验证码错误\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 登录成功</div><div class=\"line\">\t */</div><div class=\"line\">\tLOGIN_SUCCESS(<span class=\"number\">50005</span>, <span class=\"string\">\"登录成功\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 退出成功</div><div class=\"line\">\t */</div><div class=\"line\">\tLOGOUT_SUCCESS(<span class=\"number\">50006</span>, <span class=\"string\">\"退出成功\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码异常</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_ERROR(<span class=\"number\">50007</span>, <span class=\"string\">\"验证码异常\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取验证码的值失败</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_GET_ERROR(<span class=\"number\">50008</span>, <span class=\"string\">\"获取验证码的值失败\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码的值不能为空</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_VALUE_NOT_NULL(<span class=\"number\">50009</span>, <span class=\"string\">\"验证码的值不能为空\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码不存在</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_NOT_FOUND(<span class=\"number\">50010</span>, <span class=\"string\">\"验证码不存在\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码已过期</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_IS_EXPIRED(<span class=\"number\">50011</span>, <span class=\"string\">\"验证码已过期\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码不匹配</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_NOT_MATCH(<span class=\"number\">50012</span>, <span class=\"string\">\"验证码不匹配\"</span>),</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 验证码发送异常</div><div class=\"line\">\t */</div><div class=\"line\">\tCODE_SEND_ERROR(<span class=\"number\">50012</span>, <span class=\"string\">\"验证码发送异常\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer code;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String msg;</div><div class=\"line\"></div><div class=\"line\">\tStatus(Integer code, String msg) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义业务异常类\"><a href=\"#自定义业务异常类\" class=\"headerlink\" title=\"自定义业务异常类\"></a>自定义业务异常类</h2><p><strong>ScaffoldException.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.scaffold.exception;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.status.Status;</div><div class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 通用全局异常</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.scaffold.exception</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： 通用全局异常</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/8/2 下午7:59</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: V1.0</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Getter</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScaffoldException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 异常码</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer code;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回信息</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> String msg;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回内容</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> Object data;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaffoldException</span><span class=\"params\">(Integer code, String msg)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(msg);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaffoldException</span><span class=\"params\">(Integer code, String msg, Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(msg);</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = msg;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaffoldException</span><span class=\"params\">(Status status)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(status.getMsg());</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = status.getCode();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = status.getMsg();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaffoldException</span><span class=\"params\">(Status status, Object data)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>(status.getMsg());</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.code = status.getCode();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.msg = status.getMsg();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"配置-Spring-Boot\"><a href=\"#配置-Spring-Boot\" class=\"headerlink\" title=\"配置 Spring Boot\"></a>配置 Spring Boot</h2><p>配置 <strong>application.yml</strong> 主要是为了对404错误作处理</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\">  <span class=\"comment\">### 开启404异常抛出 ###</span></div><div class=\"line\"><span class=\"attr\">  mvc:</span></div><div class=\"line\"><span class=\"attr\">    throw-exception-if-no-handler-found:</span> <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"comment\">### 关闭静态资源映射 ###</span></div><div class=\"line\"><span class=\"attr\">  resources:</span></div><div class=\"line\"><span class=\"attr\">    add-mappings:</span> <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"统一异常处理\"><a href=\"#统一异常处理\" class=\"headerlink\" title=\"统一异常处理\"></a>统一异常处理</h2><p><strong>GlobalExceptionHandler.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.xkcoding.scaffold.handler;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.Api;</div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.common.status.Status;</div><div class=\"line\"><span class=\"keyword\">import</span> com.xkcoding.scaffold.exception.ScaffoldException;</div><div class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.access.AccessDeniedException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.NoHandlerFoundException;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 全局异常处理</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@package</span>: com.xkcoding.scaffold.handler</div><div class=\"line\"> * <span class=\"doctag\">@description</span>： 全局异常处理</div><div class=\"line\"> * <span class=\"doctag\">@author</span>: yangkai.shen</div><div class=\"line\"> * <span class=\"doctag\">@date</span>: Created in 2018/8/2 下午8:05</div><div class=\"line\"> * <span class=\"doctag\">@copyright</span>: Copyright (c) 2018</div><div class=\"line\"> * <span class=\"doctag\">@version</span>: V1.0</div><div class=\"line\"> * <span class=\"doctag\">@modified</span>: yangkai.shen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Slf</span>4j</div><div class=\"line\"><span class=\"meta\">@ControllerAdvice</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalExceptionHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@ExceptionHandler</span>(value = Exception.class)</div><div class=\"line\">\t<span class=\"meta\">@ResponseBody</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Api <span class=\"title\">handlerException</span><span class=\"params\">(Exception e)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> NoHandlerFoundException) &#123;</div><div class=\"line\">\t\t\tlog.error(<span class=\"string\">\"【全局异常拦截】NoHandlerFoundException: 请求方法 &#123;&#125;, 请求路径 &#123;&#125;\"</span>, ((NoHandlerFoundException) e).getRequestURL(), ((NoHandlerFoundException) e).getHttpMethod());</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> Api.ofStatus(Status.REQUEST_NOT_FOUND);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> ScaffoldException) &#123;</div><div class=\"line\">\t\t\tlog.error(<span class=\"string\">\"【全局异常拦截】ScaffoldException: 状态码 &#123;&#125;, 异常信息 &#123;&#125;\"</span>, ((ScaffoldException) e).getCode(), e.getMessage());</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Api(((ScaffoldException) e).getCode(), e.getMessage(), ((ScaffoldException) e).getData());</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> AccessDeniedException) &#123;</div><div class=\"line\">\t\t\tlog.error(<span class=\"string\">\"【全局异常拦截】AccessDeniedException: 异常信息 &#123;&#125;\"</span>, e.getMessage());</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> Api.ofStatus(Status.FORBIDDEN);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tlog.error(<span class=\"string\">\"【全局异常拦截】: 异常信息 &#123;&#125; \"</span>, e.getMessage());</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> Api.ofStatus(Status.INTERNAL_SERVER_ERROR);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><p>异常处理的时候，务必在全局异常处理类中，<strong>打印异常日志</strong>，<strong>打印异常日志</strong>，<strong>打印异常日志</strong>！</p>\n<p>相关代码地址：<a href=\"https://github.com/xkcoding/scaffold\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/scaffold</a></p>"},{"title":"Hello,Spring Boot!","comments":1,"fancybox":false,"toc":false,"date":"2018-11-07T08:09:07.000Z","description":null,"top":null,"_content":"Spring Boot 是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:\n\n![image-20181107161531369](http://static.xkcoding.com/blog/spring-boot-start/image-20181107161531369.png)\n\n官网这个logo下有这么一段介绍：\n\n> Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.\n\n翻译一下：\n\n> 用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。\n\n其实人们把Spring Boot 称为搭建程序的`脚手架`。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。\n\n<!--more-->\n\n# 1.了解 Spring Boot\n\n## 1.1.为什么学习 Spring Boot\n\njava一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：\n\n- 复杂的配置。\n\n  项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。\n\n- 一个是混乱的依赖管理。\n\n  项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。\n\n而SpringBoot让这一切成为过去！\n\n> Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。\n\n我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。\n\n## 1.2.Spring Boot特点\n\nSpring Boot 主要目标是：\n\n- 为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验\n- 开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。\n- 提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等\n- 绝对没有代码生成，也无需 XML 配置。\n\n更多细节，大家可以到[官网](http://projects.spring.io/spring-boot/)查看。\n\n# 2.快速入门\n\n## 2.1.创建工程\n\n1. 在IDEA中选择 `Spring Initializr`\n\n   ![image-20181107162036963](http://static.xkcoding.com/blog/spring-boot-start/image-20181107162036963.png)\n\n2. 配置项目基础信息\n\n   ![image-20181107165003490](http://static.xkcoding.com/blog/spring-boot-start/image-20181107165003490.png)\n\n3. 选择依赖，也可以后续在 pom.xml 里手动添加\n\n   ![image-20181107165311223](http://static.xkcoding.com/blog/spring-boot-start/image-20181107165311223.png)\n\n4. 配置项目路径\n\n   ![image-20181107165400157](http://static.xkcoding.com/blog/spring-boot-start/image-20181107165400157.png)\n\n5. FINISH！\n\n## 2.2.启动类\n\nSpring Boot项目通过main函数即可启动，刚刚创建工程的时候已经自动创建了一个启动类：\n\n ![image-20181107180029076](http://static.xkcoding.com/blog/spring-boot-start/image-20181107180029076.png)\n\n然后查看启动类：\n\n```java\n@SpringBootApplication\npublic class DemoApplication {\n\n   public static void main(String[] args) {\n      SpringApplication.run(DemoApplication.class, args);\n   }\n}\n```\n\n## 2.3.编写Controller\n\n接下来，我们就可以像以前那样开发 SpringMVC 的项目了！\n\n我们编写一个Controller：\n\n ![image-20181107175607530](http://static.xkcoding.com/blog/spring-boot-start/image-20181107175607530.png)\n\n```java\n@RestController\npublic class HelloController {\n\n   @GetMapping(\"/hello\")\n   public String hello() {\n      return \"hello, spring boot!\";\n   }\n}\n```\n\n## 2.4.启动测试\n\n接下来，我们运行main函数，查看控制台：\n\n![image-20181107172813705](http://static.xkcoding.com/blog/spring-boot-start/image-20181107172813705.png)\n\n- ①是Spring MVC的映射路径\n- ②是Tomcat监听的端口是8080\n\n打开页面访问：http://localhost:8080/hello\n\n ![image-20181107175033566](http://static.xkcoding.com/blog/spring-boot-start/image-20181107175033566.png)\n\n测试成功了！","source":"_posts/2018-11-07.spring-boot-start.md","raw":"---\ntitle: Hello,Spring Boot!\ncomments: true\nfancybox: false\ntoc: false\ndate: 2018-11-07 16:09:07\ntags: \n- spring boot\ncategories:\n- 技术相关\n- spring boot\ndescription:\npermalink: spring-boot-start\ntop:\n---\nSpring Boot 是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:\n\n![image-20181107161531369](http://static.xkcoding.com/blog/spring-boot-start/image-20181107161531369.png)\n\n官网这个logo下有这么一段介绍：\n\n> Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.\n\n翻译一下：\n\n> 用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。\n\n其实人们把Spring Boot 称为搭建程序的`脚手架`。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。\n\n<!--more-->\n\n# 1.了解 Spring Boot\n\n## 1.1.为什么学习 Spring Boot\n\njava一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：\n\n- 复杂的配置。\n\n  项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。\n\n- 一个是混乱的依赖管理。\n\n  项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。\n\n而SpringBoot让这一切成为过去！\n\n> Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。\n\n我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。\n\n## 1.2.Spring Boot特点\n\nSpring Boot 主要目标是：\n\n- 为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验\n- 开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。\n- 提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等\n- 绝对没有代码生成，也无需 XML 配置。\n\n更多细节，大家可以到[官网](http://projects.spring.io/spring-boot/)查看。\n\n# 2.快速入门\n\n## 2.1.创建工程\n\n1. 在IDEA中选择 `Spring Initializr`\n\n   ![image-20181107162036963](http://static.xkcoding.com/blog/spring-boot-start/image-20181107162036963.png)\n\n2. 配置项目基础信息\n\n   ![image-20181107165003490](http://static.xkcoding.com/blog/spring-boot-start/image-20181107165003490.png)\n\n3. 选择依赖，也可以后续在 pom.xml 里手动添加\n\n   ![image-20181107165311223](http://static.xkcoding.com/blog/spring-boot-start/image-20181107165311223.png)\n\n4. 配置项目路径\n\n   ![image-20181107165400157](http://static.xkcoding.com/blog/spring-boot-start/image-20181107165400157.png)\n\n5. FINISH！\n\n## 2.2.启动类\n\nSpring Boot项目通过main函数即可启动，刚刚创建工程的时候已经自动创建了一个启动类：\n\n ![image-20181107180029076](http://static.xkcoding.com/blog/spring-boot-start/image-20181107180029076.png)\n\n然后查看启动类：\n\n```java\n@SpringBootApplication\npublic class DemoApplication {\n\n   public static void main(String[] args) {\n      SpringApplication.run(DemoApplication.class, args);\n   }\n}\n```\n\n## 2.3.编写Controller\n\n接下来，我们就可以像以前那样开发 SpringMVC 的项目了！\n\n我们编写一个Controller：\n\n ![image-20181107175607530](http://static.xkcoding.com/blog/spring-boot-start/image-20181107175607530.png)\n\n```java\n@RestController\npublic class HelloController {\n\n   @GetMapping(\"/hello\")\n   public String hello() {\n      return \"hello, spring boot!\";\n   }\n}\n```\n\n## 2.4.启动测试\n\n接下来，我们运行main函数，查看控制台：\n\n![image-20181107172813705](http://static.xkcoding.com/blog/spring-boot-start/image-20181107172813705.png)\n\n- ①是Spring MVC的映射路径\n- ②是Tomcat监听的端口是8080\n\n打开页面访问：http://localhost:8080/hello\n\n ![image-20181107175033566](http://static.xkcoding.com/blog/spring-boot-start/image-20181107175033566.png)\n\n测试成功了！","slug":"spring-boot-start","published":1,"updated":"2018-11-08T02:12:28.061Z","layout":"post","photos":[],"link":"","_id":"cjr64il7d002skds6amh0oqla","content":"<p>Spring Boot 是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107161531369.png\" alt=\"image-20181107161531369\"></p>\n<p>官网这个logo下有这么一段介绍：</p>\n<blockquote>\n<p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p>\n</blockquote>\n<p>翻译一下：</p>\n<blockquote>\n<p>用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p>\n</blockquote>\n<p>其实人们把Spring Boot 称为搭建程序的<code>脚手架</code>。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-了解-Spring-Boot\"><a href=\"#1-了解-Spring-Boot\" class=\"headerlink\" title=\"1.了解 Spring Boot\"></a>1.了解 Spring Boot</h1><h2 id=\"1-1-为什么学习-Spring-Boot\"><a href=\"#1-1-为什么学习-Spring-Boot\" class=\"headerlink\" title=\"1.1.为什么学习 Spring Boot\"></a>1.1.为什么学习 Spring Boot</h2><p>java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：</p>\n<ul>\n<li><p>复杂的配置。</p>\n<p>项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。</p>\n</li>\n<li><p>一个是混乱的依赖管理。</p>\n<p>项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p>\n</li>\n</ul>\n<p>而SpringBoot让这一切成为过去！</p>\n<blockquote>\n<p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p>\n</blockquote>\n<p>我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。</p>\n<h2 id=\"1-2-Spring-Boot特点\"><a href=\"#1-2-Spring-Boot特点\" class=\"headerlink\" title=\"1.2.Spring Boot特点\"></a>1.2.Spring Boot特点</h2><p>Spring Boot 主要目标是：</p>\n<ul>\n<li>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验</li>\n<li>开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。</li>\n<li>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等</li>\n<li>绝对没有代码生成，也无需 XML 配置。</li>\n</ul>\n<p>更多细节，大家可以到<a href=\"http://projects.spring.io/spring-boot/\" target=\"_blank\" rel=\"external\">官网</a>查看。</p>\n<h1 id=\"2-快速入门\"><a href=\"#2-快速入门\" class=\"headerlink\" title=\"2.快速入门\"></a>2.快速入门</h1><h2 id=\"2-1-创建工程\"><a href=\"#2-1-创建工程\" class=\"headerlink\" title=\"2.1.创建工程\"></a>2.1.创建工程</h2><ol>\n<li><p>在IDEA中选择 <code>Spring Initializr</code></p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107162036963.png\" alt=\"image-20181107162036963\"></p>\n</li>\n<li><p>配置项目基础信息</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107165003490.png\" alt=\"image-20181107165003490\"></p>\n</li>\n<li><p>选择依赖，也可以后续在 pom.xml 里手动添加</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107165311223.png\" alt=\"image-20181107165311223\"></p>\n</li>\n<li><p>配置项目路径</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107165400157.png\" alt=\"image-20181107165400157\"></p>\n</li>\n<li><p>FINISH！</p>\n</li>\n</ol>\n<h2 id=\"2-2-启动类\"><a href=\"#2-2-启动类\" class=\"headerlink\" title=\"2.2.启动类\"></a>2.2.启动类</h2><p>Spring Boot项目通过main函数即可启动，刚刚创建工程的时候已经自动创建了一个启动类：</p>\n<p> <img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107180029076.png\" alt=\"image-20181107180029076\"></p>\n<p>然后查看启动类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">      SpringApplication.run(DemoApplication.class, args);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-3-编写Controller\"><a href=\"#2-3-编写Controller\" class=\"headerlink\" title=\"2.3.编写Controller\"></a>2.3.编写Controller</h2><p>接下来，我们就可以像以前那样开发 SpringMVC 的项目了！</p>\n<p>我们编写一个Controller：</p>\n<p> <img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107175607530.png\" alt=\"image-20181107175607530\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"hello, spring boot!\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-4-启动测试\"><a href=\"#2-4-启动测试\" class=\"headerlink\" title=\"2.4.启动测试\"></a>2.4.启动测试</h2><p>接下来，我们运行main函数，查看控制台：</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107172813705.png\" alt=\"image-20181107172813705\"></p>\n<ul>\n<li>①是Spring MVC的映射路径</li>\n<li>②是Tomcat监听的端口是8080</li>\n</ul>\n<p>打开页面访问：<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"external\">http://localhost:8080/hello</a></p>\n<p> <img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107175033566.png\" alt=\"image-20181107175033566\"></p>\n<p>测试成功了！</p>\n","site":{"data":{}},"excerpt":"<p>Spring Boot 是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107161531369.png\" alt=\"image-20181107161531369\"></p>\n<p>官网这个logo下有这么一段介绍：</p>\n<blockquote>\n<p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p>\n</blockquote>\n<p>翻译一下：</p>\n<blockquote>\n<p>用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p>\n</blockquote>\n<p>其实人们把Spring Boot 称为搭建程序的<code>脚手架</code>。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。</p>","more":"<h1 id=\"1-了解-Spring-Boot\"><a href=\"#1-了解-Spring-Boot\" class=\"headerlink\" title=\"1.了解 Spring Boot\"></a>1.了解 Spring Boot</h1><h2 id=\"1-1-为什么学习-Spring-Boot\"><a href=\"#1-1-为什么学习-Spring-Boot\" class=\"headerlink\" title=\"1.1.为什么学习 Spring Boot\"></a>1.1.为什么学习 Spring Boot</h2><p>java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：</p>\n<ul>\n<li><p>复杂的配置。</p>\n<p>项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。</p>\n</li>\n<li><p>一个是混乱的依赖管理。</p>\n<p>项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p>\n</li>\n</ul>\n<p>而SpringBoot让这一切成为过去！</p>\n<blockquote>\n<p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p>\n</blockquote>\n<p>我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。</p>\n<h2 id=\"1-2-Spring-Boot特点\"><a href=\"#1-2-Spring-Boot特点\" class=\"headerlink\" title=\"1.2.Spring Boot特点\"></a>1.2.Spring Boot特点</h2><p>Spring Boot 主要目标是：</p>\n<ul>\n<li>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验</li>\n<li>开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。</li>\n<li>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等</li>\n<li>绝对没有代码生成，也无需 XML 配置。</li>\n</ul>\n<p>更多细节，大家可以到<a href=\"http://projects.spring.io/spring-boot/\" target=\"_blank\" rel=\"external\">官网</a>查看。</p>\n<h1 id=\"2-快速入门\"><a href=\"#2-快速入门\" class=\"headerlink\" title=\"2.快速入门\"></a>2.快速入门</h1><h2 id=\"2-1-创建工程\"><a href=\"#2-1-创建工程\" class=\"headerlink\" title=\"2.1.创建工程\"></a>2.1.创建工程</h2><ol>\n<li><p>在IDEA中选择 <code>Spring Initializr</code></p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107162036963.png\" alt=\"image-20181107162036963\"></p>\n</li>\n<li><p>配置项目基础信息</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107165003490.png\" alt=\"image-20181107165003490\"></p>\n</li>\n<li><p>选择依赖，也可以后续在 pom.xml 里手动添加</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107165311223.png\" alt=\"image-20181107165311223\"></p>\n</li>\n<li><p>配置项目路径</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107165400157.png\" alt=\"image-20181107165400157\"></p>\n</li>\n<li><p>FINISH！</p>\n</li>\n</ol>\n<h2 id=\"2-2-启动类\"><a href=\"#2-2-启动类\" class=\"headerlink\" title=\"2.2.启动类\"></a>2.2.启动类</h2><p>Spring Boot项目通过main函数即可启动，刚刚创建工程的时候已经自动创建了一个启动类：</p>\n<p> <img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107180029076.png\" alt=\"image-20181107180029076\"></p>\n<p>然后查看启动类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">      SpringApplication.run(DemoApplication.class, args);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-3-编写Controller\"><a href=\"#2-3-编写Controller\" class=\"headerlink\" title=\"2.3.编写Controller\"></a>2.3.编写Controller</h2><p>接下来，我们就可以像以前那样开发 SpringMVC 的项目了！</p>\n<p>我们编写一个Controller：</p>\n<p> <img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107175607530.png\" alt=\"image-20181107175607530\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"hello, spring boot!\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-4-启动测试\"><a href=\"#2-4-启动测试\" class=\"headerlink\" title=\"2.4.启动测试\"></a>2.4.启动测试</h2><p>接下来，我们运行main函数，查看控制台：</p>\n<p><img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107172813705.png\" alt=\"image-20181107172813705\"></p>\n<ul>\n<li>①是Spring MVC的映射路径</li>\n<li>②是Tomcat监听的端口是8080</li>\n</ul>\n<p>打开页面访问：<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"external\">http://localhost:8080/hello</a></p>\n<p> <img src=\"http://static.xkcoding.com/blog/spring-boot-start/image-20181107175033566.png\" alt=\"image-20181107175033566\"></p>\n<p>测试成功了！</p>"},{"title":"Java8 学习整理","comments":1,"fancybox":false,"toc":true,"date":"2018-07-30T02:39:07.000Z","description":null,"top":null,"_content":"前言：Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。目前大部分公司都已经在使用 Java 8开发项目。本文是我在公司的一次Java 8分享的文章，开篇先介绍了 **Java 8 的发展**，再分别讲述 **Java 8 的新特性**，同时附上一些 Demo 代码（ https://github.com/xkcoding/java8_learning ），以便更好的入门学习 Java 8，厚脸皮的求个 Star。\n\n<!--more-->\n\n## Java 8 的发展\n\n### JDK 5\n\n**自动装箱与拆箱**\n\nJDK1.5为每一个基本数据类型定义了一个封装类。使java中的基本数据类型也有自己的对象\n\n```bash\nint -->Integer\ndouble --> Double\nlong --> Long\nchar --> Character\nfloat --> Float\nboolean --> Boolean\nshort --> Short\nbyte -- > Byte\n```\n\n- 自动装包：将基本类型转换成为对象，例如：`int --> Integer`\n- 自动拆包：将对象转换成为基本数据类型，例如：`Integer --> int`\n\n对于 JDK1.5 之前集合总不能存放基本数据类型的问题，现在也能够解决。\n\n**枚举**\n\n枚举是 JDK1.5 推出的一个比较重要的特性。其关键字为 `enum`\n例如：定义代表交通灯的枚举\n\n```java\npublic enum MyEnum{\n    RED,GREEN,YELLOW\n}\n```\n\n**静态导入**\n\n- 优点：使用静态导入可以使被导入类的所有静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名。\n- 缺点：过度使用会降低代码的可读性\n\n**可变参数**\n\n在JDK1.5以前，当我们要为一个方法传递多个类型相同的参数时，\n我们有两种方法解决\n\n1. 直接传递一个数组过去\n2. 有多少个参数就传递多少个参数。\n\n例如：\n\n```java\npublic void printColor(String red,String green,String yellow){ \n}\n```\n\n或者\n\n```java\npublic void printColor(String[] colors){\n\n}\n```\n\n这样编写方法参数虽然能够实现我们想要的效果，但是，这样是不是有点麻烦呢？\n再者，如果参数个数不确定，我们怎么办呢？Java JDK1.5为我们提供的可变参数就能够完美的解决这个问题.\n\n例如：\n\n```java\npublic void printColor(String... colors){\n\n}\n```\n\n如果参数的类型相同，那么可以使用 `类型+三个点` ，后面跟一个参数名称的形式。\n这样的好处就是，只要参数类型相同，无论传递几个参数都没有限制\n注意：可变参数必须是参数列表的最后一项（该特性对对象和基本数据类型都适用）\n\n**泛型**\n\n```java\n//给集合指定存入类型，上面这个集合在存入数据的时候必须存入String类型的数据，否则编译器会报错\nList<String> strs = new ArrayList<String>();\n```\n\n“泛型” 意味着编写的代码可以被不同类型的对象所重用。\n可见泛型的提出是为了编写重用性更好的代码。\n泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。\n\n比如常见的集合类 `LinkedList`，其实现的接口名后有个特殊的部分 `<>`，而且它的成员的类型 Link 也包含一个 `<>`，这个符号的就是类型参数，\n它使得在运行中，创建一个 LinkedList 时可以传入不同的类型，比如 `new LinkedList`，这样它的成员存放的类型也是 `String`。\n\n**For-Each循环**\n\n例如上面这个集合我们可以通过for-each遍历，这样更加简单清晰。\n\n```java\nfor(String s : strs){ \n     System.out.println(s); \n}\n```\n\n> 注意：使用for-each遍历集合时，要遍历的集合必须实现了Iterator接口\n\n**线程并发库**\n\n线程并发库是 Java1.5 提出的关于多线程处理的高级功能，所在包：`java.util.concurrent` 包括\n\n1. 线程互斥工具类：`Lock`，`ReadWriteLock`\n2. 线程通信：`Condition`\n3. 线程池：`ExecutorService`\n4. 同步队列：`ArrayBlockingQueue`\n5. 同步集合：`ConcurrentHashMap`，`CopyOnWriteArrayList`\n6. 线程同步工具：`Semaphore`\n\n### JDK 6\n\n**Desktop类和SystemTray类**\n\n前者可以用来打开系统默认浏览器浏览指定的URL，打开系统默认邮件客户端给指定的邮箱发邮件，用默认应用程序打开或编辑文件(比如，用记事本打开以 txt 为后缀名的文件)，用系统默认的打印机打印文档；后者可以用来在系统托盘区创建一个托盘程序。\n\n**使用Compiler API**\n\n现在我们可以用JDK1.6 的Compiler API(JSR 199)去动态编译Java源文件，Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。\n\n这个特性对于某些需要用到动态编译的应用程序相当有用，比如JSP Web Server，当我们手动修改JSP后，是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件。\n\n当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码，这种方式需要我们产生另一个进程去做编译工作，不够优雅而且容易使代码依赖与特定的操作系统；\n\nCompiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译，而且是跨平台的。\n\n**轻量级Http Server API**\n\nJDK1.6 提供了一个简单的 Http Server API，据此我们可以构建自己的嵌入式 Http Server，它支持Http和Https协议，提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的 Http Server API来实现，程序员必须自己实现 HttpHandler 接口，HttpServer 会调用 `HttpHandler` 实现类的回调方法来处理客户端请求，在这里，我们把一个 Http 请求和它的响应称为一个交换，包装成 `HttpExchange` 类，`HttpServer` 负责将 `HttpExchange` 传给 `HttpHandler` 实现类的回调方法。\n\n**用Console开发控制台程序**\n\nJDK1.6 中提供了 `java.io.Console` 类专用来访问基于字符的控制台设备。\n你的程序如果要与 Windows 下的 cmd 或者 Linux 下的 Terminal 交互，就可以用 `Console` 类代劳。\n但我们不总是能得到可用的 Console，一个JVM是否有可用的 Console 依赖于底层平台和 JVM 如何被调用。\n如果JVM是在交互式命令行(比如 Windows 的 cmd)中启动的，并且输入输出没有重定向到另外的地方，那么就可以得到一个可用的 Console 实例。\n\n**对脚本语言的支持**\n\n如：ruby，groovy，javascript。\n\n### JDK 7\n\n**数字变量对下滑线的支持**\n\nJDK1.7可以在数值类型的变量里添加下滑线。\n\n例如：\n\n```java\nint num = 1234_5678_9; \nfloat num2 = 222_33F; \nlong num3 = 123_000_111L;\n```\n\n注意，有几个地方是不能添加的：\n\n1. 数字的开头和结尾 \n2. 小数点前后 \n3. F或者L前\n\n**switch对String的支持**\n\n```java\nString status = \"orderState\";     \nswitch (status) {   \n    case \"ordercancel\":   \n        System.out.println(\"订单取消\");   \n        break;   \n    case \"orderSuccess\":   \n        System.out.println(\"预订成功\");   \n        break;   \n    default:   \n        System.out.println(\"状态未知\");   \n}  \n```\n\n**try-with-resource**\n\n- `try-with-resources` 是一个定义了一个或多个资源的 try 声明，这个资源是指程序处理完它之后需要关闭它的对象。\n- `try-with-resources` 确保每一个资源在处理完成后都会被关闭。\n\n可以使用try-with-resources的资源有： 任何实现了 `java.lang.AutoCloseable` 接口 `java.io.Closeable` 接口的对象。\n\n例如：\n\n```java\npublic static String readFirstLineFromFile(String path) throws IOException {   \n\n    try (BufferedReader br = new BufferedReader(new FileReader(path))) {   \n        return br.readLine();   \n    }   \n}   \n```\n\n在 java 7 以及以后的版本里，`BufferedReader` 实现了 `java.lang.AutoCloseable` 接口。 \n由于 `BufferedReader` 定义在 `try-with-resources` 声明里，无论 `try` 语句正常还是异常的结束，\n它都会自动的关掉。而在 java7 以前，你需要使用 `finally` 块来关掉这个对象。\n\n**捕获多种异常并用改进后的类型检查来重新抛出异常**\n\n```java\npublic static void first(){   \n    try {   \n        BufferedReader reader = new BufferedReader(new FileReader(\"\"));   \n        Connection con = null;   \n        Statement stmt = con.createStatement();   \n    } catch (IOException | SQLException e) {   \n        //捕获多个异常，e就是final类型的   \n        e.printStackTrace();   \n    }   \n} \n```\n\n优点：用一个 `catch` 处理多个异常，比用多个 `catch` 每个处理一个异常生成的字节码要更小更高效。\n\n**创建泛型时类型推断**\n\n只要编译器可以从上下文中推断出类型参数，你就可以用一对空着的尖括号 `<>` 来代替泛型参数。\n这对括号私下被称为菱形(diamond)。 在Java SE 7之前，你声明泛型对象时要这样\n\n```java\nList<String> list = new ArrayList<String>();\n```\n\n而在Java SE7以后，你可以这样\n\n```java\nList<String> list = new ArrayList<>();\n```\n\n因为编译器可以从前面(List)推断出推断出类型参数，所以后面的 `ArrayList` 之后可以不用写泛型参数了，只用一对空着的尖括号就行。\n当然，你必须带着菱形 `<>`，否则会有警告的。 \nJava SE7 只支持有限的类型推断：只有构造器的参数化类型在上下文中被显著的声明了，你才可以使用类型推断，否则不行。\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"A\"); \n//这个不行 \nlist.addAll(new ArrayList<>()); \n// 这个可以 \nList<? extends String> list2 = new ArrayList<>(); \nlist.addAll(list2);\n```\n\n### JDK 8\n\n**Lambda表达式和函数式接口**\n\nLambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理：函数式开发者非常熟悉这些概念。很多JVM平台上的语言（Groovy、Scala等）从诞生之日就支持Lambda表达式，但是Java开发者没有选择，只能使用匿名内部类代替Lambda表达式。\nLambda的设计耗费了很多时间和很大的社区力量，最终找到一种折中的实现方案，可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可由逗号分隔的参数列表、->符号和语句块组成。\n\nLambda的设计者们为了让现有的功能与Lambda表达式良好兼容，考虑了很多方法，于是产生了函数接口这个概念。函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。java.lang.Runnable和java.util.concurrent.Callable是函数式接口的最佳例子。在实践中，函数式接口非常脆弱：只要某个开发者在该接口中添加一个函数，则该接口就不再是函数式接口进而导致编译失败。为了克服这种代码层面的脆弱性，并显式说明某个接口是函数式接口，Java 8 提供了一个特殊的注解@FunctionalInterface（Java 库中的所有相关接口都已经带有这个注解了）。\n\n**接口的默认方法和静态方法**\n\nJava 8使用两个新概念扩展了接口的含义：默认方法和静态方法。默认方法使得接口有点类似traits，不过要实现的目标不一样。默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。\n默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写。\n由于JVM上的默认方法的实现在字节码层面提供了支持，因此效率非常高。默认方法允许在不打破现有继承体系的基础上改进接口。该特性在官方库中的应用是：给java.util.Collection接口添加新方法，如stream()、parallelStream()、forEach()和removeIf()等等。\n尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。如果想了解更多细节，可以参考官方文档。\n\n**更好的类型推断**\n\nJava 8 编译器在类型推断方面有很大的提升，在很多场景下编译器可以推导出某个参数的数据类型，从而使得代码更为简洁。\n\n参数 `Value.defaultValue()` 的类型由编译器推导得出，不需要显式指明。在Java 7中这段代码会有编译错误，除非使用 `Value.<String>defaultValue()`。\n\n**Optional**\n\nJava应用中最常见的bug就是空指针异常。在Java 8之前，Google Guava引入了 `Optionals` 类来解决 `NullPointerException`，从而避免源码被各种 `null` 检查污染，以便开发者写出更加整洁的代码。Java 8也将Optional加入了官方库。\n`Optional` 仅仅是一个容易存放T类型的值或者null。它提供了一些有用的接口来避免显式的null检查，可以参考Java 8官方文档了解更多细节。\n\n如果Optional实例持有一个非空值，则 `isPresent()` 方法返回true，否则返回false；`orElseGet()` 方法，Optional实例持有null，则可以接受一个lambda表达式生成的默认值；map()方法可以将现有的 `Optional` 实例的值转换成新的值；orElse()方法与orElseGet()方法类似，但是在持有null的时候返回传入的默认值。\n\n**Stream**\n\n新增的Stream API（java.util.stream）将生成环境的函数式编程引入了Java库中。这是目前为止最大的一次对Java库的完善，以便开发者能够写出更加有效、更加简洁和紧凑的代码。\n\nTask 类有一个分数（或伪复杂度）的概念，另外还有两种状态：OPEN 或者 CLOSED。现在假设有一个task集合，首先看一个问题：在这个task集合中一共有多少个OPEN状态的点？\n\n在Java 8之前，要解决这个问题，则需要使用foreach循环遍历task集合；但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。\n\n```java\nfinal Collection<Task> tasks = Arrays.asList(\n        new Task(Status.OPEN, 5),\n        new Task(Status.OPEN, 13),\n        new Task(Status.CLOSED, 8)\n);\n\n// 使用sum()计算所有 OPEN 任务\nfinal long totalPointsOfOpenTasks = tasks\n        .stream()\n        .filter(task -> task.getStatus() == Status.OPEN)\n        .mapToInt(Task::getPoints)\n        .sum();\n\nSystem.out.println(\"Total points: \" + totalPointsOfOpenTasks);\n```\n\n首先，tasks集合被转换成steam表示；其次，在steam上的filter操作会过滤掉所有CLOSED的task；第三，mapToInt操作基于每个task实例的`Task::getPoints`方法将task流转换成Integer集合；最后，通过sum方法计算总和，得出最后的结果。\n\n**新的日期时间 API**\n\nJava 8引入了新的Date-Time API(JSR 310)来改进时间、日期的处理。时间和日期的管理一直是最令Java开发者痛苦的问题。java.util.Date 和后来的 java.util.Calendar 一直没有解决这个问题（甚至令开发者更加迷茫）。因为上面这些原因，诞生了第三方库Joda-Time，可以替代Java的时间管理API。\n\nJava 8中新的时间和日期管理API深受Joda-Time影响，并吸收了很多Joda-Time的精华。\n\n第一，新的java.time包包含了所有关于日期、时间、时区、Instant（跟日期类似但是精确到纳秒）、duration（持续时间）和时钟操作的类。新设计的API认真考虑了这些类的不变性（从java.util.Calendar吸取的教训），如果某个实例需要修改，则返回一个新的对象。\n\n第二，关注下LocalDate和LocalTime类。LocalDate仅仅包含ISO-8601日历系统中的日期部分；LocalTime则仅仅包含该日历系统中的时间部分。这两个类的对象都可以使用Clock对象构建得到。\n\n第三，LocalDateTime类包含了LocalDate和LocalTime的信息，但是不包含ISO-8601日历系统中的时区信息。这里有一些关于LocalDate和LocalTime的例子：\n\n如果你需要特定时区的data/time信息，则可以使用ZoneDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。\n\n**Nashorn JavaScript引擎**\n\nJava 8提供了新的Nashorn JavaScript引擎，使得我们可以在JVM上开发和运行JS应用。\nNashorn JavaScript引擎是javax.script.ScriptEngine的另一个实现版本，这类Script引擎遵循相同的规则，允许Java和JavaScript交互使用。\n\n**Base64**\n\n对 Base64 编码的支持已经被加入到Java 8官方库中，这样不需要使用第三方库就可以进行Base64编码。\n\n## Lambda 表达式（★★）\n\n> Demo 代码：https://github.com/xkcoding/java8_learning/tree/master/java8-lambda\n\nPS：个人理解类似前端 ES6 的箭头函数\n\n### 命令式和函数式\n\n**命令式编程**：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。\n**声明式编程**：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。\n\n### 什么是函数式编程？\n\n每个人对函数式编程的理解不尽相同。  我的理解是：**在完成一个编程任务时，通过使用不可变的值或函数，对他们进行处理，然后得到另一个值的过程。**\n不同的语言社区往往对各自语言中的特性孤芳自赏。现在谈 Java 程序员如何定义函数式编程还为时尚早，但是，这根本不重要！\n我们关心的是如何写出好代码，而不是符合函数式编程风格的代码。\n\n### 行为参数化\n\n把算法的策略（行为）作为一个参数传递给函数。\n\n### lambda 特点\n\n- 匿名：它不像普通的方法那样有一个明确的名称：写得少而想得多！\n- 函数：Lambda函数不像方法那样属于某个特定的类。但和方法一样，Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。\n- 传递：Lambda表达式可以作为参数传递给方法或存储在变量中。\n- 简洁：无需像匿名类那样写很多模板代码。\n\n### 函数描述符\n\n函数式接口的抽象方法的签名基本上就是Lambda表达式的签名，这种抽象方法叫作函数描述符。\n\n### 函数式接口，类型推断\n\n函数式接口定义且只定义了一个抽象方法，因为抽象方法的签名可以描述Lambda表达式的签名。\n函数式接口的抽象方法的签名称为函数描述符。\n所以为了应用不同的Lambda表达式，你需要一套能够描述常见函数描述符的函数式接口。\n\n### Lambda 及函数式接口的例子\n\n|       使用案例        | Lambda 的例子                                                | 对应的函数式接口                                             |\n| :-------------------: | :----------------------------------------------------------- | :----------------------------------------------------------- |\n|      布尔表达式       | `(List<String> list) -> list.isEmpty()`                      | `Predicate<List<String>>`                                    |\n|       创建对象        | `() -> new Project()`                                        | `Supplier<Project>`                                          |\n|     消费一个对象      | `(Project p) -> System.out.println(p.getStars())`            | `Consumer<Project>`                                          |\n| 从一个对象中选择/提取 | `(int a, int b) -> a * b`                                    | `IntBinaryOperator`                                          |\n|     比较两个对象      | `(Project p1, Project p2) -> p1.getStars().compareTo(p2.getStars())` | `Comparator<Project> 或 BiFunction<Project, ` <br/> `Project, Integer> 或 ToIntBiFunction<Project, Project>` |\n\n### Lambda 小结\n\n- lambda 表达式可以理解为一种匿名函数：它没有名称，但有参数列表、函数主体、返回 类型，可能还有一个可以抛出的异常的列表。\n- lambda 表达式让你可以简洁地传递代码。\n- 只有在接受函数式接口的地方才可以使用 lambda 表达式。 \n- lambda 表达式允许你直接内联，为函数式接口的抽象方法提供实现，并且将整个表达式作为函数式接口的一个实例。 \n- Lambda表达式所需要代表的类型称为目标类型。 \n\n## 方法引用\n\n方法引用让你可以重复使用现有的方法定义，并像Lambda一样传递它们。\n\n方法引用可以使语言的构造更紧凑简洁，减少冗余代码。\n\n方法引用使用一对冒号` :: `。\n\n示例：\n\n```java\nList<Person> result = list.stream()\n                    .filter(Person::isStudent) // 就是方法引用\n                    .collect(Collectors.toList());\n```\n\n## 函数式接口\n\n> Demo 代码：https://github.com/xkcoding/java8_learning/tree/master/java8-functional\n\n函数式接口(Functional Interface)就是**一个有且仅有一个抽象方法**，但是可以有多个非抽象方法的接口。\n\n函数式接口可以被隐式转换为lambda表达式。\n\n函数式接口可以现有的函数友好地支持 lambda。\n\nJDK 1.8之前已有的函数式接口:\n\n- **java.lang.Runnable**\n- java.util.concurrent.Callable\n- java.security.PrivilegedAction\n- **java.util.Comparator**\n- java.io.FileFilter\n- java.nio.file.PathMatcher\n- java.lang.reflect.InvocationHandler\n- java.beans.PropertyChangeListener\n- java.awt.event.ActionListener\n- javax.swing.event.ChangeListener\n\nJDK 1.8 新增加的函数接口：\n\n- java.util.function\n\n`java.util.function` 这个包下包含了很多类，用来支持 Java的 函数式编程，包括 `Predicate<T>`、`Function<T,R>`、`Supplier<T>`、`Consumer<T>` 和 `BinaryOperator<T>`。\n\n`Comparator`、`Predicate` 和 `Function` 等函数式接口都有几个可以用来结合 lambda 表达式的默认方法。\n\n**Java 8中的常用函数式接口**\n\n|     函数式接口      | 函数描述符       | 原始类型特化                                                 |\n| :-----------------: | :--------------- | :----------------------------------------------------------- |\n|   `Predicate<T>`    | `T->boolean`     | `IntPredicate,LongPredicate, DoublePredicate`                |\n|    `Consumer<T>`    | `T->void`        | `IntConsumer,LongConsumer, DoubleConsumer`                   |\n|   `Function<T,R>`   | `T->R`           | `IntFunction<R>, IntToDoubleFunction,` <br/> `IntToLongFunction, LongFunction<R>,` <br/> `LongToDoubleFunction, LongToIntFunction, ` <br/> `DoubleFunction<R>, ToIntFunction<T>, ` <br/> `ToDoubleFunction<T>, ToLongFunction<T>` |\n|    `Supplier<T>`    | `()->T`          | `BooleanSupplier,IntSupplier, LongSupplier, DoubleSupplier`  |\n| `UnaryOperator<T>`  | `T->T`           | `IntUnaryOperator, LongUnaryOperator, DoubleUnaryOperator`   |\n| `BinaryOperator<T>` | `(T,T)->T`       | `IntBinaryOperator, LongBinaryOperator, DoubleBinaryOperator` |\n| `BiPredicate<L,R>`  | `(L,R)->boolean` |                                                              |\n|  `BiConsumer<T,U>`  | `(T,U)->void`    | `ObjIntConsumer<T>, ObjLongConsumer<T>, ObjDoubleConsumer<T>` |\n| `BiFunction<T,U,R>` | `(T,U)->R`       | `ToIntBiFunction<T,U>, ToLongBiFunction<T,U>, ToDoubleBiFunction<T,U>` |\n\n## 默认方法\n\n新增了接口的默认方法。\n\n简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。\n\n我们只需在方法名前面加个default关键字即可实现默认方法。\n\n## Stream（★★）\n\n> Demo 代码：https://github.com/xkcoding/java8_learning/tree/master/java8-stream\n\n### 关于流\n\n#### 什么是流？\n\n流是Java8引入的全新概念，它用来处理集合中的数据，暂且可以把它理解为一种高级集合。\n众所周知，集合操作非常麻烦，若要对集合进行筛选、投影，需要写大量的代码，而流是以声明的形式操作集合，它就像SQL语句，我们只需告诉流需要对集合进行什么操作，它就会自动进行操作，并将执行结果交给你，无需我们自己手写代码。\n因此，流的集合操作对我们来说是透明的，我们只需向流下达命令，它就会自动把我们想要的结果给我们。由于操作过程完全由Java处理，因此它可以根据当前硬件环境选择最优的方法处理，我们也无需编写复杂又容易出错的多线程代码了。\n\n#### 流的特点\n\n1. 只能遍历一次\n   我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。\n   一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。\n2. 采用内部迭代方式\n   若要对集合进行处理，则需我们手写处理代码，这就叫做外部迭代。\n   而要对流进行处理，我们只需告诉流我们需要什么结果，处理过程由流自行完成，这就称为内部迭代。\n\n#### 流的操作种类\n\n流的操作分为两种，分别为中间操作和终端操作。\n\n1. 中间操作\n   当数据源中的数据上了流水线后，这个过程对数据进行的所有操作都称为“中间操作”。\n   中间操作仍然会返回一个流对象，因此多个中间操作可以串连起来形成一个流水线。\n2. 终端操作\n   当所有的中间操作完成后，若要将数据从流水线上拿下来，则需要执行终端操作。\n   终端操作将返回一个执行结果，这就是你想要的数据。\n\n#### 流的操作过程\n\n使用流一共需要三步：\n\n1. 准备一个数据源\n2. 执行中间操作\n   中间操作可以有多个，它们可以串连起来形成流水线。\n3. 执行终端操作\n   执行终端操作后本次流结束，你将获得一个执行结果。\n\n### 使用流\n\n#### 创建流\n\n在使用流之前，首先需要拥有一个数据源，并通过StreamAPI提供的一些方法获取该数据源的流对象。数据源可以有多种形式：\n\n**1. 集合**\n\n这种数据源较为常用，通过stream()方法即可获取流对象：\n\n```java\nList<Person> list = new ArrayList<Person>(); \nStream<Person> stream = list.stream();\n```\n\n**2. 数组**\n\n通过Arrays类提供的静态函数stream()获取数组的流对象：\n\n```java\nString[] names = {\"chaimm\",\"peter\",\"john\"};\nStream<String> stream = Arrays.stream(names);\n```\n\n**3. 值**\n\n直接将几个值变成流对象：\n\n```java\nStream<String> stream = Stream.of(\"chaimm\",\"peter\",\"john\");\n```\n\n**4. 文件**\n\n```java\ntry(Stream lines = Files.lines(Paths.get(\"文件路径名\"),Charset.defaultCharset())){\n    //可对lines做一些操作\n}catch(IOException e){\n}\n```\n\n> PS：Java7简化了IO操作，把打开IO操作放在try后的括号中即可省略关闭IO的代码。\n\n**5. iterator**\n\n**创建无限流**\n\n```java\nStream.iterate(0, n -> n + 2)\n      .limit(10)\n      .forEach(System.out::println);\n```\n\n#### 筛选 filter\n\nfilter 函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。\n如，筛选出所有学生：\n\n```java\nList<Person> result = list.stream()\n                    .filter(Person::isStudent)\n                    .collect(Collectors.toList());\n```\n\n#### 去重distinct\n\n去掉重复的结果：\n\n```java\nList<Person> result = list.stream()\n                    .distinct()\n                    .collect(Collectors.toList());\n```\n\n> PS：对象去重的时候，需要注意重写 equals 和 hashcode 方法\n\n#### 截取\n\n截取流的前N个元素：\n\n```java\nList<Person> result = list.stream()\n                    .limit(3)\n                    .collect(Collectors.toList());\n```\n\n#### 跳过\n\n跳过流的前n个元素：\n\n```java\nList<Person> result = list.stream()\n                    .skip(3)\n                    .collect(Collectors.toList());\n```\n\n#### 映射\n\n对流中的每个元素执行一个函数，使得元素转换成另一种类型输出。流会将每一个元素输送给map函数，并执行map中的Lambda表达式，最后将执行结果存入一个新的流中。\n如，获取每个人的姓名(实则是将Perosn类型转换成String类型)：\n\n```java\nList<String> result = list.stream()\n                    .map(Person::getName)\n                    .collect(Collectors.toList());\n```\n\n#### 合并多个流\n\n例：列出List中各不相同的单词，List集合如下：\n\n```java\nList<String> list = new ArrayList<String>();\nlist.add(\"I am a boy\");\nlist.add(\"I love the girl\");\nlist.add(\"But the girl loves another girl\");\n```\n\n思路如下：\n\n首先将list变成流：\n\n```java\nlist.stream();\n```\n\n按空格分词：\n\n```java\nlist.stream()\n            .map(line->line.split(\" \"));\n```\n\n分完词之后，每个元素变成了一个String[]数组。\n\n将每个 `String[]` 变成流：\n\n```java\nlist.stream()\n            .map(line->line.split(\" \"))\n            .map(Arrays::stream)\n```\n\n此时一个大流里面包含了一个个小流，我们需要将这些小流合并成一个流。\n\n将小流合并成一个大流：用 `flatMap` 替换刚才的 map\n\n```java\nlist.stream()\n    .map(line->line.split(\" \"))\n    .flatMap(Arrays::stream)\n```\n\n去重\n\n```java\nlist.stream()\n    .map(line->line.split(\" \"))\n    .flatMap(Arrays::stream)\n    .distinct()\n    .collect(Collectors.toList());\n```\n\n#### 是否匹配任一元素：anyMatch\n\nanyMatch用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。\n如，判断list中是否有学生：\n\n```java\nboolean result = list.stream()\n            .anyMatch(Person::isStudent);\n```\n\n#### 是否匹配所有元素：allMatch\n\nallMatch用于判断流中的所有元素是否都满足指定条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。\n如，判断是否所有人都是学生：\n\n```java\nboolean result = list.stream()\n            .allMatch(Person::isStudent);\n```\n\n#### 是否未匹配所有元素：noneMatch\n\nnoneMatch与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件：\n\n```java\nboolean result = list.stream()\n            .noneMatch(Person::isStudent);\n```\n\n#### 获取任一元素findAny\n\nfindAny能够从流中随便选一个元素出来，它返回一个Optional类型的元素。\n\n```java\nOptional<Person> person = list.stream().findAny();\n```\n\n#### 获取第一个元素findFirst\n\n```java\nOptional<Person> person = list.stream().findFirst();\n```\n\n#### 归约\n\n归约是将集合中的所有元素经过指定运算，折叠成一个元素输出，如：求最值、平均数等，这些操作都是将一个集合的元素折叠成一个元素输出。\n\n在流中，reduce函数能实现归约。\nreduce函数接收两个参数：\n\n1. 初始值\n2. 进行归约操作的Lambda表达式\n\n**元素求和：自定义Lambda表达式实现求和**\n\n例：计算所有人的年龄总和\n\n```java\nint age = list.stream().reduce(0, (person1,person2)->person1.getAge()+person2.getAge());\n```\n\n1. reduce的第一个参数表示初始值为0；\n2. reduce的第二个参数为需要进行的归约操作，它接收一个拥有两个参数的Lambda表达式，reduce会把流中的元素两两输给Lambda表达式，最后将计算出累加之和。\n\n**元素求和：使用Integer.sum函数求和**\n\n上面的方法中我们自己定义了Lambda表达式实现求和运算，如果当前流的元素为数值类型，那么可以使用Integer提供了sum函数代替自定义的Lambda表达式，如：\n\n```java\nint age = list.stream().reduce(0, Integer::sum);\n```\n\nInteger类还提供了 `min`、`max` 等一系列数值操作，当流中元素为数值类型时可以直接使用。\n\n#### 数值流的使用\n\n采用reduce进行数值操作会涉及到基本数值类型和引用数值类型之间的装箱、拆箱操作，因此效率较低。\n当流操作为纯数值操作时，使用数值流能获得较高的效率。\n\n**将普通流转换成数值流**\n\nStreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。\n如，将Person中的age转换成数值流：\n\n```java\nIntStream stream = list.stream().mapToInt(Person::getAge);\n```\n\n**数值计算**\n\n每种数值流都提供了数值计算函数，如max、min、sum等。如，找出最大的年龄：\n\n```java\nOptionalInt maxAge = list.stream()\n                                .mapToInt(Person::getAge)\n                                .max();\n```\n\n由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回`OptionalInt`，它是`Optional`的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。\n此外，`mapToInt`、`mapToDouble`、`mapToLong`进行数值操作后的返回结果分别为：`OptionalInt`、`OptionalDouble`、`OptionalLong`\n\n### 中间操作和收集操作\n\n|    操作     | 类型 | 返回类型      | 使用的类型/函数式接口    | 函数描述符       |\n| :---------: | :--- | :------------ | :----------------------- | :--------------- |\n|  `filter`   | 中间 | `Stream<T>`   | `Predicate<T>`           | `T -> boolean`   |\n| `distinct`  | 中间 | `Stream<T>`   |                          |                  |\n|   `skip`    | 中间 | `Stream<T>`   | long                     |                  |\n|    `map`    | 中间 | `Stream<R>`   | `Function<T, R>`         | `T -> R`         |\n|  `flatMap`  | 中间 | `Stream<R>`   | `Function<T, Stream<R>>` | `T -> Stream<R>` |\n|   `limit`   | 中间 | `Stream<T>`   | long                     |                  |\n|  `sorted`   | 中间 | `Stream<T>`   | `Comparator<T>`          | `(T, T) -> int`  |\n| `anyMatch`  | 终端 | `boolean`     | `Predicate<T>`           | `T -> boolean`   |\n| `noneMatch` | 终端 | `boolean`     | `Predicate<T>`           | `T -> boolean`   |\n| `allMatch`  | 终端 | `boolean`     | `Predicate<T>`           | `T -> boolean`   |\n|  `findAny`  | 终端 | `Optional<T>` |                          |                  |\n| `findFirst` | 终端 | `Optional<T>` |                          |                  |\n|  `forEach`  | 终端 | `void`        | `Consumer<T>`            | `T -> void`      |\n|  `collect`  | 终端 | `R`           | `Collector<T, A, R>`     |                  |\n|  `reduce`   | 终端 | `Optional<T>` | `BinaryOperator<T>`      | `(T, T) -> T`    |\n|   `count`   | 终端 | `long`        |                          |                  |\n\n### Collectors 收集\n\n收集器用来将经过筛选、映射的流进行最后的整理，可以使得最后的结果以不同的形式展现。\n`collect` 方法即为收集器，它接收 `Collector` 接口的实现作为具体收集器的收集方法。\n`Collector` 接口提供了很多默认实现的方法，我们可以直接使用它们格式化流的结果；也可以自定义 `Collector` 接口的实现，从而定制自己的收集器。\n\n#### 归约\n\n流由一个个元素组成，归约就是将一个个元素“折叠”成一个值，如求和、求最值、求平均值都是归约操作。\n\n#### 一般性归约\n\n若你需要自定义一个归约操作，那么需要使用 `Collectors.reducing` 函数，该函数接收三个参数：\n\n- 第一个参数为归约的初始值\n- 第二个参数为归约操作进行的字段\n- 第三个参数为归约操作的过程\n\n### 汇总\n\nCollectors类专门为汇总提供了一个工厂方法：`Collectors.summingInt`。\n它可接受一 个把对象映射为求和所需int的函数，并返回一个收集器；该收集器在传递给普通的 `collect` 方法后即执行我们需要的汇总操作。\n\n#### 分组\n\n数据分组是一种更自然的分割数据操作，分组就是将流中的元素按照指定类别进行划分，类似于SQL语句中的 `GROUPBY`。\n\n#### 多级分组\n\n多级分组可以支持在完成一次分组后，分别对每个小组再进行分组。\n使用具有两个参数的 `groupingBy` 重载方法即可实现多级分组。\n\n- 第一个参数：一级分组的条件\n- 第二个参数：一个新的 `groupingBy` 函数，该函数包含二级分组的条件\n\n**Collectors 类的静态工厂方法**\n\n|      工厂方法       | 返回类型               | 用途                                                         | 示例                                                         |\n| :-----------------: | :--------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n|      `toList`       | `List<T>`              | 把流中所有项目收集到一个 List                                | `List<Project> projects = projectStream.collect(toList());`  |\n|       `toSet`       | `Set<T>`               | 把流中所有项目收集到一个 Set，删除重复项                     | `Set<Project> projects = projectStream.collect(toSet());`    |\n|   `toCollection`    | `Collection<T>`        | 把流中所有项目收集到给定的供应源创建的集合                   | `Collection<Project> projects = projectStream.collect(toCollection(), ArrayList::new);` |\n|     `counting`      | `Long`                 | 计算流中元素的个数                                           | `long howManyProjects = projectStream.collect(counting());`  |\n|    `summingInt`     | `Integer`              | 对流中项目的一个整数属性求和                                 | `int totalStars = projectStream.collect(summingInt(Project::getStars));` |\n|   `averagingInt`    | `Double`               | 计算流中项目 Integer 属性的平均值                            | `double avgStars = projectStream.collect(averagingInt(Project::getStars));` |\n|  `summarizingInt`   | `IntSummaryStatistics` | 收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值 | `IntSummaryStatistics projectStatistics = projectStream.collect(summarizingInt(Project::getStars));` |\n|      `joining`      | `String`               | 连接对流中每个项目调用 toString 方法所生成的字符串           | `String shortProject = projectStream.map(Project::getName).collect(joining(\", \"));` |\n|       `maxBy`       | `Optional<T>`          | 按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty() | `Optional<Project> fattest = projectStream.collect(maxBy(comparingInt(Project::getStars)));` |\n|       `minBy`       | `Optional<T>`          | 按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty() | `Optional<Project> fattest = projectStream.collect(minBy(comparingInt(Project::getStars)));` |\n|     `reducing`      | 归约操作产生的类型     | 从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值 | `int totalStars = projectStream.collect(reducing(0, Project::getStars, Integer::sum));` |\n| `collectingAndThen` | 转换函数返回的类型     | 包含另一个收集器，对其结果应用转换函数                       | `int howManyProjects = projectStream.collect(collectingAndThen(toList(), List::size));` |\n|    `groupingBy`     | `Map<K, List<T>>`      | 根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键 | `Map<String,List<Project>> projectByLanguage = projectStream.collect(groupingBy(Project::getLanguage));` |\n|  `partitioningBy`   | `Map<Boolean,List<T>>` | 根据对流中每个项目应用断言的结果来对项目进行分区             | `Map<Boolean,List<Project>> vegetarianDishes = projectStream.collect(partitioningBy(Project::isVegetarian));` |\n\n#### 转换类型\n\n有一些收集器可以生成其他集合。比如前面已经见过的 `toList`，生成了 `java.util.List` 类的实例。\n还有 `toSet` 和 `toCollection`，分别生成 `Set` 和 `Collection` 类的实例。\n到目前为止， 我已经讲了很多流上的链式操作，但总有一些时候，需要最终生成一个集合——比如：\n\n- 已有代码是为集合编写的，因此需要将流转换成集合传入；\n- 在集合上进行一系列链式操作后，最终希望生成一个值；\n- 写单元测试时，需要对某个具体的集合做断言。\n\n使用 `Collectors.toCollection`，用定制的集合收集元素\n\n```java\nstream.collect(Collectors.toCollection(TreeSet::new));\n```\n\n还可以利用收集器让流生成一个值。 `maxBy` 和 `minBy` 允许用户按某种特定的顺序生成一个值。\n\n#### 数据分区\n\n分区是分组的特殊情况：由一个断言（返回一个布尔值的函数）作为分类函数，它称分区函数。\n分区函数返回一个布尔值，这意味着得到的分组 `Map` 的键类型是 `Boolean`，于是它最多可以分为两组: true是一组，false是一组。\n\n分区的好处在于保留了分区函数返回true或false的两套流元素列表。\n\n#### 并行流\n\n并行流就是一个把内容分成多个数据块，并用不不同的线程分别处理每个数据块的流。最后合并每个数据块的计算结果。\n\n将一个顺序执行的流转变成一个并发的流只要调用 `parallel()` 方法\n\n```java\npublic static long parallelSum(long n){\n    return Stream.iterate(1L, i -> i +1).limit(n).parallel().reduce(0L,Long::sum);\n}\n```\n\n将一个并发流转成顺序的流只要调用 `sequential()` 方法\n\n```java\nstream.parallel().filter(...).sequential().map(...).parallel().reduce();\n```\n\n这两个方法可以多次调用，只有最后一个调用决定这个流是顺序的还是并发的。\n\n并发流使用的默认线程数等于你机器的处理器核心数。\n\n通过这个方法可以修改这个值，这是全局属性。\n\n```java\nSystem.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\", \"12\");\n```\n\n并非使用多线程并行流处理数据的性能一定高于单线程顺序流的性能，因为性能受到多种因素的影响。\n如何高效使用并发流的一些建议：\n\n1. 如果不确定， 就自己测试。\n2. 尽量使用基本类型的流 `IntStream`, `LongStream`, `DoubleStream`\n3. 有些操作使用并发流的性能会比顺序流的性能更差，比如limit，findFirst，依赖元素顺序的操作在并发流中是极其消耗性能的。findAny的性能就会好很多，应为不依赖顺序。\n4. 考虑流中计算的性能(Q)和操作的性能(N)的对比, Q表示单个处理所需的时间，N表示需要处理的数量，如果Q的值越大, 使用并发流的性能就会越高。\n5. 数据量不大时使用并发流，性能得不到提升。\n6. 考虑数据结构：并发流需要对数据进行分解，不同的数据结构被分解的性能时不一样的。\n\n**流的数据源和可分解性**\n\n|        源         | 可分解性 |\n| :---------------: | :------- |\n|    `ArrayList`    | 非常好   |\n|   `LinkedList`    | 差       |\n| `IntStream.range` | 非常好   |\n| `Stream.iterate`  | 差       |\n|     `HashSet`     | 好       |\n|     `TreeSet`     | 好       |\n\n**流的特性以及中间操作对流的修改都会对数据对分解性能造成影响。 比如固定大小的流在任务分解的时候就可以平均分配，但是如果有filter操作，那么流就不能预先知道在这个操作后还会剩余多少元素。**\n\n**考虑终端操作的性能：如果终端操作在合并并发流的计算结果时的性能消耗太大，那么使用并发流提升的性能就会得不偿失。**\n\n## Optional 类（★）\n\nOptional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。\n\nOptional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。\n\nOptional 类的引入很好的解决空指针异常。\n\n### Optional类的方法\n\n|     方法      | 描述                                                         |\n| :-----------: | :----------------------------------------------------------- |\n|    `empty`    | 返回一个空的 Optional 实例                                   |\n|   `filter`    | 如果值存在并且满足提供的断言， 就返回包含该值的 Optional 对象；否则返回一个空的 Optional 对象 |\n|     `map`     | 如果值存在，就对该值执行提供的 mapping 函数调用              |\n|   `flatMap`   | 如果值存在，就对该值执行提供的 mapping 函数调用，返回一个 Optional 类型的值，否则就返 回一个空的 Optional 对象 |\n|     `get`     | 如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常 |\n|  `ifPresent`  | 如果值存在，就执行使用该值的方法调用，否则什么也不做         |\n|  `isPresent`  | 如果值存在就返回 true，否则返回 false                        |\n|     `of`      | 将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException 异常 |\n| `ofNullable`  | 将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象 |\n|   `orElse`    | 如果有值则将其返回，否则返回一个默认值                       |\n|  `orElseGet`  | 如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值 |\n| `orElseThrow` | 如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常 |\n\n## Nashorn, JavaScript 引擎\n\nNashorn 一个 javascript 引擎。\n\n从JDK 1.8开始，Nashorn取代Rhino(JDK 1.6, JDK1.7)成为Java的嵌入式JavaScript引擎。Nashorn完全支持ECMAScript 5.1规范以及一些扩展。它使用基于JSR 292的新语言特性，其中包含在JDK 7中引入的invokedynamic，将JavaScript编译成Java字节码。\n\n与先前的Rhino实现相比，这带来了2到10倍的性能提升。\n\n## 新的日期时间 API（★★）\n\n> Demo 代码：https://github.com/xkcoding/java8_learning/tree/master/java8-datetime\n\n### ZoneId\n\nJava 8中的时区操作被很大程度上简化了，新的时区类 `java.time.ZoneId` 是原有的 `java.util.TimeZone` 类的替代品。\nZoneId对象可以通过 `ZoneId.of()` 方法创建，也可以通过 `ZoneId.systemDefault()` 获取系统默认时区：\n\n```java\nZoneId shanghaiZoneId = ZoneId.of(\"Asia/Shanghai\");\nZoneId systemZoneId = ZoneId.systemDefault();\n```\n\n`of()` 方法接收一个“区域/城市”的字符串作为参数，你可以通过 `getAvailableZoneIds()` 方法获取所有合法的“区域/城市”字符串：\n\n```java\nSet<String> zoneIds = ZoneId.getAvailableZoneIds();\n```\n\n对于老的时区类 `TimeZone`，Java 8也提供了转化方法：\n\n```java\nZoneId oldToNewZoneId = TimeZone.getDefault().toZoneId();\n```\n\n有了 `ZoneId`，我们就可以将一个 `LocalDate`、`LocalTime` 或 `LocalDateTime` 对象转化为 `ZonedDateTime` 对象：\n\n```java\nLocalDateTime localDateTime = LocalDateTime.now();\nZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, shanghaiZoneId);\n```\n\n`ZonedDateTime` 对象由两部分构成，`LocalDateTime` 和 `ZoneId`，其中 `2018-03-03T15:26:56.147` 部分为 `LocalDateTime`，`+08:00[Asia/Shanghai]` 部分为ZoneId。\n\n另一种表示时区的方式是使用 `ZoneOffset`，它是以当前时间和 **世界标准时间（UTC）/格林威治时间（GMT）** 的偏差来计算，例如：\n\n```java\nZoneOffset zoneOffset = ZoneOffset.of(\"+09:00\");\nLocalDateTime localDateTime = LocalDateTime.now();\nOffsetDateTime offsetDateTime = OffsetDateTime.of(localDateTime, zoneOffset);\n```\n\n### Instant\n\nInstant类在Java日期与时间功能中，表示了时间线上一个确切的点，定义为距离初始时间的时间差（初始时间为GMT 1970年1月1日00:00）经测量一天有86400秒，从初始时间开始不断向前移动。\n\n**创建一个Instant实例**\n\n你可以通过Instant类的工厂方法创建一个Instant实例，例如你可以调用instant.now()来创建一个确切的表达当前时间的Instant对象：\n\n```java\nInstant now = Instant.now();\n```\n\n另外也有一些其它方法能创建Instant，具体请查阅Java官方文档。\n\n**访问Instant的时间**\n\n一个Instant对象里有两个域：距离初始时间的秒钟数、在当前一秒内的第几纳秒，他们的组合表达了当前时间点。你可以通过以下两个方法得到它们的值：\n\n```java\nlong seconds =  now.getEpochSecond()\nint nanos   =   now.getNano()\n```\n\n**Instant的计算**\n\nInstant类有一些方法，可以用于获得另一Instant的值，例如：\n\n- `plusSeconds()`\n- `plusMillis()`\n- `plusNanos()`\n- `minusSeconds()`\n- `minusMillis()`\n- `minusNanos()`\n\n我下面将向你展示两个例子，来说明这些方法如何使用：\n\n```java\nInstant now     = Instant.now();\nInstant later   = now.plusSeconds(3);\nInstant earlier = now.minusSeconds(3);\n```\n\n第一行获得了一个Instant对象，表示当前时间。第二行创建了一个Instant表示三秒后，第三行创建了一个Instant表示三秒前。\n\n> seconds 表示从 `1970-01-01 00:00:00` 开始到现在的秒数，nanos 表示纳秒部分（nanos的值不会超过999,999,999）\n\n### Clock\n\nClock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 `System.currentTimeMillis()` 来获取当前的微秒数。\n某一个特定的时间点也可以使用Instant类来表示，Instant 类也可以用来创建老的 `java.util.Date` 对象。\n\n```java\nClock clock = Clock.systemDefaultZone();  \nlong millis = clock.millis();    \nInstant instant = clock.instant();  \nDate legacyDate = Date.from(instant);   // legacy java.util.Date  \n```\n\n### LocalDate\n\nLocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。\n可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间（如java.util.Date中的2000.01.01表示的实际是这一天的00:00这个瞬间）。\n\nLocalDate类位于java.time包下，类名叫java.time.LocalDate，创建出来的实例也是不可变对象，所以涉及它的计算方法将返回一个新的LocalDate。\n\n**创建一个LocalDate实例**\n\n我们有多种方式可以创建出 `LocalDate` 实例。第一种方法是使用 `now()` 方法获得值为今天当日的 `LocalDate` 对象：\n\n```java\nLocalDate localDate = LocalDate.now();\n```\n\n另一种方法是使用年月日信息构造出LocalDate对象：\n\n```java\nLocalDate localDate2 = LocalDate.of(2018, 7, 19);\n```\n\nLocalDate 的 `of()` 方法创建出一个指定年月日的日期，并且没有时区信息。\n\n**访问日期信息**\n\n可以用如下方法访问LocalDate中的日期信息：\n\n```java\nint   year       = localDate.getYear();\nMonth month      = localDate.getMonth();\nint   dayOfMonth = localDate.getDayOfMonth();\nint   dayOfYear  = localDate.getDayOfYear();\nDayOfWeek dayOfWeek = localDate.getDayOfWeek();\n```\n\n可以注意到getMonth()与getDayOfWeek()方法返回了一个枚举类型代替一个int。你可以通过枚举类型中的getValue()来获得信息。\n\n**LocalDate计算**\n\n你可以进行一堆简单的日期计算，只要使用如下的方法：\n\n- `plusDays()`\n- `plusWeeks()`\n- `plusMonths()`\n- `plusYears()`\n- `minusDays()`\n- `minusWeeks()`\n- `minusMonths()`\n- `minusYears()`\n\n以下举几个使用的例子来帮助理解使用：\n\n```java\nLocalDate d  = LocalDate.of(2018, 7, 19);\nLocalDate d1 = localDate.plusYears(3);\nLocalDate d2 = localDate.minusYears(3);\n```\n\n1. 第一行创建出一个新的LocalDate对象d，表示2018.7.19。\n2. 第二行创建了值等于d日期3年后的LocalDate对象，第三行也是一样，只是值改为d日期的三年前。 \n\n### LocalTime\n\nLocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。\nLocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。\n\n**创建一个LocatTime实例**\n\n有多种方式可以新建LocalTime实例。比如使用当前时间作为值新建对象：\n\n```java\nLocalTime localTime = LocalTime.now();\n```\n\n另一种方式是使用指定的时分秒和纳秒来新建对象：\n\n```java\nLocalTime localTime2 = LocalTime.of(21, 30, 59, 11001);\n```\n\n也有另一种版本的 `of()` 方法只需要小时分钟两项，或时分秒三项值作为参数。\n\n**访问LocalTime对象的时间**\n\n你可以通过这些方法访问其时、分、秒、纳秒：\n\n- `getHour()`\n- `getMinute()`\n- `getSecond()`\n- `getNano()`\n\n**LocalTime的计算**\n\nLocalTime类包含一系列方法，能帮你完成时间计算：\n\n- `plusHours()`\n- `plusMinutes()`\n- `plusSeconds()`\n- `plusNanos()`\n- `minusHours()`\n- `minusMinutes()`\n- `minusSeconds()`\n- `minusNanos()`\n\n以下举一个例子：\n\n```java\nLocalTime localTime2 = LocalTime.of(21, 30, 59, 11001);\nLocalTime localTimeLater   = localTime.plusHours(3);\nLocalTime localTimeEarlier = localTime.minusHours(3);\n```\n\n1. 第一行新建一个LocalTime实例，表示21:30:50的第11001纳秒。\n2. 第二行新建了一个LocalTime实例表示这个时间的三小时后，第三行表示三小时前。\n3. LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。\n\nLocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。\n\n### LocalDateTime\n\nLocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。\n\nLocalDateTime类的值是不可变的，所以其计算方法会返回一个新的LocalDateTime实例。\n\n**创建一个LocatDateTime实例**\n\n可以通过LocalDateTime的静态工厂方法来创建LocalDateTime实例。以下举例使用 `now()` 方法创建：\n\n```java\nLocalDateTime localDateTime = LocalDateTime.now();\n```\n\n另一种方式是使用指定的年月日、时分秒、纳秒来新建对象：\n\n```java\nLocalDateTime localDateTime2 = LocalDateTime.of(2018, 7, 19, 13, 55, 36, 123);\n```\n\n**访问LocalDateTime对象的时间**\n\n你可以通过这些方法访问其日期时间：\n\n- `getYear()`\n- `getMonth()`\n- `getDayOfMonth()`\n- `getDayOfWeek()`\n- `getDayOfYear()`\n- `getHour()`\n- `getMinute()`\n- `getSecond()`\n- `getNano()`\n\n这些方法中有一些返回int有一些返回枚举类型，你可以通过枚举类型中的 `getValue()` 方法来获得int值。\n\n**LocalDateTime的计算**\n\nLocalDateTime 类包含一系列方法，能帮你完成时间计算：\n\n- `plusYears()`\n- `plusMonths()`\n- `plusDays()`\n- `plusHours()`\n- `plusMinutes()`\n- `plusSeconds()`\n- `plusNanos()`\n- `minusYears()`\n- `minusMonths()`\n- `minusDays()`\n- `minusHours()`\n- `minusMinutes()`\n- `minusSeconds()`\n- `minusNanos()`\n\n以下举一个例子：\n\n```java\nLocalDateTime localDateTime  = LocalDateTime.now();\nLocalDateTime localDateTime1 = localDateTime.plusYears(3);\nLocalDateTime localDateTime2 = localDateTime.minusYears(3);\n```\n\n1. 第一行新建一个LocalDateTime实例表示当前这个时间。\n2. 第二行新建了一个LocalDateTime实例表示三年后。\n3. 第三行也新建了一个LocalDateTime实例表示三小时前。\n\n### ZonedDateTime\n\nZonedDateTime类是Java 8中日期时间功能里，用于表示带时区的日期与时间信息的类。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。\n\nZonedDateTime 类的值是不可变的，所以其计算方法会返回一个新的ZonedDateTime 实例。\n\n**创建一个ZonedDateTime实例**\n\n有多种方式可以新建ZonedDateTime实例。比如使用当前时间作为值新建对象：\n\n```java\nZonedDateTime dateTime = ZonedDateTime.now();\n```\n\n另一种方式是使用指定的年月日、时分秒、纳秒以及时区ID来新建对象：\n\n```java\nZoneId zoneId = ZoneId.of(\"UTC+1\");\nZonedDateTime dateTime2 = ZonedDateTime.of(2018, 7, 19, 11, 45, 59, 1234, zoneId);\n```\n\n**访问ZonedDateTime对象的时间**\n\n你可以通过这些方法访问其日期时间：\n\n- `getYear()`\n- `getMonth()`\n- `getDayOfMonth()`\n- `getDayOfWeek()`\n- `getDayOfYear()`\n- `getHour()`\n- `getMinute()`\n- `getSecond()`\n- `getNano()`\n\n这些方法中有一些返回int有一些返回枚举类型，但可以通过枚举类型中的getValue()方法来获得int值。\n\n**ZonedDateTime的计算**\n\nZonedDateTime类包含一系列方法，能帮你完成时间计算：\n\n- `plusYears()`\n- `plusMonths()`\n- `plusDays()`\n- `plusHours()`\n- `plusMinutes()`\n- `plusSeconds()`\n- `plusNanos()`\n- `minusYears()`\n- `minusMonths()`\n- `minusDays()`\n- `minusHours()`\n- `minusMinutes()`\n- `minusSeconds()`\n- `minusNanos()`\n\n但注意计算时，若不巧跨越了夏令时（会补一小时或减一小时），可能得不到希望的结果。一个替代的正确做法是使用Period：\n\n```java\nZonedDateTime zoneDateTime = previousDateTime.plus(Period.ofDays(3));\n```\n\n**时区**\n\n时区是用ZoneId类表示的，你可以使用ZoneId.now()或ZoneId.of(“xxx”)来实例化：\n\n```java\nZoneId zoneId = ZoneId.of(\"UTC+1\");\n```\n\n传给 `of()` 方法的参数是时区的ID，如“UTC+1”指距离UTC（格林威治时间）有一小时的时差，你可以使用你想要的时差来表示ZoneId（如+1与-5等等）\n你也可以使用另一种方式表示zone id，即使用地区名字，也是可以的：\n\n```java\nZoneId zoneId2 = ZoneId.of(\"Europe/Copenhagen\");\nZoneId zoneId3 = ZoneId.of(\"Europe/Paris\");\n```\n\n### DateTimeFormatter\n\nDateTimeFormatter类是Java 8中日期时间功能里，用于解析和格式化日期时间的类，位于 `java.time.format` 包下。\n\n**预定义的DateTimeFormatter实例**\n\nDateTimeFormatter类包含一系列预定义（常量）的实例，可以解析和格式化一些标准时间格式。这将让你免除麻烦的时间格式定义，类中包含如下预定义的实例：\n\n```java\nBASIC_ISO_DATE\n\nISO_LOCAL_DATE\nISO_LOCAL_TIME\nISO_LOCAL_DATE_TIME\n\nISO_OFFSET_DATE\nISO_OFFSET_TIME\nISO_OFFSET_DATE_TIME\n\nISO_ZONED_DATE_TIME\n\nISO_INSTANT\n\nISO_DATE\nISO_TIME\nISO_DATE_TIME\n\nISO_ORDINAL_TIME\nISO_WEEK_DATE\n\nRFC_1123_DATE_TIME\n```\n\n每个预定义的DateTimeFormatter实例都有不同的日期格式，具体的可以查阅Java官方文档。\n\n> PS：推荐使用下期分享的 `Hutool` 工具类做这些格式化工作，格式更加丰富。\n\n**格式化日期**\n\n当你获取一个DateTimeFormatter实例后，就可以用format()方便来将一个日期格式化为某种字符串，例如：\n\n```java\nDateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;\nString formattedDate = formatter.format(LocalDate.now());\nSystem.out.println(formattedDate);\n```\n\n这个样例把LocalDate对象格式化了，并输出20180719，这个输出表示现在2018年，7月19日。\n再举一个关于ZonedDateTime的例子：\n\n```java\nDateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;\nString formattedZonedDate = formatter.format(ZonedDateTime.now());\nSystem.out.println(\"formattedZonedDate = \" + formattedZonedDate);\n```\n\n这个例子会输出：20180719+0800\n表示今年2018年，7月19日，位于UTC+8时区。\n\n### Duration\n\n一个Duration对象表示两个Instant间的一段时间，是在Java 8中加入的新功能。\n\n一个Duration实例是不可变的，当创建出对象后就不能改变它的值了。你只能通过Duration的计算方法，来创建出一个新的Durtaion对象。你会在之后的教程中见到的。\n\n**创建Duration实例**\n\n使用 `Duration` 类的工厂方法来创建一个 `Duration` 对象，以下是一个使用 `between()` 的例子：\n\n```java\nInstant first = Instant.now();\n// 耗时操作，或者 Sleep 一段时间\nInstant second = Instant.now();\nDuration duration = Duration.between(first, second);\n```\n\n**访问Duration的时间**\n\n一个Duration对象里有两个域：纳秒值（小于一秒的部分），秒钟值（一共有几秒），他们的组合表达了时间长度。注意与使用System.getCurrentTimeMillis()时不同，Duration不包含毫秒这个属性。\n你可以通过以下两个方法得到它们的值：\n\n```java\nlong seconds =  duration.getSeconds()\nint nanos   =  duration.getNano()\n```\n\n你也可以转换整个时间到其它单位如纳秒、分钟、小时、天：\n\n- `toNanos()`\n- `toMillis()`\n- `toMinutes()`\n- `toHours()`\n- `toDays()`\n\n举例而言：`toNanos()` 与 `getNano()` 不同，`toNanos()` 获得的是 `Duration` 整个时间共有多少纳秒，\n而 `getNano()` 只是获得这段时间中小于一秒的部分。\n\n**Duration计算**\n\nDuration类包含一系列的计算方法：\n\n- `plusNanos()`\n- `plusMillis()`\n- `plusSeconds()`\n- `plusMinutes()`\n- `plusHours()`\n- `plusDays()`\n- `minusNanos()`\n- `minusMillis()`\n- `minusSeconds()`\n- `minusMinutes()`\n- `minusHours()`\n- `minusDays()`\n\n这些方法所做的事都是相似的，这里展示一个加减的例子：\n\n```java\nDuration start = ... //obtain a start duration\nDuration added      = start.plusDays(3);\nDuration subtracted = start.minusDays(3);\n```\n\n1. 第一行创建了一个Duration对象叫start，具体怎么创建可以参考前面的代码。\n2. 第二三行样例创建了两个新的Duration，通过调用start的加减操作，使得added对象表示的时间比start多三天，而substracted则少三天。\n\n所有的计算方法都会返回一个新的Duration，以保证Duration的不可变属性。\n\n```java\nlong days = duration.toDays();              // 这段时间的总天数\nlong hours = duration.toHours();            // 这段时间的小时数\nlong minutes = duration.toMinutes();        // 这段时间的分钟数\nlong seconds = duration.getSeconds();       // 这段时间的秒数\nlong milliSeconds = duration.toMillis();    // 这段时间的毫秒数\nlong nanoSeconds = duration.toNanos();      // 这段时间的纳秒数\n```\n\n### 其他操作\n\n#### 增加和减少日期\n\nJava 8中的日期/时间类都是不可变的，这是为了保证线程安全。当然，新的日期/时间类也提供了方法用于创建对象的可变版本，比如增加一天或者减少一天：\n\n```java\nLocalDate date = LocalDate.of(2017, 1, 5);          // 2017-01-05\n\nLocalDate date1 = date.withYear(2016);              // 修改为 2016-01-05\nLocalDate date2 = date.withMonth(2);                // 修改为 2017-02-05\nLocalDate date3 = date.withDayOfMonth(1);           // 修改为 2017-01-01\n\nLocalDate date4 = date.plusYears(1);                // 增加一年 2018-01-05\nLocalDate date5 = date.minusMonths(2);              // 减少两个月 2016-11-05\nLocalDate date6 = date.plus(5, ChronoUnit.DAYS);    // 增加5天 2017-01-10\n```\n\n上面例子中对于日期的操作比较简单，但是有些时候我们要面临更复杂的时间操作，比如将时间调到下一个工作日，\n或者是下个月的最后一天，这时候我们可以使用 `with()` 方法的另一个重载方法，它接收一个TemporalAdjuster参数，\n可以使我们更加灵活的调整日期：\n\n```java\nLocalDate date7 = date.with(nextOrSame(DayOfWeek.SUNDAY));      // 返回下一个距离当前时间最近的星期日\nLocalDate date9 = date.with(lastInMonth(DayOfWeek.SATURDAY));   // 返回本月最后一个星期六\n```\n\n要使上面的代码正确编译，你需要使用静态导入 `TemporalAdjusters` 对象：\n\n`import static java.time.temporal.TemporalAdjusters.*;`\n\n`TemporalAdjusters` 类中包含了很多静态方法可以直接使用，下面的表格列出了一些方法：\n\n|            方法名             | 描述                                                        |\n| :---------------------------: | :---------------------------------------------------------- |\n|      `dayOfWeekInMonth`       | 返回同一个月中每周的第几天                                  |\n|       `firstDayOfMonth`       | 返回当月的第一天                                            |\n|     `firstDayOfNextMonth`     | 返回下月的第一天                                            |\n|     `firstDayOfNextYear`      | 返回下一年的第一天                                          |\n|       `firstDayOfYear`        | 返回本年的第一天                                            |\n|        `firstInMonth`         | 返回同一个月中第一个星期几                                  |\n|       `lastDayOfMonth`        | 返回当月的最后一天                                          |\n|     `lastDayOfNextMonth`      | 返回下月的最后一天                                          |\n|      `lastDayOfNextYear`      | 返回下一年的最后一天                                        |\n|        `lastDayOfYear`        | 返回本年的最后一天                                          |\n|         `lastInMonth`         | 返回同一个月中最后一个星期几                                |\n|       `next / previous`       | 返回后一个/前一个给定的星期几                               |\n| `nextOrSame / previousOrSame` | 返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回 |\n\n如果上面表格中列出的方法不能满足你的需求，你还可以创建自定义的 `TemporalAdjuster` 接口的实现，\n`TemporalAdjuster` 也是一个函数式接口，所以我们可以使用Lambda表达式：\n\n```java\n@FunctionalInterface\npublic interface TemporalAdjuster {\n    Temporal adjustInto(Temporal temporal);\n}\n```\n\n比如给定一个日期，计算该日期的下一个工作日（不包括星期六和星期天）：\n\n```java\nLocalDate date = LocalDate.of(2018, 7, 19);\ndate.with(temporal -> {\n    // 当前日期\n    DayOfWeek dayOfWeek = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));\n\n    // 正常情况下，每次增加一天\n    int dayToAdd = 1;\n\n    // 如果是星期五，增加三天\n    if (dayOfWeek == DayOfWeek.FRIDAY) {\n        dayToAdd = 3;\n    }\n    \n    // 如果是星期六，增加两天\n    if (dayOfWeek == DayOfWeek.SATURDAY) {\n        dayToAdd = 2;\n    }\n\n    return temporal.plus(dayToAdd, ChronoUnit.DAYS);\n});\n```\n\n#### 其他历法\n\nJava中使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。\n\n此外Java 8还提供了4套其他历法（很奇怪为什么没有汉族人使用的农历），每套历法都包含一个日期类，分别是：\n\n- `ThaiBuddhistDate`：泰国佛教历\n- `MinguoDate`：中华民国历\n- `JapaneseDate`：日本历\n- `HijrahDate`：伊斯兰历\n\n每个日期类都继承 `ChronoLocalDate` 类，所以可以在不知道具体历法的情况下也可以操作。不过这些历法一般不常用，除非是有某些特殊需求情况下才会使用。\n\n这些不同的历法也可以用于向公历转换：\n\n```java\nLocalDate date = LocalDate.now();\nJapaneseDate jpDate = JapaneseDate.from(date);\n```\n\n由于它们都继承ChronoLocalDate类，所以在不知道具体历法情况下，可以通过ChronoLocalDate类操作日期：\n\n```java\nChronology jpChronology = Chronology.ofLocale(Locale.JAPANESE);\nChronoLocalDate jpChronoLocalDate = jpChronology.dateNow();\n```\n\n我们在开发过程中应该尽量避免使用 `ChronoLocalDate`，尽量用与历法无关的方式操作时间，因为不同的历法计算日期的方式不一样，比如开发者会在程序中做一些假设，假设一年中有12个月，如果是中国农历中包含了闰月，一年有可能是13个月，但开发者认为是12个月，多出来的一个月属于明年的。\n\n再比如假设年份是累加的，过了一年就在原来的年份上加一，但日本天皇在换代之后需要重新纪年，所以过了一年年份可能会从1开始计算。\n\n在实际开发过程中建议使用 `LocalDate`，包括存储、操作、业务规则的解读；除非需要将程序的输入或者输出本地化，这时可以使用 `ChronoLocalDate` 类。\n\n## Base64\n\n在Java 8中，Base64编码已经成为Java类库的标准。\n\nJava 8 内置了 Base64 编码的编码器和解码器，这样不需要使用第三方库就可以进行Base64编码。\n\nBase64工具类提供了一套静态方法获取下面三种BASE64编解码器：\n\n- **基本：**输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。\n- **URL：**输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。\n- **MIME：**输出隐射到MIME友好格式。输出每行不超过76字符，并且使用'\\r'并跟随'\\n'作为分割。编码输出最后没有行分割。\n\n示例：\n\n```java\nfinal String text = \"测试Base64编码\";\n\nfinal String encoded = Base64\n        .getEncoder()\n        .encodeToString(text.getBytes(StandardCharsets.UTF_8));\nSystem.out.println(encoded);\n\nfinal String decoded = new String(\n        Base64.getDecoder().decode(encoded),\n        StandardCharsets.UTF_8);\nSystem.out.println(decoded);\n```\n\n## 参考资料\n\n- [Java 8 新特性](http://www.runoob.com/java/java8-new-features.html)\n- [SimpleDateFormat的线程安全问题与解决方案](http://www.cnblogs.com/zemliu/p/3290585.html)\n- [为什么SimpleDateFormat不是线程安全的？](http://blog.csdn.net/yiifaa/article/details/73499053)\n- [Java获取N天前，N天后的日期（如3天）](http://blog.csdn.net/liuwei0376/article/details/13620879)\n- [What's New in JDK 8](http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html)\n\n## 附录\n\n示例代码地址：https://github.com/xkcoding/java8_learning\n\n如果可以的话，麻烦给个 Star 吧 (♥◠‿◠)ﾉﾞ","source":"_posts/2018-07-30.java8-learning.md","raw":"---\ntitle: Java8 学习整理\ncomments: true\nfancybox: false\ntoc: true\ndate: 2018-07-30 10:39:07\ntags:\n- 技术相关\n- java\ncategories:\n- 技术相关\n- java\ndescription:\npermalink: java8-learning\ntop:\n---\n前言：Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。目前大部分公司都已经在使用 Java 8开发项目。本文是我在公司的一次Java 8分享的文章，开篇先介绍了 **Java 8 的发展**，再分别讲述 **Java 8 的新特性**，同时附上一些 Demo 代码（ https://github.com/xkcoding/java8_learning ），以便更好的入门学习 Java 8，厚脸皮的求个 Star。\n\n<!--more-->\n\n## Java 8 的发展\n\n### JDK 5\n\n**自动装箱与拆箱**\n\nJDK1.5为每一个基本数据类型定义了一个封装类。使java中的基本数据类型也有自己的对象\n\n```bash\nint -->Integer\ndouble --> Double\nlong --> Long\nchar --> Character\nfloat --> Float\nboolean --> Boolean\nshort --> Short\nbyte -- > Byte\n```\n\n- 自动装包：将基本类型转换成为对象，例如：`int --> Integer`\n- 自动拆包：将对象转换成为基本数据类型，例如：`Integer --> int`\n\n对于 JDK1.5 之前集合总不能存放基本数据类型的问题，现在也能够解决。\n\n**枚举**\n\n枚举是 JDK1.5 推出的一个比较重要的特性。其关键字为 `enum`\n例如：定义代表交通灯的枚举\n\n```java\npublic enum MyEnum{\n    RED,GREEN,YELLOW\n}\n```\n\n**静态导入**\n\n- 优点：使用静态导入可以使被导入类的所有静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名。\n- 缺点：过度使用会降低代码的可读性\n\n**可变参数**\n\n在JDK1.5以前，当我们要为一个方法传递多个类型相同的参数时，\n我们有两种方法解决\n\n1. 直接传递一个数组过去\n2. 有多少个参数就传递多少个参数。\n\n例如：\n\n```java\npublic void printColor(String red,String green,String yellow){ \n}\n```\n\n或者\n\n```java\npublic void printColor(String[] colors){\n\n}\n```\n\n这样编写方法参数虽然能够实现我们想要的效果，但是，这样是不是有点麻烦呢？\n再者，如果参数个数不确定，我们怎么办呢？Java JDK1.5为我们提供的可变参数就能够完美的解决这个问题.\n\n例如：\n\n```java\npublic void printColor(String... colors){\n\n}\n```\n\n如果参数的类型相同，那么可以使用 `类型+三个点` ，后面跟一个参数名称的形式。\n这样的好处就是，只要参数类型相同，无论传递几个参数都没有限制\n注意：可变参数必须是参数列表的最后一项（该特性对对象和基本数据类型都适用）\n\n**泛型**\n\n```java\n//给集合指定存入类型，上面这个集合在存入数据的时候必须存入String类型的数据，否则编译器会报错\nList<String> strs = new ArrayList<String>();\n```\n\n“泛型” 意味着编写的代码可以被不同类型的对象所重用。\n可见泛型的提出是为了编写重用性更好的代码。\n泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。\n\n比如常见的集合类 `LinkedList`，其实现的接口名后有个特殊的部分 `<>`，而且它的成员的类型 Link 也包含一个 `<>`，这个符号的就是类型参数，\n它使得在运行中，创建一个 LinkedList 时可以传入不同的类型，比如 `new LinkedList`，这样它的成员存放的类型也是 `String`。\n\n**For-Each循环**\n\n例如上面这个集合我们可以通过for-each遍历，这样更加简单清晰。\n\n```java\nfor(String s : strs){ \n     System.out.println(s); \n}\n```\n\n> 注意：使用for-each遍历集合时，要遍历的集合必须实现了Iterator接口\n\n**线程并发库**\n\n线程并发库是 Java1.5 提出的关于多线程处理的高级功能，所在包：`java.util.concurrent` 包括\n\n1. 线程互斥工具类：`Lock`，`ReadWriteLock`\n2. 线程通信：`Condition`\n3. 线程池：`ExecutorService`\n4. 同步队列：`ArrayBlockingQueue`\n5. 同步集合：`ConcurrentHashMap`，`CopyOnWriteArrayList`\n6. 线程同步工具：`Semaphore`\n\n### JDK 6\n\n**Desktop类和SystemTray类**\n\n前者可以用来打开系统默认浏览器浏览指定的URL，打开系统默认邮件客户端给指定的邮箱发邮件，用默认应用程序打开或编辑文件(比如，用记事本打开以 txt 为后缀名的文件)，用系统默认的打印机打印文档；后者可以用来在系统托盘区创建一个托盘程序。\n\n**使用Compiler API**\n\n现在我们可以用JDK1.6 的Compiler API(JSR 199)去动态编译Java源文件，Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。\n\n这个特性对于某些需要用到动态编译的应用程序相当有用，比如JSP Web Server，当我们手动修改JSP后，是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件。\n\n当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码，这种方式需要我们产生另一个进程去做编译工作，不够优雅而且容易使代码依赖与特定的操作系统；\n\nCompiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译，而且是跨平台的。\n\n**轻量级Http Server API**\n\nJDK1.6 提供了一个简单的 Http Server API，据此我们可以构建自己的嵌入式 Http Server，它支持Http和Https协议，提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的 Http Server API来实现，程序员必须自己实现 HttpHandler 接口，HttpServer 会调用 `HttpHandler` 实现类的回调方法来处理客户端请求，在这里，我们把一个 Http 请求和它的响应称为一个交换，包装成 `HttpExchange` 类，`HttpServer` 负责将 `HttpExchange` 传给 `HttpHandler` 实现类的回调方法。\n\n**用Console开发控制台程序**\n\nJDK1.6 中提供了 `java.io.Console` 类专用来访问基于字符的控制台设备。\n你的程序如果要与 Windows 下的 cmd 或者 Linux 下的 Terminal 交互，就可以用 `Console` 类代劳。\n但我们不总是能得到可用的 Console，一个JVM是否有可用的 Console 依赖于底层平台和 JVM 如何被调用。\n如果JVM是在交互式命令行(比如 Windows 的 cmd)中启动的，并且输入输出没有重定向到另外的地方，那么就可以得到一个可用的 Console 实例。\n\n**对脚本语言的支持**\n\n如：ruby，groovy，javascript。\n\n### JDK 7\n\n**数字变量对下滑线的支持**\n\nJDK1.7可以在数值类型的变量里添加下滑线。\n\n例如：\n\n```java\nint num = 1234_5678_9; \nfloat num2 = 222_33F; \nlong num3 = 123_000_111L;\n```\n\n注意，有几个地方是不能添加的：\n\n1. 数字的开头和结尾 \n2. 小数点前后 \n3. F或者L前\n\n**switch对String的支持**\n\n```java\nString status = \"orderState\";     \nswitch (status) {   \n    case \"ordercancel\":   \n        System.out.println(\"订单取消\");   \n        break;   \n    case \"orderSuccess\":   \n        System.out.println(\"预订成功\");   \n        break;   \n    default:   \n        System.out.println(\"状态未知\");   \n}  \n```\n\n**try-with-resource**\n\n- `try-with-resources` 是一个定义了一个或多个资源的 try 声明，这个资源是指程序处理完它之后需要关闭它的对象。\n- `try-with-resources` 确保每一个资源在处理完成后都会被关闭。\n\n可以使用try-with-resources的资源有： 任何实现了 `java.lang.AutoCloseable` 接口 `java.io.Closeable` 接口的对象。\n\n例如：\n\n```java\npublic static String readFirstLineFromFile(String path) throws IOException {   \n\n    try (BufferedReader br = new BufferedReader(new FileReader(path))) {   \n        return br.readLine();   \n    }   \n}   \n```\n\n在 java 7 以及以后的版本里，`BufferedReader` 实现了 `java.lang.AutoCloseable` 接口。 \n由于 `BufferedReader` 定义在 `try-with-resources` 声明里，无论 `try` 语句正常还是异常的结束，\n它都会自动的关掉。而在 java7 以前，你需要使用 `finally` 块来关掉这个对象。\n\n**捕获多种异常并用改进后的类型检查来重新抛出异常**\n\n```java\npublic static void first(){   \n    try {   \n        BufferedReader reader = new BufferedReader(new FileReader(\"\"));   \n        Connection con = null;   \n        Statement stmt = con.createStatement();   \n    } catch (IOException | SQLException e) {   \n        //捕获多个异常，e就是final类型的   \n        e.printStackTrace();   \n    }   \n} \n```\n\n优点：用一个 `catch` 处理多个异常，比用多个 `catch` 每个处理一个异常生成的字节码要更小更高效。\n\n**创建泛型时类型推断**\n\n只要编译器可以从上下文中推断出类型参数，你就可以用一对空着的尖括号 `<>` 来代替泛型参数。\n这对括号私下被称为菱形(diamond)。 在Java SE 7之前，你声明泛型对象时要这样\n\n```java\nList<String> list = new ArrayList<String>();\n```\n\n而在Java SE7以后，你可以这样\n\n```java\nList<String> list = new ArrayList<>();\n```\n\n因为编译器可以从前面(List)推断出推断出类型参数，所以后面的 `ArrayList` 之后可以不用写泛型参数了，只用一对空着的尖括号就行。\n当然，你必须带着菱形 `<>`，否则会有警告的。 \nJava SE7 只支持有限的类型推断：只有构造器的参数化类型在上下文中被显著的声明了，你才可以使用类型推断，否则不行。\n\n```java\nList<String> list = new ArrayList<>();\nlist.add(\"A\"); \n//这个不行 \nlist.addAll(new ArrayList<>()); \n// 这个可以 \nList<? extends String> list2 = new ArrayList<>(); \nlist.addAll(list2);\n```\n\n### JDK 8\n\n**Lambda表达式和函数式接口**\n\nLambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理：函数式开发者非常熟悉这些概念。很多JVM平台上的语言（Groovy、Scala等）从诞生之日就支持Lambda表达式，但是Java开发者没有选择，只能使用匿名内部类代替Lambda表达式。\nLambda的设计耗费了很多时间和很大的社区力量，最终找到一种折中的实现方案，可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可由逗号分隔的参数列表、->符号和语句块组成。\n\nLambda的设计者们为了让现有的功能与Lambda表达式良好兼容，考虑了很多方法，于是产生了函数接口这个概念。函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。java.lang.Runnable和java.util.concurrent.Callable是函数式接口的最佳例子。在实践中，函数式接口非常脆弱：只要某个开发者在该接口中添加一个函数，则该接口就不再是函数式接口进而导致编译失败。为了克服这种代码层面的脆弱性，并显式说明某个接口是函数式接口，Java 8 提供了一个特殊的注解@FunctionalInterface（Java 库中的所有相关接口都已经带有这个注解了）。\n\n**接口的默认方法和静态方法**\n\nJava 8使用两个新概念扩展了接口的含义：默认方法和静态方法。默认方法使得接口有点类似traits，不过要实现的目标不一样。默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。\n默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写。\n由于JVM上的默认方法的实现在字节码层面提供了支持，因此效率非常高。默认方法允许在不打破现有继承体系的基础上改进接口。该特性在官方库中的应用是：给java.util.Collection接口添加新方法，如stream()、parallelStream()、forEach()和removeIf()等等。\n尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。如果想了解更多细节，可以参考官方文档。\n\n**更好的类型推断**\n\nJava 8 编译器在类型推断方面有很大的提升，在很多场景下编译器可以推导出某个参数的数据类型，从而使得代码更为简洁。\n\n参数 `Value.defaultValue()` 的类型由编译器推导得出，不需要显式指明。在Java 7中这段代码会有编译错误，除非使用 `Value.<String>defaultValue()`。\n\n**Optional**\n\nJava应用中最常见的bug就是空指针异常。在Java 8之前，Google Guava引入了 `Optionals` 类来解决 `NullPointerException`，从而避免源码被各种 `null` 检查污染，以便开发者写出更加整洁的代码。Java 8也将Optional加入了官方库。\n`Optional` 仅仅是一个容易存放T类型的值或者null。它提供了一些有用的接口来避免显式的null检查，可以参考Java 8官方文档了解更多细节。\n\n如果Optional实例持有一个非空值，则 `isPresent()` 方法返回true，否则返回false；`orElseGet()` 方法，Optional实例持有null，则可以接受一个lambda表达式生成的默认值；map()方法可以将现有的 `Optional` 实例的值转换成新的值；orElse()方法与orElseGet()方法类似，但是在持有null的时候返回传入的默认值。\n\n**Stream**\n\n新增的Stream API（java.util.stream）将生成环境的函数式编程引入了Java库中。这是目前为止最大的一次对Java库的完善，以便开发者能够写出更加有效、更加简洁和紧凑的代码。\n\nTask 类有一个分数（或伪复杂度）的概念，另外还有两种状态：OPEN 或者 CLOSED。现在假设有一个task集合，首先看一个问题：在这个task集合中一共有多少个OPEN状态的点？\n\n在Java 8之前，要解决这个问题，则需要使用foreach循环遍历task集合；但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。\n\n```java\nfinal Collection<Task> tasks = Arrays.asList(\n        new Task(Status.OPEN, 5),\n        new Task(Status.OPEN, 13),\n        new Task(Status.CLOSED, 8)\n);\n\n// 使用sum()计算所有 OPEN 任务\nfinal long totalPointsOfOpenTasks = tasks\n        .stream()\n        .filter(task -> task.getStatus() == Status.OPEN)\n        .mapToInt(Task::getPoints)\n        .sum();\n\nSystem.out.println(\"Total points: \" + totalPointsOfOpenTasks);\n```\n\n首先，tasks集合被转换成steam表示；其次，在steam上的filter操作会过滤掉所有CLOSED的task；第三，mapToInt操作基于每个task实例的`Task::getPoints`方法将task流转换成Integer集合；最后，通过sum方法计算总和，得出最后的结果。\n\n**新的日期时间 API**\n\nJava 8引入了新的Date-Time API(JSR 310)来改进时间、日期的处理。时间和日期的管理一直是最令Java开发者痛苦的问题。java.util.Date 和后来的 java.util.Calendar 一直没有解决这个问题（甚至令开发者更加迷茫）。因为上面这些原因，诞生了第三方库Joda-Time，可以替代Java的时间管理API。\n\nJava 8中新的时间和日期管理API深受Joda-Time影响，并吸收了很多Joda-Time的精华。\n\n第一，新的java.time包包含了所有关于日期、时间、时区、Instant（跟日期类似但是精确到纳秒）、duration（持续时间）和时钟操作的类。新设计的API认真考虑了这些类的不变性（从java.util.Calendar吸取的教训），如果某个实例需要修改，则返回一个新的对象。\n\n第二，关注下LocalDate和LocalTime类。LocalDate仅仅包含ISO-8601日历系统中的日期部分；LocalTime则仅仅包含该日历系统中的时间部分。这两个类的对象都可以使用Clock对象构建得到。\n\n第三，LocalDateTime类包含了LocalDate和LocalTime的信息，但是不包含ISO-8601日历系统中的时区信息。这里有一些关于LocalDate和LocalTime的例子：\n\n如果你需要特定时区的data/time信息，则可以使用ZoneDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。\n\n**Nashorn JavaScript引擎**\n\nJava 8提供了新的Nashorn JavaScript引擎，使得我们可以在JVM上开发和运行JS应用。\nNashorn JavaScript引擎是javax.script.ScriptEngine的另一个实现版本，这类Script引擎遵循相同的规则，允许Java和JavaScript交互使用。\n\n**Base64**\n\n对 Base64 编码的支持已经被加入到Java 8官方库中，这样不需要使用第三方库就可以进行Base64编码。\n\n## Lambda 表达式（★★）\n\n> Demo 代码：https://github.com/xkcoding/java8_learning/tree/master/java8-lambda\n\nPS：个人理解类似前端 ES6 的箭头函数\n\n### 命令式和函数式\n\n**命令式编程**：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。\n**声明式编程**：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。\n\n### 什么是函数式编程？\n\n每个人对函数式编程的理解不尽相同。  我的理解是：**在完成一个编程任务时，通过使用不可变的值或函数，对他们进行处理，然后得到另一个值的过程。**\n不同的语言社区往往对各自语言中的特性孤芳自赏。现在谈 Java 程序员如何定义函数式编程还为时尚早，但是，这根本不重要！\n我们关心的是如何写出好代码，而不是符合函数式编程风格的代码。\n\n### 行为参数化\n\n把算法的策略（行为）作为一个参数传递给函数。\n\n### lambda 特点\n\n- 匿名：它不像普通的方法那样有一个明确的名称：写得少而想得多！\n- 函数：Lambda函数不像方法那样属于某个特定的类。但和方法一样，Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。\n- 传递：Lambda表达式可以作为参数传递给方法或存储在变量中。\n- 简洁：无需像匿名类那样写很多模板代码。\n\n### 函数描述符\n\n函数式接口的抽象方法的签名基本上就是Lambda表达式的签名，这种抽象方法叫作函数描述符。\n\n### 函数式接口，类型推断\n\n函数式接口定义且只定义了一个抽象方法，因为抽象方法的签名可以描述Lambda表达式的签名。\n函数式接口的抽象方法的签名称为函数描述符。\n所以为了应用不同的Lambda表达式，你需要一套能够描述常见函数描述符的函数式接口。\n\n### Lambda 及函数式接口的例子\n\n|       使用案例        | Lambda 的例子                                                | 对应的函数式接口                                             |\n| :-------------------: | :----------------------------------------------------------- | :----------------------------------------------------------- |\n|      布尔表达式       | `(List<String> list) -> list.isEmpty()`                      | `Predicate<List<String>>`                                    |\n|       创建对象        | `() -> new Project()`                                        | `Supplier<Project>`                                          |\n|     消费一个对象      | `(Project p) -> System.out.println(p.getStars())`            | `Consumer<Project>`                                          |\n| 从一个对象中选择/提取 | `(int a, int b) -> a * b`                                    | `IntBinaryOperator`                                          |\n|     比较两个对象      | `(Project p1, Project p2) -> p1.getStars().compareTo(p2.getStars())` | `Comparator<Project> 或 BiFunction<Project, ` <br/> `Project, Integer> 或 ToIntBiFunction<Project, Project>` |\n\n### Lambda 小结\n\n- lambda 表达式可以理解为一种匿名函数：它没有名称，但有参数列表、函数主体、返回 类型，可能还有一个可以抛出的异常的列表。\n- lambda 表达式让你可以简洁地传递代码。\n- 只有在接受函数式接口的地方才可以使用 lambda 表达式。 \n- lambda 表达式允许你直接内联，为函数式接口的抽象方法提供实现，并且将整个表达式作为函数式接口的一个实例。 \n- Lambda表达式所需要代表的类型称为目标类型。 \n\n## 方法引用\n\n方法引用让你可以重复使用现有的方法定义，并像Lambda一样传递它们。\n\n方法引用可以使语言的构造更紧凑简洁，减少冗余代码。\n\n方法引用使用一对冒号` :: `。\n\n示例：\n\n```java\nList<Person> result = list.stream()\n                    .filter(Person::isStudent) // 就是方法引用\n                    .collect(Collectors.toList());\n```\n\n## 函数式接口\n\n> Demo 代码：https://github.com/xkcoding/java8_learning/tree/master/java8-functional\n\n函数式接口(Functional Interface)就是**一个有且仅有一个抽象方法**，但是可以有多个非抽象方法的接口。\n\n函数式接口可以被隐式转换为lambda表达式。\n\n函数式接口可以现有的函数友好地支持 lambda。\n\nJDK 1.8之前已有的函数式接口:\n\n- **java.lang.Runnable**\n- java.util.concurrent.Callable\n- java.security.PrivilegedAction\n- **java.util.Comparator**\n- java.io.FileFilter\n- java.nio.file.PathMatcher\n- java.lang.reflect.InvocationHandler\n- java.beans.PropertyChangeListener\n- java.awt.event.ActionListener\n- javax.swing.event.ChangeListener\n\nJDK 1.8 新增加的函数接口：\n\n- java.util.function\n\n`java.util.function` 这个包下包含了很多类，用来支持 Java的 函数式编程，包括 `Predicate<T>`、`Function<T,R>`、`Supplier<T>`、`Consumer<T>` 和 `BinaryOperator<T>`。\n\n`Comparator`、`Predicate` 和 `Function` 等函数式接口都有几个可以用来结合 lambda 表达式的默认方法。\n\n**Java 8中的常用函数式接口**\n\n|     函数式接口      | 函数描述符       | 原始类型特化                                                 |\n| :-----------------: | :--------------- | :----------------------------------------------------------- |\n|   `Predicate<T>`    | `T->boolean`     | `IntPredicate,LongPredicate, DoublePredicate`                |\n|    `Consumer<T>`    | `T->void`        | `IntConsumer,LongConsumer, DoubleConsumer`                   |\n|   `Function<T,R>`   | `T->R`           | `IntFunction<R>, IntToDoubleFunction,` <br/> `IntToLongFunction, LongFunction<R>,` <br/> `LongToDoubleFunction, LongToIntFunction, ` <br/> `DoubleFunction<R>, ToIntFunction<T>, ` <br/> `ToDoubleFunction<T>, ToLongFunction<T>` |\n|    `Supplier<T>`    | `()->T`          | `BooleanSupplier,IntSupplier, LongSupplier, DoubleSupplier`  |\n| `UnaryOperator<T>`  | `T->T`           | `IntUnaryOperator, LongUnaryOperator, DoubleUnaryOperator`   |\n| `BinaryOperator<T>` | `(T,T)->T`       | `IntBinaryOperator, LongBinaryOperator, DoubleBinaryOperator` |\n| `BiPredicate<L,R>`  | `(L,R)->boolean` |                                                              |\n|  `BiConsumer<T,U>`  | `(T,U)->void`    | `ObjIntConsumer<T>, ObjLongConsumer<T>, ObjDoubleConsumer<T>` |\n| `BiFunction<T,U,R>` | `(T,U)->R`       | `ToIntBiFunction<T,U>, ToLongBiFunction<T,U>, ToDoubleBiFunction<T,U>` |\n\n## 默认方法\n\n新增了接口的默认方法。\n\n简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。\n\n我们只需在方法名前面加个default关键字即可实现默认方法。\n\n## Stream（★★）\n\n> Demo 代码：https://github.com/xkcoding/java8_learning/tree/master/java8-stream\n\n### 关于流\n\n#### 什么是流？\n\n流是Java8引入的全新概念，它用来处理集合中的数据，暂且可以把它理解为一种高级集合。\n众所周知，集合操作非常麻烦，若要对集合进行筛选、投影，需要写大量的代码，而流是以声明的形式操作集合，它就像SQL语句，我们只需告诉流需要对集合进行什么操作，它就会自动进行操作，并将执行结果交给你，无需我们自己手写代码。\n因此，流的集合操作对我们来说是透明的，我们只需向流下达命令，它就会自动把我们想要的结果给我们。由于操作过程完全由Java处理，因此它可以根据当前硬件环境选择最优的方法处理，我们也无需编写复杂又容易出错的多线程代码了。\n\n#### 流的特点\n\n1. 只能遍历一次\n   我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。\n   一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。\n2. 采用内部迭代方式\n   若要对集合进行处理，则需我们手写处理代码，这就叫做外部迭代。\n   而要对流进行处理，我们只需告诉流我们需要什么结果，处理过程由流自行完成，这就称为内部迭代。\n\n#### 流的操作种类\n\n流的操作分为两种，分别为中间操作和终端操作。\n\n1. 中间操作\n   当数据源中的数据上了流水线后，这个过程对数据进行的所有操作都称为“中间操作”。\n   中间操作仍然会返回一个流对象，因此多个中间操作可以串连起来形成一个流水线。\n2. 终端操作\n   当所有的中间操作完成后，若要将数据从流水线上拿下来，则需要执行终端操作。\n   终端操作将返回一个执行结果，这就是你想要的数据。\n\n#### 流的操作过程\n\n使用流一共需要三步：\n\n1. 准备一个数据源\n2. 执行中间操作\n   中间操作可以有多个，它们可以串连起来形成流水线。\n3. 执行终端操作\n   执行终端操作后本次流结束，你将获得一个执行结果。\n\n### 使用流\n\n#### 创建流\n\n在使用流之前，首先需要拥有一个数据源，并通过StreamAPI提供的一些方法获取该数据源的流对象。数据源可以有多种形式：\n\n**1. 集合**\n\n这种数据源较为常用，通过stream()方法即可获取流对象：\n\n```java\nList<Person> list = new ArrayList<Person>(); \nStream<Person> stream = list.stream();\n```\n\n**2. 数组**\n\n通过Arrays类提供的静态函数stream()获取数组的流对象：\n\n```java\nString[] names = {\"chaimm\",\"peter\",\"john\"};\nStream<String> stream = Arrays.stream(names);\n```\n\n**3. 值**\n\n直接将几个值变成流对象：\n\n```java\nStream<String> stream = Stream.of(\"chaimm\",\"peter\",\"john\");\n```\n\n**4. 文件**\n\n```java\ntry(Stream lines = Files.lines(Paths.get(\"文件路径名\"),Charset.defaultCharset())){\n    //可对lines做一些操作\n}catch(IOException e){\n}\n```\n\n> PS：Java7简化了IO操作，把打开IO操作放在try后的括号中即可省略关闭IO的代码。\n\n**5. iterator**\n\n**创建无限流**\n\n```java\nStream.iterate(0, n -> n + 2)\n      .limit(10)\n      .forEach(System.out::println);\n```\n\n#### 筛选 filter\n\nfilter 函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。\n如，筛选出所有学生：\n\n```java\nList<Person> result = list.stream()\n                    .filter(Person::isStudent)\n                    .collect(Collectors.toList());\n```\n\n#### 去重distinct\n\n去掉重复的结果：\n\n```java\nList<Person> result = list.stream()\n                    .distinct()\n                    .collect(Collectors.toList());\n```\n\n> PS：对象去重的时候，需要注意重写 equals 和 hashcode 方法\n\n#### 截取\n\n截取流的前N个元素：\n\n```java\nList<Person> result = list.stream()\n                    .limit(3)\n                    .collect(Collectors.toList());\n```\n\n#### 跳过\n\n跳过流的前n个元素：\n\n```java\nList<Person> result = list.stream()\n                    .skip(3)\n                    .collect(Collectors.toList());\n```\n\n#### 映射\n\n对流中的每个元素执行一个函数，使得元素转换成另一种类型输出。流会将每一个元素输送给map函数，并执行map中的Lambda表达式，最后将执行结果存入一个新的流中。\n如，获取每个人的姓名(实则是将Perosn类型转换成String类型)：\n\n```java\nList<String> result = list.stream()\n                    .map(Person::getName)\n                    .collect(Collectors.toList());\n```\n\n#### 合并多个流\n\n例：列出List中各不相同的单词，List集合如下：\n\n```java\nList<String> list = new ArrayList<String>();\nlist.add(\"I am a boy\");\nlist.add(\"I love the girl\");\nlist.add(\"But the girl loves another girl\");\n```\n\n思路如下：\n\n首先将list变成流：\n\n```java\nlist.stream();\n```\n\n按空格分词：\n\n```java\nlist.stream()\n            .map(line->line.split(\" \"));\n```\n\n分完词之后，每个元素变成了一个String[]数组。\n\n将每个 `String[]` 变成流：\n\n```java\nlist.stream()\n            .map(line->line.split(\" \"))\n            .map(Arrays::stream)\n```\n\n此时一个大流里面包含了一个个小流，我们需要将这些小流合并成一个流。\n\n将小流合并成一个大流：用 `flatMap` 替换刚才的 map\n\n```java\nlist.stream()\n    .map(line->line.split(\" \"))\n    .flatMap(Arrays::stream)\n```\n\n去重\n\n```java\nlist.stream()\n    .map(line->line.split(\" \"))\n    .flatMap(Arrays::stream)\n    .distinct()\n    .collect(Collectors.toList());\n```\n\n#### 是否匹配任一元素：anyMatch\n\nanyMatch用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。\n如，判断list中是否有学生：\n\n```java\nboolean result = list.stream()\n            .anyMatch(Person::isStudent);\n```\n\n#### 是否匹配所有元素：allMatch\n\nallMatch用于判断流中的所有元素是否都满足指定条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。\n如，判断是否所有人都是学生：\n\n```java\nboolean result = list.stream()\n            .allMatch(Person::isStudent);\n```\n\n#### 是否未匹配所有元素：noneMatch\n\nnoneMatch与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件：\n\n```java\nboolean result = list.stream()\n            .noneMatch(Person::isStudent);\n```\n\n#### 获取任一元素findAny\n\nfindAny能够从流中随便选一个元素出来，它返回一个Optional类型的元素。\n\n```java\nOptional<Person> person = list.stream().findAny();\n```\n\n#### 获取第一个元素findFirst\n\n```java\nOptional<Person> person = list.stream().findFirst();\n```\n\n#### 归约\n\n归约是将集合中的所有元素经过指定运算，折叠成一个元素输出，如：求最值、平均数等，这些操作都是将一个集合的元素折叠成一个元素输出。\n\n在流中，reduce函数能实现归约。\nreduce函数接收两个参数：\n\n1. 初始值\n2. 进行归约操作的Lambda表达式\n\n**元素求和：自定义Lambda表达式实现求和**\n\n例：计算所有人的年龄总和\n\n```java\nint age = list.stream().reduce(0, (person1,person2)->person1.getAge()+person2.getAge());\n```\n\n1. reduce的第一个参数表示初始值为0；\n2. reduce的第二个参数为需要进行的归约操作，它接收一个拥有两个参数的Lambda表达式，reduce会把流中的元素两两输给Lambda表达式，最后将计算出累加之和。\n\n**元素求和：使用Integer.sum函数求和**\n\n上面的方法中我们自己定义了Lambda表达式实现求和运算，如果当前流的元素为数值类型，那么可以使用Integer提供了sum函数代替自定义的Lambda表达式，如：\n\n```java\nint age = list.stream().reduce(0, Integer::sum);\n```\n\nInteger类还提供了 `min`、`max` 等一系列数值操作，当流中元素为数值类型时可以直接使用。\n\n#### 数值流的使用\n\n采用reduce进行数值操作会涉及到基本数值类型和引用数值类型之间的装箱、拆箱操作，因此效率较低。\n当流操作为纯数值操作时，使用数值流能获得较高的效率。\n\n**将普通流转换成数值流**\n\nStreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。\n如，将Person中的age转换成数值流：\n\n```java\nIntStream stream = list.stream().mapToInt(Person::getAge);\n```\n\n**数值计算**\n\n每种数值流都提供了数值计算函数，如max、min、sum等。如，找出最大的年龄：\n\n```java\nOptionalInt maxAge = list.stream()\n                                .mapToInt(Person::getAge)\n                                .max();\n```\n\n由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回`OptionalInt`，它是`Optional`的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。\n此外，`mapToInt`、`mapToDouble`、`mapToLong`进行数值操作后的返回结果分别为：`OptionalInt`、`OptionalDouble`、`OptionalLong`\n\n### 中间操作和收集操作\n\n|    操作     | 类型 | 返回类型      | 使用的类型/函数式接口    | 函数描述符       |\n| :---------: | :--- | :------------ | :----------------------- | :--------------- |\n|  `filter`   | 中间 | `Stream<T>`   | `Predicate<T>`           | `T -> boolean`   |\n| `distinct`  | 中间 | `Stream<T>`   |                          |                  |\n|   `skip`    | 中间 | `Stream<T>`   | long                     |                  |\n|    `map`    | 中间 | `Stream<R>`   | `Function<T, R>`         | `T -> R`         |\n|  `flatMap`  | 中间 | `Stream<R>`   | `Function<T, Stream<R>>` | `T -> Stream<R>` |\n|   `limit`   | 中间 | `Stream<T>`   | long                     |                  |\n|  `sorted`   | 中间 | `Stream<T>`   | `Comparator<T>`          | `(T, T) -> int`  |\n| `anyMatch`  | 终端 | `boolean`     | `Predicate<T>`           | `T -> boolean`   |\n| `noneMatch` | 终端 | `boolean`     | `Predicate<T>`           | `T -> boolean`   |\n| `allMatch`  | 终端 | `boolean`     | `Predicate<T>`           | `T -> boolean`   |\n|  `findAny`  | 终端 | `Optional<T>` |                          |                  |\n| `findFirst` | 终端 | `Optional<T>` |                          |                  |\n|  `forEach`  | 终端 | `void`        | `Consumer<T>`            | `T -> void`      |\n|  `collect`  | 终端 | `R`           | `Collector<T, A, R>`     |                  |\n|  `reduce`   | 终端 | `Optional<T>` | `BinaryOperator<T>`      | `(T, T) -> T`    |\n|   `count`   | 终端 | `long`        |                          |                  |\n\n### Collectors 收集\n\n收集器用来将经过筛选、映射的流进行最后的整理，可以使得最后的结果以不同的形式展现。\n`collect` 方法即为收集器，它接收 `Collector` 接口的实现作为具体收集器的收集方法。\n`Collector` 接口提供了很多默认实现的方法，我们可以直接使用它们格式化流的结果；也可以自定义 `Collector` 接口的实现，从而定制自己的收集器。\n\n#### 归约\n\n流由一个个元素组成，归约就是将一个个元素“折叠”成一个值，如求和、求最值、求平均值都是归约操作。\n\n#### 一般性归约\n\n若你需要自定义一个归约操作，那么需要使用 `Collectors.reducing` 函数，该函数接收三个参数：\n\n- 第一个参数为归约的初始值\n- 第二个参数为归约操作进行的字段\n- 第三个参数为归约操作的过程\n\n### 汇总\n\nCollectors类专门为汇总提供了一个工厂方法：`Collectors.summingInt`。\n它可接受一 个把对象映射为求和所需int的函数，并返回一个收集器；该收集器在传递给普通的 `collect` 方法后即执行我们需要的汇总操作。\n\n#### 分组\n\n数据分组是一种更自然的分割数据操作，分组就是将流中的元素按照指定类别进行划分，类似于SQL语句中的 `GROUPBY`。\n\n#### 多级分组\n\n多级分组可以支持在完成一次分组后，分别对每个小组再进行分组。\n使用具有两个参数的 `groupingBy` 重载方法即可实现多级分组。\n\n- 第一个参数：一级分组的条件\n- 第二个参数：一个新的 `groupingBy` 函数，该函数包含二级分组的条件\n\n**Collectors 类的静态工厂方法**\n\n|      工厂方法       | 返回类型               | 用途                                                         | 示例                                                         |\n| :-----------------: | :--------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n|      `toList`       | `List<T>`              | 把流中所有项目收集到一个 List                                | `List<Project> projects = projectStream.collect(toList());`  |\n|       `toSet`       | `Set<T>`               | 把流中所有项目收集到一个 Set，删除重复项                     | `Set<Project> projects = projectStream.collect(toSet());`    |\n|   `toCollection`    | `Collection<T>`        | 把流中所有项目收集到给定的供应源创建的集合                   | `Collection<Project> projects = projectStream.collect(toCollection(), ArrayList::new);` |\n|     `counting`      | `Long`                 | 计算流中元素的个数                                           | `long howManyProjects = projectStream.collect(counting());`  |\n|    `summingInt`     | `Integer`              | 对流中项目的一个整数属性求和                                 | `int totalStars = projectStream.collect(summingInt(Project::getStars));` |\n|   `averagingInt`    | `Double`               | 计算流中项目 Integer 属性的平均值                            | `double avgStars = projectStream.collect(averagingInt(Project::getStars));` |\n|  `summarizingInt`   | `IntSummaryStatistics` | 收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值 | `IntSummaryStatistics projectStatistics = projectStream.collect(summarizingInt(Project::getStars));` |\n|      `joining`      | `String`               | 连接对流中每个项目调用 toString 方法所生成的字符串           | `String shortProject = projectStream.map(Project::getName).collect(joining(\", \"));` |\n|       `maxBy`       | `Optional<T>`          | 按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty() | `Optional<Project> fattest = projectStream.collect(maxBy(comparingInt(Project::getStars)));` |\n|       `minBy`       | `Optional<T>`          | 按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty() | `Optional<Project> fattest = projectStream.collect(minBy(comparingInt(Project::getStars)));` |\n|     `reducing`      | 归约操作产生的类型     | 从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值 | `int totalStars = projectStream.collect(reducing(0, Project::getStars, Integer::sum));` |\n| `collectingAndThen` | 转换函数返回的类型     | 包含另一个收集器，对其结果应用转换函数                       | `int howManyProjects = projectStream.collect(collectingAndThen(toList(), List::size));` |\n|    `groupingBy`     | `Map<K, List<T>>`      | 根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键 | `Map<String,List<Project>> projectByLanguage = projectStream.collect(groupingBy(Project::getLanguage));` |\n|  `partitioningBy`   | `Map<Boolean,List<T>>` | 根据对流中每个项目应用断言的结果来对项目进行分区             | `Map<Boolean,List<Project>> vegetarianDishes = projectStream.collect(partitioningBy(Project::isVegetarian));` |\n\n#### 转换类型\n\n有一些收集器可以生成其他集合。比如前面已经见过的 `toList`，生成了 `java.util.List` 类的实例。\n还有 `toSet` 和 `toCollection`，分别生成 `Set` 和 `Collection` 类的实例。\n到目前为止， 我已经讲了很多流上的链式操作，但总有一些时候，需要最终生成一个集合——比如：\n\n- 已有代码是为集合编写的，因此需要将流转换成集合传入；\n- 在集合上进行一系列链式操作后，最终希望生成一个值；\n- 写单元测试时，需要对某个具体的集合做断言。\n\n使用 `Collectors.toCollection`，用定制的集合收集元素\n\n```java\nstream.collect(Collectors.toCollection(TreeSet::new));\n```\n\n还可以利用收集器让流生成一个值。 `maxBy` 和 `minBy` 允许用户按某种特定的顺序生成一个值。\n\n#### 数据分区\n\n分区是分组的特殊情况：由一个断言（返回一个布尔值的函数）作为分类函数，它称分区函数。\n分区函数返回一个布尔值，这意味着得到的分组 `Map` 的键类型是 `Boolean`，于是它最多可以分为两组: true是一组，false是一组。\n\n分区的好处在于保留了分区函数返回true或false的两套流元素列表。\n\n#### 并行流\n\n并行流就是一个把内容分成多个数据块，并用不不同的线程分别处理每个数据块的流。最后合并每个数据块的计算结果。\n\n将一个顺序执行的流转变成一个并发的流只要调用 `parallel()` 方法\n\n```java\npublic static long parallelSum(long n){\n    return Stream.iterate(1L, i -> i +1).limit(n).parallel().reduce(0L,Long::sum);\n}\n```\n\n将一个并发流转成顺序的流只要调用 `sequential()` 方法\n\n```java\nstream.parallel().filter(...).sequential().map(...).parallel().reduce();\n```\n\n这两个方法可以多次调用，只有最后一个调用决定这个流是顺序的还是并发的。\n\n并发流使用的默认线程数等于你机器的处理器核心数。\n\n通过这个方法可以修改这个值，这是全局属性。\n\n```java\nSystem.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\", \"12\");\n```\n\n并非使用多线程并行流处理数据的性能一定高于单线程顺序流的性能，因为性能受到多种因素的影响。\n如何高效使用并发流的一些建议：\n\n1. 如果不确定， 就自己测试。\n2. 尽量使用基本类型的流 `IntStream`, `LongStream`, `DoubleStream`\n3. 有些操作使用并发流的性能会比顺序流的性能更差，比如limit，findFirst，依赖元素顺序的操作在并发流中是极其消耗性能的。findAny的性能就会好很多，应为不依赖顺序。\n4. 考虑流中计算的性能(Q)和操作的性能(N)的对比, Q表示单个处理所需的时间，N表示需要处理的数量，如果Q的值越大, 使用并发流的性能就会越高。\n5. 数据量不大时使用并发流，性能得不到提升。\n6. 考虑数据结构：并发流需要对数据进行分解，不同的数据结构被分解的性能时不一样的。\n\n**流的数据源和可分解性**\n\n|        源         | 可分解性 |\n| :---------------: | :------- |\n|    `ArrayList`    | 非常好   |\n|   `LinkedList`    | 差       |\n| `IntStream.range` | 非常好   |\n| `Stream.iterate`  | 差       |\n|     `HashSet`     | 好       |\n|     `TreeSet`     | 好       |\n\n**流的特性以及中间操作对流的修改都会对数据对分解性能造成影响。 比如固定大小的流在任务分解的时候就可以平均分配，但是如果有filter操作，那么流就不能预先知道在这个操作后还会剩余多少元素。**\n\n**考虑终端操作的性能：如果终端操作在合并并发流的计算结果时的性能消耗太大，那么使用并发流提升的性能就会得不偿失。**\n\n## Optional 类（★）\n\nOptional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。\n\nOptional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。\n\nOptional 类的引入很好的解决空指针异常。\n\n### Optional类的方法\n\n|     方法      | 描述                                                         |\n| :-----------: | :----------------------------------------------------------- |\n|    `empty`    | 返回一个空的 Optional 实例                                   |\n|   `filter`    | 如果值存在并且满足提供的断言， 就返回包含该值的 Optional 对象；否则返回一个空的 Optional 对象 |\n|     `map`     | 如果值存在，就对该值执行提供的 mapping 函数调用              |\n|   `flatMap`   | 如果值存在，就对该值执行提供的 mapping 函数调用，返回一个 Optional 类型的值，否则就返 回一个空的 Optional 对象 |\n|     `get`     | 如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常 |\n|  `ifPresent`  | 如果值存在，就执行使用该值的方法调用，否则什么也不做         |\n|  `isPresent`  | 如果值存在就返回 true，否则返回 false                        |\n|     `of`      | 将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException 异常 |\n| `ofNullable`  | 将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象 |\n|   `orElse`    | 如果有值则将其返回，否则返回一个默认值                       |\n|  `orElseGet`  | 如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值 |\n| `orElseThrow` | 如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常 |\n\n## Nashorn, JavaScript 引擎\n\nNashorn 一个 javascript 引擎。\n\n从JDK 1.8开始，Nashorn取代Rhino(JDK 1.6, JDK1.7)成为Java的嵌入式JavaScript引擎。Nashorn完全支持ECMAScript 5.1规范以及一些扩展。它使用基于JSR 292的新语言特性，其中包含在JDK 7中引入的invokedynamic，将JavaScript编译成Java字节码。\n\n与先前的Rhino实现相比，这带来了2到10倍的性能提升。\n\n## 新的日期时间 API（★★）\n\n> Demo 代码：https://github.com/xkcoding/java8_learning/tree/master/java8-datetime\n\n### ZoneId\n\nJava 8中的时区操作被很大程度上简化了，新的时区类 `java.time.ZoneId` 是原有的 `java.util.TimeZone` 类的替代品。\nZoneId对象可以通过 `ZoneId.of()` 方法创建，也可以通过 `ZoneId.systemDefault()` 获取系统默认时区：\n\n```java\nZoneId shanghaiZoneId = ZoneId.of(\"Asia/Shanghai\");\nZoneId systemZoneId = ZoneId.systemDefault();\n```\n\n`of()` 方法接收一个“区域/城市”的字符串作为参数，你可以通过 `getAvailableZoneIds()` 方法获取所有合法的“区域/城市”字符串：\n\n```java\nSet<String> zoneIds = ZoneId.getAvailableZoneIds();\n```\n\n对于老的时区类 `TimeZone`，Java 8也提供了转化方法：\n\n```java\nZoneId oldToNewZoneId = TimeZone.getDefault().toZoneId();\n```\n\n有了 `ZoneId`，我们就可以将一个 `LocalDate`、`LocalTime` 或 `LocalDateTime` 对象转化为 `ZonedDateTime` 对象：\n\n```java\nLocalDateTime localDateTime = LocalDateTime.now();\nZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, shanghaiZoneId);\n```\n\n`ZonedDateTime` 对象由两部分构成，`LocalDateTime` 和 `ZoneId`，其中 `2018-03-03T15:26:56.147` 部分为 `LocalDateTime`，`+08:00[Asia/Shanghai]` 部分为ZoneId。\n\n另一种表示时区的方式是使用 `ZoneOffset`，它是以当前时间和 **世界标准时间（UTC）/格林威治时间（GMT）** 的偏差来计算，例如：\n\n```java\nZoneOffset zoneOffset = ZoneOffset.of(\"+09:00\");\nLocalDateTime localDateTime = LocalDateTime.now();\nOffsetDateTime offsetDateTime = OffsetDateTime.of(localDateTime, zoneOffset);\n```\n\n### Instant\n\nInstant类在Java日期与时间功能中，表示了时间线上一个确切的点，定义为距离初始时间的时间差（初始时间为GMT 1970年1月1日00:00）经测量一天有86400秒，从初始时间开始不断向前移动。\n\n**创建一个Instant实例**\n\n你可以通过Instant类的工厂方法创建一个Instant实例，例如你可以调用instant.now()来创建一个确切的表达当前时间的Instant对象：\n\n```java\nInstant now = Instant.now();\n```\n\n另外也有一些其它方法能创建Instant，具体请查阅Java官方文档。\n\n**访问Instant的时间**\n\n一个Instant对象里有两个域：距离初始时间的秒钟数、在当前一秒内的第几纳秒，他们的组合表达了当前时间点。你可以通过以下两个方法得到它们的值：\n\n```java\nlong seconds =  now.getEpochSecond()\nint nanos   =   now.getNano()\n```\n\n**Instant的计算**\n\nInstant类有一些方法，可以用于获得另一Instant的值，例如：\n\n- `plusSeconds()`\n- `plusMillis()`\n- `plusNanos()`\n- `minusSeconds()`\n- `minusMillis()`\n- `minusNanos()`\n\n我下面将向你展示两个例子，来说明这些方法如何使用：\n\n```java\nInstant now     = Instant.now();\nInstant later   = now.plusSeconds(3);\nInstant earlier = now.minusSeconds(3);\n```\n\n第一行获得了一个Instant对象，表示当前时间。第二行创建了一个Instant表示三秒后，第三行创建了一个Instant表示三秒前。\n\n> seconds 表示从 `1970-01-01 00:00:00` 开始到现在的秒数，nanos 表示纳秒部分（nanos的值不会超过999,999,999）\n\n### Clock\n\nClock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 `System.currentTimeMillis()` 来获取当前的微秒数。\n某一个特定的时间点也可以使用Instant类来表示，Instant 类也可以用来创建老的 `java.util.Date` 对象。\n\n```java\nClock clock = Clock.systemDefaultZone();  \nlong millis = clock.millis();    \nInstant instant = clock.instant();  \nDate legacyDate = Date.from(instant);   // legacy java.util.Date  \n```\n\n### LocalDate\n\nLocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。\n可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间（如java.util.Date中的2000.01.01表示的实际是这一天的00:00这个瞬间）。\n\nLocalDate类位于java.time包下，类名叫java.time.LocalDate，创建出来的实例也是不可变对象，所以涉及它的计算方法将返回一个新的LocalDate。\n\n**创建一个LocalDate实例**\n\n我们有多种方式可以创建出 `LocalDate` 实例。第一种方法是使用 `now()` 方法获得值为今天当日的 `LocalDate` 对象：\n\n```java\nLocalDate localDate = LocalDate.now();\n```\n\n另一种方法是使用年月日信息构造出LocalDate对象：\n\n```java\nLocalDate localDate2 = LocalDate.of(2018, 7, 19);\n```\n\nLocalDate 的 `of()` 方法创建出一个指定年月日的日期，并且没有时区信息。\n\n**访问日期信息**\n\n可以用如下方法访问LocalDate中的日期信息：\n\n```java\nint   year       = localDate.getYear();\nMonth month      = localDate.getMonth();\nint   dayOfMonth = localDate.getDayOfMonth();\nint   dayOfYear  = localDate.getDayOfYear();\nDayOfWeek dayOfWeek = localDate.getDayOfWeek();\n```\n\n可以注意到getMonth()与getDayOfWeek()方法返回了一个枚举类型代替一个int。你可以通过枚举类型中的getValue()来获得信息。\n\n**LocalDate计算**\n\n你可以进行一堆简单的日期计算，只要使用如下的方法：\n\n- `plusDays()`\n- `plusWeeks()`\n- `plusMonths()`\n- `plusYears()`\n- `minusDays()`\n- `minusWeeks()`\n- `minusMonths()`\n- `minusYears()`\n\n以下举几个使用的例子来帮助理解使用：\n\n```java\nLocalDate d  = LocalDate.of(2018, 7, 19);\nLocalDate d1 = localDate.plusYears(3);\nLocalDate d2 = localDate.minusYears(3);\n```\n\n1. 第一行创建出一个新的LocalDate对象d，表示2018.7.19。\n2. 第二行创建了值等于d日期3年后的LocalDate对象，第三行也是一样，只是值改为d日期的三年前。 \n\n### LocalTime\n\nLocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。\nLocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。\n\n**创建一个LocatTime实例**\n\n有多种方式可以新建LocalTime实例。比如使用当前时间作为值新建对象：\n\n```java\nLocalTime localTime = LocalTime.now();\n```\n\n另一种方式是使用指定的时分秒和纳秒来新建对象：\n\n```java\nLocalTime localTime2 = LocalTime.of(21, 30, 59, 11001);\n```\n\n也有另一种版本的 `of()` 方法只需要小时分钟两项，或时分秒三项值作为参数。\n\n**访问LocalTime对象的时间**\n\n你可以通过这些方法访问其时、分、秒、纳秒：\n\n- `getHour()`\n- `getMinute()`\n- `getSecond()`\n- `getNano()`\n\n**LocalTime的计算**\n\nLocalTime类包含一系列方法，能帮你完成时间计算：\n\n- `plusHours()`\n- `plusMinutes()`\n- `plusSeconds()`\n- `plusNanos()`\n- `minusHours()`\n- `minusMinutes()`\n- `minusSeconds()`\n- `minusNanos()`\n\n以下举一个例子：\n\n```java\nLocalTime localTime2 = LocalTime.of(21, 30, 59, 11001);\nLocalTime localTimeLater   = localTime.plusHours(3);\nLocalTime localTimeEarlier = localTime.minusHours(3);\n```\n\n1. 第一行新建一个LocalTime实例，表示21:30:50的第11001纳秒。\n2. 第二行新建了一个LocalTime实例表示这个时间的三小时后，第三行表示三小时前。\n3. LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。\n\nLocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。\n\n### LocalDateTime\n\nLocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。\n\nLocalDateTime类的值是不可变的，所以其计算方法会返回一个新的LocalDateTime实例。\n\n**创建一个LocatDateTime实例**\n\n可以通过LocalDateTime的静态工厂方法来创建LocalDateTime实例。以下举例使用 `now()` 方法创建：\n\n```java\nLocalDateTime localDateTime = LocalDateTime.now();\n```\n\n另一种方式是使用指定的年月日、时分秒、纳秒来新建对象：\n\n```java\nLocalDateTime localDateTime2 = LocalDateTime.of(2018, 7, 19, 13, 55, 36, 123);\n```\n\n**访问LocalDateTime对象的时间**\n\n你可以通过这些方法访问其日期时间：\n\n- `getYear()`\n- `getMonth()`\n- `getDayOfMonth()`\n- `getDayOfWeek()`\n- `getDayOfYear()`\n- `getHour()`\n- `getMinute()`\n- `getSecond()`\n- `getNano()`\n\n这些方法中有一些返回int有一些返回枚举类型，你可以通过枚举类型中的 `getValue()` 方法来获得int值。\n\n**LocalDateTime的计算**\n\nLocalDateTime 类包含一系列方法，能帮你完成时间计算：\n\n- `plusYears()`\n- `plusMonths()`\n- `plusDays()`\n- `plusHours()`\n- `plusMinutes()`\n- `plusSeconds()`\n- `plusNanos()`\n- `minusYears()`\n- `minusMonths()`\n- `minusDays()`\n- `minusHours()`\n- `minusMinutes()`\n- `minusSeconds()`\n- `minusNanos()`\n\n以下举一个例子：\n\n```java\nLocalDateTime localDateTime  = LocalDateTime.now();\nLocalDateTime localDateTime1 = localDateTime.plusYears(3);\nLocalDateTime localDateTime2 = localDateTime.minusYears(3);\n```\n\n1. 第一行新建一个LocalDateTime实例表示当前这个时间。\n2. 第二行新建了一个LocalDateTime实例表示三年后。\n3. 第三行也新建了一个LocalDateTime实例表示三小时前。\n\n### ZonedDateTime\n\nZonedDateTime类是Java 8中日期时间功能里，用于表示带时区的日期与时间信息的类。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。\n\nZonedDateTime 类的值是不可变的，所以其计算方法会返回一个新的ZonedDateTime 实例。\n\n**创建一个ZonedDateTime实例**\n\n有多种方式可以新建ZonedDateTime实例。比如使用当前时间作为值新建对象：\n\n```java\nZonedDateTime dateTime = ZonedDateTime.now();\n```\n\n另一种方式是使用指定的年月日、时分秒、纳秒以及时区ID来新建对象：\n\n```java\nZoneId zoneId = ZoneId.of(\"UTC+1\");\nZonedDateTime dateTime2 = ZonedDateTime.of(2018, 7, 19, 11, 45, 59, 1234, zoneId);\n```\n\n**访问ZonedDateTime对象的时间**\n\n你可以通过这些方法访问其日期时间：\n\n- `getYear()`\n- `getMonth()`\n- `getDayOfMonth()`\n- `getDayOfWeek()`\n- `getDayOfYear()`\n- `getHour()`\n- `getMinute()`\n- `getSecond()`\n- `getNano()`\n\n这些方法中有一些返回int有一些返回枚举类型，但可以通过枚举类型中的getValue()方法来获得int值。\n\n**ZonedDateTime的计算**\n\nZonedDateTime类包含一系列方法，能帮你完成时间计算：\n\n- `plusYears()`\n- `plusMonths()`\n- `plusDays()`\n- `plusHours()`\n- `plusMinutes()`\n- `plusSeconds()`\n- `plusNanos()`\n- `minusYears()`\n- `minusMonths()`\n- `minusDays()`\n- `minusHours()`\n- `minusMinutes()`\n- `minusSeconds()`\n- `minusNanos()`\n\n但注意计算时，若不巧跨越了夏令时（会补一小时或减一小时），可能得不到希望的结果。一个替代的正确做法是使用Period：\n\n```java\nZonedDateTime zoneDateTime = previousDateTime.plus(Period.ofDays(3));\n```\n\n**时区**\n\n时区是用ZoneId类表示的，你可以使用ZoneId.now()或ZoneId.of(“xxx”)来实例化：\n\n```java\nZoneId zoneId = ZoneId.of(\"UTC+1\");\n```\n\n传给 `of()` 方法的参数是时区的ID，如“UTC+1”指距离UTC（格林威治时间）有一小时的时差，你可以使用你想要的时差来表示ZoneId（如+1与-5等等）\n你也可以使用另一种方式表示zone id，即使用地区名字，也是可以的：\n\n```java\nZoneId zoneId2 = ZoneId.of(\"Europe/Copenhagen\");\nZoneId zoneId3 = ZoneId.of(\"Europe/Paris\");\n```\n\n### DateTimeFormatter\n\nDateTimeFormatter类是Java 8中日期时间功能里，用于解析和格式化日期时间的类，位于 `java.time.format` 包下。\n\n**预定义的DateTimeFormatter实例**\n\nDateTimeFormatter类包含一系列预定义（常量）的实例，可以解析和格式化一些标准时间格式。这将让你免除麻烦的时间格式定义，类中包含如下预定义的实例：\n\n```java\nBASIC_ISO_DATE\n\nISO_LOCAL_DATE\nISO_LOCAL_TIME\nISO_LOCAL_DATE_TIME\n\nISO_OFFSET_DATE\nISO_OFFSET_TIME\nISO_OFFSET_DATE_TIME\n\nISO_ZONED_DATE_TIME\n\nISO_INSTANT\n\nISO_DATE\nISO_TIME\nISO_DATE_TIME\n\nISO_ORDINAL_TIME\nISO_WEEK_DATE\n\nRFC_1123_DATE_TIME\n```\n\n每个预定义的DateTimeFormatter实例都有不同的日期格式，具体的可以查阅Java官方文档。\n\n> PS：推荐使用下期分享的 `Hutool` 工具类做这些格式化工作，格式更加丰富。\n\n**格式化日期**\n\n当你获取一个DateTimeFormatter实例后，就可以用format()方便来将一个日期格式化为某种字符串，例如：\n\n```java\nDateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;\nString formattedDate = formatter.format(LocalDate.now());\nSystem.out.println(formattedDate);\n```\n\n这个样例把LocalDate对象格式化了，并输出20180719，这个输出表示现在2018年，7月19日。\n再举一个关于ZonedDateTime的例子：\n\n```java\nDateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;\nString formattedZonedDate = formatter.format(ZonedDateTime.now());\nSystem.out.println(\"formattedZonedDate = \" + formattedZonedDate);\n```\n\n这个例子会输出：20180719+0800\n表示今年2018年，7月19日，位于UTC+8时区。\n\n### Duration\n\n一个Duration对象表示两个Instant间的一段时间，是在Java 8中加入的新功能。\n\n一个Duration实例是不可变的，当创建出对象后就不能改变它的值了。你只能通过Duration的计算方法，来创建出一个新的Durtaion对象。你会在之后的教程中见到的。\n\n**创建Duration实例**\n\n使用 `Duration` 类的工厂方法来创建一个 `Duration` 对象，以下是一个使用 `between()` 的例子：\n\n```java\nInstant first = Instant.now();\n// 耗时操作，或者 Sleep 一段时间\nInstant second = Instant.now();\nDuration duration = Duration.between(first, second);\n```\n\n**访问Duration的时间**\n\n一个Duration对象里有两个域：纳秒值（小于一秒的部分），秒钟值（一共有几秒），他们的组合表达了时间长度。注意与使用System.getCurrentTimeMillis()时不同，Duration不包含毫秒这个属性。\n你可以通过以下两个方法得到它们的值：\n\n```java\nlong seconds =  duration.getSeconds()\nint nanos   =  duration.getNano()\n```\n\n你也可以转换整个时间到其它单位如纳秒、分钟、小时、天：\n\n- `toNanos()`\n- `toMillis()`\n- `toMinutes()`\n- `toHours()`\n- `toDays()`\n\n举例而言：`toNanos()` 与 `getNano()` 不同，`toNanos()` 获得的是 `Duration` 整个时间共有多少纳秒，\n而 `getNano()` 只是获得这段时间中小于一秒的部分。\n\n**Duration计算**\n\nDuration类包含一系列的计算方法：\n\n- `plusNanos()`\n- `plusMillis()`\n- `plusSeconds()`\n- `plusMinutes()`\n- `plusHours()`\n- `plusDays()`\n- `minusNanos()`\n- `minusMillis()`\n- `minusSeconds()`\n- `minusMinutes()`\n- `minusHours()`\n- `minusDays()`\n\n这些方法所做的事都是相似的，这里展示一个加减的例子：\n\n```java\nDuration start = ... //obtain a start duration\nDuration added      = start.plusDays(3);\nDuration subtracted = start.minusDays(3);\n```\n\n1. 第一行创建了一个Duration对象叫start，具体怎么创建可以参考前面的代码。\n2. 第二三行样例创建了两个新的Duration，通过调用start的加减操作，使得added对象表示的时间比start多三天，而substracted则少三天。\n\n所有的计算方法都会返回一个新的Duration，以保证Duration的不可变属性。\n\n```java\nlong days = duration.toDays();              // 这段时间的总天数\nlong hours = duration.toHours();            // 这段时间的小时数\nlong minutes = duration.toMinutes();        // 这段时间的分钟数\nlong seconds = duration.getSeconds();       // 这段时间的秒数\nlong milliSeconds = duration.toMillis();    // 这段时间的毫秒数\nlong nanoSeconds = duration.toNanos();      // 这段时间的纳秒数\n```\n\n### 其他操作\n\n#### 增加和减少日期\n\nJava 8中的日期/时间类都是不可变的，这是为了保证线程安全。当然，新的日期/时间类也提供了方法用于创建对象的可变版本，比如增加一天或者减少一天：\n\n```java\nLocalDate date = LocalDate.of(2017, 1, 5);          // 2017-01-05\n\nLocalDate date1 = date.withYear(2016);              // 修改为 2016-01-05\nLocalDate date2 = date.withMonth(2);                // 修改为 2017-02-05\nLocalDate date3 = date.withDayOfMonth(1);           // 修改为 2017-01-01\n\nLocalDate date4 = date.plusYears(1);                // 增加一年 2018-01-05\nLocalDate date5 = date.minusMonths(2);              // 减少两个月 2016-11-05\nLocalDate date6 = date.plus(5, ChronoUnit.DAYS);    // 增加5天 2017-01-10\n```\n\n上面例子中对于日期的操作比较简单，但是有些时候我们要面临更复杂的时间操作，比如将时间调到下一个工作日，\n或者是下个月的最后一天，这时候我们可以使用 `with()` 方法的另一个重载方法，它接收一个TemporalAdjuster参数，\n可以使我们更加灵活的调整日期：\n\n```java\nLocalDate date7 = date.with(nextOrSame(DayOfWeek.SUNDAY));      // 返回下一个距离当前时间最近的星期日\nLocalDate date9 = date.with(lastInMonth(DayOfWeek.SATURDAY));   // 返回本月最后一个星期六\n```\n\n要使上面的代码正确编译，你需要使用静态导入 `TemporalAdjusters` 对象：\n\n`import static java.time.temporal.TemporalAdjusters.*;`\n\n`TemporalAdjusters` 类中包含了很多静态方法可以直接使用，下面的表格列出了一些方法：\n\n|            方法名             | 描述                                                        |\n| :---------------------------: | :---------------------------------------------------------- |\n|      `dayOfWeekInMonth`       | 返回同一个月中每周的第几天                                  |\n|       `firstDayOfMonth`       | 返回当月的第一天                                            |\n|     `firstDayOfNextMonth`     | 返回下月的第一天                                            |\n|     `firstDayOfNextYear`      | 返回下一年的第一天                                          |\n|       `firstDayOfYear`        | 返回本年的第一天                                            |\n|        `firstInMonth`         | 返回同一个月中第一个星期几                                  |\n|       `lastDayOfMonth`        | 返回当月的最后一天                                          |\n|     `lastDayOfNextMonth`      | 返回下月的最后一天                                          |\n|      `lastDayOfNextYear`      | 返回下一年的最后一天                                        |\n|        `lastDayOfYear`        | 返回本年的最后一天                                          |\n|         `lastInMonth`         | 返回同一个月中最后一个星期几                                |\n|       `next / previous`       | 返回后一个/前一个给定的星期几                               |\n| `nextOrSame / previousOrSame` | 返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回 |\n\n如果上面表格中列出的方法不能满足你的需求，你还可以创建自定义的 `TemporalAdjuster` 接口的实现，\n`TemporalAdjuster` 也是一个函数式接口，所以我们可以使用Lambda表达式：\n\n```java\n@FunctionalInterface\npublic interface TemporalAdjuster {\n    Temporal adjustInto(Temporal temporal);\n}\n```\n\n比如给定一个日期，计算该日期的下一个工作日（不包括星期六和星期天）：\n\n```java\nLocalDate date = LocalDate.of(2018, 7, 19);\ndate.with(temporal -> {\n    // 当前日期\n    DayOfWeek dayOfWeek = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));\n\n    // 正常情况下，每次增加一天\n    int dayToAdd = 1;\n\n    // 如果是星期五，增加三天\n    if (dayOfWeek == DayOfWeek.FRIDAY) {\n        dayToAdd = 3;\n    }\n    \n    // 如果是星期六，增加两天\n    if (dayOfWeek == DayOfWeek.SATURDAY) {\n        dayToAdd = 2;\n    }\n\n    return temporal.plus(dayToAdd, ChronoUnit.DAYS);\n});\n```\n\n#### 其他历法\n\nJava中使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。\n\n此外Java 8还提供了4套其他历法（很奇怪为什么没有汉族人使用的农历），每套历法都包含一个日期类，分别是：\n\n- `ThaiBuddhistDate`：泰国佛教历\n- `MinguoDate`：中华民国历\n- `JapaneseDate`：日本历\n- `HijrahDate`：伊斯兰历\n\n每个日期类都继承 `ChronoLocalDate` 类，所以可以在不知道具体历法的情况下也可以操作。不过这些历法一般不常用，除非是有某些特殊需求情况下才会使用。\n\n这些不同的历法也可以用于向公历转换：\n\n```java\nLocalDate date = LocalDate.now();\nJapaneseDate jpDate = JapaneseDate.from(date);\n```\n\n由于它们都继承ChronoLocalDate类，所以在不知道具体历法情况下，可以通过ChronoLocalDate类操作日期：\n\n```java\nChronology jpChronology = Chronology.ofLocale(Locale.JAPANESE);\nChronoLocalDate jpChronoLocalDate = jpChronology.dateNow();\n```\n\n我们在开发过程中应该尽量避免使用 `ChronoLocalDate`，尽量用与历法无关的方式操作时间，因为不同的历法计算日期的方式不一样，比如开发者会在程序中做一些假设，假设一年中有12个月，如果是中国农历中包含了闰月，一年有可能是13个月，但开发者认为是12个月，多出来的一个月属于明年的。\n\n再比如假设年份是累加的，过了一年就在原来的年份上加一，但日本天皇在换代之后需要重新纪年，所以过了一年年份可能会从1开始计算。\n\n在实际开发过程中建议使用 `LocalDate`，包括存储、操作、业务规则的解读；除非需要将程序的输入或者输出本地化，这时可以使用 `ChronoLocalDate` 类。\n\n## Base64\n\n在Java 8中，Base64编码已经成为Java类库的标准。\n\nJava 8 内置了 Base64 编码的编码器和解码器，这样不需要使用第三方库就可以进行Base64编码。\n\nBase64工具类提供了一套静态方法获取下面三种BASE64编解码器：\n\n- **基本：**输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。\n- **URL：**输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。\n- **MIME：**输出隐射到MIME友好格式。输出每行不超过76字符，并且使用'\\r'并跟随'\\n'作为分割。编码输出最后没有行分割。\n\n示例：\n\n```java\nfinal String text = \"测试Base64编码\";\n\nfinal String encoded = Base64\n        .getEncoder()\n        .encodeToString(text.getBytes(StandardCharsets.UTF_8));\nSystem.out.println(encoded);\n\nfinal String decoded = new String(\n        Base64.getDecoder().decode(encoded),\n        StandardCharsets.UTF_8);\nSystem.out.println(decoded);\n```\n\n## 参考资料\n\n- [Java 8 新特性](http://www.runoob.com/java/java8-new-features.html)\n- [SimpleDateFormat的线程安全问题与解决方案](http://www.cnblogs.com/zemliu/p/3290585.html)\n- [为什么SimpleDateFormat不是线程安全的？](http://blog.csdn.net/yiifaa/article/details/73499053)\n- [Java获取N天前，N天后的日期（如3天）](http://blog.csdn.net/liuwei0376/article/details/13620879)\n- [What's New in JDK 8](http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html)\n\n## 附录\n\n示例代码地址：https://github.com/xkcoding/java8_learning\n\n如果可以的话，麻烦给个 Star 吧 (♥◠‿◠)ﾉﾞ","slug":"java8-learning","published":1,"updated":"2018-08-20T01:41:06.814Z","layout":"post","photos":[],"link":"","_id":"cjr64il92007okds61bq4kojj","content":"<p>前言：Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。目前大部分公司都已经在使用 Java 8开发项目。本文是我在公司的一次Java 8分享的文章，开篇先介绍了 <strong>Java 8 的发展</strong>，再分别讲述 <strong>Java 8 的新特性</strong>，同时附上一些 Demo 代码（ <a href=\"https://github.com/xkcoding/java8_learning\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning</a> ），以便更好的入门学习 Java 8，厚脸皮的求个 Star。</p>\n<a id=\"more\"></a>\n<h2 id=\"Java-8-的发展\"><a href=\"#Java-8-的发展\" class=\"headerlink\" title=\"Java 8 的发展\"></a>Java 8 的发展</h2><h3 id=\"JDK-5\"><a href=\"#JDK-5\" class=\"headerlink\" title=\"JDK 5\"></a>JDK 5</h3><p><strong>自动装箱与拆箱</strong></p>\n<p>JDK1.5为每一个基本数据类型定义了一个封装类。使java中的基本数据类型也有自己的对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">int --&gt;Integer</div><div class=\"line\">double --&gt; Double</div><div class=\"line\">long --&gt; Long</div><div class=\"line\">char --&gt; Character</div><div class=\"line\"><span class=\"built_in\">float</span> --&gt; Float</div><div class=\"line\">boolean --&gt; Boolean</div><div class=\"line\">short --&gt; Short</div><div class=\"line\">byte -- &gt; Byte</div></pre></td></tr></table></figure>\n<ul>\n<li>自动装包：将基本类型转换成为对象，例如：<code>int --&gt; Integer</code></li>\n<li>自动拆包：将对象转换成为基本数据类型，例如：<code>Integer --&gt; int</code></li>\n</ul>\n<p>对于 JDK1.5 之前集合总不能存放基本数据类型的问题，现在也能够解决。</p>\n<p><strong>枚举</strong></p>\n<p>枚举是 JDK1.5 推出的一个比较重要的特性。其关键字为 <code>enum</code><br>例如：定义代表交通灯的枚举</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> MyEnum&#123;</div><div class=\"line\">    RED,GREEN,YELLOW</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>静态导入</strong></p>\n<ul>\n<li>优点：使用静态导入可以使被导入类的所有静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名。</li>\n<li>缺点：过度使用会降低代码的可读性</li>\n</ul>\n<p><strong>可变参数</strong></p>\n<p>在JDK1.5以前，当我们要为一个方法传递多个类型相同的参数时，<br>我们有两种方法解决</p>\n<ol>\n<li>直接传递一个数组过去</li>\n<li>有多少个参数就传递多少个参数。</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printColor</span><span class=\"params\">(String red,String green,String yellow)</span></span>&#123; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printColor</span><span class=\"params\">(String[] colors)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样编写方法参数虽然能够实现我们想要的效果，但是，这样是不是有点麻烦呢？<br>再者，如果参数个数不确定，我们怎么办呢？Java JDK1.5为我们提供的可变参数就能够完美的解决这个问题.</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printColor</span><span class=\"params\">(String... colors)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果参数的类型相同，那么可以使用 <code>类型+三个点</code> ，后面跟一个参数名称的形式。<br>这样的好处就是，只要参数类型相同，无论传递几个参数都没有限制<br>注意：可变参数必须是参数列表的最后一项（该特性对对象和基本数据类型都适用）</p>\n<p><strong>泛型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//给集合指定存入类型，上面这个集合在存入数据的时候必须存入String类型的数据，否则编译器会报错</span></div><div class=\"line\">List&lt;String&gt; strs = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div></pre></td></tr></table></figure>\n<p>“泛型” 意味着编写的代码可以被不同类型的对象所重用。<br>可见泛型的提出是为了编写重用性更好的代码。<br>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n<p>比如常见的集合类 <code>LinkedList</code>，其实现的接口名后有个特殊的部分 <code>&lt;&gt;</code>，而且它的成员的类型 Link 也包含一个 <code>&lt;&gt;</code>，这个符号的就是类型参数，<br>它使得在运行中，创建一个 LinkedList 时可以传入不同的类型，比如 <code>new LinkedList</code>，这样它的成员存放的类型也是 <code>String</code>。</p>\n<p><strong>For-Each循环</strong></p>\n<p>例如上面这个集合我们可以通过for-each遍历，这样更加简单清晰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(String s : strs)&#123; </div><div class=\"line\">     System.out.println(s); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：使用for-each遍历集合时，要遍历的集合必须实现了Iterator接口</p>\n</blockquote>\n<p><strong>线程并发库</strong></p>\n<p>线程并发库是 Java1.5 提出的关于多线程处理的高级功能，所在包：<code>java.util.concurrent</code> 包括</p>\n<ol>\n<li>线程互斥工具类：<code>Lock</code>，<code>ReadWriteLock</code></li>\n<li>线程通信：<code>Condition</code></li>\n<li>线程池：<code>ExecutorService</code></li>\n<li>同步队列：<code>ArrayBlockingQueue</code></li>\n<li>同步集合：<code>ConcurrentHashMap</code>，<code>CopyOnWriteArrayList</code></li>\n<li>线程同步工具：<code>Semaphore</code></li>\n</ol>\n<h3 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h3><p><strong>Desktop类和SystemTray类</strong></p>\n<p>前者可以用来打开系统默认浏览器浏览指定的URL，打开系统默认邮件客户端给指定的邮箱发邮件，用默认应用程序打开或编辑文件(比如，用记事本打开以 txt 为后缀名的文件)，用系统默认的打印机打印文档；后者可以用来在系统托盘区创建一个托盘程序。</p>\n<p><strong>使用Compiler API</strong></p>\n<p>现在我们可以用JDK1.6 的Compiler API(JSR 199)去动态编译Java源文件，Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。</p>\n<p>这个特性对于某些需要用到动态编译的应用程序相当有用，比如JSP Web Server，当我们手动修改JSP后，是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件。</p>\n<p>当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码，这种方式需要我们产生另一个进程去做编译工作，不够优雅而且容易使代码依赖与特定的操作系统；</p>\n<p>Compiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译，而且是跨平台的。</p>\n<p><strong>轻量级Http Server API</strong></p>\n<p>JDK1.6 提供了一个简单的 Http Server API，据此我们可以构建自己的嵌入式 Http Server，它支持Http和Https协议，提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的 Http Server API来实现，程序员必须自己实现 HttpHandler 接口，HttpServer 会调用 <code>HttpHandler</code> 实现类的回调方法来处理客户端请求，在这里，我们把一个 Http 请求和它的响应称为一个交换，包装成 <code>HttpExchange</code> 类，<code>HttpServer</code> 负责将 <code>HttpExchange</code> 传给 <code>HttpHandler</code> 实现类的回调方法。</p>\n<p><strong>用Console开发控制台程序</strong></p>\n<p>JDK1.6 中提供了 <code>java.io.Console</code> 类专用来访问基于字符的控制台设备。<br>你的程序如果要与 Windows 下的 cmd 或者 Linux 下的 Terminal 交互，就可以用 <code>Console</code> 类代劳。<br>但我们不总是能得到可用的 Console，一个JVM是否有可用的 Console 依赖于底层平台和 JVM 如何被调用。<br>如果JVM是在交互式命令行(比如 Windows 的 cmd)中启动的，并且输入输出没有重定向到另外的地方，那么就可以得到一个可用的 Console 实例。</p>\n<p><strong>对脚本语言的支持</strong></p>\n<p>如：ruby，groovy，javascript。</p>\n<h3 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h3><p><strong>数字变量对下滑线的支持</strong></p>\n<p>JDK1.7可以在数值类型的变量里添加下滑线。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">1234_5678_9</span>; </div><div class=\"line\"><span class=\"keyword\">float</span> num2 = <span class=\"number\">222_33F</span>; </div><div class=\"line\"><span class=\"keyword\">long</span> num3 = <span class=\"number\">123_000_111L</span>;</div></pre></td></tr></table></figure>\n<p>注意，有几个地方是不能添加的：</p>\n<ol>\n<li>数字的开头和结尾 </li>\n<li>小数点前后 </li>\n<li>F或者L前</li>\n</ol>\n<p><strong>switch对String的支持</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">String status = <span class=\"string\">\"orderState\"</span>;     </div><div class=\"line\"><span class=\"keyword\">switch</span> (status) &#123;   </div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"ordercancel\"</span>:   </div><div class=\"line\">        System.out.println(<span class=\"string\">\"订单取消\"</span>);   </div><div class=\"line\">        <span class=\"keyword\">break</span>;   </div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"orderSuccess\"</span>:   </div><div class=\"line\">        System.out.println(<span class=\"string\">\"预订成功\"</span>);   </div><div class=\"line\">        <span class=\"keyword\">break</span>;   </div><div class=\"line\">    <span class=\"keyword\">default</span>:   </div><div class=\"line\">        System.out.println(<span class=\"string\">\"状态未知\"</span>);   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>try-with-resource</strong></p>\n<ul>\n<li><code>try-with-resources</code> 是一个定义了一个或多个资源的 try 声明，这个资源是指程序处理完它之后需要关闭它的对象。</li>\n<li><code>try-with-resources</code> 确保每一个资源在处理完成后都会被关闭。</li>\n</ul>\n<p>可以使用try-with-resources的资源有： 任何实现了 <code>java.lang.AutoCloseable</code> 接口 <code>java.io.Closeable</code> 接口的对象。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">readFirstLineFromFile</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;   </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> (BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(path))) &#123;   </div><div class=\"line\">        <span class=\"keyword\">return</span> br.readLine();   </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 java 7 以及以后的版本里，<code>BufferedReader</code> 实现了 <code>java.lang.AutoCloseable</code> 接口。<br>由于 <code>BufferedReader</code> 定义在 <code>try-with-resources</code> 声明里，无论 <code>try</code> 语句正常还是异常的结束，<br>它都会自动的关掉。而在 java7 以前，你需要使用 <code>finally</code> 块来关掉这个对象。</p>\n<p><strong>捕获多种异常并用改进后的类型检查来重新抛出异常</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">first</span><span class=\"params\">()</span></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;   </div><div class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"\"</span>));   </div><div class=\"line\">        Connection con = <span class=\"keyword\">null</span>;   </div><div class=\"line\">        Statement stmt = con.createStatement();   </div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException | SQLException e) &#123;   </div><div class=\"line\">        <span class=\"comment\">//捕获多个异常，e就是final类型的   </span></div><div class=\"line\">        e.printStackTrace();   </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：用一个 <code>catch</code> 处理多个异常，比用多个 <code>catch</code> 每个处理一个异常生成的字节码要更小更高效。</p>\n<p><strong>创建泛型时类型推断</strong></p>\n<p>只要编译器可以从上下文中推断出类型参数，你就可以用一对空着的尖括号 <code>&lt;&gt;</code> 来代替泛型参数。<br>这对括号私下被称为菱形(diamond)。 在Java SE 7之前，你声明泛型对象时要这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div></pre></td></tr></table></figure>\n<p>而在Java SE7以后，你可以这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div></pre></td></tr></table></figure>\n<p>因为编译器可以从前面(List)推断出推断出类型参数，所以后面的 <code>ArrayList</code> 之后可以不用写泛型参数了，只用一对空着的尖括号就行。<br>当然，你必须带着菱形 <code>&lt;&gt;</code>，否则会有警告的。<br>Java SE7 只支持有限的类型推断：只有构造器的参数化类型在上下文中被显著的声明了，你才可以使用类型推断，否则不行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">list.add(<span class=\"string\">\"A\"</span>); </div><div class=\"line\"><span class=\"comment\">//这个不行 </span></div><div class=\"line\">list.addAll(<span class=\"keyword\">new</span> ArrayList&lt;&gt;()); </div><div class=\"line\"><span class=\"comment\">// 这个可以 </span></div><div class=\"line\">List&lt;? extends String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </div><div class=\"line\">list.addAll(list2);</div></pre></td></tr></table></figure>\n<h3 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h3><p><strong>Lambda表达式和函数式接口</strong></p>\n<p>Lambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理：函数式开发者非常熟悉这些概念。很多JVM平台上的语言（Groovy、Scala等）从诞生之日就支持Lambda表达式，但是Java开发者没有选择，只能使用匿名内部类代替Lambda表达式。<br>Lambda的设计耗费了很多时间和很大的社区力量，最终找到一种折中的实现方案，可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可由逗号分隔的参数列表、-&gt;符号和语句块组成。</p>\n<p>Lambda的设计者们为了让现有的功能与Lambda表达式良好兼容，考虑了很多方法，于是产生了函数接口这个概念。函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。java.lang.Runnable和java.util.concurrent.Callable是函数式接口的最佳例子。在实践中，函数式接口非常脆弱：只要某个开发者在该接口中添加一个函数，则该接口就不再是函数式接口进而导致编译失败。为了克服这种代码层面的脆弱性，并显式说明某个接口是函数式接口，Java 8 提供了一个特殊的注解@FunctionalInterface（Java 库中的所有相关接口都已经带有这个注解了）。</p>\n<p><strong>接口的默认方法和静态方法</strong></p>\n<p>Java 8使用两个新概念扩展了接口的含义：默认方法和静态方法。默认方法使得接口有点类似traits，不过要实现的目标不一样。默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。<br>默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写。<br>由于JVM上的默认方法的实现在字节码层面提供了支持，因此效率非常高。默认方法允许在不打破现有继承体系的基础上改进接口。该特性在官方库中的应用是：给java.util.Collection接口添加新方法，如stream()、parallelStream()、forEach()和removeIf()等等。<br>尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。如果想了解更多细节，可以参考官方文档。</p>\n<p><strong>更好的类型推断</strong></p>\n<p>Java 8 编译器在类型推断方面有很大的提升，在很多场景下编译器可以推导出某个参数的数据类型，从而使得代码更为简洁。</p>\n<p>参数 <code>Value.defaultValue()</code> 的类型由编译器推导得出，不需要显式指明。在Java 7中这段代码会有编译错误，除非使用 <code>Value.&lt;String&gt;defaultValue()</code>。</p>\n<p><strong>Optional</strong></p>\n<p>Java应用中最常见的bug就是空指针异常。在Java 8之前，Google Guava引入了 <code>Optionals</code> 类来解决 <code>NullPointerException</code>，从而避免源码被各种 <code>null</code> 检查污染，以便开发者写出更加整洁的代码。Java 8也将Optional加入了官方库。<br><code>Optional</code> 仅仅是一个容易存放T类型的值或者null。它提供了一些有用的接口来避免显式的null检查，可以参考Java 8官方文档了解更多细节。</p>\n<p>如果Optional实例持有一个非空值，则 <code>isPresent()</code> 方法返回true，否则返回false；<code>orElseGet()</code> 方法，Optional实例持有null，则可以接受一个lambda表达式生成的默认值；map()方法可以将现有的 <code>Optional</code> 实例的值转换成新的值；orElse()方法与orElseGet()方法类似，但是在持有null的时候返回传入的默认值。</p>\n<p><strong>Stream</strong></p>\n<p>新增的Stream API（java.util.stream）将生成环境的函数式编程引入了Java库中。这是目前为止最大的一次对Java库的完善，以便开发者能够写出更加有效、更加简洁和紧凑的代码。</p>\n<p>Task 类有一个分数（或伪复杂度）的概念，另外还有两种状态：OPEN 或者 CLOSED。现在假设有一个task集合，首先看一个问题：在这个task集合中一共有多少个OPEN状态的点？</p>\n<p>在Java 8之前，要解决这个问题，则需要使用foreach循环遍历task集合；但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Collection&lt;Task&gt; tasks = Arrays.asList(</div><div class=\"line\">        <span class=\"keyword\">new</span> Task(Status.OPEN, <span class=\"number\">5</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> Task(Status.OPEN, <span class=\"number\">13</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> Task(Status.CLOSED, <span class=\"number\">8</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用sum()计算所有 OPEN 任务</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> totalPointsOfOpenTasks = tasks</div><div class=\"line\">        .stream()</div><div class=\"line\">        .filter(task -&gt; task.getStatus() == Status.OPEN)</div><div class=\"line\">        .mapToInt(Task::getPoints)</div><div class=\"line\">        .sum();</div><div class=\"line\"></div><div class=\"line\">System.out.println(<span class=\"string\">\"Total points: \"</span> + totalPointsOfOpenTasks);</div></pre></td></tr></table></figure>\n<p>首先，tasks集合被转换成steam表示；其次，在steam上的filter操作会过滤掉所有CLOSED的task；第三，mapToInt操作基于每个task实例的<code>Task::getPoints</code>方法将task流转换成Integer集合；最后，通过sum方法计算总和，得出最后的结果。</p>\n<p><strong>新的日期时间 API</strong></p>\n<p>Java 8引入了新的Date-Time API(JSR 310)来改进时间、日期的处理。时间和日期的管理一直是最令Java开发者痛苦的问题。java.util.Date 和后来的 java.util.Calendar 一直没有解决这个问题（甚至令开发者更加迷茫）。因为上面这些原因，诞生了第三方库Joda-Time，可以替代Java的时间管理API。</p>\n<p>Java 8中新的时间和日期管理API深受Joda-Time影响，并吸收了很多Joda-Time的精华。</p>\n<p>第一，新的java.time包包含了所有关于日期、时间、时区、Instant（跟日期类似但是精确到纳秒）、duration（持续时间）和时钟操作的类。新设计的API认真考虑了这些类的不变性（从java.util.Calendar吸取的教训），如果某个实例需要修改，则返回一个新的对象。</p>\n<p>第二，关注下LocalDate和LocalTime类。LocalDate仅仅包含ISO-8601日历系统中的日期部分；LocalTime则仅仅包含该日历系统中的时间部分。这两个类的对象都可以使用Clock对象构建得到。</p>\n<p>第三，LocalDateTime类包含了LocalDate和LocalTime的信息，但是不包含ISO-8601日历系统中的时区信息。这里有一些关于LocalDate和LocalTime的例子：</p>\n<p>如果你需要特定时区的data/time信息，则可以使用ZoneDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。</p>\n<p><strong>Nashorn JavaScript引擎</strong></p>\n<p>Java 8提供了新的Nashorn JavaScript引擎，使得我们可以在JVM上开发和运行JS应用。<br>Nashorn JavaScript引擎是javax.script.ScriptEngine的另一个实现版本，这类Script引擎遵循相同的规则，允许Java和JavaScript交互使用。</p>\n<p><strong>Base64</strong></p>\n<p>对 Base64 编码的支持已经被加入到Java 8官方库中，这样不需要使用第三方库就可以进行Base64编码。</p>\n<h2 id=\"Lambda-表达式（★★）\"><a href=\"#Lambda-表达式（★★）\" class=\"headerlink\" title=\"Lambda 表达式（★★）\"></a>Lambda 表达式（★★）</h2><blockquote>\n<p>Demo 代码：<a href=\"https://github.com/xkcoding/java8_learning/tree/master/java8-lambda\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning/tree/master/java8-lambda</a></p>\n</blockquote>\n<p>PS：个人理解类似前端 ES6 的箭头函数</p>\n<h3 id=\"命令式和函数式\"><a href=\"#命令式和函数式\" class=\"headerlink\" title=\"命令式和函数式\"></a>命令式和函数式</h3><p><strong>命令式编程</strong>：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。<br><strong>声明式编程</strong>：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。</p>\n<h3 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h3><p>每个人对函数式编程的理解不尽相同。  我的理解是：<strong>在完成一个编程任务时，通过使用不可变的值或函数，对他们进行处理，然后得到另一个值的过程。</strong><br>不同的语言社区往往对各自语言中的特性孤芳自赏。现在谈 Java 程序员如何定义函数式编程还为时尚早，但是，这根本不重要！<br>我们关心的是如何写出好代码，而不是符合函数式编程风格的代码。</p>\n<h3 id=\"行为参数化\"><a href=\"#行为参数化\" class=\"headerlink\" title=\"行为参数化\"></a>行为参数化</h3><p>把算法的策略（行为）作为一个参数传递给函数。</p>\n<h3 id=\"lambda-特点\"><a href=\"#lambda-特点\" class=\"headerlink\" title=\"lambda 特点\"></a>lambda 特点</h3><ul>\n<li>匿名：它不像普通的方法那样有一个明确的名称：写得少而想得多！</li>\n<li>函数：Lambda函数不像方法那样属于某个特定的类。但和方法一样，Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。</li>\n<li>传递：Lambda表达式可以作为参数传递给方法或存储在变量中。</li>\n<li>简洁：无需像匿名类那样写很多模板代码。</li>\n</ul>\n<h3 id=\"函数描述符\"><a href=\"#函数描述符\" class=\"headerlink\" title=\"函数描述符\"></a>函数描述符</h3><p>函数式接口的抽象方法的签名基本上就是Lambda表达式的签名，这种抽象方法叫作函数描述符。</p>\n<h3 id=\"函数式接口，类型推断\"><a href=\"#函数式接口，类型推断\" class=\"headerlink\" title=\"函数式接口，类型推断\"></a>函数式接口，类型推断</h3><p>函数式接口定义且只定义了一个抽象方法，因为抽象方法的签名可以描述Lambda表达式的签名。<br>函数式接口的抽象方法的签名称为函数描述符。<br>所以为了应用不同的Lambda表达式，你需要一套能够描述常见函数描述符的函数式接口。</p>\n<h3 id=\"Lambda-及函数式接口的例子\"><a href=\"#Lambda-及函数式接口的例子\" class=\"headerlink\" title=\"Lambda 及函数式接口的例子\"></a>Lambda 及函数式接口的例子</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">使用案例</th>\n<th style=\"text-align:left\">Lambda 的例子</th>\n<th style=\"text-align:left\">对应的函数式接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">布尔表达式</td>\n<td style=\"text-align:left\"><code>(List&lt;String&gt; list) -&gt; list.isEmpty()</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;List&lt;String&gt;&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">创建对象</td>\n<td style=\"text-align:left\"><code>() -&gt; new Project()</code></td>\n<td style=\"text-align:left\"><code>Supplier&lt;Project&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消费一个对象</td>\n<td style=\"text-align:left\"><code>(Project p) -&gt; System.out.println(p.getStars())</code></td>\n<td style=\"text-align:left\"><code>Consumer&lt;Project&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">从一个对象中选择/提取</td>\n<td style=\"text-align:left\"><code>(int a, int b) -&gt; a * b</code></td>\n<td style=\"text-align:left\"><code>IntBinaryOperator</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">比较两个对象</td>\n<td style=\"text-align:left\"><code>(Project p1, Project p2) -&gt; p1.getStars().compareTo(p2.getStars())</code></td>\n<td style=\"text-align:left\"><code>Comparator&lt;Project&gt; 或 BiFunction&lt;Project,</code> <br> <code>Project, Integer&gt; 或 ToIntBiFunction&lt;Project, Project&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Lambda-小结\"><a href=\"#Lambda-小结\" class=\"headerlink\" title=\"Lambda 小结\"></a>Lambda 小结</h3><ul>\n<li>lambda 表达式可以理解为一种匿名函数：它没有名称，但有参数列表、函数主体、返回 类型，可能还有一个可以抛出的异常的列表。</li>\n<li>lambda 表达式让你可以简洁地传递代码。</li>\n<li>只有在接受函数式接口的地方才可以使用 lambda 表达式。 </li>\n<li>lambda 表达式允许你直接内联，为函数式接口的抽象方法提供实现，并且将整个表达式作为函数式接口的一个实例。 </li>\n<li>Lambda表达式所需要代表的类型称为目标类型。 </li>\n</ul>\n<h2 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h2><p>方法引用让你可以重复使用现有的方法定义，并像Lambda一样传递它们。</p>\n<p>方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p>\n<p>方法引用使用一对冒号<code>::</code>。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .filter(Person::isStudent) <span class=\"comment\">// 就是方法引用</span></div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h2 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h2><blockquote>\n<p>Demo 代码：<a href=\"https://github.com/xkcoding/java8_learning/tree/master/java8-functional\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning/tree/master/java8-functional</a></p>\n</blockquote>\n<p>函数式接口(Functional Interface)就是<strong>一个有且仅有一个抽象方法</strong>，但是可以有多个非抽象方法的接口。</p>\n<p>函数式接口可以被隐式转换为lambda表达式。</p>\n<p>函数式接口可以现有的函数友好地支持 lambda。</p>\n<p>JDK 1.8之前已有的函数式接口:</p>\n<ul>\n<li><strong>java.lang.Runnable</strong></li>\n<li>java.util.concurrent.Callable</li>\n<li>java.security.PrivilegedAction</li>\n<li><strong>java.util.Comparator</strong></li>\n<li>java.io.FileFilter</li>\n<li>java.nio.file.PathMatcher</li>\n<li>java.lang.reflect.InvocationHandler</li>\n<li>java.beans.PropertyChangeListener</li>\n<li>java.awt.event.ActionListener</li>\n<li>javax.swing.event.ChangeListener</li>\n</ul>\n<p>JDK 1.8 新增加的函数接口：</p>\n<ul>\n<li>java.util.function</li>\n</ul>\n<p><code>java.util.function</code> 这个包下包含了很多类，用来支持 Java的 函数式编程，包括 <code>Predicate&lt;T&gt;</code>、<code>Function&lt;T,R&gt;</code>、<code>Supplier&lt;T&gt;</code>、<code>Consumer&lt;T&gt;</code> 和 <code>BinaryOperator&lt;T&gt;</code>。</p>\n<p><code>Comparator</code>、<code>Predicate</code> 和 <code>Function</code> 等函数式接口都有几个可以用来结合 lambda 表达式的默认方法。</p>\n<p><strong>Java 8中的常用函数式接口</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数式接口</th>\n<th style=\"text-align:left\">函数描述符</th>\n<th style=\"text-align:left\">原始类型特化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T-&gt;boolean</code></td>\n<td style=\"text-align:left\"><code>IntPredicate,LongPredicate, DoublePredicate</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Consumer&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T-&gt;void</code></td>\n<td style=\"text-align:left\"><code>IntConsumer,LongConsumer, DoubleConsumer</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Function&lt;T,R&gt;</code></td>\n<td style=\"text-align:left\"><code>T-&gt;R</code></td>\n<td style=\"text-align:left\"><code>IntFunction&lt;R&gt;, IntToDoubleFunction,</code> <br> <code>IntToLongFunction, LongFunction&lt;R&gt;,</code> <br> <code>LongToDoubleFunction, LongToIntFunction,</code> <br> <code>DoubleFunction&lt;R&gt;, ToIntFunction&lt;T&gt;,</code> <br> <code>ToDoubleFunction&lt;T&gt;, ToLongFunction&lt;T&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Supplier&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>()-&gt;T</code></td>\n<td style=\"text-align:left\"><code>BooleanSupplier,IntSupplier, LongSupplier, DoubleSupplier</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>UnaryOperator&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T-&gt;T</code></td>\n<td style=\"text-align:left\"><code>IntUnaryOperator, LongUnaryOperator, DoubleUnaryOperator</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BinaryOperator&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>(T,T)-&gt;T</code></td>\n<td style=\"text-align:left\"><code>IntBinaryOperator, LongBinaryOperator, DoubleBinaryOperator</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BiPredicate&lt;L,R&gt;</code></td>\n<td style=\"text-align:left\"><code>(L,R)-&gt;boolean</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BiConsumer&lt;T,U&gt;</code></td>\n<td style=\"text-align:left\"><code>(T,U)-&gt;void</code></td>\n<td style=\"text-align:left\"><code>ObjIntConsumer&lt;T&gt;, ObjLongConsumer&lt;T&gt;, ObjDoubleConsumer&lt;T&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BiFunction&lt;T,U,R&gt;</code></td>\n<td style=\"text-align:left\"><code>(T,U)-&gt;R</code></td>\n<td style=\"text-align:left\"><code>ToIntBiFunction&lt;T,U&gt;, ToLongBiFunction&lt;T,U&gt;, ToDoubleBiFunction&lt;T,U&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"默认方法\"><a href=\"#默认方法\" class=\"headerlink\" title=\"默认方法\"></a>默认方法</h2><p>新增了接口的默认方法。</p>\n<p>简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。</p>\n<p>我们只需在方法名前面加个default关键字即可实现默认方法。</p>\n<h2 id=\"Stream（★★）\"><a href=\"#Stream（★★）\" class=\"headerlink\" title=\"Stream（★★）\"></a>Stream（★★）</h2><blockquote>\n<p>Demo 代码：<a href=\"https://github.com/xkcoding/java8_learning/tree/master/java8-stream\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning/tree/master/java8-stream</a></p>\n</blockquote>\n<h3 id=\"关于流\"><a href=\"#关于流\" class=\"headerlink\" title=\"关于流\"></a>关于流</h3><h4 id=\"什么是流？\"><a href=\"#什么是流？\" class=\"headerlink\" title=\"什么是流？\"></a>什么是流？</h4><p>流是Java8引入的全新概念，它用来处理集合中的数据，暂且可以把它理解为一种高级集合。<br>众所周知，集合操作非常麻烦，若要对集合进行筛选、投影，需要写大量的代码，而流是以声明的形式操作集合，它就像SQL语句，我们只需告诉流需要对集合进行什么操作，它就会自动进行操作，并将执行结果交给你，无需我们自己手写代码。<br>因此，流的集合操作对我们来说是透明的，我们只需向流下达命令，它就会自动把我们想要的结果给我们。由于操作过程完全由Java处理，因此它可以根据当前硬件环境选择最优的方法处理，我们也无需编写复杂又容易出错的多线程代码了。</p>\n<h4 id=\"流的特点\"><a href=\"#流的特点\" class=\"headerlink\" title=\"流的特点\"></a>流的特点</h4><ol>\n<li>只能遍历一次<br>我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。<br>一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。</li>\n<li>采用内部迭代方式<br>若要对集合进行处理，则需我们手写处理代码，这就叫做外部迭代。<br>而要对流进行处理，我们只需告诉流我们需要什么结果，处理过程由流自行完成，这就称为内部迭代。</li>\n</ol>\n<h4 id=\"流的操作种类\"><a href=\"#流的操作种类\" class=\"headerlink\" title=\"流的操作种类\"></a>流的操作种类</h4><p>流的操作分为两种，分别为中间操作和终端操作。</p>\n<ol>\n<li>中间操作<br>当数据源中的数据上了流水线后，这个过程对数据进行的所有操作都称为“中间操作”。<br>中间操作仍然会返回一个流对象，因此多个中间操作可以串连起来形成一个流水线。</li>\n<li>终端操作<br>当所有的中间操作完成后，若要将数据从流水线上拿下来，则需要执行终端操作。<br>终端操作将返回一个执行结果，这就是你想要的数据。</li>\n</ol>\n<h4 id=\"流的操作过程\"><a href=\"#流的操作过程\" class=\"headerlink\" title=\"流的操作过程\"></a>流的操作过程</h4><p>使用流一共需要三步：</p>\n<ol>\n<li>准备一个数据源</li>\n<li>执行中间操作<br>中间操作可以有多个，它们可以串连起来形成流水线。</li>\n<li>执行终端操作<br>执行终端操作后本次流结束，你将获得一个执行结果。</li>\n</ol>\n<h3 id=\"使用流\"><a href=\"#使用流\" class=\"headerlink\" title=\"使用流\"></a>使用流</h3><h4 id=\"创建流\"><a href=\"#创建流\" class=\"headerlink\" title=\"创建流\"></a>创建流</h4><p>在使用流之前，首先需要拥有一个数据源，并通过StreamAPI提供的一些方法获取该数据源的流对象。数据源可以有多种形式：</p>\n<p><strong>1. 集合</strong></p>\n<p>这种数据源较为常用，通过stream()方法即可获取流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;(); </div><div class=\"line\">Stream&lt;Person&gt; stream = list.stream();</div></pre></td></tr></table></figure>\n<p><strong>2. 数组</strong></p>\n<p>通过Arrays类提供的静态函数stream()获取数组的流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] names = &#123;<span class=\"string\">\"chaimm\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"john\"</span>&#125;;</div><div class=\"line\">Stream&lt;String&gt; stream = Arrays.stream(names);</div></pre></td></tr></table></figure>\n<p><strong>3. 值</strong></p>\n<p>直接将几个值变成流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Stream&lt;String&gt; stream = Stream.of(<span class=\"string\">\"chaimm\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"john\"</span>);</div></pre></td></tr></table></figure>\n<p><strong>4. 文件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>(Stream lines = Files.lines(Paths.get(<span class=\"string\">\"文件路径名\"</span>),Charset.defaultCharset()))&#123;</div><div class=\"line\">    <span class=\"comment\">//可对lines做一些操作</span></div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(IOException e)&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：Java7简化了IO操作，把打开IO操作放在try后的括号中即可省略关闭IO的代码。</p>\n</blockquote>\n<p><strong>5. iterator</strong></p>\n<p><strong>创建无限流</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">2</span>)</div><div class=\"line\">      .limit(<span class=\"number\">10</span>)</div><div class=\"line\">      .forEach(System.out::println);</div></pre></td></tr></table></figure>\n<h4 id=\"筛选-filter\"><a href=\"#筛选-filter\" class=\"headerlink\" title=\"筛选 filter\"></a>筛选 filter</h4><p>filter 函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。<br>如，筛选出所有学生：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .filter(Person::isStudent)</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"去重distinct\"><a href=\"#去重distinct\" class=\"headerlink\" title=\"去重distinct\"></a>去重distinct</h4><p>去掉重复的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .distinct()</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：对象去重的时候，需要注意重写 equals 和 hashcode 方法</p>\n</blockquote>\n<h4 id=\"截取\"><a href=\"#截取\" class=\"headerlink\" title=\"截取\"></a>截取</h4><p>截取流的前N个元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .limit(<span class=\"number\">3</span>)</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"跳过\"><a href=\"#跳过\" class=\"headerlink\" title=\"跳过\"></a>跳过</h4><p>跳过流的前n个元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .skip(<span class=\"number\">3</span>)</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"映射\"><a href=\"#映射\" class=\"headerlink\" title=\"映射\"></a>映射</h4><p>对流中的每个元素执行一个函数，使得元素转换成另一种类型输出。流会将每一个元素输送给map函数，并执行map中的Lambda表达式，最后将执行结果存入一个新的流中。<br>如，获取每个人的姓名(实则是将Perosn类型转换成String类型)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; result = list.stream()</div><div class=\"line\">                    .map(Person::getName)</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"合并多个流\"><a href=\"#合并多个流\" class=\"headerlink\" title=\"合并多个流\"></a>合并多个流</h4><p>例：列出List中各不相同的单词，List集合如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">list.add(<span class=\"string\">\"I am a boy\"</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"I love the girl\"</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"But the girl loves another girl\"</span>);</div></pre></td></tr></table></figure>\n<p>思路如下：</p>\n<p>首先将list变成流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream();</div></pre></td></tr></table></figure>\n<p>按空格分词：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream()</div><div class=\"line\">            .map(line-&gt;line.split(<span class=\"string\">\" \"</span>));</div></pre></td></tr></table></figure>\n<p>分完词之后，每个元素变成了一个String[]数组。</p>\n<p>将每个 <code>String[]</code> 变成流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream()</div><div class=\"line\">            .map(line-&gt;line.split(<span class=\"string\">\" \"</span>))</div><div class=\"line\">            .map(Arrays::stream)</div></pre></td></tr></table></figure>\n<p>此时一个大流里面包含了一个个小流，我们需要将这些小流合并成一个流。</p>\n<p>将小流合并成一个大流：用 <code>flatMap</code> 替换刚才的 map</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream()</div><div class=\"line\">    .map(line-&gt;line.split(<span class=\"string\">\" \"</span>))</div><div class=\"line\">    .flatMap(Arrays::stream)</div></pre></td></tr></table></figure>\n<p>去重</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream()</div><div class=\"line\">    .map(line-&gt;line.split(<span class=\"string\">\" \"</span>))</div><div class=\"line\">    .flatMap(Arrays::stream)</div><div class=\"line\">    .distinct()</div><div class=\"line\">    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"是否匹配任一元素：anyMatch\"><a href=\"#是否匹配任一元素：anyMatch\" class=\"headerlink\" title=\"是否匹配任一元素：anyMatch\"></a>是否匹配任一元素：anyMatch</h4><p>anyMatch用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。<br>如，判断list中是否有学生：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> result = list.stream()</div><div class=\"line\">            .anyMatch(Person::isStudent);</div></pre></td></tr></table></figure>\n<h4 id=\"是否匹配所有元素：allMatch\"><a href=\"#是否匹配所有元素：allMatch\" class=\"headerlink\" title=\"是否匹配所有元素：allMatch\"></a>是否匹配所有元素：allMatch</h4><p>allMatch用于判断流中的所有元素是否都满足指定条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。<br>如，判断是否所有人都是学生：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> result = list.stream()</div><div class=\"line\">            .allMatch(Person::isStudent);</div></pre></td></tr></table></figure>\n<h4 id=\"是否未匹配所有元素：noneMatch\"><a href=\"#是否未匹配所有元素：noneMatch\" class=\"headerlink\" title=\"是否未匹配所有元素：noneMatch\"></a>是否未匹配所有元素：noneMatch</h4><p>noneMatch与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> result = list.stream()</div><div class=\"line\">            .noneMatch(Person::isStudent);</div></pre></td></tr></table></figure>\n<h4 id=\"获取任一元素findAny\"><a href=\"#获取任一元素findAny\" class=\"headerlink\" title=\"获取任一元素findAny\"></a>获取任一元素findAny</h4><p>findAny能够从流中随便选一个元素出来，它返回一个Optional类型的元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;Person&gt; person = list.stream().findAny();</div></pre></td></tr></table></figure>\n<h4 id=\"获取第一个元素findFirst\"><a href=\"#获取第一个元素findFirst\" class=\"headerlink\" title=\"获取第一个元素findFirst\"></a>获取第一个元素findFirst</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;Person&gt; person = list.stream().findFirst();</div></pre></td></tr></table></figure>\n<h4 id=\"归约\"><a href=\"#归约\" class=\"headerlink\" title=\"归约\"></a>归约</h4><p>归约是将集合中的所有元素经过指定运算，折叠成一个元素输出，如：求最值、平均数等，这些操作都是将一个集合的元素折叠成一个元素输出。</p>\n<p>在流中，reduce函数能实现归约。<br>reduce函数接收两个参数：</p>\n<ol>\n<li>初始值</li>\n<li>进行归约操作的Lambda表达式</li>\n</ol>\n<p><strong>元素求和：自定义Lambda表达式实现求和</strong></p>\n<p>例：计算所有人的年龄总和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> age = list.stream().reduce(<span class=\"number\">0</span>, (person1,person2)-&gt;person1.getAge()+person2.getAge());</div></pre></td></tr></table></figure>\n<ol>\n<li>reduce的第一个参数表示初始值为0；</li>\n<li>reduce的第二个参数为需要进行的归约操作，它接收一个拥有两个参数的Lambda表达式，reduce会把流中的元素两两输给Lambda表达式，最后将计算出累加之和。</li>\n</ol>\n<p><strong>元素求和：使用Integer.sum函数求和</strong></p>\n<p>上面的方法中我们自己定义了Lambda表达式实现求和运算，如果当前流的元素为数值类型，那么可以使用Integer提供了sum函数代替自定义的Lambda表达式，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> age = list.stream().reduce(<span class=\"number\">0</span>, Integer::sum);</div></pre></td></tr></table></figure>\n<p>Integer类还提供了 <code>min</code>、<code>max</code> 等一系列数值操作，当流中元素为数值类型时可以直接使用。</p>\n<h4 id=\"数值流的使用\"><a href=\"#数值流的使用\" class=\"headerlink\" title=\"数值流的使用\"></a>数值流的使用</h4><p>采用reduce进行数值操作会涉及到基本数值类型和引用数值类型之间的装箱、拆箱操作，因此效率较低。<br>当流操作为纯数值操作时，使用数值流能获得较高的效率。</p>\n<p><strong>将普通流转换成数值流</strong></p>\n<p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。<br>如，将Person中的age转换成数值流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IntStream stream = list.stream().mapToInt(Person::getAge);</div></pre></td></tr></table></figure>\n<p><strong>数值计算</strong></p>\n<p>每种数值流都提供了数值计算函数，如max、min、sum等。如，找出最大的年龄：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">OptionalInt maxAge = list.stream()</div><div class=\"line\">                                .mapToInt(Person::getAge)</div><div class=\"line\">                                .max();</div></pre></td></tr></table></figure>\n<p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回<code>OptionalInt</code>，它是<code>Optional</code>的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。<br>此外，<code>mapToInt</code>、<code>mapToDouble</code>、<code>mapToLong</code>进行数值操作后的返回结果分别为：<code>OptionalInt</code>、<code>OptionalDouble</code>、<code>OptionalLong</code></p>\n<h3 id=\"中间操作和收集操作\"><a href=\"#中间操作和收集操作\" class=\"headerlink\" title=\"中间操作和收集操作\"></a>中间操作和收集操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">使用的类型/函数式接口</th>\n<th style=\"text-align:left\">函数描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>filter</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>distinct</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>skip</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>map</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;R&gt;</code></td>\n<td style=\"text-align:left\"><code>Function&lt;T, R&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; R</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>flatMap</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;R&gt;</code></td>\n<td style=\"text-align:left\"><code>Function&lt;T, Stream&lt;R&gt;&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; Stream&lt;R&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>limit</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sorted</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>Comparator&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>(T, T) -&gt; int</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>anyMatch</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>noneMatch</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>allMatch</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>findAny</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>findFirst</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>forEach</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>void</code></td>\n<td style=\"text-align:left\"><code>Consumer&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; void</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>collect</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>R</code></td>\n<td style=\"text-align:left\"><code>Collector&lt;T, A, R&gt;</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>reduce</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>BinaryOperator&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>(T, T) -&gt; T</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>count</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>long</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Collectors-收集\"><a href=\"#Collectors-收集\" class=\"headerlink\" title=\"Collectors 收集\"></a>Collectors 收集</h3><p>收集器用来将经过筛选、映射的流进行最后的整理，可以使得最后的结果以不同的形式展现。<br><code>collect</code> 方法即为收集器，它接收 <code>Collector</code> 接口的实现作为具体收集器的收集方法。<br><code>Collector</code> 接口提供了很多默认实现的方法，我们可以直接使用它们格式化流的结果；也可以自定义 <code>Collector</code> 接口的实现，从而定制自己的收集器。</p>\n<h4 id=\"归约-1\"><a href=\"#归约-1\" class=\"headerlink\" title=\"归约\"></a>归约</h4><p>流由一个个元素组成，归约就是将一个个元素“折叠”成一个值，如求和、求最值、求平均值都是归约操作。</p>\n<h4 id=\"一般性归约\"><a href=\"#一般性归约\" class=\"headerlink\" title=\"一般性归约\"></a>一般性归约</h4><p>若你需要自定义一个归约操作，那么需要使用 <code>Collectors.reducing</code> 函数，该函数接收三个参数：</p>\n<ul>\n<li>第一个参数为归约的初始值</li>\n<li>第二个参数为归约操作进行的字段</li>\n<li>第三个参数为归约操作的过程</li>\n</ul>\n<h3 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h3><p>Collectors类专门为汇总提供了一个工厂方法：<code>Collectors.summingInt</code>。<br>它可接受一 个把对象映射为求和所需int的函数，并返回一个收集器；该收集器在传递给普通的 <code>collect</code> 方法后即执行我们需要的汇总操作。</p>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><p>数据分组是一种更自然的分割数据操作，分组就是将流中的元素按照指定类别进行划分，类似于SQL语句中的 <code>GROUPBY</code>。</p>\n<h4 id=\"多级分组\"><a href=\"#多级分组\" class=\"headerlink\" title=\"多级分组\"></a>多级分组</h4><p>多级分组可以支持在完成一次分组后，分别对每个小组再进行分组。<br>使用具有两个参数的 <code>groupingBy</code> 重载方法即可实现多级分组。</p>\n<ul>\n<li>第一个参数：一级分组的条件</li>\n<li>第二个参数：一个新的 <code>groupingBy</code> 函数，该函数包含二级分组的条件</li>\n</ul>\n<p><strong>Collectors 类的静态工厂方法</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">工厂方法</th>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">用途</th>\n<th style=\"text-align:left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>toList</code></td>\n<td style=\"text-align:left\"><code>List&lt;T&gt;</code></td>\n<td style=\"text-align:left\">把流中所有项目收集到一个 List</td>\n<td style=\"text-align:left\"><code>List&lt;Project&gt; projects = projectStream.collect(toList());</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toSet</code></td>\n<td style=\"text-align:left\"><code>Set&lt;T&gt;</code></td>\n<td style=\"text-align:left\">把流中所有项目收集到一个 Set，删除重复项</td>\n<td style=\"text-align:left\"><code>Set&lt;Project&gt; projects = projectStream.collect(toSet());</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toCollection</code></td>\n<td style=\"text-align:left\"><code>Collection&lt;T&gt;</code></td>\n<td style=\"text-align:left\">把流中所有项目收集到给定的供应源创建的集合</td>\n<td style=\"text-align:left\"><code>Collection&lt;Project&gt; projects = projectStream.collect(toCollection(), ArrayList::new);</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>counting</code></td>\n<td style=\"text-align:left\"><code>Long</code></td>\n<td style=\"text-align:left\">计算流中元素的个数</td>\n<td style=\"text-align:left\"><code>long howManyProjects = projectStream.collect(counting());</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>summingInt</code></td>\n<td style=\"text-align:left\"><code>Integer</code></td>\n<td style=\"text-align:left\">对流中项目的一个整数属性求和</td>\n<td style=\"text-align:left\"><code>int totalStars = projectStream.collect(summingInt(Project::getStars));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>averagingInt</code></td>\n<td style=\"text-align:left\"><code>Double</code></td>\n<td style=\"text-align:left\">计算流中项目 Integer 属性的平均值</td>\n<td style=\"text-align:left\"><code>double avgStars = projectStream.collect(averagingInt(Project::getStars));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>summarizingInt</code></td>\n<td style=\"text-align:left\"><code>IntSummaryStatistics</code></td>\n<td style=\"text-align:left\">收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值</td>\n<td style=\"text-align:left\"><code>IntSummaryStatistics projectStatistics = projectStream.collect(summarizingInt(Project::getStars));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>joining</code></td>\n<td style=\"text-align:left\"><code>String</code></td>\n<td style=\"text-align:left\">连接对流中每个项目调用 toString 方法所生成的字符串</td>\n<td style=\"text-align:left\"><code>String shortProject = projectStream.map(Project::getName).collect(joining(&quot;, &quot;));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>maxBy</code></td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\">按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty()</td>\n<td style=\"text-align:left\"><code>Optional&lt;Project&gt; fattest = projectStream.collect(maxBy(comparingInt(Project::getStars)));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>minBy</code></td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\">按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty()</td>\n<td style=\"text-align:left\"><code>Optional&lt;Project&gt; fattest = projectStream.collect(minBy(comparingInt(Project::getStars)));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>reducing</code></td>\n<td style=\"text-align:left\">归约操作产生的类型</td>\n<td style=\"text-align:left\">从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值</td>\n<td style=\"text-align:left\"><code>int totalStars = projectStream.collect(reducing(0, Project::getStars, Integer::sum));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>collectingAndThen</code></td>\n<td style=\"text-align:left\">转换函数返回的类型</td>\n<td style=\"text-align:left\">包含另一个收集器，对其结果应用转换函数</td>\n<td style=\"text-align:left\"><code>int howManyProjects = projectStream.collect(collectingAndThen(toList(), List::size));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>groupingBy</code></td>\n<td style=\"text-align:left\"><code>Map&lt;K, List&lt;T&gt;&gt;</code></td>\n<td style=\"text-align:left\">根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键</td>\n<td style=\"text-align:left\"><code>Map&lt;String,List&lt;Project&gt;&gt; projectByLanguage = projectStream.collect(groupingBy(Project::getLanguage));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>partitioningBy</code></td>\n<td style=\"text-align:left\"><code>Map&lt;Boolean,List&lt;T&gt;&gt;</code></td>\n<td style=\"text-align:left\">根据对流中每个项目应用断言的结果来对项目进行分区</td>\n<td style=\"text-align:left\"><code>Map&lt;Boolean,List&lt;Project&gt;&gt; vegetarianDishes = projectStream.collect(partitioningBy(Project::isVegetarian));</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"转换类型\"><a href=\"#转换类型\" class=\"headerlink\" title=\"转换类型\"></a>转换类型</h4><p>有一些收集器可以生成其他集合。比如前面已经见过的 <code>toList</code>，生成了 <code>java.util.List</code> 类的实例。<br>还有 <code>toSet</code> 和 <code>toCollection</code>，分别生成 <code>Set</code> 和 <code>Collection</code> 类的实例。<br>到目前为止， 我已经讲了很多流上的链式操作，但总有一些时候，需要最终生成一个集合——比如：</p>\n<ul>\n<li>已有代码是为集合编写的，因此需要将流转换成集合传入；</li>\n<li>在集合上进行一系列链式操作后，最终希望生成一个值；</li>\n<li>写单元测试时，需要对某个具体的集合做断言。</li>\n</ul>\n<p>使用 <code>Collectors.toCollection</code>，用定制的集合收集元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">stream.collect(Collectors.toCollection(TreeSet::<span class=\"keyword\">new</span>));</div></pre></td></tr></table></figure>\n<p>还可以利用收集器让流生成一个值。 <code>maxBy</code> 和 <code>minBy</code> 允许用户按某种特定的顺序生成一个值。</p>\n<h4 id=\"数据分区\"><a href=\"#数据分区\" class=\"headerlink\" title=\"数据分区\"></a>数据分区</h4><p>分区是分组的特殊情况：由一个断言（返回一个布尔值的函数）作为分类函数，它称分区函数。<br>分区函数返回一个布尔值，这意味着得到的分组 <code>Map</code> 的键类型是 <code>Boolean</code>，于是它最多可以分为两组: true是一组，false是一组。</p>\n<p>分区的好处在于保留了分区函数返回true或false的两套流元素列表。</p>\n<h4 id=\"并行流\"><a href=\"#并行流\" class=\"headerlink\" title=\"并行流\"></a>并行流</h4><p>并行流就是一个把内容分成多个数据块，并用不不同的线程分别处理每个数据块的流。最后合并每个数据块的计算结果。</p>\n<p>将一个顺序执行的流转变成一个并发的流只要调用 <code>parallel()</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">parallelSum</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Stream.iterate(<span class=\"number\">1L</span>, i -&gt; i +<span class=\"number\">1</span>).limit(n).parallel().reduce(<span class=\"number\">0L</span>,Long::sum);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将一个并发流转成顺序的流只要调用 <code>sequential()</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">stream.parallel().filter(...).sequential().map(...).parallel().reduce();</div></pre></td></tr></table></figure>\n<p>这两个方法可以多次调用，只有最后一个调用决定这个流是顺序的还是并发的。</p>\n<p>并发流使用的默认线程数等于你机器的处理器核心数。</p>\n<p>通过这个方法可以修改这个值，这是全局属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.setProperty(<span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>, <span class=\"string\">\"12\"</span>);</div></pre></td></tr></table></figure>\n<p>并非使用多线程并行流处理数据的性能一定高于单线程顺序流的性能，因为性能受到多种因素的影响。<br>如何高效使用并发流的一些建议：</p>\n<ol>\n<li>如果不确定， 就自己测试。</li>\n<li>尽量使用基本类型的流 <code>IntStream</code>, <code>LongStream</code>, <code>DoubleStream</code></li>\n<li>有些操作使用并发流的性能会比顺序流的性能更差，比如limit，findFirst，依赖元素顺序的操作在并发流中是极其消耗性能的。findAny的性能就会好很多，应为不依赖顺序。</li>\n<li>考虑流中计算的性能(Q)和操作的性能(N)的对比, Q表示单个处理所需的时间，N表示需要处理的数量，如果Q的值越大, 使用并发流的性能就会越高。</li>\n<li>数据量不大时使用并发流，性能得不到提升。</li>\n<li>考虑数据结构：并发流需要对数据进行分解，不同的数据结构被分解的性能时不一样的。</li>\n</ol>\n<p><strong>流的数据源和可分解性</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">源</th>\n<th style=\"text-align:left\">可分解性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ArrayList</code></td>\n<td style=\"text-align:left\">非常好</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>LinkedList</code></td>\n<td style=\"text-align:left\">差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>IntStream.range</code></td>\n<td style=\"text-align:left\">非常好</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Stream.iterate</code></td>\n<td style=\"text-align:left\">差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HashSet</code></td>\n<td style=\"text-align:left\">好</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TreeSet</code></td>\n<td style=\"text-align:left\">好</td>\n</tr>\n</tbody>\n</table>\n<p><strong>流的特性以及中间操作对流的修改都会对数据对分解性能造成影响。 比如固定大小的流在任务分解的时候就可以平均分配，但是如果有filter操作，那么流就不能预先知道在这个操作后还会剩余多少元素。</strong></p>\n<p><strong>考虑终端操作的性能：如果终端操作在合并并发流的计算结果时的性能消耗太大，那么使用并发流提升的性能就会得不偿失。</strong></p>\n<h2 id=\"Optional-类（★）\"><a href=\"#Optional-类（★）\" class=\"headerlink\" title=\"Optional 类（★）\"></a>Optional 类（★）</h2><p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>\n<p>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</p>\n<p>Optional 类的引入很好的解决空指针异常。</p>\n<h3 id=\"Optional类的方法\"><a href=\"#Optional类的方法\" class=\"headerlink\" title=\"Optional类的方法\"></a>Optional类的方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>empty</code></td>\n<td style=\"text-align:left\">返回一个空的 Optional 实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>filter</code></td>\n<td style=\"text-align:left\">如果值存在并且满足提供的断言， 就返回包含该值的 Optional 对象；否则返回一个空的 Optional 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>map</code></td>\n<td style=\"text-align:left\">如果值存在，就对该值执行提供的 mapping 函数调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>flatMap</code></td>\n<td style=\"text-align:left\">如果值存在，就对该值执行提供的 mapping 函数调用，返回一个 Optional 类型的值，否则就返 回一个空的 Optional 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>get</code></td>\n<td style=\"text-align:left\">如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ifPresent</code></td>\n<td style=\"text-align:left\">如果值存在，就执行使用该值的方法调用，否则什么也不做</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>isPresent</code></td>\n<td style=\"text-align:left\">如果值存在就返回 true，否则返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>of</code></td>\n<td style=\"text-align:left\">将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ofNullable</code></td>\n<td style=\"text-align:left\">将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>orElse</code></td>\n<td style=\"text-align:left\">如果有值则将其返回，否则返回一个默认值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>orElseGet</code></td>\n<td style=\"text-align:left\">如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>orElseThrow</code></td>\n<td style=\"text-align:left\">如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Nashorn-JavaScript-引擎\"><a href=\"#Nashorn-JavaScript-引擎\" class=\"headerlink\" title=\"Nashorn, JavaScript 引擎\"></a>Nashorn, JavaScript 引擎</h2><p>Nashorn 一个 javascript 引擎。</p>\n<p>从JDK 1.8开始，Nashorn取代Rhino(JDK 1.6, JDK1.7)成为Java的嵌入式JavaScript引擎。Nashorn完全支持ECMAScript 5.1规范以及一些扩展。它使用基于JSR 292的新语言特性，其中包含在JDK 7中引入的invokedynamic，将JavaScript编译成Java字节码。</p>\n<p>与先前的Rhino实现相比，这带来了2到10倍的性能提升。</p>\n<h2 id=\"新的日期时间-API（★★）\"><a href=\"#新的日期时间-API（★★）\" class=\"headerlink\" title=\"新的日期时间 API（★★）\"></a>新的日期时间 API（★★）</h2><blockquote>\n<p>Demo 代码：<a href=\"https://github.com/xkcoding/java8_learning/tree/master/java8-datetime\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning/tree/master/java8-datetime</a></p>\n</blockquote>\n<h3 id=\"ZoneId\"><a href=\"#ZoneId\" class=\"headerlink\" title=\"ZoneId\"></a>ZoneId</h3><p>Java 8中的时区操作被很大程度上简化了，新的时区类 <code>java.time.ZoneId</code> 是原有的 <code>java.util.TimeZone</code> 类的替代品。<br>ZoneId对象可以通过 <code>ZoneId.of()</code> 方法创建，也可以通过 <code>ZoneId.systemDefault()</code> 获取系统默认时区：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId shanghaiZoneId = ZoneId.of(<span class=\"string\">\"Asia/Shanghai\"</span>);</div><div class=\"line\">ZoneId systemZoneId = ZoneId.systemDefault();</div></pre></td></tr></table></figure>\n<p><code>of()</code> 方法接收一个“区域/城市”的字符串作为参数，你可以通过 <code>getAvailableZoneIds()</code> 方法获取所有合法的“区域/城市”字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</div></pre></td></tr></table></figure>\n<p>对于老的时区类 <code>TimeZone</code>，Java 8也提供了转化方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId oldToNewZoneId = TimeZone.getDefault().toZoneId();</div></pre></td></tr></table></figure>\n<p>有了 <code>ZoneId</code>，我们就可以将一个 <code>LocalDate</code>、<code>LocalTime</code> 或 <code>LocalDateTime</code> 对象转化为 <code>ZonedDateTime</code> 对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime localDateTime = LocalDateTime.now();</div><div class=\"line\">ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, shanghaiZoneId);</div></pre></td></tr></table></figure>\n<p><code>ZonedDateTime</code> 对象由两部分构成，<code>LocalDateTime</code> 和 <code>ZoneId</code>，其中 <code>2018-03-03T15:26:56.147</code> 部分为 <code>LocalDateTime</code>，<code>+08:00[Asia/Shanghai]</code> 部分为ZoneId。</p>\n<p>另一种表示时区的方式是使用 <code>ZoneOffset</code>，它是以当前时间和 <strong>世界标准时间（UTC）/格林威治时间（GMT）</strong> 的偏差来计算，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneOffset zoneOffset = ZoneOffset.of(<span class=\"string\">\"+09:00\"</span>);</div><div class=\"line\">LocalDateTime localDateTime = LocalDateTime.now();</div><div class=\"line\">OffsetDateTime offsetDateTime = OffsetDateTime.of(localDateTime, zoneOffset);</div></pre></td></tr></table></figure>\n<h3 id=\"Instant\"><a href=\"#Instant\" class=\"headerlink\" title=\"Instant\"></a>Instant</h3><p>Instant类在Java日期与时间功能中，表示了时间线上一个确切的点，定义为距离初始时间的时间差（初始时间为GMT 1970年1月1日00:00）经测量一天有86400秒，从初始时间开始不断向前移动。</p>\n<p><strong>创建一个Instant实例</strong></p>\n<p>你可以通过Instant类的工厂方法创建一个Instant实例，例如你可以调用instant.now()来创建一个确切的表达当前时间的Instant对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Instant now = Instant.now();</div></pre></td></tr></table></figure>\n<p>另外也有一些其它方法能创建Instant，具体请查阅Java官方文档。</p>\n<p><strong>访问Instant的时间</strong></p>\n<p>一个Instant对象里有两个域：距离初始时间的秒钟数、在当前一秒内的第几纳秒，他们的组合表达了当前时间点。你可以通过以下两个方法得到它们的值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> seconds =  now.getEpochSecond()</div><div class=\"line\"><span class=\"keyword\">int</span> nanos   =   now.getNano()</div></pre></td></tr></table></figure>\n<p><strong>Instant的计算</strong></p>\n<p>Instant类有一些方法，可以用于获得另一Instant的值，例如：</p>\n<ul>\n<li><code>plusSeconds()</code></li>\n<li><code>plusMillis()</code></li>\n<li><code>plusNanos()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusMillis()</code></li>\n<li><code>minusNanos()</code></li>\n</ul>\n<p>我下面将向你展示两个例子，来说明这些方法如何使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Instant now     = Instant.now();</div><div class=\"line\">Instant later   = now.plusSeconds(<span class=\"number\">3</span>);</div><div class=\"line\">Instant earlier = now.minusSeconds(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<p>第一行获得了一个Instant对象，表示当前时间。第二行创建了一个Instant表示三秒后，第三行创建了一个Instant表示三秒前。</p>\n<blockquote>\n<p>seconds 表示从 <code>1970-01-01 00:00:00</code> 开始到现在的秒数，nanos 表示纳秒部分（nanos的值不会超过999,999,999）</p>\n</blockquote>\n<h3 id=\"Clock\"><a href=\"#Clock\" class=\"headerlink\" title=\"Clock\"></a>Clock</h3><p>Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。<br>某一个特定的时间点也可以使用Instant类来表示，Instant 类也可以用来创建老的 <code>java.util.Date</code> 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Clock clock = Clock.systemDefaultZone();  </div><div class=\"line\"><span class=\"keyword\">long</span> millis = clock.millis();    </div><div class=\"line\">Instant instant = clock.instant();  </div><div class=\"line\">Date legacyDate = Date.from(instant);   <span class=\"comment\">// legacy java.util.Date</span></div></pre></td></tr></table></figure>\n<h3 id=\"LocalDate\"><a href=\"#LocalDate\" class=\"headerlink\" title=\"LocalDate\"></a>LocalDate</h3><p>LocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。<br>可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间（如java.util.Date中的2000.01.01表示的实际是这一天的00:00这个瞬间）。</p>\n<p>LocalDate类位于java.time包下，类名叫java.time.LocalDate，创建出来的实例也是不可变对象，所以涉及它的计算方法将返回一个新的LocalDate。</p>\n<p><strong>创建一个LocalDate实例</strong></p>\n<p>我们有多种方式可以创建出 <code>LocalDate</code> 实例。第一种方法是使用 <code>now()</code> 方法获得值为今天当日的 <code>LocalDate</code> 对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate localDate = LocalDate.now();</div></pre></td></tr></table></figure>\n<p>另一种方法是使用年月日信息构造出LocalDate对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate localDate2 = LocalDate.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>);</div></pre></td></tr></table></figure>\n<p>LocalDate 的 <code>of()</code> 方法创建出一个指定年月日的日期，并且没有时区信息。</p>\n<p><strong>访问日期信息</strong></p>\n<p>可以用如下方法访问LocalDate中的日期信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>   year       = localDate.getYear();</div><div class=\"line\">Month month      = localDate.getMonth();</div><div class=\"line\"><span class=\"keyword\">int</span>   dayOfMonth = localDate.getDayOfMonth();</div><div class=\"line\"><span class=\"keyword\">int</span>   dayOfYear  = localDate.getDayOfYear();</div><div class=\"line\">DayOfWeek dayOfWeek = localDate.getDayOfWeek();</div></pre></td></tr></table></figure>\n<p>可以注意到getMonth()与getDayOfWeek()方法返回了一个枚举类型代替一个int。你可以通过枚举类型中的getValue()来获得信息。</p>\n<p><strong>LocalDate计算</strong></p>\n<p>你可以进行一堆简单的日期计算，只要使用如下的方法：</p>\n<ul>\n<li><code>plusDays()</code></li>\n<li><code>plusWeeks()</code></li>\n<li><code>plusMonths()</code></li>\n<li><code>plusYears()</code></li>\n<li><code>minusDays()</code></li>\n<li><code>minusWeeks()</code></li>\n<li><code>minusMonths()</code></li>\n<li><code>minusYears()</code></li>\n</ul>\n<p>以下举几个使用的例子来帮助理解使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate d  = LocalDate.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>);</div><div class=\"line\">LocalDate d1 = localDate.plusYears(<span class=\"number\">3</span>);</div><div class=\"line\">LocalDate d2 = localDate.minusYears(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>第一行创建出一个新的LocalDate对象d，表示2018.7.19。</li>\n<li>第二行创建了值等于d日期3年后的LocalDate对象，第三行也是一样，只是值改为d日期的三年前。 </li>\n</ol>\n<h3 id=\"LocalTime\"><a href=\"#LocalTime\" class=\"headerlink\" title=\"LocalTime\"></a>LocalTime</h3><p>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。<br>LocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。</p>\n<p><strong>创建一个LocatTime实例</strong></p>\n<p>有多种方式可以新建LocalTime实例。比如使用当前时间作为值新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalTime localTime = LocalTime.now();</div></pre></td></tr></table></figure>\n<p>另一种方式是使用指定的时分秒和纳秒来新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalTime localTime2 = LocalTime.of(<span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">11001</span>);</div></pre></td></tr></table></figure>\n<p>也有另一种版本的 <code>of()</code> 方法只需要小时分钟两项，或时分秒三项值作为参数。</p>\n<p><strong>访问LocalTime对象的时间</strong></p>\n<p>你可以通过这些方法访问其时、分、秒、纳秒：</p>\n<ul>\n<li><code>getHour()</code></li>\n<li><code>getMinute()</code></li>\n<li><code>getSecond()</code></li>\n<li><code>getNano()</code></li>\n</ul>\n<p><strong>LocalTime的计算</strong></p>\n<p>LocalTime类包含一系列方法，能帮你完成时间计算：</p>\n<ul>\n<li><code>plusHours()</code></li>\n<li><code>plusMinutes()</code></li>\n<li><code>plusSeconds()</code></li>\n<li><code>plusNanos()</code></li>\n<li><code>minusHours()</code></li>\n<li><code>minusMinutes()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusNanos()</code></li>\n</ul>\n<p>以下举一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalTime localTime2 = LocalTime.of(<span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">11001</span>);</div><div class=\"line\">LocalTime localTimeLater   = localTime.plusHours(<span class=\"number\">3</span>);</div><div class=\"line\">LocalTime localTimeEarlier = localTime.minusHours(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>第一行新建一个LocalTime实例，表示21:30:50的第11001纳秒。</li>\n<li>第二行新建了一个LocalTime实例表示这个时间的三小时后，第三行表示三小时前。</li>\n<li>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。</li>\n</ol>\n<p>LocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。</p>\n<h3 id=\"LocalDateTime\"><a href=\"#LocalDateTime\" class=\"headerlink\" title=\"LocalDateTime\"></a>LocalDateTime</h3><p>LocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。</p>\n<p>LocalDateTime类的值是不可变的，所以其计算方法会返回一个新的LocalDateTime实例。</p>\n<p><strong>创建一个LocatDateTime实例</strong></p>\n<p>可以通过LocalDateTime的静态工厂方法来创建LocalDateTime实例。以下举例使用 <code>now()</code> 方法创建：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime localDateTime = LocalDateTime.now();</div></pre></td></tr></table></figure>\n<p>另一种方式是使用指定的年月日、时分秒、纳秒来新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime localDateTime2 = LocalDateTime.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>, <span class=\"number\">13</span>, <span class=\"number\">55</span>, <span class=\"number\">36</span>, <span class=\"number\">123</span>);</div></pre></td></tr></table></figure>\n<p><strong>访问LocalDateTime对象的时间</strong></p>\n<p>你可以通过这些方法访问其日期时间：</p>\n<ul>\n<li><code>getYear()</code></li>\n<li><code>getMonth()</code></li>\n<li><code>getDayOfMonth()</code></li>\n<li><code>getDayOfWeek()</code></li>\n<li><code>getDayOfYear()</code></li>\n<li><code>getHour()</code></li>\n<li><code>getMinute()</code></li>\n<li><code>getSecond()</code></li>\n<li><code>getNano()</code></li>\n</ul>\n<p>这些方法中有一些返回int有一些返回枚举类型，你可以通过枚举类型中的 <code>getValue()</code> 方法来获得int值。</p>\n<p><strong>LocalDateTime的计算</strong></p>\n<p>LocalDateTime 类包含一系列方法，能帮你完成时间计算：</p>\n<ul>\n<li><code>plusYears()</code></li>\n<li><code>plusMonths()</code></li>\n<li><code>plusDays()</code></li>\n<li><code>plusHours()</code></li>\n<li><code>plusMinutes()</code></li>\n<li><code>plusSeconds()</code></li>\n<li><code>plusNanos()</code></li>\n<li><code>minusYears()</code></li>\n<li><code>minusMonths()</code></li>\n<li><code>minusDays()</code></li>\n<li><code>minusHours()</code></li>\n<li><code>minusMinutes()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusNanos()</code></li>\n</ul>\n<p>以下举一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime localDateTime  = LocalDateTime.now();</div><div class=\"line\">LocalDateTime localDateTime1 = localDateTime.plusYears(<span class=\"number\">3</span>);</div><div class=\"line\">LocalDateTime localDateTime2 = localDateTime.minusYears(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>第一行新建一个LocalDateTime实例表示当前这个时间。</li>\n<li>第二行新建了一个LocalDateTime实例表示三年后。</li>\n<li>第三行也新建了一个LocalDateTime实例表示三小时前。</li>\n</ol>\n<h3 id=\"ZonedDateTime\"><a href=\"#ZonedDateTime\" class=\"headerlink\" title=\"ZonedDateTime\"></a>ZonedDateTime</h3><p>ZonedDateTime类是Java 8中日期时间功能里，用于表示带时区的日期与时间信息的类。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。</p>\n<p>ZonedDateTime 类的值是不可变的，所以其计算方法会返回一个新的ZonedDateTime 实例。</p>\n<p><strong>创建一个ZonedDateTime实例</strong></p>\n<p>有多种方式可以新建ZonedDateTime实例。比如使用当前时间作为值新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZonedDateTime dateTime = ZonedDateTime.now();</div></pre></td></tr></table></figure>\n<p>另一种方式是使用指定的年月日、时分秒、纳秒以及时区ID来新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId zoneId = ZoneId.of(<span class=\"string\">\"UTC+1\"</span>);</div><div class=\"line\">ZonedDateTime dateTime2 = ZonedDateTime.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>, <span class=\"number\">45</span>, <span class=\"number\">59</span>, <span class=\"number\">1234</span>, zoneId);</div></pre></td></tr></table></figure>\n<p><strong>访问ZonedDateTime对象的时间</strong></p>\n<p>你可以通过这些方法访问其日期时间：</p>\n<ul>\n<li><code>getYear()</code></li>\n<li><code>getMonth()</code></li>\n<li><code>getDayOfMonth()</code></li>\n<li><code>getDayOfWeek()</code></li>\n<li><code>getDayOfYear()</code></li>\n<li><code>getHour()</code></li>\n<li><code>getMinute()</code></li>\n<li><code>getSecond()</code></li>\n<li><code>getNano()</code></li>\n</ul>\n<p>这些方法中有一些返回int有一些返回枚举类型，但可以通过枚举类型中的getValue()方法来获得int值。</p>\n<p><strong>ZonedDateTime的计算</strong></p>\n<p>ZonedDateTime类包含一系列方法，能帮你完成时间计算：</p>\n<ul>\n<li><code>plusYears()</code></li>\n<li><code>plusMonths()</code></li>\n<li><code>plusDays()</code></li>\n<li><code>plusHours()</code></li>\n<li><code>plusMinutes()</code></li>\n<li><code>plusSeconds()</code></li>\n<li><code>plusNanos()</code></li>\n<li><code>minusYears()</code></li>\n<li><code>minusMonths()</code></li>\n<li><code>minusDays()</code></li>\n<li><code>minusHours()</code></li>\n<li><code>minusMinutes()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusNanos()</code></li>\n</ul>\n<p>但注意计算时，若不巧跨越了夏令时（会补一小时或减一小时），可能得不到希望的结果。一个替代的正确做法是使用Period：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZonedDateTime zoneDateTime = previousDateTime.plus(Period.ofDays(<span class=\"number\">3</span>));</div></pre></td></tr></table></figure>\n<p><strong>时区</strong></p>\n<p>时区是用ZoneId类表示的，你可以使用ZoneId.now()或ZoneId.of(“xxx”)来实例化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId zoneId = ZoneId.of(<span class=\"string\">\"UTC+1\"</span>);</div></pre></td></tr></table></figure>\n<p>传给 <code>of()</code> 方法的参数是时区的ID，如“UTC+1”指距离UTC（格林威治时间）有一小时的时差，你可以使用你想要的时差来表示ZoneId（如+1与-5等等）<br>你也可以使用另一种方式表示zone id，即使用地区名字，也是可以的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId zoneId2 = ZoneId.of(<span class=\"string\">\"Europe/Copenhagen\"</span>);</div><div class=\"line\">ZoneId zoneId3 = ZoneId.of(<span class=\"string\">\"Europe/Paris\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"DateTimeFormatter\"><a href=\"#DateTimeFormatter\" class=\"headerlink\" title=\"DateTimeFormatter\"></a>DateTimeFormatter</h3><p>DateTimeFormatter类是Java 8中日期时间功能里，用于解析和格式化日期时间的类，位于 <code>java.time.format</code> 包下。</p>\n<p><strong>预定义的DateTimeFormatter实例</strong></p>\n<p>DateTimeFormatter类包含一系列预定义（常量）的实例，可以解析和格式化一些标准时间格式。这将让你免除麻烦的时间格式定义，类中包含如下预定义的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">BASIC_ISO_DATE</div><div class=\"line\"></div><div class=\"line\">ISO_LOCAL_DATE</div><div class=\"line\">ISO_LOCAL_TIME</div><div class=\"line\">ISO_LOCAL_DATE_TIME</div><div class=\"line\"></div><div class=\"line\">ISO_OFFSET_DATE</div><div class=\"line\">ISO_OFFSET_TIME</div><div class=\"line\">ISO_OFFSET_DATE_TIME</div><div class=\"line\"></div><div class=\"line\">ISO_ZONED_DATE_TIME</div><div class=\"line\"></div><div class=\"line\">ISO_INSTANT</div><div class=\"line\"></div><div class=\"line\">ISO_DATE</div><div class=\"line\">ISO_TIME</div><div class=\"line\">ISO_DATE_TIME</div><div class=\"line\"></div><div class=\"line\">ISO_ORDINAL_TIME</div><div class=\"line\">ISO_WEEK_DATE</div><div class=\"line\"></div><div class=\"line\">RFC_1123_DATE_TIME</div></pre></td></tr></table></figure>\n<p>每个预定义的DateTimeFormatter实例都有不同的日期格式，具体的可以查阅Java官方文档。</p>\n<blockquote>\n<p>PS：推荐使用下期分享的 <code>Hutool</code> 工具类做这些格式化工作，格式更加丰富。</p>\n</blockquote>\n<p><strong>格式化日期</strong></p>\n<p>当你获取一个DateTimeFormatter实例后，就可以用format()方便来将一个日期格式化为某种字符串，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;</div><div class=\"line\">String formattedDate = formatter.format(LocalDate.now());</div><div class=\"line\">System.out.println(formattedDate);</div></pre></td></tr></table></figure>\n<p>这个样例把LocalDate对象格式化了，并输出20180719，这个输出表示现在2018年，7月19日。<br>再举一个关于ZonedDateTime的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;</div><div class=\"line\">String formattedZonedDate = formatter.format(ZonedDateTime.now());</div><div class=\"line\">System.out.println(<span class=\"string\">\"formattedZonedDate = \"</span> + formattedZonedDate);</div></pre></td></tr></table></figure>\n<p>这个例子会输出：20180719+0800<br>表示今年2018年，7月19日，位于UTC+8时区。</p>\n<h3 id=\"Duration\"><a href=\"#Duration\" class=\"headerlink\" title=\"Duration\"></a>Duration</h3><p>一个Duration对象表示两个Instant间的一段时间，是在Java 8中加入的新功能。</p>\n<p>一个Duration实例是不可变的，当创建出对象后就不能改变它的值了。你只能通过Duration的计算方法，来创建出一个新的Durtaion对象。你会在之后的教程中见到的。</p>\n<p><strong>创建Duration实例</strong></p>\n<p>使用 <code>Duration</code> 类的工厂方法来创建一个 <code>Duration</code> 对象，以下是一个使用 <code>between()</code> 的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Instant first = Instant.now();</div><div class=\"line\"><span class=\"comment\">// 耗时操作，或者 Sleep 一段时间</span></div><div class=\"line\">Instant second = Instant.now();</div><div class=\"line\">Duration duration = Duration.between(first, second);</div></pre></td></tr></table></figure>\n<p><strong>访问Duration的时间</strong></p>\n<p>一个Duration对象里有两个域：纳秒值（小于一秒的部分），秒钟值（一共有几秒），他们的组合表达了时间长度。注意与使用System.getCurrentTimeMillis()时不同，Duration不包含毫秒这个属性。<br>你可以通过以下两个方法得到它们的值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> seconds =  duration.getSeconds()</div><div class=\"line\"><span class=\"keyword\">int</span> nanos   =  duration.getNano()</div></pre></td></tr></table></figure>\n<p>你也可以转换整个时间到其它单位如纳秒、分钟、小时、天：</p>\n<ul>\n<li><code>toNanos()</code></li>\n<li><code>toMillis()</code></li>\n<li><code>toMinutes()</code></li>\n<li><code>toHours()</code></li>\n<li><code>toDays()</code></li>\n</ul>\n<p>举例而言：<code>toNanos()</code> 与 <code>getNano()</code> 不同，<code>toNanos()</code> 获得的是 <code>Duration</code> 整个时间共有多少纳秒，<br>而 <code>getNano()</code> 只是获得这段时间中小于一秒的部分。</p>\n<p><strong>Duration计算</strong></p>\n<p>Duration类包含一系列的计算方法：</p>\n<ul>\n<li><code>plusNanos()</code></li>\n<li><code>plusMillis()</code></li>\n<li><code>plusSeconds()</code></li>\n<li><code>plusMinutes()</code></li>\n<li><code>plusHours()</code></li>\n<li><code>plusDays()</code></li>\n<li><code>minusNanos()</code></li>\n<li><code>minusMillis()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusMinutes()</code></li>\n<li><code>minusHours()</code></li>\n<li><code>minusDays()</code></li>\n</ul>\n<p>这些方法所做的事都是相似的，这里展示一个加减的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Duration start = ... <span class=\"comment\">//obtain a start duration</span></div><div class=\"line\">Duration added      = start.plusDays(<span class=\"number\">3</span>);</div><div class=\"line\">Duration subtracted = start.minusDays(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>第一行创建了一个Duration对象叫start，具体怎么创建可以参考前面的代码。</li>\n<li>第二三行样例创建了两个新的Duration，通过调用start的加减操作，使得added对象表示的时间比start多三天，而substracted则少三天。</li>\n</ol>\n<p>所有的计算方法都会返回一个新的Duration，以保证Duration的不可变属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> days = duration.toDays();              <span class=\"comment\">// 这段时间的总天数</span></div><div class=\"line\"><span class=\"keyword\">long</span> hours = duration.toHours();            <span class=\"comment\">// 这段时间的小时数</span></div><div class=\"line\"><span class=\"keyword\">long</span> minutes = duration.toMinutes();        <span class=\"comment\">// 这段时间的分钟数</span></div><div class=\"line\"><span class=\"keyword\">long</span> seconds = duration.getSeconds();       <span class=\"comment\">// 这段时间的秒数</span></div><div class=\"line\"><span class=\"keyword\">long</span> milliSeconds = duration.toMillis();    <span class=\"comment\">// 这段时间的毫秒数</span></div><div class=\"line\"><span class=\"keyword\">long</span> nanoSeconds = duration.toNanos();      <span class=\"comment\">// 这段时间的纳秒数</span></div></pre></td></tr></table></figure>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><h4 id=\"增加和减少日期\"><a href=\"#增加和减少日期\" class=\"headerlink\" title=\"增加和减少日期\"></a>增加和减少日期</h4><p>Java 8中的日期/时间类都是不可变的，这是为了保证线程安全。当然，新的日期/时间类也提供了方法用于创建对象的可变版本，比如增加一天或者减少一天：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate date = LocalDate.of(<span class=\"number\">2017</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>);          <span class=\"comment\">// 2017-01-05</span></div><div class=\"line\"></div><div class=\"line\">LocalDate date1 = date.withYear(<span class=\"number\">2016</span>);              <span class=\"comment\">// 修改为 2016-01-05</span></div><div class=\"line\">LocalDate date2 = date.withMonth(<span class=\"number\">2</span>);                <span class=\"comment\">// 修改为 2017-02-05</span></div><div class=\"line\">LocalDate date3 = date.withDayOfMonth(<span class=\"number\">1</span>);           <span class=\"comment\">// 修改为 2017-01-01</span></div><div class=\"line\"></div><div class=\"line\">LocalDate date4 = date.plusYears(<span class=\"number\">1</span>);                <span class=\"comment\">// 增加一年 2018-01-05</span></div><div class=\"line\">LocalDate date5 = date.minusMonths(<span class=\"number\">2</span>);              <span class=\"comment\">// 减少两个月 2016-11-05</span></div><div class=\"line\">LocalDate date6 = date.plus(<span class=\"number\">5</span>, ChronoUnit.DAYS);    <span class=\"comment\">// 增加5天 2017-01-10</span></div></pre></td></tr></table></figure>\n<p>上面例子中对于日期的操作比较简单，但是有些时候我们要面临更复杂的时间操作，比如将时间调到下一个工作日，<br>或者是下个月的最后一天，这时候我们可以使用 <code>with()</code> 方法的另一个重载方法，它接收一个TemporalAdjuster参数，<br>可以使我们更加灵活的调整日期：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate date7 = date.with(nextOrSame(DayOfWeek.SUNDAY));      <span class=\"comment\">// 返回下一个距离当前时间最近的星期日</span></div><div class=\"line\">LocalDate date9 = date.with(lastInMonth(DayOfWeek.SATURDAY));   <span class=\"comment\">// 返回本月最后一个星期六</span></div></pre></td></tr></table></figure>\n<p>要使上面的代码正确编译，你需要使用静态导入 <code>TemporalAdjusters</code> 对象：</p>\n<p><code>import static java.time.temporal.TemporalAdjusters.*;</code></p>\n<p><code>TemporalAdjusters</code> 类中包含了很多静态方法可以直接使用，下面的表格列出了一些方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>dayOfWeekInMonth</code></td>\n<td style=\"text-align:left\">返回同一个月中每周的第几天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstDayOfMonth</code></td>\n<td style=\"text-align:left\">返回当月的第一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstDayOfNextMonth</code></td>\n<td style=\"text-align:left\">返回下月的第一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstDayOfNextYear</code></td>\n<td style=\"text-align:left\">返回下一年的第一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstDayOfYear</code></td>\n<td style=\"text-align:left\">返回本年的第一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstInMonth</code></td>\n<td style=\"text-align:left\">返回同一个月中第一个星期几</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastDayOfMonth</code></td>\n<td style=\"text-align:left\">返回当月的最后一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastDayOfNextMonth</code></td>\n<td style=\"text-align:left\">返回下月的最后一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastDayOfNextYear</code></td>\n<td style=\"text-align:left\">返回下一年的最后一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastDayOfYear</code></td>\n<td style=\"text-align:left\">返回本年的最后一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastInMonth</code></td>\n<td style=\"text-align:left\">返回同一个月中最后一个星期几</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>next / previous</code></td>\n<td style=\"text-align:left\">返回后一个/前一个给定的星期几</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>nextOrSame / previousOrSame</code></td>\n<td style=\"text-align:left\">返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回</td>\n</tr>\n</tbody>\n</table>\n<p>如果上面表格中列出的方法不能满足你的需求，你还可以创建自定义的 <code>TemporalAdjuster</code> 接口的实现，<br><code>TemporalAdjuster</code> 也是一个函数式接口，所以我们可以使用Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FunctionalInterface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TemporalAdjuster</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">Temporal <span class=\"title\">adjustInto</span><span class=\"params\">(Temporal temporal)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>比如给定一个日期，计算该日期的下一个工作日（不包括星期六和星期天）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate date = LocalDate.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>);</div><div class=\"line\">date.with(temporal -&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// 当前日期</span></div><div class=\"line\">    DayOfWeek dayOfWeek = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 正常情况下，每次增加一天</span></div><div class=\"line\">    <span class=\"keyword\">int</span> dayToAdd = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果是星期五，增加三天</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (dayOfWeek == DayOfWeek.FRIDAY) &#123;</div><div class=\"line\">        dayToAdd = <span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果是星期六，增加两天</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (dayOfWeek == DayOfWeek.SATURDAY) &#123;</div><div class=\"line\">        dayToAdd = <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> temporal.plus(dayToAdd, ChronoUnit.DAYS);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"其他历法\"><a href=\"#其他历法\" class=\"headerlink\" title=\"其他历法\"></a>其他历法</h4><p>Java中使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。</p>\n<p>此外Java 8还提供了4套其他历法（很奇怪为什么没有汉族人使用的农历），每套历法都包含一个日期类，分别是：</p>\n<ul>\n<li><code>ThaiBuddhistDate</code>：泰国佛教历</li>\n<li><code>MinguoDate</code>：中华民国历</li>\n<li><code>JapaneseDate</code>：日本历</li>\n<li><code>HijrahDate</code>：伊斯兰历</li>\n</ul>\n<p>每个日期类都继承 <code>ChronoLocalDate</code> 类，所以可以在不知道具体历法的情况下也可以操作。不过这些历法一般不常用，除非是有某些特殊需求情况下才会使用。</p>\n<p>这些不同的历法也可以用于向公历转换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate date = LocalDate.now();</div><div class=\"line\">JapaneseDate jpDate = JapaneseDate.from(date);</div></pre></td></tr></table></figure>\n<p>由于它们都继承ChronoLocalDate类，所以在不知道具体历法情况下，可以通过ChronoLocalDate类操作日期：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Chronology jpChronology = Chronology.ofLocale(Locale.JAPANESE);</div><div class=\"line\">ChronoLocalDate jpChronoLocalDate = jpChronology.dateNow();</div></pre></td></tr></table></figure>\n<p>我们在开发过程中应该尽量避免使用 <code>ChronoLocalDate</code>，尽量用与历法无关的方式操作时间，因为不同的历法计算日期的方式不一样，比如开发者会在程序中做一些假设，假设一年中有12个月，如果是中国农历中包含了闰月，一年有可能是13个月，但开发者认为是12个月，多出来的一个月属于明年的。</p>\n<p>再比如假设年份是累加的，过了一年就在原来的年份上加一，但日本天皇在换代之后需要重新纪年，所以过了一年年份可能会从1开始计算。</p>\n<p>在实际开发过程中建议使用 <code>LocalDate</code>，包括存储、操作、业务规则的解读；除非需要将程序的输入或者输出本地化，这时可以使用 <code>ChronoLocalDate</code> 类。</p>\n<h2 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h2><p>在Java 8中，Base64编码已经成为Java类库的标准。</p>\n<p>Java 8 内置了 Base64 编码的编码器和解码器，这样不需要使用第三方库就可以进行Base64编码。</p>\n<p>Base64工具类提供了一套静态方法获取下面三种BASE64编解码器：</p>\n<ul>\n<li><strong>基本：</strong>输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。</li>\n<li><strong>URL：</strong>输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。</li>\n<li><strong>MIME：</strong>输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\\r’并跟随’\\n’作为分割。编码输出最后没有行分割。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> String text = <span class=\"string\">\"测试Base64编码\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> String encoded = Base64</div><div class=\"line\">        .getEncoder()</div><div class=\"line\">        .encodeToString(text.getBytes(StandardCharsets.UTF_8));</div><div class=\"line\">System.out.println(encoded);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> String decoded = <span class=\"keyword\">new</span> String(</div><div class=\"line\">        Base64.getDecoder().decode(encoded),</div><div class=\"line\">        StandardCharsets.UTF_8);</div><div class=\"line\">System.out.println(decoded);</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.runoob.com/java/java8-new-features.html\" target=\"_blank\" rel=\"external\">Java 8 新特性</a></li>\n<li><a href=\"http://www.cnblogs.com/zemliu/p/3290585.html\" target=\"_blank\" rel=\"external\">SimpleDateFormat的线程安全问题与解决方案</a></li>\n<li><a href=\"http://blog.csdn.net/yiifaa/article/details/73499053\" target=\"_blank\" rel=\"external\">为什么SimpleDateFormat不是线程安全的？</a></li>\n<li><a href=\"http://blog.csdn.net/liuwei0376/article/details/13620879\" target=\"_blank\" rel=\"external\">Java获取N天前，N天后的日期（如3天）</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html\" target=\"_blank\" rel=\"external\">What’s New in JDK 8</a></li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>示例代码地址：<a href=\"https://github.com/xkcoding/java8_learning\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning</a></p>\n<p>如果可以的话，麻烦给个 Star 吧 (♥◠‿◠)ﾉﾞ</p>\n","site":{"data":{}},"excerpt":"<p>前言：Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。目前大部分公司都已经在使用 Java 8开发项目。本文是我在公司的一次Java 8分享的文章，开篇先介绍了 <strong>Java 8 的发展</strong>，再分别讲述 <strong>Java 8 的新特性</strong>，同时附上一些 Demo 代码（ <a href=\"https://github.com/xkcoding/java8_learning\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning</a> ），以便更好的入门学习 Java 8，厚脸皮的求个 Star。</p>","more":"<h2 id=\"Java-8-的发展\"><a href=\"#Java-8-的发展\" class=\"headerlink\" title=\"Java 8 的发展\"></a>Java 8 的发展</h2><h3 id=\"JDK-5\"><a href=\"#JDK-5\" class=\"headerlink\" title=\"JDK 5\"></a>JDK 5</h3><p><strong>自动装箱与拆箱</strong></p>\n<p>JDK1.5为每一个基本数据类型定义了一个封装类。使java中的基本数据类型也有自己的对象</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">int --&gt;Integer</div><div class=\"line\">double --&gt; Double</div><div class=\"line\">long --&gt; Long</div><div class=\"line\">char --&gt; Character</div><div class=\"line\"><span class=\"built_in\">float</span> --&gt; Float</div><div class=\"line\">boolean --&gt; Boolean</div><div class=\"line\">short --&gt; Short</div><div class=\"line\">byte -- &gt; Byte</div></pre></td></tr></table></figure>\n<ul>\n<li>自动装包：将基本类型转换成为对象，例如：<code>int --&gt; Integer</code></li>\n<li>自动拆包：将对象转换成为基本数据类型，例如：<code>Integer --&gt; int</code></li>\n</ul>\n<p>对于 JDK1.5 之前集合总不能存放基本数据类型的问题，现在也能够解决。</p>\n<p><strong>枚举</strong></p>\n<p>枚举是 JDK1.5 推出的一个比较重要的特性。其关键字为 <code>enum</code><br>例如：定义代表交通灯的枚举</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> MyEnum&#123;</div><div class=\"line\">    RED,GREEN,YELLOW</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>静态导入</strong></p>\n<ul>\n<li>优点：使用静态导入可以使被导入类的所有静态变量和静态方法在当前类直接可见，使用这些静态成员无需再给出他们的类名。</li>\n<li>缺点：过度使用会降低代码的可读性</li>\n</ul>\n<p><strong>可变参数</strong></p>\n<p>在JDK1.5以前，当我们要为一个方法传递多个类型相同的参数时，<br>我们有两种方法解决</p>\n<ol>\n<li>直接传递一个数组过去</li>\n<li>有多少个参数就传递多少个参数。</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printColor</span><span class=\"params\">(String red,String green,String yellow)</span></span>&#123; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printColor</span><span class=\"params\">(String[] colors)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样编写方法参数虽然能够实现我们想要的效果，但是，这样是不是有点麻烦呢？<br>再者，如果参数个数不确定，我们怎么办呢？Java JDK1.5为我们提供的可变参数就能够完美的解决这个问题.</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printColor</span><span class=\"params\">(String... colors)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果参数的类型相同，那么可以使用 <code>类型+三个点</code> ，后面跟一个参数名称的形式。<br>这样的好处就是，只要参数类型相同，无论传递几个参数都没有限制<br>注意：可变参数必须是参数列表的最后一项（该特性对对象和基本数据类型都适用）</p>\n<p><strong>泛型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//给集合指定存入类型，上面这个集合在存入数据的时候必须存入String类型的数据，否则编译器会报错</span></div><div class=\"line\">List&lt;String&gt; strs = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div></pre></td></tr></table></figure>\n<p>“泛型” 意味着编写的代码可以被不同类型的对象所重用。<br>可见泛型的提出是为了编写重用性更好的代码。<br>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p>\n<p>比如常见的集合类 <code>LinkedList</code>，其实现的接口名后有个特殊的部分 <code>&lt;&gt;</code>，而且它的成员的类型 Link 也包含一个 <code>&lt;&gt;</code>，这个符号的就是类型参数，<br>它使得在运行中，创建一个 LinkedList 时可以传入不同的类型，比如 <code>new LinkedList</code>，这样它的成员存放的类型也是 <code>String</code>。</p>\n<p><strong>For-Each循环</strong></p>\n<p>例如上面这个集合我们可以通过for-each遍历，这样更加简单清晰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(String s : strs)&#123; </div><div class=\"line\">     System.out.println(s); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：使用for-each遍历集合时，要遍历的集合必须实现了Iterator接口</p>\n</blockquote>\n<p><strong>线程并发库</strong></p>\n<p>线程并发库是 Java1.5 提出的关于多线程处理的高级功能，所在包：<code>java.util.concurrent</code> 包括</p>\n<ol>\n<li>线程互斥工具类：<code>Lock</code>，<code>ReadWriteLock</code></li>\n<li>线程通信：<code>Condition</code></li>\n<li>线程池：<code>ExecutorService</code></li>\n<li>同步队列：<code>ArrayBlockingQueue</code></li>\n<li>同步集合：<code>ConcurrentHashMap</code>，<code>CopyOnWriteArrayList</code></li>\n<li>线程同步工具：<code>Semaphore</code></li>\n</ol>\n<h3 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h3><p><strong>Desktop类和SystemTray类</strong></p>\n<p>前者可以用来打开系统默认浏览器浏览指定的URL，打开系统默认邮件客户端给指定的邮箱发邮件，用默认应用程序打开或编辑文件(比如，用记事本打开以 txt 为后缀名的文件)，用系统默认的打印机打印文档；后者可以用来在系统托盘区创建一个托盘程序。</p>\n<p><strong>使用Compiler API</strong></p>\n<p>现在我们可以用JDK1.6 的Compiler API(JSR 199)去动态编译Java源文件，Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。</p>\n<p>这个特性对于某些需要用到动态编译的应用程序相当有用，比如JSP Web Server，当我们手动修改JSP后，是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件。</p>\n<p>当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码，这种方式需要我们产生另一个进程去做编译工作，不够优雅而且容易使代码依赖与特定的操作系统；</p>\n<p>Compiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译，而且是跨平台的。</p>\n<p><strong>轻量级Http Server API</strong></p>\n<p>JDK1.6 提供了一个简单的 Http Server API，据此我们可以构建自己的嵌入式 Http Server，它支持Http和Https协议，提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的 Http Server API来实现，程序员必须自己实现 HttpHandler 接口，HttpServer 会调用 <code>HttpHandler</code> 实现类的回调方法来处理客户端请求，在这里，我们把一个 Http 请求和它的响应称为一个交换，包装成 <code>HttpExchange</code> 类，<code>HttpServer</code> 负责将 <code>HttpExchange</code> 传给 <code>HttpHandler</code> 实现类的回调方法。</p>\n<p><strong>用Console开发控制台程序</strong></p>\n<p>JDK1.6 中提供了 <code>java.io.Console</code> 类专用来访问基于字符的控制台设备。<br>你的程序如果要与 Windows 下的 cmd 或者 Linux 下的 Terminal 交互，就可以用 <code>Console</code> 类代劳。<br>但我们不总是能得到可用的 Console，一个JVM是否有可用的 Console 依赖于底层平台和 JVM 如何被调用。<br>如果JVM是在交互式命令行(比如 Windows 的 cmd)中启动的，并且输入输出没有重定向到另外的地方，那么就可以得到一个可用的 Console 实例。</p>\n<p><strong>对脚本语言的支持</strong></p>\n<p>如：ruby，groovy，javascript。</p>\n<h3 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h3><p><strong>数字变量对下滑线的支持</strong></p>\n<p>JDK1.7可以在数值类型的变量里添加下滑线。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">1234_5678_9</span>; </div><div class=\"line\"><span class=\"keyword\">float</span> num2 = <span class=\"number\">222_33F</span>; </div><div class=\"line\"><span class=\"keyword\">long</span> num3 = <span class=\"number\">123_000_111L</span>;</div></pre></td></tr></table></figure>\n<p>注意，有几个地方是不能添加的：</p>\n<ol>\n<li>数字的开头和结尾 </li>\n<li>小数点前后 </li>\n<li>F或者L前</li>\n</ol>\n<p><strong>switch对String的支持</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">String status = <span class=\"string\">\"orderState\"</span>;     </div><div class=\"line\"><span class=\"keyword\">switch</span> (status) &#123;   </div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"ordercancel\"</span>:   </div><div class=\"line\">        System.out.println(<span class=\"string\">\"订单取消\"</span>);   </div><div class=\"line\">        <span class=\"keyword\">break</span>;   </div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"orderSuccess\"</span>:   </div><div class=\"line\">        System.out.println(<span class=\"string\">\"预订成功\"</span>);   </div><div class=\"line\">        <span class=\"keyword\">break</span>;   </div><div class=\"line\">    <span class=\"keyword\">default</span>:   </div><div class=\"line\">        System.out.println(<span class=\"string\">\"状态未知\"</span>);   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>try-with-resource</strong></p>\n<ul>\n<li><code>try-with-resources</code> 是一个定义了一个或多个资源的 try 声明，这个资源是指程序处理完它之后需要关闭它的对象。</li>\n<li><code>try-with-resources</code> 确保每一个资源在处理完成后都会被关闭。</li>\n</ul>\n<p>可以使用try-with-resources的资源有： 任何实现了 <code>java.lang.AutoCloseable</code> 接口 <code>java.io.Closeable</code> 接口的对象。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">readFirstLineFromFile</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;   </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> (BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(path))) &#123;   </div><div class=\"line\">        <span class=\"keyword\">return</span> br.readLine();   </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 java 7 以及以后的版本里，<code>BufferedReader</code> 实现了 <code>java.lang.AutoCloseable</code> 接口。<br>由于 <code>BufferedReader</code> 定义在 <code>try-with-resources</code> 声明里，无论 <code>try</code> 语句正常还是异常的结束，<br>它都会自动的关掉。而在 java7 以前，你需要使用 <code>finally</code> 块来关掉这个对象。</p>\n<p><strong>捕获多种异常并用改进后的类型检查来重新抛出异常</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">first</span><span class=\"params\">()</span></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;   </div><div class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"\"</span>));   </div><div class=\"line\">        Connection con = <span class=\"keyword\">null</span>;   </div><div class=\"line\">        Statement stmt = con.createStatement();   </div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException | SQLException e) &#123;   </div><div class=\"line\">        <span class=\"comment\">//捕获多个异常，e就是final类型的   </span></div><div class=\"line\">        e.printStackTrace();   </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>优点：用一个 <code>catch</code> 处理多个异常，比用多个 <code>catch</code> 每个处理一个异常生成的字节码要更小更高效。</p>\n<p><strong>创建泛型时类型推断</strong></p>\n<p>只要编译器可以从上下文中推断出类型参数，你就可以用一对空着的尖括号 <code>&lt;&gt;</code> 来代替泛型参数。<br>这对括号私下被称为菱形(diamond)。 在Java SE 7之前，你声明泛型对象时要这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div></pre></td></tr></table></figure>\n<p>而在Java SE7以后，你可以这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div></pre></td></tr></table></figure>\n<p>因为编译器可以从前面(List)推断出推断出类型参数，所以后面的 <code>ArrayList</code> 之后可以不用写泛型参数了，只用一对空着的尖括号就行。<br>当然，你必须带着菱形 <code>&lt;&gt;</code>，否则会有警告的。<br>Java SE7 只支持有限的类型推断：只有构造器的参数化类型在上下文中被显著的声明了，你才可以使用类型推断，否则不行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">list.add(<span class=\"string\">\"A\"</span>); </div><div class=\"line\"><span class=\"comment\">//这个不行 </span></div><div class=\"line\">list.addAll(<span class=\"keyword\">new</span> ArrayList&lt;&gt;()); </div><div class=\"line\"><span class=\"comment\">// 这个可以 </span></div><div class=\"line\">List&lt;? extends String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); </div><div class=\"line\">list.addAll(list2);</div></pre></td></tr></table></figure>\n<h3 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h3><p><strong>Lambda表达式和函数式接口</strong></p>\n<p>Lambda表达式（也称为闭包）是Java 8中最大和最令人期待的语言改变。它允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理：函数式开发者非常熟悉这些概念。很多JVM平台上的语言（Groovy、Scala等）从诞生之日就支持Lambda表达式，但是Java开发者没有选择，只能使用匿名内部类代替Lambda表达式。<br>Lambda的设计耗费了很多时间和很大的社区力量，最终找到一种折中的实现方案，可以实现简洁而紧凑的语言结构。最简单的Lambda表达式可由逗号分隔的参数列表、-&gt;符号和语句块组成。</p>\n<p>Lambda的设计者们为了让现有的功能与Lambda表达式良好兼容，考虑了很多方法，于是产生了函数接口这个概念。函数接口指的是只有一个函数的接口，这样的接口可以隐式转换为Lambda表达式。java.lang.Runnable和java.util.concurrent.Callable是函数式接口的最佳例子。在实践中，函数式接口非常脆弱：只要某个开发者在该接口中添加一个函数，则该接口就不再是函数式接口进而导致编译失败。为了克服这种代码层面的脆弱性，并显式说明某个接口是函数式接口，Java 8 提供了一个特殊的注解@FunctionalInterface（Java 库中的所有相关接口都已经带有这个注解了）。</p>\n<p><strong>接口的默认方法和静态方法</strong></p>\n<p>Java 8使用两个新概念扩展了接口的含义：默认方法和静态方法。默认方法使得接口有点类似traits，不过要实现的目标不一样。默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。<br>默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写。<br>由于JVM上的默认方法的实现在字节码层面提供了支持，因此效率非常高。默认方法允许在不打破现有继承体系的基础上改进接口。该特性在官方库中的应用是：给java.util.Collection接口添加新方法，如stream()、parallelStream()、forEach()和removeIf()等等。<br>尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。如果想了解更多细节，可以参考官方文档。</p>\n<p><strong>更好的类型推断</strong></p>\n<p>Java 8 编译器在类型推断方面有很大的提升，在很多场景下编译器可以推导出某个参数的数据类型，从而使得代码更为简洁。</p>\n<p>参数 <code>Value.defaultValue()</code> 的类型由编译器推导得出，不需要显式指明。在Java 7中这段代码会有编译错误，除非使用 <code>Value.&lt;String&gt;defaultValue()</code>。</p>\n<p><strong>Optional</strong></p>\n<p>Java应用中最常见的bug就是空指针异常。在Java 8之前，Google Guava引入了 <code>Optionals</code> 类来解决 <code>NullPointerException</code>，从而避免源码被各种 <code>null</code> 检查污染，以便开发者写出更加整洁的代码。Java 8也将Optional加入了官方库。<br><code>Optional</code> 仅仅是一个容易存放T类型的值或者null。它提供了一些有用的接口来避免显式的null检查，可以参考Java 8官方文档了解更多细节。</p>\n<p>如果Optional实例持有一个非空值，则 <code>isPresent()</code> 方法返回true，否则返回false；<code>orElseGet()</code> 方法，Optional实例持有null，则可以接受一个lambda表达式生成的默认值；map()方法可以将现有的 <code>Optional</code> 实例的值转换成新的值；orElse()方法与orElseGet()方法类似，但是在持有null的时候返回传入的默认值。</p>\n<p><strong>Stream</strong></p>\n<p>新增的Stream API（java.util.stream）将生成环境的函数式编程引入了Java库中。这是目前为止最大的一次对Java库的完善，以便开发者能够写出更加有效、更加简洁和紧凑的代码。</p>\n<p>Task 类有一个分数（或伪复杂度）的概念，另外还有两种状态：OPEN 或者 CLOSED。现在假设有一个task集合，首先看一个问题：在这个task集合中一共有多少个OPEN状态的点？</p>\n<p>在Java 8之前，要解决这个问题，则需要使用foreach循环遍历task集合；但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Collection&lt;Task&gt; tasks = Arrays.asList(</div><div class=\"line\">        <span class=\"keyword\">new</span> Task(Status.OPEN, <span class=\"number\">5</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> Task(Status.OPEN, <span class=\"number\">13</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> Task(Status.CLOSED, <span class=\"number\">8</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用sum()计算所有 OPEN 任务</span></div><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> totalPointsOfOpenTasks = tasks</div><div class=\"line\">        .stream()</div><div class=\"line\">        .filter(task -&gt; task.getStatus() == Status.OPEN)</div><div class=\"line\">        .mapToInt(Task::getPoints)</div><div class=\"line\">        .sum();</div><div class=\"line\"></div><div class=\"line\">System.out.println(<span class=\"string\">\"Total points: \"</span> + totalPointsOfOpenTasks);</div></pre></td></tr></table></figure>\n<p>首先，tasks集合被转换成steam表示；其次，在steam上的filter操作会过滤掉所有CLOSED的task；第三，mapToInt操作基于每个task实例的<code>Task::getPoints</code>方法将task流转换成Integer集合；最后，通过sum方法计算总和，得出最后的结果。</p>\n<p><strong>新的日期时间 API</strong></p>\n<p>Java 8引入了新的Date-Time API(JSR 310)来改进时间、日期的处理。时间和日期的管理一直是最令Java开发者痛苦的问题。java.util.Date 和后来的 java.util.Calendar 一直没有解决这个问题（甚至令开发者更加迷茫）。因为上面这些原因，诞生了第三方库Joda-Time，可以替代Java的时间管理API。</p>\n<p>Java 8中新的时间和日期管理API深受Joda-Time影响，并吸收了很多Joda-Time的精华。</p>\n<p>第一，新的java.time包包含了所有关于日期、时间、时区、Instant（跟日期类似但是精确到纳秒）、duration（持续时间）和时钟操作的类。新设计的API认真考虑了这些类的不变性（从java.util.Calendar吸取的教训），如果某个实例需要修改，则返回一个新的对象。</p>\n<p>第二，关注下LocalDate和LocalTime类。LocalDate仅仅包含ISO-8601日历系统中的日期部分；LocalTime则仅仅包含该日历系统中的时间部分。这两个类的对象都可以使用Clock对象构建得到。</p>\n<p>第三，LocalDateTime类包含了LocalDate和LocalTime的信息，但是不包含ISO-8601日历系统中的时区信息。这里有一些关于LocalDate和LocalTime的例子：</p>\n<p>如果你需要特定时区的data/time信息，则可以使用ZoneDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。</p>\n<p><strong>Nashorn JavaScript引擎</strong></p>\n<p>Java 8提供了新的Nashorn JavaScript引擎，使得我们可以在JVM上开发和运行JS应用。<br>Nashorn JavaScript引擎是javax.script.ScriptEngine的另一个实现版本，这类Script引擎遵循相同的规则，允许Java和JavaScript交互使用。</p>\n<p><strong>Base64</strong></p>\n<p>对 Base64 编码的支持已经被加入到Java 8官方库中，这样不需要使用第三方库就可以进行Base64编码。</p>\n<h2 id=\"Lambda-表达式（★★）\"><a href=\"#Lambda-表达式（★★）\" class=\"headerlink\" title=\"Lambda 表达式（★★）\"></a>Lambda 表达式（★★）</h2><blockquote>\n<p>Demo 代码：<a href=\"https://github.com/xkcoding/java8_learning/tree/master/java8-lambda\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning/tree/master/java8-lambda</a></p>\n</blockquote>\n<p>PS：个人理解类似前端 ES6 的箭头函数</p>\n<h3 id=\"命令式和函数式\"><a href=\"#命令式和函数式\" class=\"headerlink\" title=\"命令式和函数式\"></a>命令式和函数式</h3><p><strong>命令式编程</strong>：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。<br><strong>声明式编程</strong>：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。</p>\n<h3 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h3><p>每个人对函数式编程的理解不尽相同。  我的理解是：<strong>在完成一个编程任务时，通过使用不可变的值或函数，对他们进行处理，然后得到另一个值的过程。</strong><br>不同的语言社区往往对各自语言中的特性孤芳自赏。现在谈 Java 程序员如何定义函数式编程还为时尚早，但是，这根本不重要！<br>我们关心的是如何写出好代码，而不是符合函数式编程风格的代码。</p>\n<h3 id=\"行为参数化\"><a href=\"#行为参数化\" class=\"headerlink\" title=\"行为参数化\"></a>行为参数化</h3><p>把算法的策略（行为）作为一个参数传递给函数。</p>\n<h3 id=\"lambda-特点\"><a href=\"#lambda-特点\" class=\"headerlink\" title=\"lambda 特点\"></a>lambda 特点</h3><ul>\n<li>匿名：它不像普通的方法那样有一个明确的名称：写得少而想得多！</li>\n<li>函数：Lambda函数不像方法那样属于某个特定的类。但和方法一样，Lambda有参数列表、函数主体、返回类型，还可能有可以抛出的异常列表。</li>\n<li>传递：Lambda表达式可以作为参数传递给方法或存储在变量中。</li>\n<li>简洁：无需像匿名类那样写很多模板代码。</li>\n</ul>\n<h3 id=\"函数描述符\"><a href=\"#函数描述符\" class=\"headerlink\" title=\"函数描述符\"></a>函数描述符</h3><p>函数式接口的抽象方法的签名基本上就是Lambda表达式的签名，这种抽象方法叫作函数描述符。</p>\n<h3 id=\"函数式接口，类型推断\"><a href=\"#函数式接口，类型推断\" class=\"headerlink\" title=\"函数式接口，类型推断\"></a>函数式接口，类型推断</h3><p>函数式接口定义且只定义了一个抽象方法，因为抽象方法的签名可以描述Lambda表达式的签名。<br>函数式接口的抽象方法的签名称为函数描述符。<br>所以为了应用不同的Lambda表达式，你需要一套能够描述常见函数描述符的函数式接口。</p>\n<h3 id=\"Lambda-及函数式接口的例子\"><a href=\"#Lambda-及函数式接口的例子\" class=\"headerlink\" title=\"Lambda 及函数式接口的例子\"></a>Lambda 及函数式接口的例子</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">使用案例</th>\n<th style=\"text-align:left\">Lambda 的例子</th>\n<th style=\"text-align:left\">对应的函数式接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">布尔表达式</td>\n<td style=\"text-align:left\"><code>(List&lt;String&gt; list) -&gt; list.isEmpty()</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;List&lt;String&gt;&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">创建对象</td>\n<td style=\"text-align:left\"><code>() -&gt; new Project()</code></td>\n<td style=\"text-align:left\"><code>Supplier&lt;Project&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消费一个对象</td>\n<td style=\"text-align:left\"><code>(Project p) -&gt; System.out.println(p.getStars())</code></td>\n<td style=\"text-align:left\"><code>Consumer&lt;Project&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">从一个对象中选择/提取</td>\n<td style=\"text-align:left\"><code>(int a, int b) -&gt; a * b</code></td>\n<td style=\"text-align:left\"><code>IntBinaryOperator</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">比较两个对象</td>\n<td style=\"text-align:left\"><code>(Project p1, Project p2) -&gt; p1.getStars().compareTo(p2.getStars())</code></td>\n<td style=\"text-align:left\"><code>Comparator&lt;Project&gt; 或 BiFunction&lt;Project,</code> <br> <code>Project, Integer&gt; 或 ToIntBiFunction&lt;Project, Project&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Lambda-小结\"><a href=\"#Lambda-小结\" class=\"headerlink\" title=\"Lambda 小结\"></a>Lambda 小结</h3><ul>\n<li>lambda 表达式可以理解为一种匿名函数：它没有名称，但有参数列表、函数主体、返回 类型，可能还有一个可以抛出的异常的列表。</li>\n<li>lambda 表达式让你可以简洁地传递代码。</li>\n<li>只有在接受函数式接口的地方才可以使用 lambda 表达式。 </li>\n<li>lambda 表达式允许你直接内联，为函数式接口的抽象方法提供实现，并且将整个表达式作为函数式接口的一个实例。 </li>\n<li>Lambda表达式所需要代表的类型称为目标类型。 </li>\n</ul>\n<h2 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h2><p>方法引用让你可以重复使用现有的方法定义，并像Lambda一样传递它们。</p>\n<p>方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p>\n<p>方法引用使用一对冒号<code>::</code>。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .filter(Person::isStudent) <span class=\"comment\">// 就是方法引用</span></div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h2 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h2><blockquote>\n<p>Demo 代码：<a href=\"https://github.com/xkcoding/java8_learning/tree/master/java8-functional\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning/tree/master/java8-functional</a></p>\n</blockquote>\n<p>函数式接口(Functional Interface)就是<strong>一个有且仅有一个抽象方法</strong>，但是可以有多个非抽象方法的接口。</p>\n<p>函数式接口可以被隐式转换为lambda表达式。</p>\n<p>函数式接口可以现有的函数友好地支持 lambda。</p>\n<p>JDK 1.8之前已有的函数式接口:</p>\n<ul>\n<li><strong>java.lang.Runnable</strong></li>\n<li>java.util.concurrent.Callable</li>\n<li>java.security.PrivilegedAction</li>\n<li><strong>java.util.Comparator</strong></li>\n<li>java.io.FileFilter</li>\n<li>java.nio.file.PathMatcher</li>\n<li>java.lang.reflect.InvocationHandler</li>\n<li>java.beans.PropertyChangeListener</li>\n<li>java.awt.event.ActionListener</li>\n<li>javax.swing.event.ChangeListener</li>\n</ul>\n<p>JDK 1.8 新增加的函数接口：</p>\n<ul>\n<li>java.util.function</li>\n</ul>\n<p><code>java.util.function</code> 这个包下包含了很多类，用来支持 Java的 函数式编程，包括 <code>Predicate&lt;T&gt;</code>、<code>Function&lt;T,R&gt;</code>、<code>Supplier&lt;T&gt;</code>、<code>Consumer&lt;T&gt;</code> 和 <code>BinaryOperator&lt;T&gt;</code>。</p>\n<p><code>Comparator</code>、<code>Predicate</code> 和 <code>Function</code> 等函数式接口都有几个可以用来结合 lambda 表达式的默认方法。</p>\n<p><strong>Java 8中的常用函数式接口</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数式接口</th>\n<th style=\"text-align:left\">函数描述符</th>\n<th style=\"text-align:left\">原始类型特化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T-&gt;boolean</code></td>\n<td style=\"text-align:left\"><code>IntPredicate,LongPredicate, DoublePredicate</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Consumer&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T-&gt;void</code></td>\n<td style=\"text-align:left\"><code>IntConsumer,LongConsumer, DoubleConsumer</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Function&lt;T,R&gt;</code></td>\n<td style=\"text-align:left\"><code>T-&gt;R</code></td>\n<td style=\"text-align:left\"><code>IntFunction&lt;R&gt;, IntToDoubleFunction,</code> <br> <code>IntToLongFunction, LongFunction&lt;R&gt;,</code> <br> <code>LongToDoubleFunction, LongToIntFunction,</code> <br> <code>DoubleFunction&lt;R&gt;, ToIntFunction&lt;T&gt;,</code> <br> <code>ToDoubleFunction&lt;T&gt;, ToLongFunction&lt;T&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Supplier&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>()-&gt;T</code></td>\n<td style=\"text-align:left\"><code>BooleanSupplier,IntSupplier, LongSupplier, DoubleSupplier</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>UnaryOperator&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T-&gt;T</code></td>\n<td style=\"text-align:left\"><code>IntUnaryOperator, LongUnaryOperator, DoubleUnaryOperator</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BinaryOperator&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>(T,T)-&gt;T</code></td>\n<td style=\"text-align:left\"><code>IntBinaryOperator, LongBinaryOperator, DoubleBinaryOperator</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BiPredicate&lt;L,R&gt;</code></td>\n<td style=\"text-align:left\"><code>(L,R)-&gt;boolean</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BiConsumer&lt;T,U&gt;</code></td>\n<td style=\"text-align:left\"><code>(T,U)-&gt;void</code></td>\n<td style=\"text-align:left\"><code>ObjIntConsumer&lt;T&gt;, ObjLongConsumer&lt;T&gt;, ObjDoubleConsumer&lt;T&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>BiFunction&lt;T,U,R&gt;</code></td>\n<td style=\"text-align:left\"><code>(T,U)-&gt;R</code></td>\n<td style=\"text-align:left\"><code>ToIntBiFunction&lt;T,U&gt;, ToLongBiFunction&lt;T,U&gt;, ToDoubleBiFunction&lt;T,U&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"默认方法\"><a href=\"#默认方法\" class=\"headerlink\" title=\"默认方法\"></a>默认方法</h2><p>新增了接口的默认方法。</p>\n<p>简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。</p>\n<p>我们只需在方法名前面加个default关键字即可实现默认方法。</p>\n<h2 id=\"Stream（★★）\"><a href=\"#Stream（★★）\" class=\"headerlink\" title=\"Stream（★★）\"></a>Stream（★★）</h2><blockquote>\n<p>Demo 代码：<a href=\"https://github.com/xkcoding/java8_learning/tree/master/java8-stream\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning/tree/master/java8-stream</a></p>\n</blockquote>\n<h3 id=\"关于流\"><a href=\"#关于流\" class=\"headerlink\" title=\"关于流\"></a>关于流</h3><h4 id=\"什么是流？\"><a href=\"#什么是流？\" class=\"headerlink\" title=\"什么是流？\"></a>什么是流？</h4><p>流是Java8引入的全新概念，它用来处理集合中的数据，暂且可以把它理解为一种高级集合。<br>众所周知，集合操作非常麻烦，若要对集合进行筛选、投影，需要写大量的代码，而流是以声明的形式操作集合，它就像SQL语句，我们只需告诉流需要对集合进行什么操作，它就会自动进行操作，并将执行结果交给你，无需我们自己手写代码。<br>因此，流的集合操作对我们来说是透明的，我们只需向流下达命令，它就会自动把我们想要的结果给我们。由于操作过程完全由Java处理，因此它可以根据当前硬件环境选择最优的方法处理，我们也无需编写复杂又容易出错的多线程代码了。</p>\n<h4 id=\"流的特点\"><a href=\"#流的特点\" class=\"headerlink\" title=\"流的特点\"></a>流的特点</h4><ol>\n<li>只能遍历一次<br>我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。<br>一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。</li>\n<li>采用内部迭代方式<br>若要对集合进行处理，则需我们手写处理代码，这就叫做外部迭代。<br>而要对流进行处理，我们只需告诉流我们需要什么结果，处理过程由流自行完成，这就称为内部迭代。</li>\n</ol>\n<h4 id=\"流的操作种类\"><a href=\"#流的操作种类\" class=\"headerlink\" title=\"流的操作种类\"></a>流的操作种类</h4><p>流的操作分为两种，分别为中间操作和终端操作。</p>\n<ol>\n<li>中间操作<br>当数据源中的数据上了流水线后，这个过程对数据进行的所有操作都称为“中间操作”。<br>中间操作仍然会返回一个流对象，因此多个中间操作可以串连起来形成一个流水线。</li>\n<li>终端操作<br>当所有的中间操作完成后，若要将数据从流水线上拿下来，则需要执行终端操作。<br>终端操作将返回一个执行结果，这就是你想要的数据。</li>\n</ol>\n<h4 id=\"流的操作过程\"><a href=\"#流的操作过程\" class=\"headerlink\" title=\"流的操作过程\"></a>流的操作过程</h4><p>使用流一共需要三步：</p>\n<ol>\n<li>准备一个数据源</li>\n<li>执行中间操作<br>中间操作可以有多个，它们可以串连起来形成流水线。</li>\n<li>执行终端操作<br>执行终端操作后本次流结束，你将获得一个执行结果。</li>\n</ol>\n<h3 id=\"使用流\"><a href=\"#使用流\" class=\"headerlink\" title=\"使用流\"></a>使用流</h3><h4 id=\"创建流\"><a href=\"#创建流\" class=\"headerlink\" title=\"创建流\"></a>创建流</h4><p>在使用流之前，首先需要拥有一个数据源，并通过StreamAPI提供的一些方法获取该数据源的流对象。数据源可以有多种形式：</p>\n<p><strong>1. 集合</strong></p>\n<p>这种数据源较为常用，通过stream()方法即可获取流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;(); </div><div class=\"line\">Stream&lt;Person&gt; stream = list.stream();</div></pre></td></tr></table></figure>\n<p><strong>2. 数组</strong></p>\n<p>通过Arrays类提供的静态函数stream()获取数组的流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] names = &#123;<span class=\"string\">\"chaimm\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"john\"</span>&#125;;</div><div class=\"line\">Stream&lt;String&gt; stream = Arrays.stream(names);</div></pre></td></tr></table></figure>\n<p><strong>3. 值</strong></p>\n<p>直接将几个值变成流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Stream&lt;String&gt; stream = Stream.of(<span class=\"string\">\"chaimm\"</span>,<span class=\"string\">\"peter\"</span>,<span class=\"string\">\"john\"</span>);</div></pre></td></tr></table></figure>\n<p><strong>4. 文件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>(Stream lines = Files.lines(Paths.get(<span class=\"string\">\"文件路径名\"</span>),Charset.defaultCharset()))&#123;</div><div class=\"line\">    <span class=\"comment\">//可对lines做一些操作</span></div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(IOException e)&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：Java7简化了IO操作，把打开IO操作放在try后的括号中即可省略关闭IO的代码。</p>\n</blockquote>\n<p><strong>5. iterator</strong></p>\n<p><strong>创建无限流</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Stream.iterate(<span class=\"number\">0</span>, n -&gt; n + <span class=\"number\">2</span>)</div><div class=\"line\">      .limit(<span class=\"number\">10</span>)</div><div class=\"line\">      .forEach(System.out::println);</div></pre></td></tr></table></figure>\n<h4 id=\"筛选-filter\"><a href=\"#筛选-filter\" class=\"headerlink\" title=\"筛选 filter\"></a>筛选 filter</h4><p>filter 函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。<br>如，筛选出所有学生：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .filter(Person::isStudent)</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"去重distinct\"><a href=\"#去重distinct\" class=\"headerlink\" title=\"去重distinct\"></a>去重distinct</h4><p>去掉重复的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .distinct()</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<blockquote>\n<p>PS：对象去重的时候，需要注意重写 equals 和 hashcode 方法</p>\n</blockquote>\n<h4 id=\"截取\"><a href=\"#截取\" class=\"headerlink\" title=\"截取\"></a>截取</h4><p>截取流的前N个元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .limit(<span class=\"number\">3</span>)</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"跳过\"><a href=\"#跳过\" class=\"headerlink\" title=\"跳过\"></a>跳过</h4><p>跳过流的前n个元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;Person&gt; result = list.stream()</div><div class=\"line\">                    .skip(<span class=\"number\">3</span>)</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"映射\"><a href=\"#映射\" class=\"headerlink\" title=\"映射\"></a>映射</h4><p>对流中的每个元素执行一个函数，使得元素转换成另一种类型输出。流会将每一个元素输送给map函数，并执行map中的Lambda表达式，最后将执行结果存入一个新的流中。<br>如，获取每个人的姓名(实则是将Perosn类型转换成String类型)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; result = list.stream()</div><div class=\"line\">                    .map(Person::getName)</div><div class=\"line\">                    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"合并多个流\"><a href=\"#合并多个流\" class=\"headerlink\" title=\"合并多个流\"></a>合并多个流</h4><p>例：列出List中各不相同的单词，List集合如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">list.add(<span class=\"string\">\"I am a boy\"</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"I love the girl\"</span>);</div><div class=\"line\">list.add(<span class=\"string\">\"But the girl loves another girl\"</span>);</div></pre></td></tr></table></figure>\n<p>思路如下：</p>\n<p>首先将list变成流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream();</div></pre></td></tr></table></figure>\n<p>按空格分词：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream()</div><div class=\"line\">            .map(line-&gt;line.split(<span class=\"string\">\" \"</span>));</div></pre></td></tr></table></figure>\n<p>分完词之后，每个元素变成了一个String[]数组。</p>\n<p>将每个 <code>String[]</code> 变成流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream()</div><div class=\"line\">            .map(line-&gt;line.split(<span class=\"string\">\" \"</span>))</div><div class=\"line\">            .map(Arrays::stream)</div></pre></td></tr></table></figure>\n<p>此时一个大流里面包含了一个个小流，我们需要将这些小流合并成一个流。</p>\n<p>将小流合并成一个大流：用 <code>flatMap</code> 替换刚才的 map</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream()</div><div class=\"line\">    .map(line-&gt;line.split(<span class=\"string\">\" \"</span>))</div><div class=\"line\">    .flatMap(Arrays::stream)</div></pre></td></tr></table></figure>\n<p>去重</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">list.stream()</div><div class=\"line\">    .map(line-&gt;line.split(<span class=\"string\">\" \"</span>))</div><div class=\"line\">    .flatMap(Arrays::stream)</div><div class=\"line\">    .distinct()</div><div class=\"line\">    .collect(Collectors.toList());</div></pre></td></tr></table></figure>\n<h4 id=\"是否匹配任一元素：anyMatch\"><a href=\"#是否匹配任一元素：anyMatch\" class=\"headerlink\" title=\"是否匹配任一元素：anyMatch\"></a>是否匹配任一元素：anyMatch</h4><p>anyMatch用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。<br>如，判断list中是否有学生：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> result = list.stream()</div><div class=\"line\">            .anyMatch(Person::isStudent);</div></pre></td></tr></table></figure>\n<h4 id=\"是否匹配所有元素：allMatch\"><a href=\"#是否匹配所有元素：allMatch\" class=\"headerlink\" title=\"是否匹配所有元素：allMatch\"></a>是否匹配所有元素：allMatch</h4><p>allMatch用于判断流中的所有元素是否都满足指定条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。<br>如，判断是否所有人都是学生：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> result = list.stream()</div><div class=\"line\">            .allMatch(Person::isStudent);</div></pre></td></tr></table></figure>\n<h4 id=\"是否未匹配所有元素：noneMatch\"><a href=\"#是否未匹配所有元素：noneMatch\" class=\"headerlink\" title=\"是否未匹配所有元素：noneMatch\"></a>是否未匹配所有元素：noneMatch</h4><p>noneMatch与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> result = list.stream()</div><div class=\"line\">            .noneMatch(Person::isStudent);</div></pre></td></tr></table></figure>\n<h4 id=\"获取任一元素findAny\"><a href=\"#获取任一元素findAny\" class=\"headerlink\" title=\"获取任一元素findAny\"></a>获取任一元素findAny</h4><p>findAny能够从流中随便选一个元素出来，它返回一个Optional类型的元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;Person&gt; person = list.stream().findAny();</div></pre></td></tr></table></figure>\n<h4 id=\"获取第一个元素findFirst\"><a href=\"#获取第一个元素findFirst\" class=\"headerlink\" title=\"获取第一个元素findFirst\"></a>获取第一个元素findFirst</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Optional&lt;Person&gt; person = list.stream().findFirst();</div></pre></td></tr></table></figure>\n<h4 id=\"归约\"><a href=\"#归约\" class=\"headerlink\" title=\"归约\"></a>归约</h4><p>归约是将集合中的所有元素经过指定运算，折叠成一个元素输出，如：求最值、平均数等，这些操作都是将一个集合的元素折叠成一个元素输出。</p>\n<p>在流中，reduce函数能实现归约。<br>reduce函数接收两个参数：</p>\n<ol>\n<li>初始值</li>\n<li>进行归约操作的Lambda表达式</li>\n</ol>\n<p><strong>元素求和：自定义Lambda表达式实现求和</strong></p>\n<p>例：计算所有人的年龄总和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> age = list.stream().reduce(<span class=\"number\">0</span>, (person1,person2)-&gt;person1.getAge()+person2.getAge());</div></pre></td></tr></table></figure>\n<ol>\n<li>reduce的第一个参数表示初始值为0；</li>\n<li>reduce的第二个参数为需要进行的归约操作，它接收一个拥有两个参数的Lambda表达式，reduce会把流中的元素两两输给Lambda表达式，最后将计算出累加之和。</li>\n</ol>\n<p><strong>元素求和：使用Integer.sum函数求和</strong></p>\n<p>上面的方法中我们自己定义了Lambda表达式实现求和运算，如果当前流的元素为数值类型，那么可以使用Integer提供了sum函数代替自定义的Lambda表达式，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> age = list.stream().reduce(<span class=\"number\">0</span>, Integer::sum);</div></pre></td></tr></table></figure>\n<p>Integer类还提供了 <code>min</code>、<code>max</code> 等一系列数值操作，当流中元素为数值类型时可以直接使用。</p>\n<h4 id=\"数值流的使用\"><a href=\"#数值流的使用\" class=\"headerlink\" title=\"数值流的使用\"></a>数值流的使用</h4><p>采用reduce进行数值操作会涉及到基本数值类型和引用数值类型之间的装箱、拆箱操作，因此效率较低。<br>当流操作为纯数值操作时，使用数值流能获得较高的效率。</p>\n<p><strong>将普通流转换成数值流</strong></p>\n<p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。<br>如，将Person中的age转换成数值流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">IntStream stream = list.stream().mapToInt(Person::getAge);</div></pre></td></tr></table></figure>\n<p><strong>数值计算</strong></p>\n<p>每种数值流都提供了数值计算函数，如max、min、sum等。如，找出最大的年龄：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">OptionalInt maxAge = list.stream()</div><div class=\"line\">                                .mapToInt(Person::getAge)</div><div class=\"line\">                                .max();</div></pre></td></tr></table></figure>\n<p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回<code>OptionalInt</code>，它是<code>Optional</code>的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。<br>此外，<code>mapToInt</code>、<code>mapToDouble</code>、<code>mapToLong</code>进行数值操作后的返回结果分别为：<code>OptionalInt</code>、<code>OptionalDouble</code>、<code>OptionalLong</code></p>\n<h3 id=\"中间操作和收集操作\"><a href=\"#中间操作和收集操作\" class=\"headerlink\" title=\"中间操作和收集操作\"></a>中间操作和收集操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">使用的类型/函数式接口</th>\n<th style=\"text-align:left\">函数描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>filter</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>distinct</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>skip</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>map</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;R&gt;</code></td>\n<td style=\"text-align:left\"><code>Function&lt;T, R&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; R</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>flatMap</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;R&gt;</code></td>\n<td style=\"text-align:left\"><code>Function&lt;T, Stream&lt;R&gt;&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; Stream&lt;R&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>limit</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sorted</code></td>\n<td style=\"text-align:left\">中间</td>\n<td style=\"text-align:left\"><code>Stream&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>Comparator&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>(T, T) -&gt; int</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>anyMatch</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>noneMatch</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>allMatch</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\"><code>Predicate&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>findAny</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>findFirst</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>forEach</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>void</code></td>\n<td style=\"text-align:left\"><code>Consumer&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>T -&gt; void</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>collect</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>R</code></td>\n<td style=\"text-align:left\"><code>Collector&lt;T, A, R&gt;</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>reduce</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>BinaryOperator&lt;T&gt;</code></td>\n<td style=\"text-align:left\"><code>(T, T) -&gt; T</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>count</code></td>\n<td style=\"text-align:left\">终端</td>\n<td style=\"text-align:left\"><code>long</code></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Collectors-收集\"><a href=\"#Collectors-收集\" class=\"headerlink\" title=\"Collectors 收集\"></a>Collectors 收集</h3><p>收集器用来将经过筛选、映射的流进行最后的整理，可以使得最后的结果以不同的形式展现。<br><code>collect</code> 方法即为收集器，它接收 <code>Collector</code> 接口的实现作为具体收集器的收集方法。<br><code>Collector</code> 接口提供了很多默认实现的方法，我们可以直接使用它们格式化流的结果；也可以自定义 <code>Collector</code> 接口的实现，从而定制自己的收集器。</p>\n<h4 id=\"归约-1\"><a href=\"#归约-1\" class=\"headerlink\" title=\"归约\"></a>归约</h4><p>流由一个个元素组成，归约就是将一个个元素“折叠”成一个值，如求和、求最值、求平均值都是归约操作。</p>\n<h4 id=\"一般性归约\"><a href=\"#一般性归约\" class=\"headerlink\" title=\"一般性归约\"></a>一般性归约</h4><p>若你需要自定义一个归约操作，那么需要使用 <code>Collectors.reducing</code> 函数，该函数接收三个参数：</p>\n<ul>\n<li>第一个参数为归约的初始值</li>\n<li>第二个参数为归约操作进行的字段</li>\n<li>第三个参数为归约操作的过程</li>\n</ul>\n<h3 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h3><p>Collectors类专门为汇总提供了一个工厂方法：<code>Collectors.summingInt</code>。<br>它可接受一 个把对象映射为求和所需int的函数，并返回一个收集器；该收集器在传递给普通的 <code>collect</code> 方法后即执行我们需要的汇总操作。</p>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><p>数据分组是一种更自然的分割数据操作，分组就是将流中的元素按照指定类别进行划分，类似于SQL语句中的 <code>GROUPBY</code>。</p>\n<h4 id=\"多级分组\"><a href=\"#多级分组\" class=\"headerlink\" title=\"多级分组\"></a>多级分组</h4><p>多级分组可以支持在完成一次分组后，分别对每个小组再进行分组。<br>使用具有两个参数的 <code>groupingBy</code> 重载方法即可实现多级分组。</p>\n<ul>\n<li>第一个参数：一级分组的条件</li>\n<li>第二个参数：一个新的 <code>groupingBy</code> 函数，该函数包含二级分组的条件</li>\n</ul>\n<p><strong>Collectors 类的静态工厂方法</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">工厂方法</th>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">用途</th>\n<th style=\"text-align:left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>toList</code></td>\n<td style=\"text-align:left\"><code>List&lt;T&gt;</code></td>\n<td style=\"text-align:left\">把流中所有项目收集到一个 List</td>\n<td style=\"text-align:left\"><code>List&lt;Project&gt; projects = projectStream.collect(toList());</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toSet</code></td>\n<td style=\"text-align:left\"><code>Set&lt;T&gt;</code></td>\n<td style=\"text-align:left\">把流中所有项目收集到一个 Set，删除重复项</td>\n<td style=\"text-align:left\"><code>Set&lt;Project&gt; projects = projectStream.collect(toSet());</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toCollection</code></td>\n<td style=\"text-align:left\"><code>Collection&lt;T&gt;</code></td>\n<td style=\"text-align:left\">把流中所有项目收集到给定的供应源创建的集合</td>\n<td style=\"text-align:left\"><code>Collection&lt;Project&gt; projects = projectStream.collect(toCollection(), ArrayList::new);</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>counting</code></td>\n<td style=\"text-align:left\"><code>Long</code></td>\n<td style=\"text-align:left\">计算流中元素的个数</td>\n<td style=\"text-align:left\"><code>long howManyProjects = projectStream.collect(counting());</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>summingInt</code></td>\n<td style=\"text-align:left\"><code>Integer</code></td>\n<td style=\"text-align:left\">对流中项目的一个整数属性求和</td>\n<td style=\"text-align:left\"><code>int totalStars = projectStream.collect(summingInt(Project::getStars));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>averagingInt</code></td>\n<td style=\"text-align:left\"><code>Double</code></td>\n<td style=\"text-align:left\">计算流中项目 Integer 属性的平均值</td>\n<td style=\"text-align:left\"><code>double avgStars = projectStream.collect(averagingInt(Project::getStars));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>summarizingInt</code></td>\n<td style=\"text-align:left\"><code>IntSummaryStatistics</code></td>\n<td style=\"text-align:left\">收集关于流中项目 Integer 属性的统计值，例如最大、最小、 总和与平均值</td>\n<td style=\"text-align:left\"><code>IntSummaryStatistics projectStatistics = projectStream.collect(summarizingInt(Project::getStars));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>joining</code></td>\n<td style=\"text-align:left\"><code>String</code></td>\n<td style=\"text-align:left\">连接对流中每个项目调用 toString 方法所生成的字符串</td>\n<td style=\"text-align:left\"><code>String shortProject = projectStream.map(Project::getName).collect(joining(&quot;, &quot;));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>maxBy</code></td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\">按照给定比较器选出的最大元素的 Optional， 或如果流为空则为 Optional.empty()</td>\n<td style=\"text-align:left\"><code>Optional&lt;Project&gt; fattest = projectStream.collect(maxBy(comparingInt(Project::getStars)));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>minBy</code></td>\n<td style=\"text-align:left\"><code>Optional&lt;T&gt;</code></td>\n<td style=\"text-align:left\">按照给定比较器选出的最小元素的 Optional， 或如果流为空则为 Optional.empty()</td>\n<td style=\"text-align:left\"><code>Optional&lt;Project&gt; fattest = projectStream.collect(minBy(comparingInt(Project::getStars)));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>reducing</code></td>\n<td style=\"text-align:left\">归约操作产生的类型</td>\n<td style=\"text-align:left\">从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值</td>\n<td style=\"text-align:left\"><code>int totalStars = projectStream.collect(reducing(0, Project::getStars, Integer::sum));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>collectingAndThen</code></td>\n<td style=\"text-align:left\">转换函数返回的类型</td>\n<td style=\"text-align:left\">包含另一个收集器，对其结果应用转换函数</td>\n<td style=\"text-align:left\"><code>int howManyProjects = projectStream.collect(collectingAndThen(toList(), List::size));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>groupingBy</code></td>\n<td style=\"text-align:left\"><code>Map&lt;K, List&lt;T&gt;&gt;</code></td>\n<td style=\"text-align:left\">根据项目的一个属性的值对流中的项目作问组，并将属性值作 为结果 Map 的键</td>\n<td style=\"text-align:left\"><code>Map&lt;String,List&lt;Project&gt;&gt; projectByLanguage = projectStream.collect(groupingBy(Project::getLanguage));</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>partitioningBy</code></td>\n<td style=\"text-align:left\"><code>Map&lt;Boolean,List&lt;T&gt;&gt;</code></td>\n<td style=\"text-align:left\">根据对流中每个项目应用断言的结果来对项目进行分区</td>\n<td style=\"text-align:left\"><code>Map&lt;Boolean,List&lt;Project&gt;&gt; vegetarianDishes = projectStream.collect(partitioningBy(Project::isVegetarian));</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"转换类型\"><a href=\"#转换类型\" class=\"headerlink\" title=\"转换类型\"></a>转换类型</h4><p>有一些收集器可以生成其他集合。比如前面已经见过的 <code>toList</code>，生成了 <code>java.util.List</code> 类的实例。<br>还有 <code>toSet</code> 和 <code>toCollection</code>，分别生成 <code>Set</code> 和 <code>Collection</code> 类的实例。<br>到目前为止， 我已经讲了很多流上的链式操作，但总有一些时候，需要最终生成一个集合——比如：</p>\n<ul>\n<li>已有代码是为集合编写的，因此需要将流转换成集合传入；</li>\n<li>在集合上进行一系列链式操作后，最终希望生成一个值；</li>\n<li>写单元测试时，需要对某个具体的集合做断言。</li>\n</ul>\n<p>使用 <code>Collectors.toCollection</code>，用定制的集合收集元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">stream.collect(Collectors.toCollection(TreeSet::<span class=\"keyword\">new</span>));</div></pre></td></tr></table></figure>\n<p>还可以利用收集器让流生成一个值。 <code>maxBy</code> 和 <code>minBy</code> 允许用户按某种特定的顺序生成一个值。</p>\n<h4 id=\"数据分区\"><a href=\"#数据分区\" class=\"headerlink\" title=\"数据分区\"></a>数据分区</h4><p>分区是分组的特殊情况：由一个断言（返回一个布尔值的函数）作为分类函数，它称分区函数。<br>分区函数返回一个布尔值，这意味着得到的分组 <code>Map</code> 的键类型是 <code>Boolean</code>，于是它最多可以分为两组: true是一组，false是一组。</p>\n<p>分区的好处在于保留了分区函数返回true或false的两套流元素列表。</p>\n<h4 id=\"并行流\"><a href=\"#并行流\" class=\"headerlink\" title=\"并行流\"></a>并行流</h4><p>并行流就是一个把内容分成多个数据块，并用不不同的线程分别处理每个数据块的流。最后合并每个数据块的计算结果。</p>\n<p>将一个顺序执行的流转变成一个并发的流只要调用 <code>parallel()</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">parallelSum</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Stream.iterate(<span class=\"number\">1L</span>, i -&gt; i +<span class=\"number\">1</span>).limit(n).parallel().reduce(<span class=\"number\">0L</span>,Long::sum);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将一个并发流转成顺序的流只要调用 <code>sequential()</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">stream.parallel().filter(...).sequential().map(...).parallel().reduce();</div></pre></td></tr></table></figure>\n<p>这两个方法可以多次调用，只有最后一个调用决定这个流是顺序的还是并发的。</p>\n<p>并发流使用的默认线程数等于你机器的处理器核心数。</p>\n<p>通过这个方法可以修改这个值，这是全局属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.setProperty(<span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>, <span class=\"string\">\"12\"</span>);</div></pre></td></tr></table></figure>\n<p>并非使用多线程并行流处理数据的性能一定高于单线程顺序流的性能，因为性能受到多种因素的影响。<br>如何高效使用并发流的一些建议：</p>\n<ol>\n<li>如果不确定， 就自己测试。</li>\n<li>尽量使用基本类型的流 <code>IntStream</code>, <code>LongStream</code>, <code>DoubleStream</code></li>\n<li>有些操作使用并发流的性能会比顺序流的性能更差，比如limit，findFirst，依赖元素顺序的操作在并发流中是极其消耗性能的。findAny的性能就会好很多，应为不依赖顺序。</li>\n<li>考虑流中计算的性能(Q)和操作的性能(N)的对比, Q表示单个处理所需的时间，N表示需要处理的数量，如果Q的值越大, 使用并发流的性能就会越高。</li>\n<li>数据量不大时使用并发流，性能得不到提升。</li>\n<li>考虑数据结构：并发流需要对数据进行分解，不同的数据结构被分解的性能时不一样的。</li>\n</ol>\n<p><strong>流的数据源和可分解性</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">源</th>\n<th style=\"text-align:left\">可分解性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ArrayList</code></td>\n<td style=\"text-align:left\">非常好</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>LinkedList</code></td>\n<td style=\"text-align:left\">差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>IntStream.range</code></td>\n<td style=\"text-align:left\">非常好</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Stream.iterate</code></td>\n<td style=\"text-align:left\">差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HashSet</code></td>\n<td style=\"text-align:left\">好</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TreeSet</code></td>\n<td style=\"text-align:left\">好</td>\n</tr>\n</tbody>\n</table>\n<p><strong>流的特性以及中间操作对流的修改都会对数据对分解性能造成影响。 比如固定大小的流在任务分解的时候就可以平均分配，但是如果有filter操作，那么流就不能预先知道在这个操作后还会剩余多少元素。</strong></p>\n<p><strong>考虑终端操作的性能：如果终端操作在合并并发流的计算结果时的性能消耗太大，那么使用并发流提升的性能就会得不偿失。</strong></p>\n<h2 id=\"Optional-类（★）\"><a href=\"#Optional-类（★）\" class=\"headerlink\" title=\"Optional 类（★）\"></a>Optional 类（★）</h2><p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>\n<p>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</p>\n<p>Optional 类的引入很好的解决空指针异常。</p>\n<h3 id=\"Optional类的方法\"><a href=\"#Optional类的方法\" class=\"headerlink\" title=\"Optional类的方法\"></a>Optional类的方法</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>empty</code></td>\n<td style=\"text-align:left\">返回一个空的 Optional 实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>filter</code></td>\n<td style=\"text-align:left\">如果值存在并且满足提供的断言， 就返回包含该值的 Optional 对象；否则返回一个空的 Optional 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>map</code></td>\n<td style=\"text-align:left\">如果值存在，就对该值执行提供的 mapping 函数调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>flatMap</code></td>\n<td style=\"text-align:left\">如果值存在，就对该值执行提供的 mapping 函数调用，返回一个 Optional 类型的值，否则就返 回一个空的 Optional 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>get</code></td>\n<td style=\"text-align:left\">如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ifPresent</code></td>\n<td style=\"text-align:left\">如果值存在，就执行使用该值的方法调用，否则什么也不做</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>isPresent</code></td>\n<td style=\"text-align:left\">如果值存在就返回 true，否则返回 false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>of</code></td>\n<td style=\"text-align:left\">将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ofNullable</code></td>\n<td style=\"text-align:left\">将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>orElse</code></td>\n<td style=\"text-align:left\">如果有值则将其返回，否则返回一个默认值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>orElseGet</code></td>\n<td style=\"text-align:left\">如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>orElseThrow</code></td>\n<td style=\"text-align:left\">如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Nashorn-JavaScript-引擎\"><a href=\"#Nashorn-JavaScript-引擎\" class=\"headerlink\" title=\"Nashorn, JavaScript 引擎\"></a>Nashorn, JavaScript 引擎</h2><p>Nashorn 一个 javascript 引擎。</p>\n<p>从JDK 1.8开始，Nashorn取代Rhino(JDK 1.6, JDK1.7)成为Java的嵌入式JavaScript引擎。Nashorn完全支持ECMAScript 5.1规范以及一些扩展。它使用基于JSR 292的新语言特性，其中包含在JDK 7中引入的invokedynamic，将JavaScript编译成Java字节码。</p>\n<p>与先前的Rhino实现相比，这带来了2到10倍的性能提升。</p>\n<h2 id=\"新的日期时间-API（★★）\"><a href=\"#新的日期时间-API（★★）\" class=\"headerlink\" title=\"新的日期时间 API（★★）\"></a>新的日期时间 API（★★）</h2><blockquote>\n<p>Demo 代码：<a href=\"https://github.com/xkcoding/java8_learning/tree/master/java8-datetime\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning/tree/master/java8-datetime</a></p>\n</blockquote>\n<h3 id=\"ZoneId\"><a href=\"#ZoneId\" class=\"headerlink\" title=\"ZoneId\"></a>ZoneId</h3><p>Java 8中的时区操作被很大程度上简化了，新的时区类 <code>java.time.ZoneId</code> 是原有的 <code>java.util.TimeZone</code> 类的替代品。<br>ZoneId对象可以通过 <code>ZoneId.of()</code> 方法创建，也可以通过 <code>ZoneId.systemDefault()</code> 获取系统默认时区：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId shanghaiZoneId = ZoneId.of(<span class=\"string\">\"Asia/Shanghai\"</span>);</div><div class=\"line\">ZoneId systemZoneId = ZoneId.systemDefault();</div></pre></td></tr></table></figure>\n<p><code>of()</code> 方法接收一个“区域/城市”的字符串作为参数，你可以通过 <code>getAvailableZoneIds()</code> 方法获取所有合法的“区域/城市”字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</div></pre></td></tr></table></figure>\n<p>对于老的时区类 <code>TimeZone</code>，Java 8也提供了转化方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId oldToNewZoneId = TimeZone.getDefault().toZoneId();</div></pre></td></tr></table></figure>\n<p>有了 <code>ZoneId</code>，我们就可以将一个 <code>LocalDate</code>、<code>LocalTime</code> 或 <code>LocalDateTime</code> 对象转化为 <code>ZonedDateTime</code> 对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime localDateTime = LocalDateTime.now();</div><div class=\"line\">ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, shanghaiZoneId);</div></pre></td></tr></table></figure>\n<p><code>ZonedDateTime</code> 对象由两部分构成，<code>LocalDateTime</code> 和 <code>ZoneId</code>，其中 <code>2018-03-03T15:26:56.147</code> 部分为 <code>LocalDateTime</code>，<code>+08:00[Asia/Shanghai]</code> 部分为ZoneId。</p>\n<p>另一种表示时区的方式是使用 <code>ZoneOffset</code>，它是以当前时间和 <strong>世界标准时间（UTC）/格林威治时间（GMT）</strong> 的偏差来计算，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneOffset zoneOffset = ZoneOffset.of(<span class=\"string\">\"+09:00\"</span>);</div><div class=\"line\">LocalDateTime localDateTime = LocalDateTime.now();</div><div class=\"line\">OffsetDateTime offsetDateTime = OffsetDateTime.of(localDateTime, zoneOffset);</div></pre></td></tr></table></figure>\n<h3 id=\"Instant\"><a href=\"#Instant\" class=\"headerlink\" title=\"Instant\"></a>Instant</h3><p>Instant类在Java日期与时间功能中，表示了时间线上一个确切的点，定义为距离初始时间的时间差（初始时间为GMT 1970年1月1日00:00）经测量一天有86400秒，从初始时间开始不断向前移动。</p>\n<p><strong>创建一个Instant实例</strong></p>\n<p>你可以通过Instant类的工厂方法创建一个Instant实例，例如你可以调用instant.now()来创建一个确切的表达当前时间的Instant对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Instant now = Instant.now();</div></pre></td></tr></table></figure>\n<p>另外也有一些其它方法能创建Instant，具体请查阅Java官方文档。</p>\n<p><strong>访问Instant的时间</strong></p>\n<p>一个Instant对象里有两个域：距离初始时间的秒钟数、在当前一秒内的第几纳秒，他们的组合表达了当前时间点。你可以通过以下两个方法得到它们的值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> seconds =  now.getEpochSecond()</div><div class=\"line\"><span class=\"keyword\">int</span> nanos   =   now.getNano()</div></pre></td></tr></table></figure>\n<p><strong>Instant的计算</strong></p>\n<p>Instant类有一些方法，可以用于获得另一Instant的值，例如：</p>\n<ul>\n<li><code>plusSeconds()</code></li>\n<li><code>plusMillis()</code></li>\n<li><code>plusNanos()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusMillis()</code></li>\n<li><code>minusNanos()</code></li>\n</ul>\n<p>我下面将向你展示两个例子，来说明这些方法如何使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Instant now     = Instant.now();</div><div class=\"line\">Instant later   = now.plusSeconds(<span class=\"number\">3</span>);</div><div class=\"line\">Instant earlier = now.minusSeconds(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<p>第一行获得了一个Instant对象，表示当前时间。第二行创建了一个Instant表示三秒后，第三行创建了一个Instant表示三秒前。</p>\n<blockquote>\n<p>seconds 表示从 <code>1970-01-01 00:00:00</code> 开始到现在的秒数，nanos 表示纳秒部分（nanos的值不会超过999,999,999）</p>\n</blockquote>\n<h3 id=\"Clock\"><a href=\"#Clock\" class=\"headerlink\" title=\"Clock\"></a>Clock</h3><p>Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。<br>某一个特定的时间点也可以使用Instant类来表示，Instant 类也可以用来创建老的 <code>java.util.Date</code> 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Clock clock = Clock.systemDefaultZone();  </div><div class=\"line\"><span class=\"keyword\">long</span> millis = clock.millis();    </div><div class=\"line\">Instant instant = clock.instant();  </div><div class=\"line\">Date legacyDate = Date.from(instant);   <span class=\"comment\">// legacy java.util.Date</span></div></pre></td></tr></table></figure>\n<h3 id=\"LocalDate\"><a href=\"#LocalDate\" class=\"headerlink\" title=\"LocalDate\"></a>LocalDate</h3><p>LocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。<br>可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间（如java.util.Date中的2000.01.01表示的实际是这一天的00:00这个瞬间）。</p>\n<p>LocalDate类位于java.time包下，类名叫java.time.LocalDate，创建出来的实例也是不可变对象，所以涉及它的计算方法将返回一个新的LocalDate。</p>\n<p><strong>创建一个LocalDate实例</strong></p>\n<p>我们有多种方式可以创建出 <code>LocalDate</code> 实例。第一种方法是使用 <code>now()</code> 方法获得值为今天当日的 <code>LocalDate</code> 对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate localDate = LocalDate.now();</div></pre></td></tr></table></figure>\n<p>另一种方法是使用年月日信息构造出LocalDate对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate localDate2 = LocalDate.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>);</div></pre></td></tr></table></figure>\n<p>LocalDate 的 <code>of()</code> 方法创建出一个指定年月日的日期，并且没有时区信息。</p>\n<p><strong>访问日期信息</strong></p>\n<p>可以用如下方法访问LocalDate中的日期信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>   year       = localDate.getYear();</div><div class=\"line\">Month month      = localDate.getMonth();</div><div class=\"line\"><span class=\"keyword\">int</span>   dayOfMonth = localDate.getDayOfMonth();</div><div class=\"line\"><span class=\"keyword\">int</span>   dayOfYear  = localDate.getDayOfYear();</div><div class=\"line\">DayOfWeek dayOfWeek = localDate.getDayOfWeek();</div></pre></td></tr></table></figure>\n<p>可以注意到getMonth()与getDayOfWeek()方法返回了一个枚举类型代替一个int。你可以通过枚举类型中的getValue()来获得信息。</p>\n<p><strong>LocalDate计算</strong></p>\n<p>你可以进行一堆简单的日期计算，只要使用如下的方法：</p>\n<ul>\n<li><code>plusDays()</code></li>\n<li><code>plusWeeks()</code></li>\n<li><code>plusMonths()</code></li>\n<li><code>plusYears()</code></li>\n<li><code>minusDays()</code></li>\n<li><code>minusWeeks()</code></li>\n<li><code>minusMonths()</code></li>\n<li><code>minusYears()</code></li>\n</ul>\n<p>以下举几个使用的例子来帮助理解使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate d  = LocalDate.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>);</div><div class=\"line\">LocalDate d1 = localDate.plusYears(<span class=\"number\">3</span>);</div><div class=\"line\">LocalDate d2 = localDate.minusYears(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>第一行创建出一个新的LocalDate对象d，表示2018.7.19。</li>\n<li>第二行创建了值等于d日期3年后的LocalDate对象，第三行也是一样，只是值改为d日期的三年前。 </li>\n</ol>\n<h3 id=\"LocalTime\"><a href=\"#LocalTime\" class=\"headerlink\" title=\"LocalTime\"></a>LocalTime</h3><p>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。<br>LocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。</p>\n<p><strong>创建一个LocatTime实例</strong></p>\n<p>有多种方式可以新建LocalTime实例。比如使用当前时间作为值新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalTime localTime = LocalTime.now();</div></pre></td></tr></table></figure>\n<p>另一种方式是使用指定的时分秒和纳秒来新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalTime localTime2 = LocalTime.of(<span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">11001</span>);</div></pre></td></tr></table></figure>\n<p>也有另一种版本的 <code>of()</code> 方法只需要小时分钟两项，或时分秒三项值作为参数。</p>\n<p><strong>访问LocalTime对象的时间</strong></p>\n<p>你可以通过这些方法访问其时、分、秒、纳秒：</p>\n<ul>\n<li><code>getHour()</code></li>\n<li><code>getMinute()</code></li>\n<li><code>getSecond()</code></li>\n<li><code>getNano()</code></li>\n</ul>\n<p><strong>LocalTime的计算</strong></p>\n<p>LocalTime类包含一系列方法，能帮你完成时间计算：</p>\n<ul>\n<li><code>plusHours()</code></li>\n<li><code>plusMinutes()</code></li>\n<li><code>plusSeconds()</code></li>\n<li><code>plusNanos()</code></li>\n<li><code>minusHours()</code></li>\n<li><code>minusMinutes()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusNanos()</code></li>\n</ul>\n<p>以下举一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalTime localTime2 = LocalTime.of(<span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">59</span>, <span class=\"number\">11001</span>);</div><div class=\"line\">LocalTime localTimeLater   = localTime.plusHours(<span class=\"number\">3</span>);</div><div class=\"line\">LocalTime localTimeEarlier = localTime.minusHours(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>第一行新建一个LocalTime实例，表示21:30:50的第11001纳秒。</li>\n<li>第二行新建了一个LocalTime实例表示这个时间的三小时后，第三行表示三小时前。</li>\n<li>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）。比如你需要描述学校几点开学，这个时间不涉及在什么城市，这个描述是对任何国家城市都适用的，此时使用无时区的LocalTime就足够了。</li>\n</ol>\n<p>LocalTime类的对象也是不可变的，所以计算方法会返回一个新的LocalTime实例。</p>\n<h3 id=\"LocalDateTime\"><a href=\"#LocalDateTime\" class=\"headerlink\" title=\"LocalDateTime\"></a>LocalDateTime</h3><p>LocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。</p>\n<p>LocalDateTime类的值是不可变的，所以其计算方法会返回一个新的LocalDateTime实例。</p>\n<p><strong>创建一个LocatDateTime实例</strong></p>\n<p>可以通过LocalDateTime的静态工厂方法来创建LocalDateTime实例。以下举例使用 <code>now()</code> 方法创建：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime localDateTime = LocalDateTime.now();</div></pre></td></tr></table></figure>\n<p>另一种方式是使用指定的年月日、时分秒、纳秒来新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime localDateTime2 = LocalDateTime.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>, <span class=\"number\">13</span>, <span class=\"number\">55</span>, <span class=\"number\">36</span>, <span class=\"number\">123</span>);</div></pre></td></tr></table></figure>\n<p><strong>访问LocalDateTime对象的时间</strong></p>\n<p>你可以通过这些方法访问其日期时间：</p>\n<ul>\n<li><code>getYear()</code></li>\n<li><code>getMonth()</code></li>\n<li><code>getDayOfMonth()</code></li>\n<li><code>getDayOfWeek()</code></li>\n<li><code>getDayOfYear()</code></li>\n<li><code>getHour()</code></li>\n<li><code>getMinute()</code></li>\n<li><code>getSecond()</code></li>\n<li><code>getNano()</code></li>\n</ul>\n<p>这些方法中有一些返回int有一些返回枚举类型，你可以通过枚举类型中的 <code>getValue()</code> 方法来获得int值。</p>\n<p><strong>LocalDateTime的计算</strong></p>\n<p>LocalDateTime 类包含一系列方法，能帮你完成时间计算：</p>\n<ul>\n<li><code>plusYears()</code></li>\n<li><code>plusMonths()</code></li>\n<li><code>plusDays()</code></li>\n<li><code>plusHours()</code></li>\n<li><code>plusMinutes()</code></li>\n<li><code>plusSeconds()</code></li>\n<li><code>plusNanos()</code></li>\n<li><code>minusYears()</code></li>\n<li><code>minusMonths()</code></li>\n<li><code>minusDays()</code></li>\n<li><code>minusHours()</code></li>\n<li><code>minusMinutes()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusNanos()</code></li>\n</ul>\n<p>以下举一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime localDateTime  = LocalDateTime.now();</div><div class=\"line\">LocalDateTime localDateTime1 = localDateTime.plusYears(<span class=\"number\">3</span>);</div><div class=\"line\">LocalDateTime localDateTime2 = localDateTime.minusYears(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>第一行新建一个LocalDateTime实例表示当前这个时间。</li>\n<li>第二行新建了一个LocalDateTime实例表示三年后。</li>\n<li>第三行也新建了一个LocalDateTime实例表示三小时前。</li>\n</ol>\n<h3 id=\"ZonedDateTime\"><a href=\"#ZonedDateTime\" class=\"headerlink\" title=\"ZonedDateTime\"></a>ZonedDateTime</h3><p>ZonedDateTime类是Java 8中日期时间功能里，用于表示带时区的日期与时间信息的类。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。</p>\n<p>ZonedDateTime 类的值是不可变的，所以其计算方法会返回一个新的ZonedDateTime 实例。</p>\n<p><strong>创建一个ZonedDateTime实例</strong></p>\n<p>有多种方式可以新建ZonedDateTime实例。比如使用当前时间作为值新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZonedDateTime dateTime = ZonedDateTime.now();</div></pre></td></tr></table></figure>\n<p>另一种方式是使用指定的年月日、时分秒、纳秒以及时区ID来新建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId zoneId = ZoneId.of(<span class=\"string\">\"UTC+1\"</span>);</div><div class=\"line\">ZonedDateTime dateTime2 = ZonedDateTime.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>, <span class=\"number\">45</span>, <span class=\"number\">59</span>, <span class=\"number\">1234</span>, zoneId);</div></pre></td></tr></table></figure>\n<p><strong>访问ZonedDateTime对象的时间</strong></p>\n<p>你可以通过这些方法访问其日期时间：</p>\n<ul>\n<li><code>getYear()</code></li>\n<li><code>getMonth()</code></li>\n<li><code>getDayOfMonth()</code></li>\n<li><code>getDayOfWeek()</code></li>\n<li><code>getDayOfYear()</code></li>\n<li><code>getHour()</code></li>\n<li><code>getMinute()</code></li>\n<li><code>getSecond()</code></li>\n<li><code>getNano()</code></li>\n</ul>\n<p>这些方法中有一些返回int有一些返回枚举类型，但可以通过枚举类型中的getValue()方法来获得int值。</p>\n<p><strong>ZonedDateTime的计算</strong></p>\n<p>ZonedDateTime类包含一系列方法，能帮你完成时间计算：</p>\n<ul>\n<li><code>plusYears()</code></li>\n<li><code>plusMonths()</code></li>\n<li><code>plusDays()</code></li>\n<li><code>plusHours()</code></li>\n<li><code>plusMinutes()</code></li>\n<li><code>plusSeconds()</code></li>\n<li><code>plusNanos()</code></li>\n<li><code>minusYears()</code></li>\n<li><code>minusMonths()</code></li>\n<li><code>minusDays()</code></li>\n<li><code>minusHours()</code></li>\n<li><code>minusMinutes()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusNanos()</code></li>\n</ul>\n<p>但注意计算时，若不巧跨越了夏令时（会补一小时或减一小时），可能得不到希望的结果。一个替代的正确做法是使用Period：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZonedDateTime zoneDateTime = previousDateTime.plus(Period.ofDays(<span class=\"number\">3</span>));</div></pre></td></tr></table></figure>\n<p><strong>时区</strong></p>\n<p>时区是用ZoneId类表示的，你可以使用ZoneId.now()或ZoneId.of(“xxx”)来实例化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId zoneId = ZoneId.of(<span class=\"string\">\"UTC+1\"</span>);</div></pre></td></tr></table></figure>\n<p>传给 <code>of()</code> 方法的参数是时区的ID，如“UTC+1”指距离UTC（格林威治时间）有一小时的时差，你可以使用你想要的时差来表示ZoneId（如+1与-5等等）<br>你也可以使用另一种方式表示zone id，即使用地区名字，也是可以的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZoneId zoneId2 = ZoneId.of(<span class=\"string\">\"Europe/Copenhagen\"</span>);</div><div class=\"line\">ZoneId zoneId3 = ZoneId.of(<span class=\"string\">\"Europe/Paris\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"DateTimeFormatter\"><a href=\"#DateTimeFormatter\" class=\"headerlink\" title=\"DateTimeFormatter\"></a>DateTimeFormatter</h3><p>DateTimeFormatter类是Java 8中日期时间功能里，用于解析和格式化日期时间的类，位于 <code>java.time.format</code> 包下。</p>\n<p><strong>预定义的DateTimeFormatter实例</strong></p>\n<p>DateTimeFormatter类包含一系列预定义（常量）的实例，可以解析和格式化一些标准时间格式。这将让你免除麻烦的时间格式定义，类中包含如下预定义的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">BASIC_ISO_DATE</div><div class=\"line\"></div><div class=\"line\">ISO_LOCAL_DATE</div><div class=\"line\">ISO_LOCAL_TIME</div><div class=\"line\">ISO_LOCAL_DATE_TIME</div><div class=\"line\"></div><div class=\"line\">ISO_OFFSET_DATE</div><div class=\"line\">ISO_OFFSET_TIME</div><div class=\"line\">ISO_OFFSET_DATE_TIME</div><div class=\"line\"></div><div class=\"line\">ISO_ZONED_DATE_TIME</div><div class=\"line\"></div><div class=\"line\">ISO_INSTANT</div><div class=\"line\"></div><div class=\"line\">ISO_DATE</div><div class=\"line\">ISO_TIME</div><div class=\"line\">ISO_DATE_TIME</div><div class=\"line\"></div><div class=\"line\">ISO_ORDINAL_TIME</div><div class=\"line\">ISO_WEEK_DATE</div><div class=\"line\"></div><div class=\"line\">RFC_1123_DATE_TIME</div></pre></td></tr></table></figure>\n<p>每个预定义的DateTimeFormatter实例都有不同的日期格式，具体的可以查阅Java官方文档。</p>\n<blockquote>\n<p>PS：推荐使用下期分享的 <code>Hutool</code> 工具类做这些格式化工作，格式更加丰富。</p>\n</blockquote>\n<p><strong>格式化日期</strong></p>\n<p>当你获取一个DateTimeFormatter实例后，就可以用format()方便来将一个日期格式化为某种字符串，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;</div><div class=\"line\">String formattedDate = formatter.format(LocalDate.now());</div><div class=\"line\">System.out.println(formattedDate);</div></pre></td></tr></table></figure>\n<p>这个样例把LocalDate对象格式化了，并输出20180719，这个输出表示现在2018年，7月19日。<br>再举一个关于ZonedDateTime的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">DateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;</div><div class=\"line\">String formattedZonedDate = formatter.format(ZonedDateTime.now());</div><div class=\"line\">System.out.println(<span class=\"string\">\"formattedZonedDate = \"</span> + formattedZonedDate);</div></pre></td></tr></table></figure>\n<p>这个例子会输出：20180719+0800<br>表示今年2018年，7月19日，位于UTC+8时区。</p>\n<h3 id=\"Duration\"><a href=\"#Duration\" class=\"headerlink\" title=\"Duration\"></a>Duration</h3><p>一个Duration对象表示两个Instant间的一段时间，是在Java 8中加入的新功能。</p>\n<p>一个Duration实例是不可变的，当创建出对象后就不能改变它的值了。你只能通过Duration的计算方法，来创建出一个新的Durtaion对象。你会在之后的教程中见到的。</p>\n<p><strong>创建Duration实例</strong></p>\n<p>使用 <code>Duration</code> 类的工厂方法来创建一个 <code>Duration</code> 对象，以下是一个使用 <code>between()</code> 的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Instant first = Instant.now();</div><div class=\"line\"><span class=\"comment\">// 耗时操作，或者 Sleep 一段时间</span></div><div class=\"line\">Instant second = Instant.now();</div><div class=\"line\">Duration duration = Duration.between(first, second);</div></pre></td></tr></table></figure>\n<p><strong>访问Duration的时间</strong></p>\n<p>一个Duration对象里有两个域：纳秒值（小于一秒的部分），秒钟值（一共有几秒），他们的组合表达了时间长度。注意与使用System.getCurrentTimeMillis()时不同，Duration不包含毫秒这个属性。<br>你可以通过以下两个方法得到它们的值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> seconds =  duration.getSeconds()</div><div class=\"line\"><span class=\"keyword\">int</span> nanos   =  duration.getNano()</div></pre></td></tr></table></figure>\n<p>你也可以转换整个时间到其它单位如纳秒、分钟、小时、天：</p>\n<ul>\n<li><code>toNanos()</code></li>\n<li><code>toMillis()</code></li>\n<li><code>toMinutes()</code></li>\n<li><code>toHours()</code></li>\n<li><code>toDays()</code></li>\n</ul>\n<p>举例而言：<code>toNanos()</code> 与 <code>getNano()</code> 不同，<code>toNanos()</code> 获得的是 <code>Duration</code> 整个时间共有多少纳秒，<br>而 <code>getNano()</code> 只是获得这段时间中小于一秒的部分。</p>\n<p><strong>Duration计算</strong></p>\n<p>Duration类包含一系列的计算方法：</p>\n<ul>\n<li><code>plusNanos()</code></li>\n<li><code>plusMillis()</code></li>\n<li><code>plusSeconds()</code></li>\n<li><code>plusMinutes()</code></li>\n<li><code>plusHours()</code></li>\n<li><code>plusDays()</code></li>\n<li><code>minusNanos()</code></li>\n<li><code>minusMillis()</code></li>\n<li><code>minusSeconds()</code></li>\n<li><code>minusMinutes()</code></li>\n<li><code>minusHours()</code></li>\n<li><code>minusDays()</code></li>\n</ul>\n<p>这些方法所做的事都是相似的，这里展示一个加减的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Duration start = ... <span class=\"comment\">//obtain a start duration</span></div><div class=\"line\">Duration added      = start.plusDays(<span class=\"number\">3</span>);</div><div class=\"line\">Duration subtracted = start.minusDays(<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<ol>\n<li>第一行创建了一个Duration对象叫start，具体怎么创建可以参考前面的代码。</li>\n<li>第二三行样例创建了两个新的Duration，通过调用start的加减操作，使得added对象表示的时间比start多三天，而substracted则少三天。</li>\n</ol>\n<p>所有的计算方法都会返回一个新的Duration，以保证Duration的不可变属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> days = duration.toDays();              <span class=\"comment\">// 这段时间的总天数</span></div><div class=\"line\"><span class=\"keyword\">long</span> hours = duration.toHours();            <span class=\"comment\">// 这段时间的小时数</span></div><div class=\"line\"><span class=\"keyword\">long</span> minutes = duration.toMinutes();        <span class=\"comment\">// 这段时间的分钟数</span></div><div class=\"line\"><span class=\"keyword\">long</span> seconds = duration.getSeconds();       <span class=\"comment\">// 这段时间的秒数</span></div><div class=\"line\"><span class=\"keyword\">long</span> milliSeconds = duration.toMillis();    <span class=\"comment\">// 这段时间的毫秒数</span></div><div class=\"line\"><span class=\"keyword\">long</span> nanoSeconds = duration.toNanos();      <span class=\"comment\">// 这段时间的纳秒数</span></div></pre></td></tr></table></figure>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><h4 id=\"增加和减少日期\"><a href=\"#增加和减少日期\" class=\"headerlink\" title=\"增加和减少日期\"></a>增加和减少日期</h4><p>Java 8中的日期/时间类都是不可变的，这是为了保证线程安全。当然，新的日期/时间类也提供了方法用于创建对象的可变版本，比如增加一天或者减少一天：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate date = LocalDate.of(<span class=\"number\">2017</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>);          <span class=\"comment\">// 2017-01-05</span></div><div class=\"line\"></div><div class=\"line\">LocalDate date1 = date.withYear(<span class=\"number\">2016</span>);              <span class=\"comment\">// 修改为 2016-01-05</span></div><div class=\"line\">LocalDate date2 = date.withMonth(<span class=\"number\">2</span>);                <span class=\"comment\">// 修改为 2017-02-05</span></div><div class=\"line\">LocalDate date3 = date.withDayOfMonth(<span class=\"number\">1</span>);           <span class=\"comment\">// 修改为 2017-01-01</span></div><div class=\"line\"></div><div class=\"line\">LocalDate date4 = date.plusYears(<span class=\"number\">1</span>);                <span class=\"comment\">// 增加一年 2018-01-05</span></div><div class=\"line\">LocalDate date5 = date.minusMonths(<span class=\"number\">2</span>);              <span class=\"comment\">// 减少两个月 2016-11-05</span></div><div class=\"line\">LocalDate date6 = date.plus(<span class=\"number\">5</span>, ChronoUnit.DAYS);    <span class=\"comment\">// 增加5天 2017-01-10</span></div></pre></td></tr></table></figure>\n<p>上面例子中对于日期的操作比较简单，但是有些时候我们要面临更复杂的时间操作，比如将时间调到下一个工作日，<br>或者是下个月的最后一天，这时候我们可以使用 <code>with()</code> 方法的另一个重载方法，它接收一个TemporalAdjuster参数，<br>可以使我们更加灵活的调整日期：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate date7 = date.with(nextOrSame(DayOfWeek.SUNDAY));      <span class=\"comment\">// 返回下一个距离当前时间最近的星期日</span></div><div class=\"line\">LocalDate date9 = date.with(lastInMonth(DayOfWeek.SATURDAY));   <span class=\"comment\">// 返回本月最后一个星期六</span></div></pre></td></tr></table></figure>\n<p>要使上面的代码正确编译，你需要使用静态导入 <code>TemporalAdjusters</code> 对象：</p>\n<p><code>import static java.time.temporal.TemporalAdjusters.*;</code></p>\n<p><code>TemporalAdjusters</code> 类中包含了很多静态方法可以直接使用，下面的表格列出了一些方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>dayOfWeekInMonth</code></td>\n<td style=\"text-align:left\">返回同一个月中每周的第几天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstDayOfMonth</code></td>\n<td style=\"text-align:left\">返回当月的第一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstDayOfNextMonth</code></td>\n<td style=\"text-align:left\">返回下月的第一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstDayOfNextYear</code></td>\n<td style=\"text-align:left\">返回下一年的第一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstDayOfYear</code></td>\n<td style=\"text-align:left\">返回本年的第一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>firstInMonth</code></td>\n<td style=\"text-align:left\">返回同一个月中第一个星期几</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastDayOfMonth</code></td>\n<td style=\"text-align:left\">返回当月的最后一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastDayOfNextMonth</code></td>\n<td style=\"text-align:left\">返回下月的最后一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastDayOfNextYear</code></td>\n<td style=\"text-align:left\">返回下一年的最后一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastDayOfYear</code></td>\n<td style=\"text-align:left\">返回本年的最后一天</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastInMonth</code></td>\n<td style=\"text-align:left\">返回同一个月中最后一个星期几</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>next / previous</code></td>\n<td style=\"text-align:left\">返回后一个/前一个给定的星期几</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>nextOrSame / previousOrSame</code></td>\n<td style=\"text-align:left\">返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回</td>\n</tr>\n</tbody>\n</table>\n<p>如果上面表格中列出的方法不能满足你的需求，你还可以创建自定义的 <code>TemporalAdjuster</code> 接口的实现，<br><code>TemporalAdjuster</code> 也是一个函数式接口，所以我们可以使用Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FunctionalInterface</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TemporalAdjuster</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">Temporal <span class=\"title\">adjustInto</span><span class=\"params\">(Temporal temporal)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>比如给定一个日期，计算该日期的下一个工作日（不包括星期六和星期天）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate date = LocalDate.of(<span class=\"number\">2018</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>);</div><div class=\"line\">date.with(temporal -&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// 当前日期</span></div><div class=\"line\">    DayOfWeek dayOfWeek = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 正常情况下，每次增加一天</span></div><div class=\"line\">    <span class=\"keyword\">int</span> dayToAdd = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果是星期五，增加三天</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (dayOfWeek == DayOfWeek.FRIDAY) &#123;</div><div class=\"line\">        dayToAdd = <span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果是星期六，增加两天</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (dayOfWeek == DayOfWeek.SATURDAY) &#123;</div><div class=\"line\">        dayToAdd = <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> temporal.plus(dayToAdd, ChronoUnit.DAYS);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"其他历法\"><a href=\"#其他历法\" class=\"headerlink\" title=\"其他历法\"></a>其他历法</h4><p>Java中使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。</p>\n<p>此外Java 8还提供了4套其他历法（很奇怪为什么没有汉族人使用的农历），每套历法都包含一个日期类，分别是：</p>\n<ul>\n<li><code>ThaiBuddhistDate</code>：泰国佛教历</li>\n<li><code>MinguoDate</code>：中华民国历</li>\n<li><code>JapaneseDate</code>：日本历</li>\n<li><code>HijrahDate</code>：伊斯兰历</li>\n</ul>\n<p>每个日期类都继承 <code>ChronoLocalDate</code> 类，所以可以在不知道具体历法的情况下也可以操作。不过这些历法一般不常用，除非是有某些特殊需求情况下才会使用。</p>\n<p>这些不同的历法也可以用于向公历转换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDate date = LocalDate.now();</div><div class=\"line\">JapaneseDate jpDate = JapaneseDate.from(date);</div></pre></td></tr></table></figure>\n<p>由于它们都继承ChronoLocalDate类，所以在不知道具体历法情况下，可以通过ChronoLocalDate类操作日期：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Chronology jpChronology = Chronology.ofLocale(Locale.JAPANESE);</div><div class=\"line\">ChronoLocalDate jpChronoLocalDate = jpChronology.dateNow();</div></pre></td></tr></table></figure>\n<p>我们在开发过程中应该尽量避免使用 <code>ChronoLocalDate</code>，尽量用与历法无关的方式操作时间，因为不同的历法计算日期的方式不一样，比如开发者会在程序中做一些假设，假设一年中有12个月，如果是中国农历中包含了闰月，一年有可能是13个月，但开发者认为是12个月，多出来的一个月属于明年的。</p>\n<p>再比如假设年份是累加的，过了一年就在原来的年份上加一，但日本天皇在换代之后需要重新纪年，所以过了一年年份可能会从1开始计算。</p>\n<p>在实际开发过程中建议使用 <code>LocalDate</code>，包括存储、操作、业务规则的解读；除非需要将程序的输入或者输出本地化，这时可以使用 <code>ChronoLocalDate</code> 类。</p>\n<h2 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h2><p>在Java 8中，Base64编码已经成为Java类库的标准。</p>\n<p>Java 8 内置了 Base64 编码的编码器和解码器，这样不需要使用第三方库就可以进行Base64编码。</p>\n<p>Base64工具类提供了一套静态方法获取下面三种BASE64编解码器：</p>\n<ul>\n<li><strong>基本：</strong>输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。</li>\n<li><strong>URL：</strong>输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。</li>\n<li><strong>MIME：</strong>输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\\r’并跟随’\\n’作为分割。编码输出最后没有行分割。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> String text = <span class=\"string\">\"测试Base64编码\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> String encoded = Base64</div><div class=\"line\">        .getEncoder()</div><div class=\"line\">        .encodeToString(text.getBytes(StandardCharsets.UTF_8));</div><div class=\"line\">System.out.println(encoded);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">final</span> String decoded = <span class=\"keyword\">new</span> String(</div><div class=\"line\">        Base64.getDecoder().decode(encoded),</div><div class=\"line\">        StandardCharsets.UTF_8);</div><div class=\"line\">System.out.println(decoded);</div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.runoob.com/java/java8-new-features.html\" target=\"_blank\" rel=\"external\">Java 8 新特性</a></li>\n<li><a href=\"http://www.cnblogs.com/zemliu/p/3290585.html\" target=\"_blank\" rel=\"external\">SimpleDateFormat的线程安全问题与解决方案</a></li>\n<li><a href=\"http://blog.csdn.net/yiifaa/article/details/73499053\" target=\"_blank\" rel=\"external\">为什么SimpleDateFormat不是线程安全的？</a></li>\n<li><a href=\"http://blog.csdn.net/liuwei0376/article/details/13620879\" target=\"_blank\" rel=\"external\">Java获取N天前，N天后的日期（如3天）</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html\" target=\"_blank\" rel=\"external\">What’s New in JDK 8</a></li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>示例代码地址：<a href=\"https://github.com/xkcoding/java8_learning\" target=\"_blank\" rel=\"external\">https://github.com/xkcoding/java8_learning</a></p>\n<p>如果可以的话，麻烦给个 Star 吧 (♥◠‿◠)ﾉﾞ</p>"},{"title":"Android 开源项目分类汇总","comments":1,"fancybox":false,"toc":true,"date":"2016-03-25T14:15:00.000Z","description":null,"top":null,"_content":"## 目前包括：\n>1. Android 开源项目第一篇——个性化控件(View)篇\n>*包括：ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style、其他*  \n>1. Android 开源项目第二篇——工具库篇\n>*包括：依赖注入、图片缓存、网络请求、数据库 ORM 工具包、Android 公共库、高版本向低版本兼容库、多媒体、事件总线、传感器、安全、插件化、文件、其他*  \n>1. Android 开源项目第三篇——优秀项目篇\n>*比较有意思的完整的 Android 项目*  \n>1. Android 开源项目第四篇——开发及测试工具篇\n>*包括：开发效率工具、开发自测相关、测试工具、开发及编译环境、其他*  \n>1. Android 开源项目第五篇——优秀个人和团体篇\n>*乐于分享并且有一些很不错的开源项目的个人和组织，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛*  \n<!--more-->\n\n### 提示\n以下链接网址若存在不能访问，请自行尝试翻墙，推荐使用GreenVPN\n[![好用的GreenVPN](/resources/greenvpn.gif)](http://gjsq.me/15038648)\n\n## 第一部分 个性化控件(View)\n主要介绍那些不错个性化的 View，包括 ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style 等等。  \n\n### 一、ListView\n1. android-pulltorefresh  \n一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment 上下左右拉动刷新，比下面 johannilsson 那个只支持 ListView 的强大的多。并且它实现的下拉刷新 ListView 在 item 不足一屏情况下也不会显示刷新提示，体验更好。  \n项目地址：https://github.com/chrisbanes/Android-PullToRefresh  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true  \nAPP 示例：新浪微博各个页面 \n\n1. android-pulltorefresh-listview  \n下拉刷新 ListView，这个被很多人使用的项目实际有不少 bug，推荐使用 [android-Ultra-Pull-to-Refresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh)  \n项目地址：https://github.com/johannilsson/android-pulltorefresh  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true  \n\n3. android-Ultra-Pull-to-Refresh  \n下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 `API LEVEL >= 8`  \n项目地址：https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh  \n原理剖析文档：[android-Ultra-Pull-to-Refresh](http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh 源码解析)  \nDemo 地址：https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true  \n\n1. Android-PullToRefreshRecyclerView  \n支持下拉刷新的RecyclerView，同时支持滑动到底部自动加载数据、给RecyclerView添加Header。并且不更改原有RecyclerView的逻辑。  \n项目地址：https://github.com/HomHomLin/Android-PullToRefreshRecyclerView。    \nDemo地址：https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk  \n\n1. DragSortListView  \n拖动排序的 ListView，同时支持 ListView 滑动 item 删除，各个 Item 高度不一、单选、复选、CursorAdapter 做为适配器、拖动背景变化等  \n项目地址：https://github.com/bauerca/drag-sort-listview  \nDemo 地址：https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv  \nAPP 示例：Wordpress Android  \n\n1. SwipeListView  \n支持定义 ListView 左右滑动事件，支持左右滑动位移，支持定义动画时间  \n项目地址：https://github.com/47deg/android-swipelistview  \nDemo 地址：https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview  \nAPP 示例：微信 \n\n1. SlideAndDragListView  \n支持ListView的Item的拖动排序、左右滑动事件，可自定义左右滑动显示文字、图标、位移，同时支持onItemClick、onItemLongClick等监听器，提供丰富的回调接口。  \n项目地址：https://github.com/yydcdut/SlideAndDragListView  \nDemo 地址：https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true  \nAPP 示例：Android 手机QQ 5.0  \n\n1. Android-SwipeToDismiss  \n滑动 Item 消失 ListView，支持 3.0 以下版本见：https://github.com/JakeWharton/SwipeToDismissNOA  \n项目地址：https://github.com/romannurik/Android-SwipeToDismiss  \nDemo 地址：https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code  \n\n1. RecyclerViewSwipeDismiss  \n轻量级支持 support-v7 中的 RecyclerView 的滑动删除(Swipe to dismiss)行为，不需要修改源代码，只要简单的绑定`onTouchListener`  \n项目地址：https://github.com/CodeFalling/RecyclerViewSwipeDismiss  \n\n1. PinnedHeaderExpandableListView  \n首先它是一个 ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩  \n项目地址：https://github.com/singwhatiwanna/PinnedHeaderExpandableListView  \nAPP 示例：百度手机卫士垃圾清理界面  \n\n1. StickyListHeaders  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView，支持快速滑动，支持 Android2.3 及以上  \n项目地址：https://github.com/emilsjolander/StickyListHeaders  \nAPP 示例：Android 4.0 联系人  \n\n1. pinned-section-listview  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView  \n项目地址：https://github.com/beworker/pinned-section-listview  \n\n1. PinnedHeaderListView  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView  \n项目地址：https://github.com/JimiSmith/PinnedHeaderListView  \n\n1. QuickReturn  \nListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现  \n项目地址：https://github.com/lawloretienne/QuickReturn  \nDemo 地址：https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn  \n\n1. QuickReturnHeader  \nListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现  \n项目地址：https://github.com/ManuelPeinado/QuickReturnHeader  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true  \nAPP 示例：google plus  \n\n1. IndexableListView  \nListView 右侧会显示 item 首字母快捷索引，点击可快速滑动到某个 item  \n项目地址：https://github.com/woozzu/IndexableListView  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true  \nAPP 示例：微信通讯录、小米联系人  \n\n1. CustomFastScrollView  \nListView 快速滑动，同时屏幕中间 PopupWindows 显示滑动到的 item 内容或首字母  \n项目地址：https://github.com/nolanlawson/CustomFastScrollViewDemo  \n\n1. Android-ScrollBarPanel  \nListView 滑动时固定的 Panel 指示显示在 scrollbar 旁边  \n项目地址：https://github.com/rno/Android-ScrollBarPanel  \n\n1. SlideExpandableListView  \n用户点击 listView item 滑出固定区域，其他 item 的区域收缩  \n项目地址：https://github.com/tjerkw/Android-SlideExpandableListView  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true  \n\n1. JazzyListView  \nListView 及 GridView item 以特殊动画效果进入屏幕，效果包括 grow、cards、curl、wave、flip、fly 等等  \n项目地址：https://github.com/twotoasters/JazzyListView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample  \n在线演示：http://lab.hakim.se/scroll-effects/  \n\n1. ListViewAnimations  \n带 Item 显示动画的 ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等  \n项目地址：https://github.com/nhaarman/ListViewAnimations  \nDemo 地址：https://play.google.com/store/apps/details?id=com.haarman.listviewanimations  \nAPP 示例：Google plus、Google Now 卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的 ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  \n\n1. DevsmartLib-Android  \n横向 ListView  \n项目地址：https://github.com/dinocore1/DevsmartLib-Android  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true  \n\n1. TwoWayView  \n横向 ListView 的效果，继承自 AdapterView  \n项目地址：https://github.com/lucasr/twoway-view  \n\n1. HorizontalVariableListView  \n支持 Item 宽度不一致的 ListView  \n项目地址：https://github.com/sephiroth74/HorizontalVariableListView  \n\n1. LinearListView  \n用 LinearLayout 实现的 ListView，可解决多个 ListView 并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍  \n项目地址：https://github.com/frankiesardo/LinearListView  \n\n1. MultiChoiceAdapter  \n支持多选的 ListView Adapter  \n项目地址：https://github.com/ManuelPeinado/MultiChoiceAdapter  \nDemo 地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo  \n\n1. EnhancedListView  \n支持横向滑动删除列表项以及撤销删除的 ListView，该项目的前身是[SwipeToDismissUndoList](https://github.com/timroes/SwipeToDismissUndoList)  \n项目地址：https://github.com/timroes/EnhancedListView  \nDemo 地址：https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&rdid=de.timroes.android.listviewdemo  \n\n1. ListBuddies  \n自动滚动的双列 ListView ，两个 ListView 滚动速度不一致，有视差效果  \n项目地址：https://github.com/jpardogo/ListBuddies  \nDemo 地址：https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies  \n\n1. SwipeMenuListView  \n针对 ListView item 的侧滑菜单  \n项目地址：https://github.com/baoyongzhang/SwipeMenuListView  \nAPP 示例：手机 QQV5.0  \n\n1. PagingListView  \n分页加载的 ListView。当滑动到 ListView 底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。  \n项目地址：https://github.com/nicolasjafelle/PagingListView  \n\n1. PullZoomView  \n支持下拉时 HeaderView 缩放的 ListView、ScrollView  \n项目地址：https://github.com/Frank-Zhu/PullZoomView  \n\n1. PullToZoomInListView  \n滑动 ListView 时使其 HeaderView 跟随滑动缩放  \n项目地址：https://github.com/matrixxun/PullToZoomInListView  \n\n1. CalendarListview  \n实现每个月一行日历效果的 ListView  \n项目地址：https://github.com/traex/CalendarListview  \n原理剖析文档：[CalendarListview](http://a.codekk.com/detail/Android/Rogary/CalendarListView%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90)  \n\n1. sticky-headers-recyclerview  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ListView，采用 support-v7 中的 RecyclerView 实现  \n项目地址：https://github.com/timehop/sticky-headers-recyclerview  \n\n1. PullSeparateListView  \n到达顶部或底部继续拉动时，实现 Item 间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有 Item 都会分离 (2)部分分离模式，以点击位置为分界点，部分 item 分离  \n项目地址：https://github.com/chiemy/PullSeparateListView  \n\n1. ExpandableLayout  \nHeader 和 Content Item 都可以展开的 ExpandableListview  \n项目地址：https://github.com/traex/ExpandableLayout  \n\n1. PagedHeadListView  \n支持 paginated header 以及 material page indicator 的 ListView.  \n项目地址：https://github.com/JorgeCastilloPrz/PagedHeadListView  \n\n1. CustomSwipeListView  \n支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。  \n项目地址：https://github.com/xyczero/Android-CustomSwipeListView  \nDemo 地址：[Download here](http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk)  \n\n1. Pull-to-Refresh.Rentals-Android  \n提供一个简单可以自定义的下拉刷新实现，[Yalantis](http://yalantis.com/) 出品。  \n项目地址：https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android  \n\n1. ScrollerCalendar  \n实现每行显示一年的 12 个月份的 RecyclerView 年历  \n项目地址：https://github.com/guanchao/ScrollerCalendar  \n\n1. ExtractWordView  \n一个可以提取单词的 ListView,支持\"放大镜\"效果。  \n项目地址：https://github.com/jcodeing/ExtractWordView  \nDemo 地址：[Download here](https://raw.githubusercontent.com/jcodeing/ExtractWordView/master/ExtractWordView-demo.apk)  \n\n1. FlyRefresh  \n支持 ListView, GridView, RecyclerView, ScrollView 的下拉刷新  \n项目地址：https://github.com/race604/FlyRefresh  \n\n1. MVCHelper  \n实现下拉刷新，滚动底部自动加载更多，分页加载，自动切换显示网络失败布局，暂无数据布局，支持任意 view，真正的 MVC 架构  \n支持切换主流下拉刷新框架 Android-PullToRefresh-Library,android-Ultra-Pull-To-Refresh-library，SwipeRefreshLayout  \n项目地址：https://github.com/LuckyJayce/MVCHelper  \nDemo 地址：https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true  \n\n1. RecyclerViewSwipeDismiss  \n支持滑动 Item 操作、点击展开、拖动排序、展开后拖动排序等特性的 RecyclerView  \n项目地址：https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview  \n视频：http://www.youtube.com/watch?feature=player_embedded&v=S7cSwMArjUQ  \n\n1. WaterDropListView  \n模仿 iOS 下拉刷新“水滴”效果，支持下拉刷新和上拉加载  \n项目地址：https://github.com/THEONE10211024/WaterDropListView  \n\n1. PopupListView  \n實現ListItem 點擊後置頂並可顯示客製化添加的item的內部View 的ListView  \n项目地址：https://github.com/s8871404/PopupListView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample  \n\n1. CircleRefreshLayout  \n一个包含有趣的动画的自定义下拉刷新布局  \n项目地址：https://github.com/tuesda/CircleRefreshLayout  \n  \n1. EasyRecyclerView  \n一款简单易用的EasyRecyclerView\n1.提供EasyRecyclerView，不需要写太多RecyclerView的配置代码  \n2.提供好一个可以适配单布局和多布局的RecyclerViewAdapter  \n3.提供了分割线的实现类，只需要传入一个DrawableId  \n项目地址：https://github.com/CaMnter/EasyRecyclerView  \n\n1. CanRefresh\n可适配所有视图的下拉刷新上拉加载，并支持各种风格  \n项目地址：https://github.com/canyinghao/CanRefresh  \n\n### 二、ActionBar\n1. ActionBarSherlock  \n为 Android 所有版本提供统一的 ActionBar，解决 4.0 以下 ActionBar 的适配问题  \n项目地址：https://github.com/JakeWharton/ActionBarSherlock  \nDemo 地址：https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos  \n标签：兼容库, ActionBar  \n\n1. ActionBar-PullToRefresh  \n下拉刷新，ActionBar 出现加载中提示  \n项目地址：https://github.com/chrisbanes/ActionBar-PullToRefresh  \nDemo 地址：https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock  \nAPP 示例：Gmail，Google Plus，知乎等  \n\n1. FadingActionBar  \nListView 向下滚动逐渐显现的 ActionBar  \n项目地址：https://github.com/ManuelPeinado/FadingActionBar  \nDemo 地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo  \nAPP 示例：google music，知乎  \n\n1. NotBoringActionBar  \ngoogle music 下拉收缩的 ActionBar  \n项目地址：https://github.com/flavienlaurent/NotBoringActionBar  \nDemo 地址：http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/  \nAPP 示例：Google 音乐  \n\n1. RefreshActionItem  \n带进度显示和刷新按钮的 ActionBar  \n项目地址：https://github.com/ManuelPeinado/RefreshActionItem  \nDemo 地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo  \nAPP 示例：The New York Times，DevAppsDirect  \n\n1. GlassActionBar  \n类似玻璃的有一定透明度的 ActionBar  \n项目地址：https://github.com/ManuelPeinado/GlassActionBar  \nDemo 地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo  \nAPP 示例：google music  \n\n### 三、Menu\n1. MenuDrawer  \n滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前 View 处于上下层，支持 Windows 边缘、ListView 边缘、ViewPager 变化划出菜单等。  \n项目地址：https://github.com/SimonVT/android-menudrawer  \nDemo 地址：http://simonvt.github.io/android-menudrawer/  \nAPP 示例：Gmail、Google Music 等大部分 google app  \n\n1. SlidingMenu  \n滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单 zoom、scale、slide up 三种动画样式出现。与 MenuDrawer 相比而言，SlidingMenu 支持菜单动画样式出现，MenuDrawer 支持菜单 view 处于内容的上下层  \n项目地址：https://github.com/jfeinstein10/SlidingMenu  \n原理剖析文档：[SlidingMenu](http://a.codekk.com/detail/Android/huxian99/SlidingMenu 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=com.slidingmenu.example  \nAPP 示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  \n\n1. ArcMenu  \n支持类似 Path 的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单  \n项目地址：https://github.com/daCapricorn/ArcMenu  \nhttps://dl.dropboxusercontent.com/u/11369687/preview1.png  \nhttps://dl.dropboxusercontent.com/u/11369687/raymenu.png  \nAPP 示例：Path  \n\n1. android-satellite-menu  \n类似 Path 的左下角动画旋转菜单  \n项目地址：https://github.com/siyamed/android-satellite-menu  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true  \nAPP 示例：Path  \n\n1. radial-menu-widget  \n圆形菜单，支持二级菜单  \n项目地址：https://code.google.com/p/radial-menu-widget/  \n\n1. Android Wheel Menu  \n圆形旋转选取菜单  \n项目地址：https://github.com/anupcowkur/Android-Wheel-Menu  \n\n1. FoldingNavigationDrawer  \n滑动并以折叠方式打开菜单  \n项目地址：https://github.com/tibi1712/FoldingNavigationDrawer-Android  \nDemo 地址：https://play.google.com/store/apps/details?id=com.ptr.folding.sample  \n\n1. AndroidResideMenu  \n仿 Dribbble 的边栏菜单  \n项目地址：https://github.com/SpecialCyCi/AndroidResideMenu  \n\n1. CircularFloatingActionMenu  \n一个可定制的圆形的浮动菜单控件，类似于 Path 的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。  \n项目地址：https://github.com/oguzbilgener/CircularFloatingActionMenu  \n原理剖析文档：[CircularFloatingActionMenu](http://a.codekk.com/detail/Android/cpacm/CircularFloatingActionMenu 源码解析)  \nDemo 地址：https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples  \n\n1. NavigationDrawerSI  \nNavigation Drawer 的一个简单实现，滑动并以折叠方式打开菜单  \n项目地址：https://github.com/mmBs/NavigationDrawerSI  \nDemo 地址：https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi  \nAPP 示例：https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi  \n\n1. DragLayout  \n使用 support.v4 包下的 ViewDragHelper 实现 QQ5.0 侧滑  \n项目地址：https://github.com/BlueMor/DragLayout  \n\n1. LDrawer  \nMaterial Design 形式的展开折叠 Icon  \n项目地址：https://github.com/ikimuhendis/LDrawer  \n\n1. Floating Action Button  \n悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置  \n项目地址：https://github.com/shamanland/floating-action-button  \n\n1. Side-Menu.Android  \n分类侧滑菜单，[Yalantis](http://yalantis.com/) 出品。  \n项目地址：https://github.com/Yalantis/Side-Menu.Android  \n原理剖析文档：[Side-Menu.Android](http://a.codekk.com/detail/Android/cpacm/Side Menu.Android 源码解析)  \n\n1. Context-Menu.Android  \n可以方便快速集成漂亮带有动画效果的上下文菜单，[Yalantis](http://yalantis.com/)出品。  \n项目地址：https://github.com/Yalantis/Context-Menu.Android  \n\n1. Droppy  \n支持多种样式的下拉菜单  \n项目地址：https://github.com/shehabic/Droppy  \n\n1. MaterialDrawer  \nMaterial Design 风格的导航抽屉，提供简便且强大的定制功能  \n项目地址：https://github.com/mikepenz/MaterialDrawer  \nDemo 地址：https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app  \n\n1. SlideBottomPanel  \n底部划出菜单，滑动时背景图透明度渐变，支持嵌套 LiewView 或 ScrollView  \n项目地址：[https://github.com/kingideayou/SlideBottomPanel](https://github.com/kingideayou/SlideBottomPanel)  \nDemo 地址：[SlideBottomPanelDemo 下载](https://github.com/kingideayou/SlideBottomPanel/raw/master/apk/SlideBottomPanelDemo.apk)  \n\n1. FlowingDrawer  \n带手势流动效果侧滑菜单\n项目地址：[https://github.com/mxn21/FlowingDrawer](https://github.com/mxn21/FlowingDrawer)\n\n### 四、ViewPager 、Gallery\n1. AdvancedPagerSlidingTabStrip   \n一个完美兼容ViewPager的导航栏组件；可以自定义TabView；能动态加载Tab上的Icon图片； 能显示Tab的消息数量和提示小圆点。  \n项目地址：https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip\n\n1. ConvenientBanner  \n通用的广告栏控件，让你轻松实现广告头效果。支持无限循环，可以设置自动翻页和时间(而且非常智能，手指触碰则暂停翻页，离开自动开始翻页。你也可以设置在界面onPause的时候不进行自动翻页，onResume之后继续自动翻页)，并且提供多种翻页特效。 对比其他广告栏控件，大多都需要对源码进行改动才能加载网络图片，或者帮你集成不是你所需要的图片缓存库。而这个库能让有代码洁癖的你欢喜，不需要对库源码进行修改你就可以使用任何你喜欢的网络图片库进行配合。\n项目地址：https://github.com/saiwu-bigkoo/Android-ConvenientBanner  \n\n1. Android-ViewPagerIndicator  \n配合 ViewPager 使用的 Indicator，支持各种位置和样式  \n项目地址：https://github.com/JakeWharton/Android-ViewPagerIndicator  \nDemo 地址：https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample  \nAPP 示例：太多了。。  \n\n1. JazzyViewPager  \n支持 Fragment 切换动画的 ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用 ViewPager 实现而已  \n项目地址：https://github.com/jfeinstein10/JazzyViewPager  \nDemo 地址：https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true  \n\n1. JellyViewPager  \n特殊切换动画的 ViewPager  \n项目地址：https://github.com/chiemy/JellyViewPager  \n\n1. Android-DirectionalViewPager  \n支持横向和纵向(垂直)的 ViewPager  \n项目地址：https://github.com/JakeWharton/Android-DirectionalViewPager  \nDemo 地址：https://market.android.com/details?id=com.directionalviewpager.sample  \n\n1. FancyCoverFlow  \n支持 Item 切换动画效果的类似 Gallery View  \n项目地址：https://github.com/davidschreiber/FancyCoverFlow  \nDemo 地址：https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples  \n\n1. AndroidTouchGallery  \n支持双击或双指缩放的 Gallery(用 ViewPager 实现)，相比下面的 PhotoView，在被放大后依然能滑到下一个 item，并且支持直接从 url 和文件中获取图片，  \n项目地址：https://github.com/Dreddik/AndroidTouchGallery  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true  \nAPP 示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  \n\n1. Android Auto Scroll ViewPager  \nAndroid 自动滚动 轮播循环的 ViewPager  \n项目地址：https://github.com/Trinea/android-auto-scroll-view-pager  \nDemo 地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/auto-scroll-view-pager/  \n\n1. Android PagerSlidingTabStrip  \n配合 ViewPager 使用的 Indicator，支持 ViewPager Scroll 时 Indicator 联动  \n项目地址：https://github.com/astuetz/PagerSlidingTabStrip  \n原理剖析文档：[Android PagerSlidingTabStrip](http://a.codekk.com/detail/Android/ayyb1988/PagerSlidingTabStrip 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample  \n\n1. ViewPager3D  \nViewPager3D 效果  \n项目地址：https://github.com/inovex/ViewPager3D  \n\n1. AnimaTabsview  \n仿网易云音乐标签切换的动画,带透明小三角  \n项目地址：https://github.com/wuyexiong/transparent-over-animtabsview  \n在线演示：http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html  \n\n1. LoopingViewPager  \n无限循环的 ViewPager  \n项目地址：https://github.com/imbryk/LoopingViewPager  \n\n1. android_page_curl  \n翻书卷曲效果  \n项目地址：https://github.com/harism/android_page_curl  \n在线演示：https://www.youtube.com/watch?v=iwu7P5PCpsw  \nAPP 示例：iReader  \n\n1. ViewPagerIndicator  \n简化并实现 android 的 TabHost 效果，顶部滑动 tab，引导页，支持自定义 tab 样式,自定义滑动块样式和位置,自定义切换 tab 的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动  \n项目地址：https://github.com/LuckyJayce/ViewPagerIndicator  \n\n1. ScreenSlideIndicator  \n轻量级的圆形 Indicadtor，位置可以自由调整，不会对 ViewPager 产生任何影响。  \n项目地址：[ScreenSlidePager](https://github.com/LyndonChin/Android-ScreenSlidePager)  \n\n1. SmartTabLayout  \n自定义的 Tab title strip，基于 Google Samples 中的 android-SlidingTabBasic 项目，滑动时 Indicator 可平滑过渡。  \n项目地址：https://github.com/ogaclejapan/SmartTabLayout  \nDemo 地址：https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo  \n\n1. AndroidImageSlider  \nAndroid 图片滑动  \n项目地址：https://github.com/daimajia/AndroidImageSlider  \nApp示例：https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk  \n\n1. RecyclerViewPager  \n完全继承自 RecyclerView，可以自定义触发翻页的距离，可自定义翻页速度，支持垂直方向的 ViewPager，支持 Fragment。  \n项目地址：[RecyclerViewPager](https://github.com/lsjwzh/RecyclerViewPager)  \n\n1. CircleIndicator  \n轻量级ViewPager指示器,支持三种不同的模式    \n项目地址：[CircleIndicator]( https://github.com/THEONE10211024/CircleIndicator)  \n\n1. EasySlidingTabs  \n一款简单、易用的滑动标签页  \n项目地址： https://github.com/CaMnter/EasySlidingTabs  \n\n### 五、GridView\n1. StaggeredGridView  \n允许非对齐行的 GridView，类似 Pinterest 的瀑布流，并且跟 ListView 一样自带 View 缓存，继承自 ViewGroup  \n项目地址：https://github.com/maurycyw/StaggeredGridView  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true  \nAPP 示例：Pinterest 等  \n\n1. AndroidStaggeredGrid  \n允许非对齐行的 GridView，类似 Pinterest 的瀑布流，继承自 AbsListView  \n项目地址：https://github.com/etsy/AndroidStaggeredGrid  \nAPP 示例：Pinterest 等  \n\n1. PinterestLikeAdapterView  \n允许非对齐行的 GridView，类似 Pinterest 的瀑布流，允许下拉刷新  \n项目地址：https://github.com/GDG-Korea/PinterestLikeAdapterView  \nAPP 示例：Pinterest 等  \n\n1. DraggableGridView  \nItem 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的单屏效果，可屏幕自动上下滚动进行 Item 移动交换，多屏效果见下面 PagedDragDropGrid  \n项目地址：https://github.com/thquinn/DraggableGridView  \nDemo 地址：https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true  \n也可以自定义item的宽高和每行的个数，并且修改交换逻辑，当移动到另一个item时就进行交换，删除滚动逻辑。\n项目地址：[DraggableGridView](https://github.com/andyken/DraggableGridView)  \n\n1. StickyGridHeaders  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 GridView  \n项目地址：https://github.com/TonicArtos/StickyGridHeaders  \n\n1. PagedDragDropGrid  \nItem 可拖动交换位置、拖动删除的自定义控件，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行 Item 移动交换，可拖动进行删除，单屏效果见上面 DraggableGridView  \n项目地址：https://github.com/mrKlar/PagedDragDropGrid  \n在线演示：http://youtu.be/FYTSRfthSuQ  \n\n1. Android-DraggableGridViewPager  \nItem 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可屏幕自动左右滚动进行 Item 移动交换，单屏效果见上面 DraggableGridView  \n项目地址：https://github.com/zzhouj/Android-DraggableGridViewPager  \nDemo 地址：https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true  \n\n1. TwoWayGridView  \n可横向滚动的 GridView  \n项目地址：https://github.com/jess-anders/two-way-gridview  \n\n1. PagingGridView  \n分页加载的 GridView。当滑动到 GridView 底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。  \n项目地址：https://github.com/nicolasjafelle/PagingGridView  \n\n1. AsymmetricGridView  \n一个支持跨行和跨列可变 Item 大小的 GridView  \n项目地址：https://github.com/felipecsl/AsymmetricGridView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app  \n\n1. GridView with Header and Footer  \n和`ListView`一样带头部和底部的`GridView`，用法和`ListView`一样  \n项目地址：https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter  \n\n### 六、ImageView\n1. PhotoView  \n支持双击或双指缩放的 ImageView，在 ViewPager 等 Scrolling view 中正常使用，相比上面的 AndroidTouchGallery，不仅支持 ViewPager，同时支持单个 ImageView  \n项目地址：https://github.com/chrisbanes/PhotoView  \n原理剖析文档：[PhotoView](http://a.codekk.com/detail/Android/dkmeteor/PhotoView 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample  \nAPP 示例：photup  \n\n1. Fresco-ImageView  \nFresco-ImageView是一种Android平台的图像控件，底层是对Fresco的封装，可以异步加载网络图片、项目资源和本地图片，并且支持双指缩放、图片的基本处理以及Fresco的所有特性。  \n项目地址：https://github.com/HomHomLin/FrescoImageView。  \n\n1. android-gif-drawable  \n支持 gif 显示的 view，用 jni 实现的，编译生成 so 库后直接 xml 定义 view 即可，而且本身不依赖于其他开源项目所以相对下面的 ImageViewEx 简单的多  \n项目地址：https://github.com/koral--/android-gif-drawable  \n\n1. ImageViewEx  \n支持 Gif 显示的 ImageView，依赖很多，编译过程很繁琐  \n项目地址：https://github.com/frapontillo/ImageViewEx  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true  \n\n1. RoundedImageView  \n带圆角的 ImageView  \n项目地址：https://github.com/vinc3m1/RoundedImageView  \n\n1. SelectableRoundedImageView  \nImageView 允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边  \n项目地址：https://github.com/pungrue26/SelectableRoundedImageView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.joooonho  \n\n1. ColorArt  \n根据图片的均色设置背景色显示文字和图片，类似 itune11 中效果  \n项目地址：https://github.com/MichaelEvans/ColorArt  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true  \n\n1. CircleImageView  \n圆形的 ImageView  \n项目地址：https://github.com/hdodenhof/CircleImageView  \n\n1. ImageViewZoom  \n支持放大和平移的 ImageView  \n项目地址：https://github.com/sephiroth74/ImageViewZoom  \nAPP 示例：https://play.google.com/store/apps/details?id=com.aviary.android.feather  \n\n1. KenBurnsView  \n实现 Ken Burns effect 效果，达到身临其境效果的 ImageView  \n项目地址：https://github.com/flavioarfaria/KenBurnsView  \n\n1. CustomShapeImageView  \n各种形状的 ImageView, 相比上面的圆形 ImageView，多了更多形状  \n项目地址：https://github.com/MostafaGazar/CustomShapeImageView  \n\n1. Shape Image View  \n可以自定义各种形状的 ImageView, 并且支持边框  \n项目地址：https://github.com/siyamed/android-shape-imageview  \n\n1. TextDrawable  \n一个用于生成带有文本或者字母的图片的轻量级库。扩展自 Drawable，因此可用于现有/自定义/网络等 ImageView 类，并且包含一个流接口用于创建 drawables 以及一个定制的 ColorGenerator  \n项目地址：https://github.com/amulyakhare/TextDrawable  \n\n1. android-smart-image-view  \n可从 URL 或 contact address book 加载图片的 ImageView，支持缓存  \n项目地址：https://github.com/loopj/android-smart-image-view  \n\n1. PhotoView  \n支持双指/双击缩放的ImageView,支持从一个PhotoView缩放到另外一个PhotoView(点击图片放大预览),相对于其他PhototView有更加平滑的缩放,平移的动画,并且支持所有的ScaleType,可以作为普通的ImageView使用  \n项目地址：https://github.com/bm-x/PhotoView  \n\n### 七、ProgressBar\n1. SmoothProgressBar  \n水平进度条  \n项目地址：https://github.com/castorflex/SmoothProgressBar  \nDemo 地址：https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample  \n\n1. MaterialProgessBar  \nMaterial Design 的进度条，支持 Android 4.0  \n项目地址：https://github.com/DreaminginCodeZH/MaterialProgressBar  \nDemo 地址：https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk  \n\n1. ProgressWheel  \n支持进度显示的圆形 ProgressBar  \n项目地址：https://github.com/Todd-Davies/ProgressWheel  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true  \n\n1. android-square-progressbar  \n在图片周围显示进度  \n项目地址：https://github.com/mrwonderman/android-square-progressbar  \nDemo 地址：https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example  \nAPP 示例：square  \n\n1. HoloCircularProgressBar  \nAndroid4.1 时钟 App 样式  \n项目地址：https://github.com/passsy/android-HoloCircularProgressBar  \nAPP 示例：Android4.1 时钟 App  \n\n1. ProgressButton  \n通过图钉的不同状态显示进度  \n项目地址：https://github.com/f2prateek/progressbutton  \n文档介绍：http://f2prateek.com/progressbutton/  \n\n1. GoogleProgressBar  \n类似 google 多个圆形卡片翻转的 progressBar  \n项目地址：https://github.com/jpardogo/GoogleProgressBar  \n\n1. TH-ProgressButton  \n带圆形进度显示的按钮  \n项目地址：https://github.com/torryharris/TH-ProgressButton  \n\n1. NumberProgressBar  \n带数字进度的进度条  \n项目地址：https://github.com/daimajia/NumberProgressBar  \n\n1. CircularProgressDrawable  \n带圆形进度显示的进度条  \n项目地址：https://github.com/Sefford/CircularProgressDrawable  \n\n1. Android-RoundCornerProgressBar  \nAndroid 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。  \n项目地址：https://github.com/akexorcist/Android-RoundCornerProgressBar  \n\n1. circular-progress-button  \n带进度显示的 Button  \n项目地址：https://github.com/dmytrodanylyk/circular-progress-button  \n\n1. WaveView  \n一个波纹效果的 View，可用来做 ProgressBar  \n项目地址：https://github.com/john990/WaveView  \nDemo 地址：https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk  \n\n1. MaterialLoadingProgressBar  \n抽取自 SwipeRefreshLayout 的 Material Design 进度指示器  \n项目地址：https://github.com/lsjwzh/MaterialLoadingProgressBar  \n\n1. MetaballLoading  \nA 2d metaball loading\n项目地址：https://github.com/dodola/MetaballLoading\n\n1. SectorProgressView  \n一个圆形或环形的进度显示控件，用圆中扇形的角度大小来表示进度信息\n项目地址：https://github.com/timqi/SectorProgressView\nDemo：[apk download](https://github.com/timqi/SectorProgressView/raw/master/art/example.apk) \n\n1. CircularFillableLoaders  \n一个可以用于闪屏或者其他地方加载的控件\n项目地址：https://github.com/lopspower/CircularFillableLoaders\nDemo地址：(https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample) \n\n1. PinWheel  \n一个旋转的大风车Dialog \n项目地址：https://github.com/codingWang/PinWheel\n\n1. ColorArcProgressBar\n一个可定制的圆形进度条，通过xml参数配置可实现QQ健康中步数的弧形进度显示、仪盘表显示速度、最常见的下载进度条等功能。\n项目地址：https://github.com/Shinelw/ColorArcProgressBar\n\n### 八、TextView\n包括 TextView 及所有继承自 TextView 控件，如 EditText、Button、RadioButton  \n\n1. android-flowtextview  \n文字自动环绕其他 View 的 Layout  \n项目地址：https://github.com/deano2390/FlowTextView  \n\n1. Android Form EditText  \n验证输入合法性的编辑框，支持输入、英文、ip、url 等多种正则验证  \n项目地址：https://github.com/vekexasia/android-edittext-validator  \nDemo 地址：https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample  \n\n1. Emojicon  \n支持 emojis 的 TextView 和 EditText  \n项目地址：https://github.com/rockerhieu/emojicon  \n文档介绍：http://rockerhieu.com/emojicon/  \n\n1. android-circlebutton  \nAndroid 圆形按钮，实际实现是继承自 ImageView  \n项目地址：https://github.com/markushi/android-circlebutton  \nDemo 地址：https://github.com/markushi/android-circlebutton/blob/master/example/example.apk  \n\n1. Segmented Radio Buttons for Android  \niOS’s segmented controls 的实现  \n项目地址：https://github.com/vinc3m1/android-segmentedradiobutton  \nDemo 地址：https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true  \n\n1. Chips EditText Library  \n支持国家名字联想从而选择显示该国国旗的 EditText，实际就是通过 SpannableStringBuilder 实现  \n项目地址：https://github.com/kpbird/chips-edittext-library  \nDemo 地址：https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin  \n\n1. AutoFitTextView  \n可固定边界内容字体大小自适应的 TextView  \n项目地址：https://github.com/grantland/android-autofittextview  \n\n1. Shimmer for Android  \n文字发淡光的 TextView  \n项目地址：https://github.com/RomainPiel/Shimmer-android  \n\n1. Titanic  \n可以显示水位上升下降(不知道该怎么描述 囧)的 TextView  \n项目地址：https://github.com/RomainPiel/Titanic  \n\n1. android-iconify  \n提供带 Icon 的 TextView,Menu,Button 等  \n项目地址：https://github.com/JoanZapata/android-iconify  \n\n1. Calligraphy  \n让我们在 android 开发中使用自定义字体变得更加简单  \n项目地址：https://github.com/chrisjenx/Calligraphy  \n\n1. CreditsRoll  \n类似星球大战字幕效果的 TextView  \n项目地址：https://github.com/frakbot/CreditsRoll  \n\n1. android-process-buton  \n带加载或提交进度的 Button  \n项目地址：https://github.com/dmytrodanylyk/android-process-buton  \n\n1. FButton  \n扁平化的 Button  \n项目地址：https://github.com/hoang8f/android-flat-button  \nDemo 地址：https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo  \n\n1. FloatingActionButton  \n一个类似 Android 版 Google+浮动功能按钮的控件，可以响应 ListView 的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。  \n项目地址：https://github.com/makovkastar/FloatingActionButton  \nDemo 地址：https://github.com/makovkastar/FloatingActionButton/tree/master/  \n\n1. Android Saripaar  \nAndroid 表单验证  \n项目地址：https://github.com/ragunathjawahar/android-saripaar/  \n\n1. JumpingBeans  \n文字像 Mexican beans 一样跳动  \n项目地址：https://github.com/frakbot/JumpingBeans  \nDemo 地址：http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo  \n\n1. FancyButtons  \n一个不用图片就可以帮助我们创建出漂亮按钮的库。  \n项目地址：https://github.com/medyo/fancybuttons  \nDemo 地址：https://github.com/medyo/fancybuttons/tree/master/samples  \n\n1. Android-RobotoTextView  \n一个实现了所有 Roboto 字体的 TextView，包括新出的 Roboto Slab 字体。  \n项目地址：https://github.com/johnkil/Android-RobotoTextView  \nDemo 地址：http://play.google.com/store/apps/details?id=com.devspark.robototextview  \nDemo 项目：https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample  \n\n1. Android-WizardPager  \n一个表单向导库  \n项目地址：https://github.com/romannurik/android-wizardpager  \nDemo 项目：https://github.com/str4d/android-wizardpager/tree/textfield  \n\n1. RippleView  \n一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮  \n项目地址：https://github.com/siriscac/RippleView  \nDemo 项目：https://github.com/siriscac/RippleView/tree/master/RippleViewExample  \n\n1. RippleEffect  \n一个实现 Material Design Ripple 效果的库，支持 Android API 9+以上版本。  \n项目地址：https://github.com/traex/RippleEffect  \nDemo 项目：https://github.com/traex/RippleEffect/tree/master/sample  \n\n1. RippleCompat\n使用易于移植的方式为UI控件实现波纹效应，可以适配控件原背景及Palette支持。api简单，可自定义效果，兼容至Android API 7+。\n项目地址：https://github.com/desmond1121/RippleCompat\nDemo 项目：https://github.com/desmond1121/RippleCompat/tree/master/app\n\n1. Android Floating Label Widgets  \n包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示  \n项目地址：https://github.com/marvinlabs/android-floatinglabel-widgets  \nDemo 地址：https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo  \n在线演示：http://www.youtube.com/watch?v=hpZD9gJcRg0&feature=youtu.be  \n\n1. MaterialEditText  \nEditText 的 Material Design 实现。包含 [Google Material Design Spec](http://www.google.com/design/spec/components/text-fields.html)中的 UI 效果和一些新增特性。  \n项目地址：https://github.com/rengwuxian/MaterialEditText  \n\n1. MaterialEditText  \n实现 [Material Design](http://www.google.com/design/spec/components/text-fields.html) 中 Ripple 效果线条背景的 EditText。直接替换原生 EditText 即可集成。  \n项目地址：https://github.com/DreamingInCodeZH/MaterialEditText    \n\n1. MultiActionTextView  \n可以分别给 TextView 中的某几个字设置点击事件的 TextView  \n项目地址：https://github.com/ajaysahani/MultiActionTextView  \n\n1. ToggleButton  \n状态切换的 Button，类似 iOS，用 View 实现  \n项目地址：https://github.com/zcweng/ToggleButton  \n\n1. SwitchButton  \n状态切换的 Button，类似 iOS，拥有良好的用户界面  \n项目地址：https://github.com/kyleduo/SwitchButton  \n\n1. SlideSwitch  \n状态切换的开关，可以设置为类似 IOS 的圆形，也可以设置为矩形，用 View 实现  \n项目地址：https://github.com/Leaking/SlideSwitch  \n\n1. ExpandableTextView  \n可展开和收缩内容的 TextView。  \n项目地址：https://github.com/Manabu-GT/ExpandableTextView  \n\n1. TagCloudView(支持 SingleLine 模式的标签云)  \n标签云效果，只需要一行代码即可设置为 SingleLine 模式，轻松实现知乎问题话题列表效果。SingleLine 模式时末尾文字及图片可自定义。\n项目地址：https://github.com/kingideayou/TagCloudView  \n示例APK地址：https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk  \nAPP示例：知乎  \n\n1. BubbleTextView \nAndroid Bubble View \n项目地址：https://github.com/dupengtao/BubbleTextView \n\n1. shadow-layout\nAndroid Shadow Layout\n解决了`CardView`：1.不能画圆的阴影。2.设置阴影的位置。3.设置阴影颜色。\n项目地址：https://github.com/dmytrodanylyk/shadow-layout\n\n### 九、ScrollView\n1. Discrollview  \n支持滚动时 Item 淡入淡出，平移，缩放效果的 ScrollView  \n项目地址：https://github.com/flavienlaurent/discrollview  \nDemo 地址：https://github.com/flavienlaurent/discrollview/raw/master/sample.apk  \n\n1. PullScrollView  \n仿照新浪微博 Android 客户端个人中心的 ScrollView，下拉背景伸缩回弹效果。  \n项目地址：https://github.com/MarkMjw/PullScrollView  \n\n1. ArcLayout  \n一个非常简单的弧布局库  \n项目地址：https://github.com/ogaclejapan/ArcLayout  \nDemo 地址：https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo  \n\n1. ParallaxScrollView  \n支持视差滚动的 ScrollView ，背景图片的滚动速度小于 ScrollView 中子控件的滚动速度  \n项目地址：https://github.com/chrisjenx/ParallaxScrollView  \nDemo 地址：http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk  \n\n1. AKParallax-Android  \n支持视差滚动的 ScrollView  \n项目地址：https://github.com/ideaismobile/AKParallax-Android  \nDemo 地址：https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample  \n\n1. Android-ObservableScrollView  \n监听滚动视图滚动事件的库，帮助与 Toolbar 的交互动效处理与 Material Design 的实现  \n项目地址：https://github.com/ksoichiro/Android-ObservableScrollView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2  \n\n1. OverScrollView  \n有弹性的 ScrollView，实现了当手指滑动到 ScrollView 的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹  \n项目地址：https://github.com/EverythingMe/OverScrollView  \n\n### 十、TimeView\n包括 TimePicker、DatePicker、CalendarView、Clock 等时间相关控件  \n\n1. android-times-square  \nAndroid 日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示  \n项目地址：https://github.com/square/android-times-square  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true  \n\n1. android-calendar-card  \n日历  \n项目地址：https://github.com/kenumir/android-calendar-card  \nDemo 地址：https://play.google.com/store/apps/details?id=com.wt.calendarcardsample  \n\n1. AndroidWheel  \nAndroid Wheel 支持城市、多种日期时间、密码、图片  \n项目地址：https://code.google.com/p/android-wheel/  \n\n1. GoogleDateTimePickers  \n时间选择部件  \n项目地址：https://github.com/Mirkoddd/GoogleDateTimePickers  \n文档介绍：https://play.google.com/store/apps/details?id=com.mirko.sample&hl=it  \n\n1. DateTimePicker  \n日期选择部件(Google Agenda 的样式风格)  \n项目地址：https://github.com/flavienlaurent/datetimepicker  \nDemo 地址：https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk  \n\n1. android-betterpickers  \n提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以 DialogFragment 的弹窗选择  \n项目地址：https://github.com/derekbrameyer/android-betterpickers  \nDemo 地址：https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample  \n\n1. Android Week View  \n日期控件，支持周，天视图，支持自定义样式  \n项目地址：https://github.com/alamkanak/Android-Week-View  \n\n1. PickerView  \n仿 iOS 的 PickerView 控件，有时间选择和选项选择并支持一二三级联动效果，TimePopupWindow 时间选择器，支持年月日时分，年月日，时分等格式；OptionsPopupWindow 选项选择器，支持一，二，三级选项选择，并且可以设置是否联动  \n项目地址：https://github.com/saiwu-bigkoo/Android-PickerView  \n\n1. CountdownView  \nAndroid 倒计时控件，使用Canvas绘制，支持多种样式  \n项目地址：https://github.com/iwgang/CountdownView  \n\n### 十一、TipView\n包括 Toast、角标、UndoBar 等提示性控件  \n\n1. SVProgressHUD \nSVProgressHUD For Android 精仿iOS的提示库 SVProgressHUD，api也几乎一样。  \n项目地址：https://github.com/saiwu-bigkoo/Android-SVProgressHUD  \n\n1. Crouton  \n丰富样式的 Toast，允许 alert、comfirm、info 样式及点击消失样式，允许设置 Toast 显示时间，允许自定义 View。 本文 32. SuperToasts 为其扩展版  \n项目地址：https://github.com/keyboardsurfer/Crouton  \nDemo 地址：http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton  \n\n1. supertooltips  \n带动画效果的 Tips 显示  \n项目地址：https://github.com/nhaarman/supertooltips  \nDemo 地址：https://play.google.com/store/apps/details?id=com.haarman.supertooltips  \n\n1. Android ViewBadger  \n为其他 View 添加角标（消息圆点）等  \n项目地址：https://github.com/jgilfelt/android-viewbadger  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true  \n\n1. SuperToasts  \n更丰富样式的 toast，支持 Button、Progress、Horizontal Progress 样式、支持进入动画、支持撤销及其动画设置  \n项目地址：https://github.com/JohnPersano/SuperToasts  \nDemo 地址：https://play.google.com/store/apps/details?id=com.supertoastsdemo  \n\n1. UndoBar  \n屏幕底部显示取消或是确认的 PopupWindows  \n项目地址：https://github.com/soarcn/UndoBar  \n\n1. UndoBar  \n屏幕底部显示取消或是确认某操作  \n项目地址：https://github.com/jenzz/Android-UndoBar  \n\n1. Android-ActionItemBadge  \n可以在 ActionBar 的 MenuItem 上显示一个小角标  \n项目地址：https://github.com/mikepenz/Android-ActionItemBadge  \n\n1. SnackBar  \nMaterial Design 风格的 Toast，类似 Google inbox 中的提示  \n项目地址：https://github.com/MrEngineer13/SnackBar  \nDemo 地址：https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample  \n\n1. HeadsUp  \n在 2.3 上使用 android  5.0 的 HeadsUp 效果  \n项目地址：https://github.com/zzz40500/HeadsUp  \n\n### 十二、FlipView\n1. android-flip  \n类似 Flipboard 翻转动画的实现  \n项目地址：https://github.com/openaphid/android-flip  \nDemo 地址：https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true  \nAPP 示例：flipboard  \n\n1. FlipImageView  \n支持 x、y、z 及动画选择的翻转动画的实现  \n项目地址：https://github.com/castorflex/FlipImageView  \nDemo 地址：https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview  \n\n1. FoldableLayout  \nFlip 翻转效果的 ListView，目前还不支持 ListView 缓存  \n项目地址：https://github.com/alexvasilkov/FoldableLayout  \nDemo 地址：http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample  \n\n1. FlipViewPager.Draco  \nFlip 翻转效果的 ViewPager  \n项目地址：https://github.com/Yalantis/FlipViewPager.Draco  \n\n### 十三、ColorPickView\n1. ColorPickerView  \n颜色选择器，支持 PopupWindows 或新的 Activity 中打开  \n项目地址：https://code.google.com/p/color-picker-view/  \n\n1. HoloColorPicker  \n颜色选择器  \n项目地址：https://github.com/LarsWerkman/HoloColorPicker  \nDemo 地址：https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit  \n\n1. ColorPickerPreference  \n颜色选择器  \n项目地址：https://github.com/attenzione/android-ColorPickerPreference  \n\n1. ColorPicker  \n颜色选择器（Google Agenda 中的样式风格）  \n项目地址：https://github.com/flavienlaurent/colorpicker  \nDemo 地址：https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk  \n\n### 十四、GraphView\n1. MPAndroidChart  \n强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图等；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表  \n项目地址：https://github.com/PhilJay/MPAndroidChart  \nDemo 地址：https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample  \nDemo 项目：https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample  \n在线演示：https://www.youtube.com/watch?v=ufaK_Hd6BpI  \n\n1. achartengine  \n强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合  \n项目地址：https://code.google.com/p/achartengine/  \n官网网址：http://www.achartengine.org/  \nAPP 示例：Wordpress Android，Google Analytics  \n\n1. GraphView  \n绘制图表和曲线图的 View，可用于 Android 上的曲形图、柱状图、波浪图展示  \n项目地址：https://github.com/jjoe64/GraphView  \nDemo 项目：https://github.com/jjoe64/GraphView-Demos  \nAPP 示例：Wordpress Android，Google Analytics  \n\n1. HoloGraphLibrary  \n绘制现状图、柱状图、饼状图  \n项目地址：https://bitbucket.org/danielnadeau/holographlibrary/src  \n文档介绍：https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home  \n\n1. XCL-Charts  \nXCL-Charts 基于原生的 Canvas 来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持 3D/非 3D 柱形图(Bar Chart)、3D/非 3D 饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。  \n项目地址：https://github.com/xcltapestry/XCL-Charts  \nDemo 地址：https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true  \n\n1. EazeGraph  \nAndroid 图表库，支持柱状图、分层柱状图、饼状图、线性图  \n项目地址：https://github.com/blackfizz/EazeGraph  \nDemo 地址：https://play.google.com/store/apps/details?id=org.eazegraph.app  \n\n1. WilliamChart  \n绘制图表的库，支持 LineChartView、BarChartView 和 StackBarChartView 三中图表类型，并且支持 Android 2.2 及以上的系统。  \n项目地址：https://github.com/diogobernardino/WilliamChart  \nDemo 地址：https://play.google.com/store/apps/details?id=com.db.williamchartdemo  \nDemo 项目：https://github.com/diogobernardino/WilliamChart/tree/master/sample  \n\n1. HelloCharts for Android  \n支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上  \n项目地址：https://github.com/lecho/hellocharts-android  \nDemo 地址：https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples  \n在线演示：https://www.youtube.com/watch?v=xbSBjyjH2SY  \n\n1. PieChartView  \n比较简单直接的饼状统计报表图，使用方便，设置相应的属性参数即可  \n项目地址：https://github.com/wuseal/PieChartView  \nDemo 地址：https://github.com/wuseal/PieChartView  \n\n### 十五、UI Style\n不同样式的系统 UI 风格，如 IOS、Bootstrap 风格  \n\n1. UITableView  \nios 风格控件，包括 Button、ListView、TableView  \n项目地址：https://github.com/thiagolocatelli/android-uitableview  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true  \n\n1. ATableView  \nios 风格控件  \n项目地址：https://github.com/dmacosta/ATableView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo  \n\n1. Cards-UI  \n卡片式 View，支持单个卡片，item 为卡片的 ListView  \n项目地址：https://github.com/afollestad/Cards-UI  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true  \n\n1. cardslib  \n卡片式 View，支持单个卡片，item 为卡片的 ListView 和 GridView  \n项目地址：https://github.com/gabrielemariotti/cardslib  \nDemo 地址：https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo  \n\n1. Android-Bootstrap  \nBootstrap 风格的按钮  \n项目地址：https://github.com/Bearded-Hen/Android-Bootstrap  \n\n1. Material Design Android Library  \nAndroid L 中 Material Design 风格的组件适配到 Android 2.2+  \n项目地址：https://github.com/navasmdc/MaterialDesignLibrary  \n\n1. Android FlatUI  \nAndroid 扁平化风格的组件，支持一些自定义样式  \n项目地址：https://github.com/eluleci/FlatUI  \n\n1. cheesesquare  \n全新 Android 设计库演示 Demo，包括 Collapsing Toolbar、FloatingActionButton、View anchoring、NavigationView、Snackbar  \n项目地址：https://github.com/chrisbanes/cheesesquare  \n\n### 十六、其他\n1. SnappingStepper   \n一种漂亮的UI控件，能更灵活的控制数字的增减。可用于购物车商品数量控制。  \n项目地址：https://github.com/saiwu-bigkoo/Android-SnappingStepper  \n\n1. SwipeBackLayout  \n左右或向上滑动返回的 Activity  \n项目地址：https://github.com/Issacw0ng/SwipeBackLayout  \nDemo 地址：https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo  \nAPP 示例：知乎  \n\n1. android-styled-dialogs  \n可自定义样式的 dialog，默认与 Holo 主题样式一致，在 Android2.2 以上同一样式  \n项目地址：https://github.com/inmite/android-styled-dialogs  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true  \n\n1. Android Sliding Up Panel  \n可拖动的 View，能在当前 Activity 上扶起一个可拖动的 Panel  \n项目地址：https://github.com/umano/AndroidSlidingUpPanel  \nDemo 地址：https://play.google.com/store/apps/details?id=com.sothree.umano  \nAPP 示例：Google Music 精简播放栏  \n\n1. TableFixHeaders  \n第一列固定的 Table  \n项目地址：https://github.com/InQBarna/TableFixHeaders  \nDemo 地址：http://bit.ly/13buAIq  \n\n1. Inscription  \n可用于展示应用 change 和 new feature 信息  \n项目地址：https://github.com/MartinvanZ/Inscription  \n\n1. ActivityTransition  \nActivity 切换动画，包括渐变、flip、某个位置进入等等  \n项目地址：https://github.com/ophilbert/ActivityTransition  \n文档介绍：https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true  \n\n1. EasyAndroidAnimations  \n针对 View 的各种动画  \n项目地址：https://github.com/2359media/EasyAndroidAnimations  \n\n1. ViewAnimation    \n对android view 动画进行封装,实现起更简单，自带三种常见运动路径，其他的可自定义  \n项目地址：https://github.com/guohuanwen/ViewAniamtion  \nAPP 示例：QQ名片圈圈效果  \n\n1. AndroidLoadingAnimation  \n多种android加载动画  \n项目地址：https://github.com/guohuanwen/AndroidLoadingAnimation  \n\n1. android-lockpattern  \nAndroid 的图案密码解锁  \n项目地址：https://code.google.com/p/android-lockpattern/  \n原理剖析文档：[android-lockpattern](http://a.codekk.com/detail/Android/爱早起/Android Lock Pattern 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo  \n文档介绍：https://code.google.com/p/android-lockpattern/wiki/QuickUse  \nAPP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  \n\n1. PatternLock  \n另一个 Android 图案解锁库  \n项目地址：https://github.com/DreaminginCodeZH/PatternLock  \nDemo 地址：https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk  \nAPP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  \n\n1. RangeBar  \n类似于 SeekBar，不同的是可以选择一个范围内的值而不是单个值  \n项目地址：https://github.com/edmodo/range-bar  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true  \n\n1. ChromeView  \n利用 Chromium 实现的 WebView，解决各个 Android 版本 WebView 不同的问题，同时利用最新 Chrome 代码  \n项目地址：https://github.com/pwnall/chromeview  \n\n1. android-phased-seek-bar  \n支持预先定义状态的 SeekBar  \n项目地址：https://github.com/ademar111190/android-phased-seek-bar  \n\n1. Android Slider Preference Library  \n可添加到设置中的基于对话框的 RankBar 小部件  \n项目地址：https://github.com/jayschwa/AndroidSliderPreference  \n\n1. ShowcaseView library  \n用于高亮显示应用程序的特定部分，从而突出突出重点  \n项目地址：https://github.com/amlcurran/ShowcaseView  \n\n1. android-segmented-control  \nAndroid 上的 Segmented Controls，相当于 RadioButton 组  \n项目地址：https://github.com/hoang8f/android-segmented-control  \n\n1. Swipeable Cards  \n类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢  \n项目地址：https://github.com/kikoso/Swipeable-Cards  \nDemo 地址：https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo  \n\n1. EdgeEffectOverride  \n改变 ScrollView, ListView, ExpandableListView, GridView, ViewPager 等滚动控件滚动到边缘的颜色效果  \n项目地址：https://github.com/AndroidAlliance/EdgeEffectOverride  \n\n1. android-pinned-header-listviews  \n使 ExpandListView 的 Group 滑动到顶端时会固定不动直到另外一个 Group 到达顶端  \n项目地址：https://github.com/rtyley/android-pinned-header-listviews  \n\n1. AndroidSwipeLayout  \n滑动 Layout，支持单个 View，ListView，GridView  \n项目地址：https://github.com/daimajia/AndroidSwipeLayout  \nDemo 地址：[Download Demo](https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk)  \n\n1. DynamicCardLayout  \n在 Android 中实现的类似 Windows8 的瓷片布局  \n项目地址：https://github.com/dodola/DynamicCardLayout  \n\n1. Emoticons-Keyboard  \n带表情情符号的自定义键盘  \n项目地址：https://github.com/chiragjain/Emoticons-Keyboard  \n\n1. Android Typeface Helper  \n可以帮你轻松实现自定义字体的库  \n项目地址：https://github.com/norbsoft/android-typeface-helper  \n\n1. Android-Anim-Playground  \n几个动画效果，其中第二个基于 android-svg 的绘制效果非常好  \n项目地址：https://github.com/Tibolte/Android-Anim-Playground  \n\n1. AlertView \n仿iOS的AlertViewController 几乎完美还原iOS 的 AlertViewController ，同时支持Alert和ActionSheet模式，每一个细节都是精雕细琢，并把api封装成懒到极致模式，一行代码就可以进行弹窗.  \n项目地址：https://github.com/saiwu-bigkoo/Android-AlertView  \n\n1. NiftyDialogEffects  \n支持自定义飞入动画样式的 Dialog  \n项目地址：https://github.com/sd6352051/NiftyDialogEffects  \n在线演示：http://tympanus.net/Development/ModalWindowEffects/  \n\n1. PostOffice  \n创建 Holo 及 Material Design 样式的 Dialog  \n项目地址：https://github.com/r0adkll/PostOffice  \n\n1. Swipecards  \n类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso's Swipeable-Cards 改造而来  \n项目地址：https://github.com/Diolor/Swipecards  \n\n1. SeekArc  \n圆形的 SeekBar  \n项目地址：https://github.com/TriggerTrap/SeekArc  \n\n1. BlurDialogFragment  \n显示  DialogFragment 时背景模糊效果  \n项目地址：https://github.com/tvbarthel/BlurDialogFragment  \nDemo 地址：https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample  \n\n1. range-seek-bar  \n随机值选取的 SeekBar  \n项目地址：https://github.com/yahoo/android-range-seek-bar  \n\n1. MaterialRangeBar  \n可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配  \n项目地址：https://github.com/oli107/material-range-bar  \n\n1. MaterialList  \nMaterial Design 风格的 CardView  \n项目地址：https://github.com/dexafree/MaterialList  \nDemo 地址：https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample  \n\n1. road-trip  \n设置 path 的各种动画效果，以及如何实现复杂路径动画，类似于 ios 中的指纹注册界面的指纹动画效果  \n项目地址：https://github.com/romainguy/road-trip  \n\n1. dialogplus  \n一个简单的 Android 对话框，支持不同的弹出模式  \n项目地址：https://github.com/orhanobut/dialogplus  \n\n1. FlowLayout  \n一个简单的流式布局，用法类似 LinearLayout，但是能够让子元素根据宽度自动换行  \n项目地址：[FLowLayout](https://github.com/LyndonChin/AndroidFlowLayout)  \n\n1. CircleSeekbar  \n一个环形Seekbar组件,支持叠加复合使用  \n项目地址：[CircleSeekbar](https://github.com/feeeei/CircleSeekbar)  \n\n1. FinestWebView  \n美麗的和可定制的Android的活動，顯示在一個應用程序的網頁。  \n项目地址: https://github.com/TheFinestArtist/FinestWebView-Android  \nSample 地址: https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample  \n\n1. YouTubePlayerActivity  \n只需通過一個URL來在新的活動播放YouTube視頻。它支持屏幕方向，媒體音量控制等。  \n项目地址: https://github.com/TheFinestArtist/YouTubePlayerActivity  \nSample 地址: https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample  \n\n1. material-camera  \nmaterial风格的camera。能使camera使用起来更简单的库。  \n项目地址：https://github.com/afollestad/material-camera   \n\n1. material-dialogs  \n各种material风格的dialog。\n漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8。  \n项目地址：https://github.com/afollestad/material-dialogs   \nSample地址：https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk  \n  \n1. NotifyUtil  \n最常见的通知样式库  \n项目地址:https://github.com/wenmingvs/NotifyUtil  \ndemo地址：https://github.com/wenmingvs/NotifyUtil#notifydemo  \n\n1. CanPhotos\n使用fresco选取多张图片并可预览图片  \n项目地址：https://github.com/canyinghao/CanPhotos   \n\n1. CanDialog\n仿照系统Dialog所写，继承于FrameLayout，添加一些动画，一些显示类型。  \n项目地址：https://github.com/canyinghao/CanDialog  \n\n## 第二部分 工具库\n主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络请求、数据库 ORM 建模、Android 公共库、Android 高版本向低版本兼容、多媒体相关及其他。  \n\n### 一、依赖注入 DI\n通过依赖注入减少 View、服务、资源简化初始化，事件绑定等重复繁琐工作  \n\n1. AndroidAnnotations(Code Diet)  \nandroid 快速开发框架  \n项目地址：https://github.com/excilys/androidannotations  \n文档介绍：https://github.com/excilys/androidannotations/wiki  \n官网网址：http://androidannotations.org/  \n特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等  \n(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程  \n(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类  \n(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现  \n(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类  \n(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。  \n其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响  \n\n1. roboguice  \n帮你处理了很多代码异常，利用 annotation 使得更少的代码完成项目  \n项目地址：https://github.com/roboguice/roboguice  \n文档介绍：https://github.com/roboguice/roboguice/wiki  \n\n1. butterknife  \n利用 annotation 帮你快速完成 View 的初始化，减少代码  \n项目地址：https://github.com/JakeWharton/butterknife  \n文档介绍：http://jakewharton.github.io/butterknife/  \n\n1. Dagger  \n依赖注入，适用于 Android 和 Java  \n项目地址：https://github.com/square/dagger  \n原理剖析文档：[Dagger](http://a.codekk.com/detail/Android/扔物线/Dagger 源码解析)  \n文档介绍：http://square.github.io/dagger/  \n\n1. AutoParcel  \n注解自动生成Parcelable实现代码的库     \n项目地址：https://github.com/frankiesardo/auto-parcel    \n这篇文章详细介绍了它的使用方法：[AutoParcel](https://passy.svbtle.com/simpler-android-apis-with-autoparcel)     \n作者认为使用AutoParcel的好处是，可以简化构造函数，方便IDE代码自动完成，方便测试，前向兼容，生成不可变的对象。      \n文档介绍：https://github.com/frankiesardo/auto-parcel\n\n\n\n### 二、图片缓存\n1. Android-Universal-Image-Loader  \n图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。  \n项目地址：https://github.com/nostra13/Android-Universal-Image-Loader  \n原理剖析文档：[Android-Universal-Image-Loader](http://a.codekk.com/detail/Android/huxian99/Android Universal Image Loader 源码分析)  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true  \n文档介绍：http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html  \n\n1. picasso  \nsquare 开源的图片缓存  \n项目地址：https://github.com/square/picasso  \n文档介绍：http://square.github.io/picasso/  \n特点：(1)可以自动检测 adapter 的重用并取消之前的下载  \n(2)图片变换  \n(3)可以加载本地资源  \n(4)可以设置占位资源  \n(5)支持 debug 模式  \n\n1. Cube ImageLoader  \n阿里巴巴一淘使用的图片加载，综合了 Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持  \n项目地址：https://github.com/etao-open-source/cube-sdk  \nDemo 地址：https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk  \n文档介绍：http://cube-sdk.liaohuqiu.net/  \n\n1. fresco  \n一款强大的图片缓存工具，由 Facebook 开发  \n项目地址：https://github.com/facebook/fresco  \n文档介绍：http://frescolib.org/  \n特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存  \n(2) 支持流式，可以类似网页上模糊渐进式显示图片  \n(3) 对多帧动画图片支持更好，如 Gif、WebP  \n(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点  \n(5) 更多样的加载，如支持 EXIF、全面支持 WebP  \n(6) 支持 Android 2.3+  \n\n1. Glide  \nGlide 是一个 android 平台上的快速和高效的开源的多媒体资源管理库,提供 多媒体文件的压缩,内存和磁盘缓存, 资源池的接口。  \n它可以最大性能地在 Android 设备上读取、解码、显示图片和视频。Glide 可以将远程的图片、视频、动画图片等缓存在设备本地便于提高用户浏览图片的流畅体验。  \n项目地址：https://github.com/bumptech/glide  \n特点：  \n(1) GIF 动画的解码  \n(2) 本地视频剧照的解码  \n(3) 支持缩略图  \n(4) Activity 生命周期的集成  \n(5) 转码的支持  \n(6) 动画的支持  \n(7) OkHttp 和 Volley 的支持  \n\n### 三、网络请求\n1. Volley  \nGoogle 提供的网络通信库，使得网络请求更简单、更快速  \n项目地址：https://android.googlesource.com/platform/frameworks/volley  \n文档介绍：http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf  \n\n1. Asynchronous Http Client for Android  \nAndroid 异步 Http 请求  \n项目地址：https://github.com/loopj/android-async-http  \n文档介绍：http://loopj.com/android-async-http/  \n特点：(1) 在匿名回调中处理请求结果  \n(2) 在 UI 线程外进行 http 请求  \n(3) 文件断点上传  \n(4) 智能重试  \n(5) 默认 gzip 压缩  \n(6) 支持解析成 Json 格式  \n(7) 可将 Cookies 持久化到 SharedPreferences  \n\n1. android-query  \n异步加载，更少代码完成 Android 加载  \n项目地址：https://github.com/androidquery/androidquery 或 https://code.google.com/p/android-query/  \nDemo 地址：https://play.google.com/store/apps/details?id=com.androidquery  \n文档介绍：https://code.google.com/p/android-query/#Why_AQuery?  \n特点：https://code.google.com/p/android-query/#Why_AQuery?  \n\n1. Async Http Client  \nJava 异步 Http 请求  \n项目地址：https://github.com/AsyncHttpClient/async-http-client  \n文档介绍：http://sonatype.github.io/async-http-client/  \n\n1. Ion  \n支持图片、json、http post 等异步请求  \n项目地址：https://github.com/koush/ion  \n文档介绍：https://github.com/koush/ion#more-examples  \n\n1. Http Request  \n项目地址：https://github.com/kevinsawicki/http-request  \n文档介绍：https://github.com/kevinsawicki/http-request#examples  \n\n1. okhttp  \nsquare 开源的 http 工具类  \n项目地址：https://github.com/square/okhttp  \n文档介绍：http://square.github.io/okhttp/  \n特点：(1) 支持 SPDY( http://zh.wikipedia.org/wiki/SPDY )协议。SPDY 协议是 Google 开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个 TCP 链接传送网页和图片等资源)和优先级来缩短加载时间。  \n(2) 如果 SPDY 不可用，利用连接池减少请求延迟  \n(3) Gzip 压缩  \n(4) Response 缓存减少不必要的请求  \n\n1. Retrofit  \nRESTFUL API 设计  \n项目地址：https://github.com/square/retrofit  \n文档介绍：http://square.github.io/retrofit/  \n\n1. RoboSpice  \nAndroid 异步网络请求工具，支持缓存、REST 等等  \n项目地址：https://github.com/stephanenicolas/robospice  \nDemo 地址：https://github.com/stephanenicolas/RoboDemo/downloads  \n\n1. TwistVolley  \nTwistVolley 是对 Volley 的一个封装库。提供类似 Picasso 一样的串联式 API。使得使用 Volley 更加方便。  \n项目地址：https://github.com/TwistedEquations/TwistVolley  \n\n### 四、数据库 orm 工具包\norm 的 db 工具类，简化建表、查询、更新、插入、事务、索引的操作 \n\n1. greenDAO  \nAndroid Sqlite orm 的 db 工具类  \n项目地址：https://github.com/greenrobot/greenDAO  \n文档介绍：http://greendao-orm.com/documentation/  \n官网网址：http://greendao-orm.com/  \n特点：(1) 性能佳  \n(2) 简单易用的 API  \n(3) 内存小好小  \n(4) 库大小小  \n\n1. GreenDaoUpgradeHelper  \ngreenDAO的数据库升级帮助类，只需一行代码解决数据库升级  \n项目地址：https://github.com/yuweiguocn/GreenDaoUpgradeHelper\n\n1. ActiveAndroid  \nAndroid Sqlite orm 的 db 工具类  \n项目地址：https://github.com/pardom/ActiveAndroid  \n文档介绍：https://github.com/pardom/ActiveAndroid/wiki/_pages  \n\n1. Sprinkles  \nAndroid Sqlite orm 的 db 工具类，比较显著的特点就是配合 https://github.com/square/retrofit 能保存从服务器获取的数据  \n项目地址：https://github.com/emilsjolander/sprinkles  \n文档介绍：http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/  \n\n1. Realm  \n移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好  \n项目地址：https://github.com/realm/realm-java  \n文档介绍：http://realm.io/docs/java/0.72.0/  \n\n1. ormlite-android  \n项目地址：https://github.com/j256/ormlite-android  \n文档介绍：http://ormlite.com/sqlite_java_android_orm.shtml  \n\n1. Schematic  \n根据 SQLite 生成 ContentProvider  \n项目地址：https://github.com/SimonVT/schematic  \n\n1. DBFlow  \nAndroid SQLite ORM 工具库。综合了 Active Android, Schematic, Ollie,Sprinkles 等库的优点；通过注解实现，性能好；能生成 ContentProvider。  \n项目地址：https://github.com/Raizlabs/DBFlow  \n文档介绍：https://github.com/Raizlabs/DBFlow#usage-docs  \n\n1. SnappyDB\nSnappyDB是一个key-value数据库，非常流行的NoSQL数据库。\n项目地址：https://github.com/nhachicha/SnappyDB\n演示Demo：https://play.google.com/store/apps/details?id=com.snappydb.snippets.app\n\n### 五、Android 公共库\n1. Guava  \nGoogle 的基于 java1.6 的类库集合的扩展项目，包括 collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O 等等. 这些高质量的 API 可以使你的 JAVa 代码更加优雅，更加简洁  \n项目地址：https://code.google.com/p/guava-libraries/  \n文档介绍：https://code.google.com/p/guava-libraries/wiki/GuavaExplained  \n\n1. AndroidCommon  \nAndroid 公共库  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo 地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/android-common-lib/  \n包括：a. ImageCache 图片缓存，包含内存和 Sdcard 缓存  \nhttp://www.trinea.cn/android/android-imagecache/  \n特点：(1)支持预取新图片，支持等待队列  \n(2)包含二级缓存，可自定义文件名保存规则  \n(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU 等 13 种)或自定义缓存算法  \n(4)可方便的保存及初始化恢复数据  \n(5)支持不同类型网络处理  \n(6)可根据系统配置初始化缓存等  \n\n1. HttpCache Http 缓存  \n文档介绍：http://www.trinea.cn/android/android-http-cache  \n特点是：(1) 根据 cache-control、expires 缓存 http 请求  \n(2) 支持同步、异步 Http 请求  \n(3) 在匿名回调中处理请求结果  \n(4) 在 UI 线程外进行 http 请求  \n(5) 默认 gzip 压缩  \n(2) 公共 View(下拉及底部加载更多 ListView、底部加载更多 ScrollView、滑动一页 Gallery)  \n(3) Android 常用工具类(网络、下载、Android 资源操作、shell、文件、Json、随机数、Collection 等等)  \n\n1. DropDownListView 下拉刷新及滑动到底部加载更多 ListView  \n文档介绍：http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/  \n\n1. shipfaster  \n整合了 Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发  \n项目地址：https://github.com/pyricau/shipfaster  \n\n1. CleanAndroidCode  \n整合了 Dagger Otto AndroidAnnotations，方便快速开发  \n项目地址：https://github.com/pyricau/CleanAndroidCode  \n\n1. xUtils  \n基于 Afinal，包含 DbUtils、ViewUtils、HttpUtils、BitmapUtils 四大模块，可用于快速开发  \n项目地址：https://github.com/wyouflf/xUtils  \n原理剖析文档：[xUtils](http://a.codekk.com/detail/Android/Caij/xUtils 源码解析)  \n\n1. Afinal  \nAfinal 是一个 android 的 ioc，orm 框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过 finalActivity，我们可以通过注解的方式进行绑定 ui 和事件。通过 finalBitmap，我们可以方便的加载 bitmap 图片，而无需考虑 oom 等问题。通过 finalDB 模块，我们一行代码就可以对 android 的 sqlite 数据库进行增删改查。通过 FinalHttp 模块，我们可以以 ajax 形式请求 http 数据  \n项目地址：https://github.com/yangfuhai/afinal  \n官网网址：http://www.afinal.org  \n\n1. UltimateAndroid  \nUltimateAndroid 是一个快速开发 Android 应用的框架，框架目前主要包含的功能有 View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘 LRU 等功能.同时提供了类似于 TripleDes、Webview 快速设置、Md5 处理、String 处理,Https 处理等常用工具类，还有超过 100 多种 UI 控件效果。  \n项目地址：https://github.com/cymcsg/UltimateAndroid  \n官网网址：http://blog.marshalchen.com/UltimateAndroid/  \n\n1. SAF  \nSAF(Simple Android Framework)是一个简单的 android 框架，它为开发 Android app 提供了基础性组件。  \n项目地址：https://github.com/fengzhizi715/SAF  \n官网网址：http://www.salesuite.cn/  \n包括：(1)Event Bus(事件总线)  \n(2) Rest Client(http 的框架)  \n(3) Image Cache(图片缓存)  \n(4) Dependency Injection(依赖注入)  \n(5) Sqlite ORM(sqlite 的 orm)  \n(6) Router(Activity、Fragment 的 Router)  \n(7) Utils(各种常用的工具类)  \n\n1. Barber  \nCustom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。  \n项目地址：https://github.com/hzsweers/barber  \n\n1. device-year-class  \nA library that analyzes an Android device's specifications and calculates which year the device would be considered \"high end”.(facebook 开发的检测手机主流配置工具)  \n项目地址：https://github.com/facebook/device-year-class  \n\n1. RxAndroid   \n对RxJava在Android上的扩展，使得Android上也很容易实现reactive components，简化线程操作，从而写出很漂亮的代码。   \n项目地址：https://github.com/ReactiveX/RxAndroid   \n文档介绍：[给Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)  \n\n1. MultiImageSelector   \n一个本地图片选择器，支持图片的单选和多选，直接返回所选图片的路径。   \n项目地址：https://github.com/lovetuzitong/MultiImageSelector.git \n\n### 六、Android 高版本向低版本兼容\n1. Nine Old Androids  \n将 Android 3.0(Honeycomb)所有动画 API(ObjectAnimator ValueAnimator 等)兼容到 Android1.0  \n项目地址：https://github.com/JakeWharton/NineOldAndroids  \n原理剖析文档：[Nine Old Androids](http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample  \n文档介绍：http://nineoldandroids.com/  \n\n1. HoloEverywhere  \n将 Android 3.0 的 Holo 主题兼容到 Android2.1++  \n项目地址：https://github.com/Prototik/HoloEverywhere  \nDemo 地址：https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk  \n文档介绍：http://android-developers.blogspot.com/2012/01/holo-everywhere.html  \n\n1. SherlockNavigationDrawer  \n将 Android NavigationDrawer 和 ActionbarSherlock 结合，解决 4.0 以下 NavigationDrawer 的适配问题  \n项目地址：https://github.com/tobykurien/SherlockNavigationDrawer  \n文档介绍：http://developer.android.com/training/implementing-navigation/nav-drawer.html  \n\n1. Notifications4EveryWhere  \n将 Android 4.1 的 Notification 兼容到 Android2.2++  \n项目地址：https://github.com/youxiachai/Notifications4EveryWhere  \n\n1. Android Switch Widget Backport  \n将 Android Switch 和 SwitchPreference 的兼容到 Android2.1++  \n项目地址：https://github.com/BoD/android-switch-backport  \nDemo 地址：https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample  \n文档介绍：https://github.com/BoD/android-switch-backport#using-the-switch  \n\n1. android-datepicker  \n将 Android 4.0 的 datepicker 兼容到 Android2.2++  \n项目地址：https://github.com/SimonVT/android-datepicker  \n\n1. Transitions Everywhere  \nAndroid 4.4 的 Transitions API 兼容到 Android 2.2 以上  \n项目地址：https://github.com/andkulikov/transitions-everywhere  \n\n1. KShareViewActivityManager  \n一个兼容Android 5.0 以下Shared Element Transition （页面间共享元素位移动画）库  \n项目地址：https://github.com/kot32go/KShareViewActivityManager  \n\n### 七、多媒体相关\n1. cocos2d-x  \n跨平台的 2d 游戏框架，支持 Android、IOS、Linux、Windows 等众多平台  \n项目地址：https://github.com/cocos2d/cocos2d-x  \n文档介绍：http://www.cocos2d-x.org/wiki  \n官网网址：http://www.cocos2d-x.org/  \n\n1. JustWeEngine  \nAndroid的轻量级游戏框架，能大大缩减编写原生游戏的代码量和难度，仍在持续更新中。  \n项目地址: https://github.com/lfkdsk/JustWeEngine  \nDemo地址: https://github.com/lfkdsk/EngineDemo  \n\n1. Vitamio  \n是一款 Android 与 iOS 平台上的全能多媒体开发框架  \n项目地址：https://github.com/yixia/VitamioBundle  \n网站介绍：http://www.vitamio.org/docs/  \n特点：(1) 全面支持硬件解码与 GPU 渲染  \n(2) 能够流畅播放 720P 甚至 1080P 高清 MKV，FLV，MP4，MOV，TS，RMVB 等常见格式的视频  \n(3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。 \n\n1. VDPlayerSDK  \n最容易集成的开源播放器组件，支持直播，支持软硬解切换，支持清晰度切换  \n项目地址：https://github.com/SinaVDDeveloper/  \nDemo 地址：https://github.com/SinaVDDeveloper/demo  \n文档介绍：https://github.com/SinaVDDeveloper/sinavideo_playersdk  \n特点：  \n(1) 使用自定义控件方式提供播放器UI，不需要视频相关知识，能编写android应用就能使用  \n(2) 软硬解切换、点播直播支持  \n(3) 解码内核小于4M，更方便集成到非专业视频app中  \n(4) 修正一些vitaimio的问题，比如m3u8可以拖动等等\n\n1. VideoPlayerManager  \n帮助实现VideoPlayer控制，使得它更容易使用ListView和recyclerview。它还可以跟踪滚动列表中可见的项。当列表中的新项可见域最大时，该库给出了接口来跟踪它。  \n项目地址：https://github.com/danylovolokh/VideoPlayerManager  \n文档介绍：https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn  \n\n1. UniversalVideoView  \nAndroid上定义播放器控件,支持自定义控制UI, 全屏播放, 重力感应自动切换横竖屏.  \n项目地址：https://github.com/linsea/UniversalVideoView  \n\n1. PhotoProcessing  \n利用 ndk 处理图片库，支持 Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效  \n项目地址：https://github.com/lightbox/PhotoProcessing  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true  \n\n1. Android StackBlur  \n图片模糊效果工具类  \n项目地址：https://github.com/kikoso/android-stackblur  \nDemo 地址：https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true  \n文档介绍：https://github.com/kikoso/android-stackblur#usage  \n\n1. Bitmap Smart Clipping using OpenCV  \n图片智能裁剪保留重要部分显示  \n项目地址：https://github.com/beartung/tclip-android  \n利用淘宝的 http://code.taobao.org/p/tclip/ 库完成  \n一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域  \n特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉  \n(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  \n\n1. Cropper  \n图片局部剪切工具，可触摸控制选择区域或旋转  \n项目地址：https://github.com/edmodo/cropper  \n文档介绍：https://github.com/edmodo/cropper/wiki  \n\n1. uCrop  \nYalantis 出品的强大的图片裁剪库 ，支持缩放，旋转图片，支持各种比例的裁剪框  \n项目地址：https://github.com/Yalantis/uCrop  \n\n1. android-crop  \n图片裁剪 Activity\n项目地址：https://github.com/jdamcd/android-crop  \n\n1. TileView  \n可分块显示大图，支持 2D 拖动、双击、双指放大、双指捏合  \n项目地址：https://github.com/moagrius/TileView  \nDemo 地址：http://moagrius.github.io/TileView/TileViewDemo.apk  \n\n1. BlurEffectForAndroidDesign  \n图片模糊效果  \n项目地址：https://github.com/PomepuyN/BlurEffectForAndroidDesign  \n\n1. android-eye  \nPC 端网页查看同一局域网内的手机摄像头内容，可以用来监控哦  \n项目地址：https://github.com/Teaonly/android-eye  \nDemo 地址：https://play.google.com/store/apps/details?id=teaonly.droideye  \n\n1. libpng for Android  \nPNG 图片的 jni 库，支持几乎 png 的所有特性  \n项目地址：https://github.com/julienr/libpng-android  \n文档介绍：http://www.libpng.org/pub/png/libpng.html  \n\n1. android-gpuimage  \n基于 GPU 的图片滤镜  \n项目地址：https://github.com/CyberAgent/android-gpuimage  \n\n1. AndroidFaceCropper  \n图片脸部自动识别，将识别后的局部图片返回  \n项目地址：https://github.com/lafosca/AndroidFaceCropper  \n\n1. Android Video Crop  \n利用 TextureView 播放和剪切视频，类似 ImageView.setScaleType  \n项目地址：https://github.com/dmytrodanylyk/android-video-crop  \nDemo 地址：https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk  \n\n1. svg-android  \nAndroid Svg 矢量图形支持  \n项目地址：https://github.com/japgolly/svg-android https://github.com/japgolly/svg-android  \n\n1. Android Visualizer  \n从 Android MediaPlayer 获得音频，然后像 iTunes 及 WinAmp 一样展示音轨  \n项目地址：https://github.com/felixpalmer/android-visualizer  \n\n1. ExoPlayer  \n包括仪表板和 SmoothStreaming 自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新  \n项目地址：https://github.com/google/ExoPlayer  \n\n1. DanmakuFlameMaster  \nandroid 上开源弹幕解析绘制引擎项目  \n项目地址：https://github.com/ctiao/DanmakuFlameMaster  \n\n1. OpenDanmaku  \nandroid 上一个轻量级的更简单的开源弹幕控件  \n项目地址：https://github.com/linsea/OpenDanmaku  \n\n### 八、事件总线(订阅者模式)\n通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments 及后台线程)之间的通信  \n\n1. EventBus  \ngreenrobot 的开源项目  \n项目地址：https://github.com/greenrobot/EventBus  \n原理剖析文档：[EventBus](http://a.codekk.com/detail/Android/Trinea/EventBus 源码解析)  \n文档介绍：https://github.com/greenrobot/EventBus#general-usage-and-api  \n特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI 线程、单一后台线程、异步线程  \n(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊  \n(3) 不是基于 annotations  \n(4) 性能更优  \n(5) 体积小  \n(6) 支持单例创建或创建多个对象  \n(7) 支持根据事件类型订阅  \n\n1. Otto  \nSquare 的开源项目，基于 Guava 的 Android 优化  \n项目地址：https://github.com/square/otto  \n文档介绍：http://square.github.io/otto/  \n[EventBus 与 Otto 的功能及性能对比文档](https://github.com/greenrobot/EventBus#comparison-with-squares-otto)  \n[EventBus 与 Otto 性能对比 Demo Apk](https://play.google.com/store/apps/details?id=de.greenrobot.eventperf)  \n\n### 九、传感器\n1. Great Android Sensing Toolkit  \nAndroid 感应器工具包，包含示例及使用过程中可能需要的算法  \n项目地址：https://github.com/gast-lib/gast-lib  \nDemo 地址：https://play.google.com/store/apps/details?id=root.gast.playground  \n文档介绍：https://github.com/gast-lib/gast-lib#documentation  \n\n1. SensorManager  \nAndroid 传感器管理  \n项目地址：https://github.com/nlathia/SensorManager  \n文档介绍：https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit  \n\n1. GPSLogger  \n记录 GPS 信息  \n项目地址：https://github.com/mendhak/gpslogger  \nDemo 地址：https://play.google.com/store/apps/details?id=com.mendhak.gpslogger  \n文档介绍：http://code.mendhak.com/gpslogger/  \n\n1. Pedometer  \n计步器，使用硬件计步感应器  \n项目地址：https://github.com/j4velin/Pedometer  \n\n1. leapcast  \nChromeCast 模拟器的 App  \n项目地址：https://github.com/dz0ny/leapcast  \n\n1. Arduino-Communicator  \n与 Arduino 通信的 App  \n项目地址：https://github.com/jeppsson/Arduino-Communicator  \n\n1. android-pedometer  \nAndroid 计步器  \n项目地址：https://github.com/bagilevi/android-pedometer  \nDemo 地址：http://pedometer.googlecode.com/files/Pedometer-1.4.apk  \n\n1. OwnTracks for Android  \n自己的轨迹记录  \n项目地址：https://github.com/owntracks/android  \n\n1. Shake Detector library for Android  \nAndroid 手机震动摇晃检测库，提供供 UI 线程调用的回调接口  \n项目地址：https://github.com/tbouron/ShakeDetector  \nDemo 地址：https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example  \n\n1. Android heart rate monitor  \nAndroid 心跳检测  \n项目地址：https://github.com/phishman3579/android-heart-rate-monitor  \n\n1. Bluetooth LE Library for Android  \n蓝牙源信息，包括宝库 Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息  \n项目地址：https://github.com/alt236/Bluetooth-LE-Library---Android  \nDemo 地址：https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan  \n\n1. farebot  \n通过 NFC 从公交卡中读取数据的一个应用  \n项目地址：https://github.com/codebutler/farebot  \n\n### 十、安全\n1. SQLCipher  \nSqlite 加密工具  \n项目地址：https://github.com/sqlcipher/sqlcipher  \n文档介绍：http://sqlcipher.net/sqlcipher-for-android/  \n\n1. Conceal  \n快速高效的进行文件加密解密  \n项目地址：https://github.com/facebook/conceal  \n文档介绍：https://github.com/facebook/conceal#usage  \n\n1. Android-PasscodeLock  \n应用锁，每次启动或从任何 Activity 启动应用都需要输入四位数字的密码方可进入  \n项目地址：https://github.com/wordpress-mobile/Android-PasscodeLock  \nDemo 地址：https://play.google.com/store/apps/details?id=org.wordpress.android  \nAPP 示例：Wordpress Android，支付宝，挖财  \n\n1. GlowPadBackport  \n将 Android4.2 的锁屏界面解锁扩展到 Android1.6 及 1.6+  \n项目地址：https://github.com/rock3r/GlowPadBackport  \nDemo 地址：https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample  \n\n1. GlowPadView  \nAndroid 4 锁屏界面解锁  \n项目地址：https://github.com/nadavfima/GlowPadView  \n\n1. Android-InsecureBank  \n关于 Android 不安全性的示例  \n项目地址：https://github.com/dineshshetty/Android-InsecureBankv2  \n\n### 十一、插件化\n更多见：[Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案](http://www.trinea.cn/android/android-plugin/)  \n\n1. dynamic-load-apk  \nAndroid 动态加载 Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决  \n项目地址：https://github.com/singwhatiwanna/dynamic-load-apk  \n原理剖析文档：[dynamic-load-apk](http://a.codekk.com/detail/Android/FFish/DynamicLoadApk 源码解析)  \n文档介绍：http://blog.csdn.net/singwhatiwanna/article/details/22597587  \n\n1. Android Dynamic Loader  \n点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现  \n项目地址：https://github.com/mmin18/AndroidDynamicLoader  \nDemo 地址：https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk  \n\n1. xCombine  \nAndroid App 插件式插件开发，插件必须先安装，更推荐看上面两个开源项目  \n项目地址：https://github.com/wyouflf/xCombine  \n文档介绍：http://my.oschina.net/u/1171837/blog/155377  \n\n1. Android Plugin Framework  \nAndroid 插件式开发，开放的源码目前不完整  \n项目地址：https://github.com/umeng/apf  \n\n1. Android OpenAtlas  \nAndroid插件框架，基于OSGI，非代理方式，组件需要在宿主中声明  \n项目地址：https://github.com/bunnyblue/OpenAtlas  \nDemo 地址：https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk \n\n1. multidex  \n安装多 dex 的 classloader  \n项目地址：https://github.com/casidiablo/multidex  \n\n1. ANR-WatchDog  \nAndroid ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件  \n项目地址：https://github.com/SalomonBrys/ANR-WatchDog  \n\n### 十二、文件\n对不同文档类型的处理，包括 PDF、Word、EPub、Html、Zip 等  \n\n1. purePDF  \n允许从任何运行的 SWF 文件读取和创建 PDF 文档  \n项目地址：https://github.com/sephiroth74/purePDF  \n\n1. android-pdfview  \n快速解析 pdf 的 view，默认支持手势缩放和相关动画  \n项目地址：https://github.com/JoanZapata/android-pdfview  \n\n1. Office 365 SDK for Android Preview  \n可支持 Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail  \n项目地址：https://github.com/OfficeDev/Office-365-SDK-for-Android  \n\n1. OpenSpritz-Android  \nEPub 阅读器  \n项目地址：https://github.com/OnlyInAmerica/OpenSpritz-Android  \n\n1. jsoup  \n一个解析 html 的 java 库，可方便的提取和操作数据  \n项目地址：https://github.com/jhy/jsoup  \n官网网址：http://jsoup.org/  \n作用：(1) 从一个 url、文件或 string 获得 html 并解析  \n(2) 利用 dom 遍历或 css 选择器查找、提取数据  \n(3) 操作 html 元素  \n(4) 根据白名单去除用于提交的非法数据防止 xss 攻击  \n(5) 输出整齐的 html  \n\n1. ZIP  \njava 压缩和解压库  \n项目地址：https://github.com/zeroturnaround/zt-zip  \n文档介绍：https://github.com/zeroturnaround/zt-zip#examples  \n作用：(1) 解压和压缩，并支持文件夹内递归操作  \n(2) 支持包含和排除某些元素  \n(3) 支持重命名元素  \n(4) 支持遍历 zip 包内容  \n(5) 比较两个 zip 包等功能  \n\n1. Image File Selector  \n轻量级的图片文件选择器，用系统api选取，压缩和裁切图片，可以方便的得要指定尺寸的图片  \n项目地址：https://github.com/sw926/ImageFileSelector  \n\t\n### 十三、其他\n\n1. FragmentStack  \n一个封装了启动模式的Fragment便捷使用库,方便构建单Activity+多Fragment轻量级框架  \n项目地址：https://github.com/Mr-wangyong/FragmentStack  \nApp示例：[南瓜电影](http://www.wandoujia.com/apps/cn.vcinema.cinema)  \n\n1. CustomTabsHelper\n快速集成 CustomTabs 的工具类  \n项目地址：https://github.com/DreaminginCodeZH/CustomTabsHelper  \n\n1. Salvage view  \n带 View 缓存的 Viewpager PagerAdapter，很方便使用  \n项目地址：https://github.com/JakeWharton/salvage  \n\n1. Android Priority Job Queue  \nAndroid 后台任务队列  \n项目地址：https://github.com/path/android-priority-jobqueue  \n文档介绍：https://github.com/path/android-priority-jobqueue#getting-started  \n\n1. Cobub Razor  \n开源的 mobile 行为分析系统，包括 web 端、android 端，支持 ios 和 window phone  \n项目地址：https://github.com/cobub/razor  \nDemo 地址：http://demo.cobub.com/razor  \n官网网址：http://dev.cobub.com/  \n\n1. Countly  \nAndroid 移动端数据采集分析系统  \n项目地址：https://github.com/Countly/countly-sdk-android  \n官网网址：https://count.ly/  \n\n1. aFileChooser  \n文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。  \n项目地址：https://github.com/iPaulPro/aFileChooser  \n\n1. androidpn  \n基于 xmpp 协议的消息推送解决方案，包括服务器端和 android 端。  \n项目地址：https://github.com/dannytiehui/androidpn  \n\n1. Bolts  \nAndroid 的异步编程模式  \n项目地址：https://github.com/BoltsFramework/Bolts-Android/  \n与 AsyncTask 比较：(1) 使用的是无大小限制的线程池  \n(2) 任务可组合可级联，防止了代码耦合  \n\n1. CastCompanionLibrary-android  \n使 Android 程序中更快的接入 Google Cast  \n项目地址：https://github.com/googlecast/CastCompanionLibrary-android  \n文档介绍：https://developers.google.com/cast/  \n\n1. CastVideos-android  \n从 Android 设备分享 Video 通过 Google Cast  \n项目地址：https://github.com/googlecast/CastVideos-android  \n文档介绍：https://developers.google.com/cast/  \n\n1. Uninstall_Statics  \nAndroid 应用自身被卸载监听及打开浏览器等反馈功能实现  \n项目地址：https://github.com/sevenler/Uninstall_Statics  \n文档介绍：http://www.cnblogs.com/zealotrouge/p/3157126.html  http://www.cnblogs.com/zealotrouge/p/3159772.html  \n1. Memento  \n保证在系统配置改变时，Activity 中的某些数据可以简单安全的保持不变  \n项目地址：https://github.com/mttkay/memento  \n文档介绍：https://github.com/mttkay/memento#usage  \n\n1. FreeFlow  \n布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画  \n项目地址：https://github.com/Comcast/FreeFlow  \nDemo 地址：https://github.com/Comcast/FreeFlow/releases  \n\n1. Android Gesture Detectors Framework  \nAndroid 手势框架，支持双指旋转、移动、平移、缩放等  \n项目地址：https://github.com/Almeros/android-gesture-detectors  \n\n1. Mapbox Android SDK  \nAndroid Map 的替代版  \n项目地址：https://github.com/mapbox/mapbox-android-sdk  \n\n1. Activity animation  \nActivity 跳转动画，支持各个方向波浪的效果  \n项目地址：https://github.com/flavienlaurent/activityanimation  \n在线演示：https://www.youtube.com/watch?v=-E0sc6w_Jck  \n\n1. KryoNet  \n通过 NIO 提供客户端和服务器端 TCP/UDP 网络传输的 Java 库  \n项目地址：https://github.com/EsotericSoftware/kryonet  \n\n1. Rebound  \n一个模仿弹簧反弹的 Java 库，可用于创建动画  \n项目地址：https://github.com/facebook/rebound  \n\n1. Android Social Networks  \n社交网络接入统一管理器，可方便的从 Twitter, LinkedIn, Facebook, Google Plus 登陆、获得个人信息、发送消息、发送专篇、添加或删除好友  \n项目地址：https://github.com/antonkrasov/AndroidSocialNetworks  \nDemo 地址：https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos  \n\n1. SmartAppUpdates  \nAndroid App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级  \n项目地址：https://github.com/cundong/SmartAppUpdates  \n\n1. Magnet  \n创建类似 Facebook 聊天桌面悬浮窗的效果  \n项目地址：https://github.com/premnirmal/Magnet  \n\n1. AcDisplay  \n将 Android 的通知都集中到锁屏显示  \n项目地址：https://github.com/AChep/AcDisplay  \nDemo 地址：https://play.google.com/store/apps/details?id=com.achep.acdisplay  \n\n1. QrCodeScan  \nZXing 和 ZBar 结合的二维码扫描项目，提高了扫描效率  \n项目地址：https://github.com/SkillCollege/QrCodeScan  \n\n1. Android-ScreenShot  \n实现 android 系统截屏功能  \n项目地址：https://github.com/Android-ScreenShot/AndroidScreenShotService  \n文档介绍：http://blog.csdn.net/buptgshengod/article/details/39155979  \n\n1. card.io SDK for Android  \n信用卡扫描 Android SDK  \n项目地址：https://github.com/card-io/card.io-Android-SDK  \nDemo 项目：https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp  \n\n1. ASNE  \nTwitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能  \n项目地址：https://github.com/gorbin/ASNE  \nDemo 地址：https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne  \n\n1. Android Signature Pad  \nAndroid 自定义的签名 View，可自定义笔颜色和大小  \n项目地址：https://github.com/gcacace/android-signaturepad  \nDemo 项目：https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example  \n\n1. Teleport  \nAndroid Wear 数据同步和消息传送库  \n项目地址：https://github.com/Mariuxtheone/Teleport  \n\n1. DebugLog  \n可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。  \n项目地址：https://github.com/MustafaFerhan/DebugLog  \n\n1. Logger  \n简单、美观而且十分强大的 Android 日志工具  \n项目地址：https://github.com/orhanobut/logger  \nDemo 地址：https://github.com/orhanobut/logger/tree/master/app  \n\n1. jlog  \n可以灵活配置的日志工具，支持JSON打印，日志保存到指定文件，日志显示调用位置（混淆模式下依然有效）  \n项目地址：https://github.com/JiongBull/jlog  \nDemo 地址：[apk地址](https://raw.githubusercontent.com/JiongBull/jlog/master/apk/JLog_sample.apk)  \n\n1. Phrase  \nsquare 组开源大牛写的字符串替换类  \n项目地址：https://github.com/square/phrase  \n\n1. ColorPhrase  \n模仿 phrase 写的对字符串个别字符颜色改变的类，高效强大！  \n项目地址：https://github.com/THEONE10211024/ColorPhrase  \n\n1. PinyinSearch  \n一个为 T9 搜索和 Qwerty 搜索,提供数据解析与匹配等方法的拼音搜索 java 库。  \n项目地址： https://github.com/handsomezhou/PinyinSearchLibrary  \nDemo 地址： [ContactsSearch](https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/ContactsSearch.apk?raw=true)    [AppSearch](https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/AppSearch.apk?raw=true)  \nAPP 示例： 通讯录应用，微信电话本  \n\n1. PrainView  \nPaintView 是一个画图工具:  \n可直接使用设定按钮来实现已拥有的方法，且拓展性强  \n基础功能：更换颜色、更换橡皮、以及更换橡皮和笔的粗细、清屏、倒入图片  \n特殊功能：保存画笔轨迹帧动画、帧动画导入导出、ReDo和UnDo  \n项目地址：[Paintview](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/DrawAPicture.apk)  \n原理解析：[PaintView 绘图控件解析](http://www.cnblogs.com/lfk-dsk/p/4768850.html)  \n\n1. CodeView  \nCodeView代码查看／修改工具: 基于WebView制作的代码编辑器,实现代码高亮，暗色主题  \n项目地址：[CodeView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. ExplorerView  \n文件浏览器：继承自ListView，可拓展性强，可进行文件类型分析  \n项目地址：[CodeView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. ReadView  \n小说阅读器，支持文字字体、颜色、背景、进度等多种调整，支持一键设置。  \n项目地址：[ReadView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. MarkDownView  \n支持MarkDown语法的渲染器,基于WebView的MarkDown渲染器,支持标准化的MarkDown语法,\n调用接口和CodeView保持一致使用简便  \n项目地址：[ReadView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. VerTextView竖行排版的TextView:  \n支持竖行排版，添加了下划线功能，开启简便，下划线粗细、颜色、间距均可自定义，  \n接口调用方式与TextView相似，使用简便。  \n项目地址：[ReadView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. GHDownload下载框架  \n支持单线程和多线程断点下载，简单易用。  \n项目地址：[GHDownload](https://github.com/guanchao/GHDownload)  \n\n\n## 第三部分 优秀项目\n主要介绍那些 Android 还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。  \n\n### 一、系统及平台\n1. Linux  \n项目地址：https://github.com/torvalds/linux  \n1. Android  \n项目地址：https://android.googlesource.com/  \n\n### 二、项目\n1. ZXing  \n二维码扫描工具  \n项目地址：https://github.com/zxing/zxing 或 https://code.google.com/p/zxing/  \nAPK 地址：https://play.google.com/store/apps/details?id=com.google.zxing.client.android  \n其他：现在市面上很多应用的二维码扫描功能都是从这个修改而来  \n\n1. photup  \n编辑机批量上传照片到 facebook 上  \n项目地址：https://github.com/chrisbanes/photup  \nAPK 地址：https://play.google.com/store/apps/details?id=uk.co.senab.photup  \n其他：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  \n\n1. github-android  \nGithub 的 Android 客户端项目  \n项目地址：https://github.com/github/android  \nAPK 地址：https://play.google.com/store/apps/details?id=com.github.mobile  \n\n1. Notes  \nMIUI 便签  \n项目地址：https://github.com/MiCode/Notes  \nAPK 地址：https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true  \n其他：项目分包比较合理，相比较 miui 的文件管理器 https://github.com/MiCode/FileExplorer 代码规范较好得多  \n\n1. weicuiyuan  \n四次元-新浪微博客户端  \n项目地址：https://github.com/qii/weiciyuan  \nAPK 地址：https://play.google.com/store/apps/details?id=org.qii.weiciyuan  \n\n1. Douya  \n豆芽——Material Design 的豆瓣客户端  \n项目地址：https://github.com/DreaminginCodeZH/Douya  \n\n1. gnucash-android  \n一个记账理财软件  \n项目地址：https://github.com/codinguser/gnucash-android  \nAPK 地址：http://play.google.com/store/apps/details?id=org.gnucash.android  \n\n1. AntennaPod  \n支持 rss 订阅、音乐订阅  \n项目地址：https://github.com/danieloeh/AntennaPod  \nAPK 地址：https://play.google.com/store/apps/details?id=de.danoeh.antennapod  \n\n1. ChaseWhisplyProject  \n打鬼游戏  \n项目地址：https://github.com/tvbarthel/ChaseWhisplyProject  \nAPK 地址：https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply  \n\n1. Tweet Lanes  \n功能完整的 Twitter 客户端  \n项目地址：https://github.com/chrislacy/TweetLanes  \nAPK 地址：https://play.google.com/store/apps/details?id=com.tweetlanes.android  \n\n1. Financius  \n简单易用的记账程序  \n项目地址：https://github.com/mvarnagiris/Financius  \nAPK 地址：https://play.google.com/store/apps/details?id=com.code44.finance  \n\n1. todo.txt-android  \ntodo.txt 的官方 Android 应用  \n项目地址：https://github.com/ginatrapani/todo.txt-android  \nAPK 地址：https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch  \n\n1. simpletask  \n基于 todo.txt 官方应用的另一个客户端  \n项目地址：https://github.com/mpcjanssen/simpletask-android  \nAPK 地址：https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo  \n\n1. Muzei Live Wallpaper  \n定时更换桌面精美壁纸  \n项目地址：https://github.com/romannurik/muzei  \nAPK 地址：https://play.google.com/store/apps/details?id=net.nurik.roman.muzei  \n\n1. Scanbook  \n扫描搜索查询图书信息  \n项目地址：https://github.com/JayFang1993/ScanBook  \nAPK 地址：http://www.wandoujia.com/apps/com.scanbook  \n\n1. iosched  \nThe Google I/O 2014 Android App  \n项目地址：https://github.com/google/iosched  \nAPK 地址：https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched  \n\n## 第四部分 开发工具及测试工具\n主要介绍和 Android 开发工具和测试工具相关的开源项目。  \n\n### 一、开发效率工具\n1. Parceler  \n通过注解及工具类自动完成实体类 Parcelable 及值传递  \n项目地址：https://github.com/johncarl81/parceler  \n\n1. Json2Java  \n根据 JSon 数据自动生成对应的 Java 实体类，还支持 Parcel、Gson Annotations 对应代码自动生成。期待后续的提取父类以及多 url 构建整个工程的功能  \n项目地址：https://github.com/jonfhancock/JsonToJava  \n在线演示：http://jsontojava.appspot.com/  \n\n1. IntelliJ Plugin for Android Parcelable boilerplate code generation  \nAndroid studio 插件，生成 Parcelable 代码  \n项目地址：https://github.com/mcharmas/android-parcelable-intellij-plugin  \n\n1. Android Holo Colors IntelliJ Plugin  \nAndroid studio 插件，生成 holo 样式 9 patch 图片  \n项目地址：https://github.com/jeromevdl/android-holo-colors-idea-plugin  \n\n1. Android Drawable Factory  \n用于生成各个分辨率的图片  \n项目地址：https://github.com/tizionario/AndroidDrawableFactory  \n\n1. SelectorChapek for Android  \nAndroid Studio 插件，可根据固定文件名格式资源自动生成 drawable selectors xml 文件。  \n项目地址：https://github.com/inmite/android-selector-chapek  \n\n1. Android Action Bar Style Generator  \nAndroid ActionBar 样式生成器，可在线选择 ActionBar 样式自动生成所需要的图片资源及 xml 文件  \n项目地址：https://github.com/jgilfelt/android-actionbarstylegenerator  \n在线演示：http://jgilfelt.github.io/android-actionbarstylegenerator/  \n\n1. ButterKnifeZelezny  \n用于快速生成[ButterKnife](https://github.com/JakeWharton/butterknife)View 注入代码的 Android Studio/IDEA 插件  \n项目地址：https://github.com/inmite/android-butterknife-zelezny  \n\n1. RoboCoP  \n利用 Gradle task 根据固定格式的 json 文件生成 ContentProvider  \n项目地址：https://github.com/mediarain/RoboCoP  \n\n1. appiconsizes  \n用于生成各个分辨率的图片  \n项目地址：http://www.appiconsizes.com/  \n\n1. AndroidUtiles \n集合了所有常用的安卓工具类\n项目地址：https://github.com/l123456789jy/Lazy\n\n1. Gradle Retrolambda Plugin  \n[Retrolambda](https://github.com/orfjackal/retrolambda)是将 Java8 的 Lambdas 应用于 Java7 的工具，本项目是 Gradle 插件，通过 Retrolambda 从而使 Java 或 Android 项目用 Java8 的 Lambdas 编写，将编译后的字节码转换为 Java6 和 7 的字节码从而正常运行  \n项目地址：https://github.com/evant/gradle-retrolambda  \n\n1. Dagger IntelliJ Plugin  \ndagger 的 intellij 插件  \n项目地址：https://github.com/square/dagger-intellij-plugin  \n\n1. Android Gen Drawable Maven plugin  \n在编译时根据 SVG 描述文件生成不同分辨率的 jpg、png 或点 9 图片  \n项目地址：https://github.com/avianey/androidgendrawable-maven-plugin  \n\n1. Android Asset Studio  \n各种 Android 资源自动生成器，包括启动图标、ActionBar 图标、通知栏图标、点 9 等  \n项目地址：https://github.com/romannurik/AndroidAssetStudio  \n在线演示：http://romannurik.github.io/AndroidAssetStudio/  \n\n1. jsonschema2pojo  \n根据 Json 内容生成 java 对象，支持 jackjson 和 gson  \n项目地址：https://github.com/joelittlejohn/jsonschema2pojo  \n在线演示：http://www.jsonschema2pojo.org/  \n\n1. GsonFormat  \n根据 JSONObject 格式的字符串,自动生成实体类参数的 Android Studio/IntelliJ IDEA 插件  \n项目地址：https://github.com/zzz40500/GsonFormat  \n\n1. 9-Patch-Resizer  \n自动生成 png 及点 9 图片的不同分辨率版本  \n项目地址：https://github.com/redwarp/9-Patch-Resizer  \n\n1. AndroidLocalizationer  \n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件  \n项目地址：https://github.com/westlinkin/AndroidLocalizationer  \n\n1. Material Palette  \n一个将现有的色彩方案组合成材料设计的调色板方案，提供下载。选取两个主要色彩后便可以提供下载，提供下载的格式可以是 android 的资源 xml 文件，以色彩的方式提供，也可以是 CSS、SVG、PNG 等常见格式文件。  \n项目地址：http://www.materialpalette.com/  \n\n### 二、开发自测相关\n1. Quality Tools for Android  \nAndroid 测试及自测工具集合和示例  \n项目地址：https://github.com/stephanenicolas/Quality-Tools-for-Android  \n\n1. android-test-kit  \nGoogle 的 Android 测试工具  \n包括 GoogleInstrumentationTestRunner(增强版的 InstrumentationTestRunner)和 Espresso(用于快速写出可靠测试用例的 API)  \n项目地址：https://code.google.com/p/android-test-kit/  \n文档介绍：https://code.google.com/p/android-test-kit/w/list  \n\n1. robolectric  \n测试用例编写框架  \n项目地址：https://github.com/robolectric/robolectric  \nDemo 地址：https://github.com/robolectric/robolectricsample  \n文档介绍：http://robolectric.org/  \n特点：(1). 不需要模拟器在一般 JVM 就可以运行测试用例  \n(2). 能完成在真机上的大部分测试包括感应器  \n其他的测试用例及相关模块 Mock 可见：[android-mock](https://code.google.com/p/android-mock/), [mockito](https://code.google.com/p/mockito/), [easy-mock](https://github.com/easymock/easymock)  \n\n1. Android FEST  \n提供一些列方便的断言，可用于提高编写 Android 自测代码效率  \n项目地址：https://github.com/square/fest-android  \n\n1. BoundBox  \n可用于测试类各种访问权限的属性、方法。实际是通过 BoundBox 这个 annotation 生成一个属性和方法都是 public 权限的中间类并对此类进行测试完成的  \n项目地址：https://github.com/stephanenicolas/boundbox  \n\n1. Hugo  \n用于打印函数信息及执行时间的工具，仅在 debug 模式生效  \n项目地址：https://github.com/JakeWharton/hugo  \n\n1. scalpel  \n在应用下面添加一层用于界面调试  \n项目地址：https://github.com/JakeWharton/scalpel  \n\n1. Android Screenshot library  \nAndroid 截图工具类，用于在持续集成时截图  \n项目地址：https://github.com/rtyley/android-screenshot-lib  \n\n1. sonar-android-lint-plugin  \n将 android lint 的错误在 sonar 中展现  \n项目地址：https://github.com/SonarCommunity/sonar-android  \n\n### 三、测试工具\n1. Spoon  \n可用于 android 不同机型设备自动化测试，能将应用 apk 和测试 apk 运行在不同机器上并生成相应测试报告。  \n项目地址：https://github.com/square/spoon  \n\n1. Tencent APT  \nAPT 是腾讯开源的一个 Android 平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试  \n项目地址：https://github.com/stormzhang/APT  \n\n1. Emmagee  \n网易开源的性能测试工具，包括 CPU、内存、网络流量、启动时间、电池状态等  \n项目地址：https://github.com/NetEase/Emmagee  \n\n1. Android py-uiautomator  \npy-uiautomator 是一个对 Android uiautomator 用 python 进行封装的测试框架.  \n项目地址：https://github.com/xiaocong/uiautomator  \n\n1. Augmented Traffic Control  \n模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率  \n项目地址：https://github.com/facebook/augmented-traffic-control  \n\n1. stetho  \n强大的 Android Debug 工具。支持网络请求监控以及数据库查看，可以和 Chrome DevTools 结合或者命令行模式。  \n项目地址：https://github.com/facebook/stetho  \n\n### 四、开发及编译环境\n1. Buck  \nfacebook 开源的 Android 编译工具，效率是 ant 的两倍。主要优点在于：  \n(1) 加快编译速度，通过并行利用多核 cpu 和跟踪不变资源减少增量编译时间实现  \n(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件  \n(3) 编译同时可生成单元测试结果  \n(4) 既可用于 IDE 编译也可用于持续集成编译  \n(5) facebook 持续优化中  \n项目地址：https://github.com/facebook/buck  \n\n1. Android Maven Plugin  \nAndroid Maven 插件，可用于对 android 三方依赖进行管理。在 J2EE 开发中，maven 是非常成熟的依赖库管理工具，可统一管理依赖库。  \n项目地址：https://github.com/jayway/maven-android-plugin  \n\n1. umeng-muti-channel-build-tool  \n渠道打包工具  \n项目地址：https://github.com/umeng/umeng-muti-channel-build-tool  \n另可参见 Google 的构建系统 Gradle：http://tools.android.com/tech-docs/new-build-system/user-guide  \n\n1. Genymotion  \n目前最好用最快的 android 模拟器  \n项目地址：http://www.genymotion.com/  \nAndroid studio 集成控件： http://plugins.jetbrains.com/plugin/7269?pr=idea  \nCyril Mottier 推荐：http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/  \n\n1. gradle-mvn-push  \n方便的将 Gradle 的 Artifacts 上传到 Maven 仓库  \n项目地址：https://github.com/chrisbanes/gradle-mvn-push  \n文档介绍：https://github.com/chrisbanes/gradle-mvn-push#usage  \n\n1. Android Emulator Plugin for Jenkins  \nAndroid 模拟器 jenkins 插件，用于 Jenkins 做持续集成时跑模拟器测试  \n项目地址：https://github.com/jenkinsci/android-emulator-plugin  \n\n1. Android Maven Plugin  \n管理应用所需要的依赖库。包括的构建工具有 Maven、Gradle、ant、sbt  \n项目地址：https://github.com/mosabua/maven-android-sdk-deployer  \n\n1. SDK Manager Plugin  \n下载和管理 Android SDK 的 Gradle 插件  \n项目地址：https://github.com/JakeWharton/sdk-manager-plugin  \n\n1. Gradle Protobuf Plugin  \n将.proto 文件转换成 Java 文件的 gradle 插件  \n项目地址：https://github.com/andrewkroh/gradle-protobuf-plugin  \n\n1. ChromeADB  \nChrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等  \n项目地址：https://github.com/importre/chromeadb  \n\n### 五、其他\n1. GT  \nAPP的随身调试平台，它是直接运行在手机上的“集成调试环境”(IDTE, Integrated Debug Environment)。  \n项目地址：https://github.com/TencentOpen/GT  \n文档介绍：http://gt.qq.com/docs.html  \n\n1. ViewServer  \n允许 app 运行在任何手机上都可以用 HierarchyViewer 查看  \n项目地址：https://github.com/romainguy/ViewServer  \n\n1. GridWichterle for Android  \n在整个系统上显示一个 grid，用来帮助查看应用布局及使得布局更美观，可设置 grid 网格大小和颜色，android 推荐 48dp 和 8dp，可见 Android Design Guidelines – Metrics and Grids，比起 hierarchyviewer 相差甚远，不过偶尔可用来作为布局查看工具。  \n项目地址：https://github.com/inmite/android-grid-wichterle  \nDemo 地址：https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle  \n\n1. Catlog  \n手机端 log 查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程 id 过滤、录制功能等  \n项目地址：https://github.com/nolanlawson/Catlog  \n在线演示：https://play.google.com/store/apps/details?id=com.nolanlawson.logcat  \n\n1. PID Cat  \n根据 package 查看 logcat 日志  \n项目地址：https://github.com/JakeWharton/pidcat  \n\n1. ACRA  \n应用崩溃信息日志上报到 GoogleDoc 工具，网页版展现结果三方开源地址 https://github.com/BenoitDuffez/crashreportsviewer  \n项目地址：https://github.com/ACRA/acra  \n文档介绍：https://github.com/ACRA/acra/wiki/BasicSetup  \n\n1. Crashlytics  \n提供丰富的应用崩溃信息日志收集  \n轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知  \n项目地址：http://www.crashlytics.com/  \n集成插件：[Android Studio, Eclipse and IntelliJ](http://try.crashlytics.com/sdk-android/?utm_source=blog&utm_medium=blog&utm_campaign=Announcing_android_studio_wp&utm_content=CTA_button)  \n\n1. Android Resource Navigator  \nchrome 插件，可以方便的查看 github 上 android 源码工程的 styles.xml 和 themes.xml。主要功能：  \n(1) 快速打开 android styles.xml themes.xml  \n(2) 方便在资源间跳转。styles.xml themes.xml 文件中资源链接跳转，可以方便跳转到某个资源  \n(3) 方便查找某个 style 和 theme。chrome 地址栏输入 arn+tab+搜索内容回车即可  \n(4) 自动下载不同分辨率下的 drawable  \n(5) 通过映射查找那些不是按照固定命名规则命名的 style 和 theme  \n项目地址：https://github.com/jgilfelt/android-resource-navigator  \n在线演示：https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&gl=GB  \n\n1. android-resource-remover  \n根据 lint 的提示删除项目中无用的资源，减少包的大小  \n项目地址：https://github.com/KeepSafe/android-resource-remover  \n\n1. Telescope  \n通过手势截图以特定主题发送到特定邮箱地址报告 Bug  \n项目地址：https://github.com/mattprecious/telescope  \n\n1. Complete Android Fragment & Activity Lifecycle  \n完整的 Android Fragment/Activity 生命周期图  \n项目地址：https://github.com/xxv/android-lifecycle  \n\n1. Bugsnag Notifier for Android  \n通过`Thread.UncaughtExceptionHandler`捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器  \n项目地址：https://github.com/bugsnag/bugsnag-android  \n文档介绍：https://github.com/bugsnag/bugsnag-android#installation--setup  \n\n1. Material Design Icons  \nGoogle Material Design 规范中的 Icon  \n项目地址：https://github.com/google/material-design-icons  \n\n1. scrollscreenshot  \nAndroid 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接  \n项目地址：https://github.com/PGSSoft/scrollscreenshot  \n\n1. droidicon  \n1600+的海量 Icon，包括 750+的 Material Design icons  \n项目地址：https://github.com/theDazzler/droidicon  \n\n1. leakcanary  \nAndroid 内存泄露检测工具，集成方便，出现泄露后报告直观  \n项目地址：https://github.com/square/leakcanary  \n\n1. CacheUtilsLibrary  \n将任何Java Object类型的数据序列化后写入缓存文件，将来使用时读取缓存文件并反序列化成对应Java Object的库  \n项目地址：https://github.com/westlinkin/CacheUtilsLibrary\n\n1. BlockCanary  \nBlockCanary是一个Android平台的一个非侵入式的性能监控组件，应用只需要实现一个抽象类，提供一些该组件需要的上下文环境，就可以在平时使用应用的时候检测主线程上的各种卡慢问题，并通过组件提供的各种信息分析出原因并进行修复。  \n项目地址: https://github.com/moduth/blockcanary  \n\n## 第五部分  \n主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow 大神，深挖大神的项目和 following，你会发现很多。  \n\n### 一、个人  \n1. JakeWharton  \n就职于 Square，绝对牛逼的大神，项目主要集中在 Android 版本兼容，ViewPager 及开发工具上  \nGithub 地址：https://github.com/JakeWharton  \n代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel    \npidcat 另外对 square 及其他开源项目有很多贡献  \n主页：http://jakewharton.com/  \n\n1. Chris Banes  \nGithub 地址：https://github.com/chrisbanes  \n代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh  \n主页：http://chris.banes.me/  \n\n1. Koushik Dutta  \n就职于 ClockworkMod  \nGithub 地址：https://github.com/koush  \n代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对 https://github.com/CyanogenMod 的开源项目有很多贡献  \n主页：http://koush.com/  \n\n1. Simon Vig  \nGithub 地址：https://github.com/SimonVT  \n代表作：android-menudrawer，MessageBar  \n主页：http://simonvt.net/  \n\n1. Manuel Peinado  \nGithub 地址：https://github.com/ManuelPeinado  \n代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  \n\n1. Emil Sj?lander  \nGithub 地址：https://github.com/emilsjolander  \n代表作：StickyListHeaders，sprinkles，android-FlipView  \n主页：http://emilsjolander.se/  \n\n1. greenrobot  \nGithub 地址：https://github.com/greenrobot  \n代表作：greenDAO，EventBus  \n主页：http://greenrobot.de/  \n\n1. Jeff Gilfelt  \nGithub 地址：https://github.com/jgilfelt  \n代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper  \n主页：http://jeffgilfelt.com  \n\n1. Romain Guy  \nAndroid team 成员(2013.10 已离开 Android team，仍在 Google)  \nGithub 地址：https://github.com/romainguy  \n代表作：ViewServer  \n主页：http://www.curious-creature.org/category/android/  \n個人攝影作品：http://www.flickr.com/photos/romainguy  \n\n1. sephiroth74  \n就职于 Aviary.com  \nGithub 地址：https://github.com/sephiroth74  \n代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF  \n主页：http://www.sephiroth.it/  \n\n1. Cyril Mottier  \nGoogle 开发者专家认证，发布一些 Android 技巧及文章  \nGithub 地址：https://github.com/cyrilmottier  \n代表作：GreenDroid，Polaris  \n主页：http://cyrilmottier.com/  \n\n### 二、组织  \n1. Square  \n有态度有良心的企业，很多不错的分享  \nGithub 地址：https://github.com/square  \n代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon 等等  \n主页：http://square.github.io/  \n\n1. Inmite s.r.o.  \nGithub 地址：https://github.com/inmite  \n代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek  \n主页：http://www.inmite.eu/  \n\n### 三、博客  \n[部分国外著名 Android 开发者信息](https://github.com/android-cn/android-dev-com)  \n\n## 注意\n> 本文转自——**[Trinea 汇总的开源项目](https://github.com/Trinea/android-open-project)**\n> 欢迎大家关注他的微信公众号：codekk。二维码如下：  \n>  专注于 Android 开源分享、源码解析、框架设计、Android 内推。  \n>   ![img](http://www.trinea.cn/wp-content/uploads/2016/01/weixin-codekk-160.jpg)  \n>    他的网站：[www.codekk.com](http://a.codekk.com)\n>  **关于trinea，欢迎关注**  \n>  微博：<a title=\"Android 技术及移动互联网分享\" href=\"http://weibo.com/trinea?s=6cm7D0\" target=\"_blank\">Trinea</a>&nbsp;&nbsp;&nbsp;&nbsp;主页：<a title=\"关注于 Android、Java、性能优化、开源项目\" href=\"http://www.trinea.cn/\" target=\"_blank\">trinea.cn</a> \n\n## 推荐\n> [Android 开源项目源码解析(Volley、UIL、Dagger、EventBus、插件化库等分析)](http://a.codekk.com)\n> \n> [Android 职位内部推荐(阿里、腾讯、百度、京东、滴滴、美团、58、华为、网易、魅族等)](http://j.codekk.com)","source":"_posts/2016-03-25.android-open-project.md","raw":"---\ntitle: Android 开源项目分类汇总\ncomments: true\nfancybox: false\ntoc: true\ndate: 2016-03-25 22:15:00\ntags: \n- Android\n- 开源项目汇总\ncategories:\n- Android\ndescription:\npermalink: android-open-project\ntop: \n---\n## 目前包括：\n>1. Android 开源项目第一篇——个性化控件(View)篇\n>*包括：ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style、其他*  \n>1. Android 开源项目第二篇——工具库篇\n>*包括：依赖注入、图片缓存、网络请求、数据库 ORM 工具包、Android 公共库、高版本向低版本兼容库、多媒体、事件总线、传感器、安全、插件化、文件、其他*  \n>1. Android 开源项目第三篇——优秀项目篇\n>*比较有意思的完整的 Android 项目*  \n>1. Android 开源项目第四篇——开发及测试工具篇\n>*包括：开发效率工具、开发自测相关、测试工具、开发及编译环境、其他*  \n>1. Android 开源项目第五篇——优秀个人和团体篇\n>*乐于分享并且有一些很不错的开源项目的个人和组织，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛*  \n<!--more-->\n\n### 提示\n以下链接网址若存在不能访问，请自行尝试翻墙，推荐使用GreenVPN\n[![好用的GreenVPN](/resources/greenvpn.gif)](http://gjsq.me/15038648)\n\n## 第一部分 个性化控件(View)\n主要介绍那些不错个性化的 View，包括 ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style 等等。  \n\n### 一、ListView\n1. android-pulltorefresh  \n一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment 上下左右拉动刷新，比下面 johannilsson 那个只支持 ListView 的强大的多。并且它实现的下拉刷新 ListView 在 item 不足一屏情况下也不会显示刷新提示，体验更好。  \n项目地址：https://github.com/chrisbanes/Android-PullToRefresh  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true  \nAPP 示例：新浪微博各个页面 \n\n1. android-pulltorefresh-listview  \n下拉刷新 ListView，这个被很多人使用的项目实际有不少 bug，推荐使用 [android-Ultra-Pull-to-Refresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh)  \n项目地址：https://github.com/johannilsson/android-pulltorefresh  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true  \n\n3. android-Ultra-Pull-to-Refresh  \n下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 `API LEVEL >= 8`  \n项目地址：https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh  \n原理剖析文档：[android-Ultra-Pull-to-Refresh](http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh 源码解析)  \nDemo 地址：https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true  \n\n1. Android-PullToRefreshRecyclerView  \n支持下拉刷新的RecyclerView，同时支持滑动到底部自动加载数据、给RecyclerView添加Header。并且不更改原有RecyclerView的逻辑。  \n项目地址：https://github.com/HomHomLin/Android-PullToRefreshRecyclerView。    \nDemo地址：https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk  \n\n1. DragSortListView  \n拖动排序的 ListView，同时支持 ListView 滑动 item 删除，各个 Item 高度不一、单选、复选、CursorAdapter 做为适配器、拖动背景变化等  \n项目地址：https://github.com/bauerca/drag-sort-listview  \nDemo 地址：https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv  \nAPP 示例：Wordpress Android  \n\n1. SwipeListView  \n支持定义 ListView 左右滑动事件，支持左右滑动位移，支持定义动画时间  \n项目地址：https://github.com/47deg/android-swipelistview  \nDemo 地址：https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview  \nAPP 示例：微信 \n\n1. SlideAndDragListView  \n支持ListView的Item的拖动排序、左右滑动事件，可自定义左右滑动显示文字、图标、位移，同时支持onItemClick、onItemLongClick等监听器，提供丰富的回调接口。  \n项目地址：https://github.com/yydcdut/SlideAndDragListView  \nDemo 地址：https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true  \nAPP 示例：Android 手机QQ 5.0  \n\n1. Android-SwipeToDismiss  \n滑动 Item 消失 ListView，支持 3.0 以下版本见：https://github.com/JakeWharton/SwipeToDismissNOA  \n项目地址：https://github.com/romannurik/Android-SwipeToDismiss  \nDemo 地址：https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code  \n\n1. RecyclerViewSwipeDismiss  \n轻量级支持 support-v7 中的 RecyclerView 的滑动删除(Swipe to dismiss)行为，不需要修改源代码，只要简单的绑定`onTouchListener`  \n项目地址：https://github.com/CodeFalling/RecyclerViewSwipeDismiss  \n\n1. PinnedHeaderExpandableListView  \n首先它是一个 ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩  \n项目地址：https://github.com/singwhatiwanna/PinnedHeaderExpandableListView  \nAPP 示例：百度手机卫士垃圾清理界面  \n\n1. StickyListHeaders  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView，支持快速滑动，支持 Android2.3 及以上  \n项目地址：https://github.com/emilsjolander/StickyListHeaders  \nAPP 示例：Android 4.0 联系人  \n\n1. pinned-section-listview  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView  \n项目地址：https://github.com/beworker/pinned-section-listview  \n\n1. PinnedHeaderListView  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView  \n项目地址：https://github.com/JimiSmith/PinnedHeaderListView  \n\n1. QuickReturn  \nListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现  \n项目地址：https://github.com/lawloretienne/QuickReturn  \nDemo 地址：https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn  \n\n1. QuickReturnHeader  \nListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现  \n项目地址：https://github.com/ManuelPeinado/QuickReturnHeader  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true  \nAPP 示例：google plus  \n\n1. IndexableListView  \nListView 右侧会显示 item 首字母快捷索引，点击可快速滑动到某个 item  \n项目地址：https://github.com/woozzu/IndexableListView  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true  \nAPP 示例：微信通讯录、小米联系人  \n\n1. CustomFastScrollView  \nListView 快速滑动，同时屏幕中间 PopupWindows 显示滑动到的 item 内容或首字母  \n项目地址：https://github.com/nolanlawson/CustomFastScrollViewDemo  \n\n1. Android-ScrollBarPanel  \nListView 滑动时固定的 Panel 指示显示在 scrollbar 旁边  \n项目地址：https://github.com/rno/Android-ScrollBarPanel  \n\n1. SlideExpandableListView  \n用户点击 listView item 滑出固定区域，其他 item 的区域收缩  \n项目地址：https://github.com/tjerkw/Android-SlideExpandableListView  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true  \n\n1. JazzyListView  \nListView 及 GridView item 以特殊动画效果进入屏幕，效果包括 grow、cards、curl、wave、flip、fly 等等  \n项目地址：https://github.com/twotoasters/JazzyListView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample  \n在线演示：http://lab.hakim.se/scroll-effects/  \n\n1. ListViewAnimations  \n带 Item 显示动画的 ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等  \n项目地址：https://github.com/nhaarman/ListViewAnimations  \nDemo 地址：https://play.google.com/store/apps/details?id=com.haarman.listviewanimations  \nAPP 示例：Google plus、Google Now 卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的 ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  \n\n1. DevsmartLib-Android  \n横向 ListView  \n项目地址：https://github.com/dinocore1/DevsmartLib-Android  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true  \n\n1. TwoWayView  \n横向 ListView 的效果，继承自 AdapterView  \n项目地址：https://github.com/lucasr/twoway-view  \n\n1. HorizontalVariableListView  \n支持 Item 宽度不一致的 ListView  \n项目地址：https://github.com/sephiroth74/HorizontalVariableListView  \n\n1. LinearListView  \n用 LinearLayout 实现的 ListView，可解决多个 ListView 并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍  \n项目地址：https://github.com/frankiesardo/LinearListView  \n\n1. MultiChoiceAdapter  \n支持多选的 ListView Adapter  \n项目地址：https://github.com/ManuelPeinado/MultiChoiceAdapter  \nDemo 地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo  \n\n1. EnhancedListView  \n支持横向滑动删除列表项以及撤销删除的 ListView，该项目的前身是[SwipeToDismissUndoList](https://github.com/timroes/SwipeToDismissUndoList)  \n项目地址：https://github.com/timroes/EnhancedListView  \nDemo 地址：https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&rdid=de.timroes.android.listviewdemo  \n\n1. ListBuddies  \n自动滚动的双列 ListView ，两个 ListView 滚动速度不一致，有视差效果  \n项目地址：https://github.com/jpardogo/ListBuddies  \nDemo 地址：https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies  \n\n1. SwipeMenuListView  \n针对 ListView item 的侧滑菜单  \n项目地址：https://github.com/baoyongzhang/SwipeMenuListView  \nAPP 示例：手机 QQV5.0  \n\n1. PagingListView  \n分页加载的 ListView。当滑动到 ListView 底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。  \n项目地址：https://github.com/nicolasjafelle/PagingListView  \n\n1. PullZoomView  \n支持下拉时 HeaderView 缩放的 ListView、ScrollView  \n项目地址：https://github.com/Frank-Zhu/PullZoomView  \n\n1. PullToZoomInListView  \n滑动 ListView 时使其 HeaderView 跟随滑动缩放  \n项目地址：https://github.com/matrixxun/PullToZoomInListView  \n\n1. CalendarListview  \n实现每个月一行日历效果的 ListView  \n项目地址：https://github.com/traex/CalendarListview  \n原理剖析文档：[CalendarListview](http://a.codekk.com/detail/Android/Rogary/CalendarListView%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90)  \n\n1. sticky-headers-recyclerview  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ListView，采用 support-v7 中的 RecyclerView 实现  \n项目地址：https://github.com/timehop/sticky-headers-recyclerview  \n\n1. PullSeparateListView  \n到达顶部或底部继续拉动时，实现 Item 间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有 Item 都会分离 (2)部分分离模式，以点击位置为分界点，部分 item 分离  \n项目地址：https://github.com/chiemy/PullSeparateListView  \n\n1. ExpandableLayout  \nHeader 和 Content Item 都可以展开的 ExpandableListview  \n项目地址：https://github.com/traex/ExpandableLayout  \n\n1. PagedHeadListView  \n支持 paginated header 以及 material page indicator 的 ListView.  \n项目地址：https://github.com/JorgeCastilloPrz/PagedHeadListView  \n\n1. CustomSwipeListView  \n支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。  \n项目地址：https://github.com/xyczero/Android-CustomSwipeListView  \nDemo 地址：[Download here](http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk)  \n\n1. Pull-to-Refresh.Rentals-Android  \n提供一个简单可以自定义的下拉刷新实现，[Yalantis](http://yalantis.com/) 出品。  \n项目地址：https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android  \n\n1. ScrollerCalendar  \n实现每行显示一年的 12 个月份的 RecyclerView 年历  \n项目地址：https://github.com/guanchao/ScrollerCalendar  \n\n1. ExtractWordView  \n一个可以提取单词的 ListView,支持\"放大镜\"效果。  \n项目地址：https://github.com/jcodeing/ExtractWordView  \nDemo 地址：[Download here](https://raw.githubusercontent.com/jcodeing/ExtractWordView/master/ExtractWordView-demo.apk)  \n\n1. FlyRefresh  \n支持 ListView, GridView, RecyclerView, ScrollView 的下拉刷新  \n项目地址：https://github.com/race604/FlyRefresh  \n\n1. MVCHelper  \n实现下拉刷新，滚动底部自动加载更多，分页加载，自动切换显示网络失败布局，暂无数据布局，支持任意 view，真正的 MVC 架构  \n支持切换主流下拉刷新框架 Android-PullToRefresh-Library,android-Ultra-Pull-To-Refresh-library，SwipeRefreshLayout  \n项目地址：https://github.com/LuckyJayce/MVCHelper  \nDemo 地址：https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true  \n\n1. RecyclerViewSwipeDismiss  \n支持滑动 Item 操作、点击展开、拖动排序、展开后拖动排序等特性的 RecyclerView  \n项目地址：https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview  \n视频：http://www.youtube.com/watch?feature=player_embedded&v=S7cSwMArjUQ  \n\n1. WaterDropListView  \n模仿 iOS 下拉刷新“水滴”效果，支持下拉刷新和上拉加载  \n项目地址：https://github.com/THEONE10211024/WaterDropListView  \n\n1. PopupListView  \n實現ListItem 點擊後置頂並可顯示客製化添加的item的內部View 的ListView  \n项目地址：https://github.com/s8871404/PopupListView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample  \n\n1. CircleRefreshLayout  \n一个包含有趣的动画的自定义下拉刷新布局  \n项目地址：https://github.com/tuesda/CircleRefreshLayout  \n  \n1. EasyRecyclerView  \n一款简单易用的EasyRecyclerView\n1.提供EasyRecyclerView，不需要写太多RecyclerView的配置代码  \n2.提供好一个可以适配单布局和多布局的RecyclerViewAdapter  \n3.提供了分割线的实现类，只需要传入一个DrawableId  \n项目地址：https://github.com/CaMnter/EasyRecyclerView  \n\n1. CanRefresh\n可适配所有视图的下拉刷新上拉加载，并支持各种风格  \n项目地址：https://github.com/canyinghao/CanRefresh  \n\n### 二、ActionBar\n1. ActionBarSherlock  \n为 Android 所有版本提供统一的 ActionBar，解决 4.0 以下 ActionBar 的适配问题  \n项目地址：https://github.com/JakeWharton/ActionBarSherlock  \nDemo 地址：https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos  \n标签：兼容库, ActionBar  \n\n1. ActionBar-PullToRefresh  \n下拉刷新，ActionBar 出现加载中提示  \n项目地址：https://github.com/chrisbanes/ActionBar-PullToRefresh  \nDemo 地址：https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock  \nAPP 示例：Gmail，Google Plus，知乎等  \n\n1. FadingActionBar  \nListView 向下滚动逐渐显现的 ActionBar  \n项目地址：https://github.com/ManuelPeinado/FadingActionBar  \nDemo 地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo  \nAPP 示例：google music，知乎  \n\n1. NotBoringActionBar  \ngoogle music 下拉收缩的 ActionBar  \n项目地址：https://github.com/flavienlaurent/NotBoringActionBar  \nDemo 地址：http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/  \nAPP 示例：Google 音乐  \n\n1. RefreshActionItem  \n带进度显示和刷新按钮的 ActionBar  \n项目地址：https://github.com/ManuelPeinado/RefreshActionItem  \nDemo 地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo  \nAPP 示例：The New York Times，DevAppsDirect  \n\n1. GlassActionBar  \n类似玻璃的有一定透明度的 ActionBar  \n项目地址：https://github.com/ManuelPeinado/GlassActionBar  \nDemo 地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo  \nAPP 示例：google music  \n\n### 三、Menu\n1. MenuDrawer  \n滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前 View 处于上下层，支持 Windows 边缘、ListView 边缘、ViewPager 变化划出菜单等。  \n项目地址：https://github.com/SimonVT/android-menudrawer  \nDemo 地址：http://simonvt.github.io/android-menudrawer/  \nAPP 示例：Gmail、Google Music 等大部分 google app  \n\n1. SlidingMenu  \n滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单 zoom、scale、slide up 三种动画样式出现。与 MenuDrawer 相比而言，SlidingMenu 支持菜单动画样式出现，MenuDrawer 支持菜单 view 处于内容的上下层  \n项目地址：https://github.com/jfeinstein10/SlidingMenu  \n原理剖析文档：[SlidingMenu](http://a.codekk.com/detail/Android/huxian99/SlidingMenu 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=com.slidingmenu.example  \nAPP 示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  \n\n1. ArcMenu  \n支持类似 Path 的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单  \n项目地址：https://github.com/daCapricorn/ArcMenu  \nhttps://dl.dropboxusercontent.com/u/11369687/preview1.png  \nhttps://dl.dropboxusercontent.com/u/11369687/raymenu.png  \nAPP 示例：Path  \n\n1. android-satellite-menu  \n类似 Path 的左下角动画旋转菜单  \n项目地址：https://github.com/siyamed/android-satellite-menu  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true  \nAPP 示例：Path  \n\n1. radial-menu-widget  \n圆形菜单，支持二级菜单  \n项目地址：https://code.google.com/p/radial-menu-widget/  \n\n1. Android Wheel Menu  \n圆形旋转选取菜单  \n项目地址：https://github.com/anupcowkur/Android-Wheel-Menu  \n\n1. FoldingNavigationDrawer  \n滑动并以折叠方式打开菜单  \n项目地址：https://github.com/tibi1712/FoldingNavigationDrawer-Android  \nDemo 地址：https://play.google.com/store/apps/details?id=com.ptr.folding.sample  \n\n1. AndroidResideMenu  \n仿 Dribbble 的边栏菜单  \n项目地址：https://github.com/SpecialCyCi/AndroidResideMenu  \n\n1. CircularFloatingActionMenu  \n一个可定制的圆形的浮动菜单控件，类似于 Path 的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。  \n项目地址：https://github.com/oguzbilgener/CircularFloatingActionMenu  \n原理剖析文档：[CircularFloatingActionMenu](http://a.codekk.com/detail/Android/cpacm/CircularFloatingActionMenu 源码解析)  \nDemo 地址：https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples  \n\n1. NavigationDrawerSI  \nNavigation Drawer 的一个简单实现，滑动并以折叠方式打开菜单  \n项目地址：https://github.com/mmBs/NavigationDrawerSI  \nDemo 地址：https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi  \nAPP 示例：https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi  \n\n1. DragLayout  \n使用 support.v4 包下的 ViewDragHelper 实现 QQ5.0 侧滑  \n项目地址：https://github.com/BlueMor/DragLayout  \n\n1. LDrawer  \nMaterial Design 形式的展开折叠 Icon  \n项目地址：https://github.com/ikimuhendis/LDrawer  \n\n1. Floating Action Button  \n悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置  \n项目地址：https://github.com/shamanland/floating-action-button  \n\n1. Side-Menu.Android  \n分类侧滑菜单，[Yalantis](http://yalantis.com/) 出品。  \n项目地址：https://github.com/Yalantis/Side-Menu.Android  \n原理剖析文档：[Side-Menu.Android](http://a.codekk.com/detail/Android/cpacm/Side Menu.Android 源码解析)  \n\n1. Context-Menu.Android  \n可以方便快速集成漂亮带有动画效果的上下文菜单，[Yalantis](http://yalantis.com/)出品。  \n项目地址：https://github.com/Yalantis/Context-Menu.Android  \n\n1. Droppy  \n支持多种样式的下拉菜单  \n项目地址：https://github.com/shehabic/Droppy  \n\n1. MaterialDrawer  \nMaterial Design 风格的导航抽屉，提供简便且强大的定制功能  \n项目地址：https://github.com/mikepenz/MaterialDrawer  \nDemo 地址：https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app  \n\n1. SlideBottomPanel  \n底部划出菜单，滑动时背景图透明度渐变，支持嵌套 LiewView 或 ScrollView  \n项目地址：[https://github.com/kingideayou/SlideBottomPanel](https://github.com/kingideayou/SlideBottomPanel)  \nDemo 地址：[SlideBottomPanelDemo 下载](https://github.com/kingideayou/SlideBottomPanel/raw/master/apk/SlideBottomPanelDemo.apk)  \n\n1. FlowingDrawer  \n带手势流动效果侧滑菜单\n项目地址：[https://github.com/mxn21/FlowingDrawer](https://github.com/mxn21/FlowingDrawer)\n\n### 四、ViewPager 、Gallery\n1. AdvancedPagerSlidingTabStrip   \n一个完美兼容ViewPager的导航栏组件；可以自定义TabView；能动态加载Tab上的Icon图片； 能显示Tab的消息数量和提示小圆点。  \n项目地址：https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip\n\n1. ConvenientBanner  \n通用的广告栏控件，让你轻松实现广告头效果。支持无限循环，可以设置自动翻页和时间(而且非常智能，手指触碰则暂停翻页，离开自动开始翻页。你也可以设置在界面onPause的时候不进行自动翻页，onResume之后继续自动翻页)，并且提供多种翻页特效。 对比其他广告栏控件，大多都需要对源码进行改动才能加载网络图片，或者帮你集成不是你所需要的图片缓存库。而这个库能让有代码洁癖的你欢喜，不需要对库源码进行修改你就可以使用任何你喜欢的网络图片库进行配合。\n项目地址：https://github.com/saiwu-bigkoo/Android-ConvenientBanner  \n\n1. Android-ViewPagerIndicator  \n配合 ViewPager 使用的 Indicator，支持各种位置和样式  \n项目地址：https://github.com/JakeWharton/Android-ViewPagerIndicator  \nDemo 地址：https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample  \nAPP 示例：太多了。。  \n\n1. JazzyViewPager  \n支持 Fragment 切换动画的 ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用 ViewPager 实现而已  \n项目地址：https://github.com/jfeinstein10/JazzyViewPager  \nDemo 地址：https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true  \n\n1. JellyViewPager  \n特殊切换动画的 ViewPager  \n项目地址：https://github.com/chiemy/JellyViewPager  \n\n1. Android-DirectionalViewPager  \n支持横向和纵向(垂直)的 ViewPager  \n项目地址：https://github.com/JakeWharton/Android-DirectionalViewPager  \nDemo 地址：https://market.android.com/details?id=com.directionalviewpager.sample  \n\n1. FancyCoverFlow  \n支持 Item 切换动画效果的类似 Gallery View  \n项目地址：https://github.com/davidschreiber/FancyCoverFlow  \nDemo 地址：https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples  \n\n1. AndroidTouchGallery  \n支持双击或双指缩放的 Gallery(用 ViewPager 实现)，相比下面的 PhotoView，在被放大后依然能滑到下一个 item，并且支持直接从 url 和文件中获取图片，  \n项目地址：https://github.com/Dreddik/AndroidTouchGallery  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true  \nAPP 示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  \n\n1. Android Auto Scroll ViewPager  \nAndroid 自动滚动 轮播循环的 ViewPager  \n项目地址：https://github.com/Trinea/android-auto-scroll-view-pager  \nDemo 地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/auto-scroll-view-pager/  \n\n1. Android PagerSlidingTabStrip  \n配合 ViewPager 使用的 Indicator，支持 ViewPager Scroll 时 Indicator 联动  \n项目地址：https://github.com/astuetz/PagerSlidingTabStrip  \n原理剖析文档：[Android PagerSlidingTabStrip](http://a.codekk.com/detail/Android/ayyb1988/PagerSlidingTabStrip 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample  \n\n1. ViewPager3D  \nViewPager3D 效果  \n项目地址：https://github.com/inovex/ViewPager3D  \n\n1. AnimaTabsview  \n仿网易云音乐标签切换的动画,带透明小三角  \n项目地址：https://github.com/wuyexiong/transparent-over-animtabsview  \n在线演示：http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html  \n\n1. LoopingViewPager  \n无限循环的 ViewPager  \n项目地址：https://github.com/imbryk/LoopingViewPager  \n\n1. android_page_curl  \n翻书卷曲效果  \n项目地址：https://github.com/harism/android_page_curl  \n在线演示：https://www.youtube.com/watch?v=iwu7P5PCpsw  \nAPP 示例：iReader  \n\n1. ViewPagerIndicator  \n简化并实现 android 的 TabHost 效果，顶部滑动 tab，引导页，支持自定义 tab 样式,自定义滑动块样式和位置,自定义切换 tab 的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动  \n项目地址：https://github.com/LuckyJayce/ViewPagerIndicator  \n\n1. ScreenSlideIndicator  \n轻量级的圆形 Indicadtor，位置可以自由调整，不会对 ViewPager 产生任何影响。  \n项目地址：[ScreenSlidePager](https://github.com/LyndonChin/Android-ScreenSlidePager)  \n\n1. SmartTabLayout  \n自定义的 Tab title strip，基于 Google Samples 中的 android-SlidingTabBasic 项目，滑动时 Indicator 可平滑过渡。  \n项目地址：https://github.com/ogaclejapan/SmartTabLayout  \nDemo 地址：https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo  \n\n1. AndroidImageSlider  \nAndroid 图片滑动  \n项目地址：https://github.com/daimajia/AndroidImageSlider  \nApp示例：https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk  \n\n1. RecyclerViewPager  \n完全继承自 RecyclerView，可以自定义触发翻页的距离，可自定义翻页速度，支持垂直方向的 ViewPager，支持 Fragment。  \n项目地址：[RecyclerViewPager](https://github.com/lsjwzh/RecyclerViewPager)  \n\n1. CircleIndicator  \n轻量级ViewPager指示器,支持三种不同的模式    \n项目地址：[CircleIndicator]( https://github.com/THEONE10211024/CircleIndicator)  \n\n1. EasySlidingTabs  \n一款简单、易用的滑动标签页  \n项目地址： https://github.com/CaMnter/EasySlidingTabs  \n\n### 五、GridView\n1. StaggeredGridView  \n允许非对齐行的 GridView，类似 Pinterest 的瀑布流，并且跟 ListView 一样自带 View 缓存，继承自 ViewGroup  \n项目地址：https://github.com/maurycyw/StaggeredGridView  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true  \nAPP 示例：Pinterest 等  \n\n1. AndroidStaggeredGrid  \n允许非对齐行的 GridView，类似 Pinterest 的瀑布流，继承自 AbsListView  \n项目地址：https://github.com/etsy/AndroidStaggeredGrid  \nAPP 示例：Pinterest 等  \n\n1. PinterestLikeAdapterView  \n允许非对齐行的 GridView，类似 Pinterest 的瀑布流，允许下拉刷新  \n项目地址：https://github.com/GDG-Korea/PinterestLikeAdapterView  \nAPP 示例：Pinterest 等  \n\n1. DraggableGridView  \nItem 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的单屏效果，可屏幕自动上下滚动进行 Item 移动交换，多屏效果见下面 PagedDragDropGrid  \n项目地址：https://github.com/thquinn/DraggableGridView  \nDemo 地址：https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true  \n也可以自定义item的宽高和每行的个数，并且修改交换逻辑，当移动到另一个item时就进行交换，删除滚动逻辑。\n项目地址：[DraggableGridView](https://github.com/andyken/DraggableGridView)  \n\n1. StickyGridHeaders  \nGroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 GridView  \n项目地址：https://github.com/TonicArtos/StickyGridHeaders  \n\n1. PagedDragDropGrid  \nItem 可拖动交换位置、拖动删除的自定义控件，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行 Item 移动交换，可拖动进行删除，单屏效果见上面 DraggableGridView  \n项目地址：https://github.com/mrKlar/PagedDragDropGrid  \n在线演示：http://youtu.be/FYTSRfthSuQ  \n\n1. Android-DraggableGridViewPager  \nItem 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可屏幕自动左右滚动进行 Item 移动交换，单屏效果见上面 DraggableGridView  \n项目地址：https://github.com/zzhouj/Android-DraggableGridViewPager  \nDemo 地址：https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true  \n\n1. TwoWayGridView  \n可横向滚动的 GridView  \n项目地址：https://github.com/jess-anders/two-way-gridview  \n\n1. PagingGridView  \n分页加载的 GridView。当滑动到 GridView 底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。  \n项目地址：https://github.com/nicolasjafelle/PagingGridView  \n\n1. AsymmetricGridView  \n一个支持跨行和跨列可变 Item 大小的 GridView  \n项目地址：https://github.com/felipecsl/AsymmetricGridView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app  \n\n1. GridView with Header and Footer  \n和`ListView`一样带头部和底部的`GridView`，用法和`ListView`一样  \n项目地址：https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter  \n\n### 六、ImageView\n1. PhotoView  \n支持双击或双指缩放的 ImageView，在 ViewPager 等 Scrolling view 中正常使用，相比上面的 AndroidTouchGallery，不仅支持 ViewPager，同时支持单个 ImageView  \n项目地址：https://github.com/chrisbanes/PhotoView  \n原理剖析文档：[PhotoView](http://a.codekk.com/detail/Android/dkmeteor/PhotoView 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample  \nAPP 示例：photup  \n\n1. Fresco-ImageView  \nFresco-ImageView是一种Android平台的图像控件，底层是对Fresco的封装，可以异步加载网络图片、项目资源和本地图片，并且支持双指缩放、图片的基本处理以及Fresco的所有特性。  \n项目地址：https://github.com/HomHomLin/FrescoImageView。  \n\n1. android-gif-drawable  \n支持 gif 显示的 view，用 jni 实现的，编译生成 so 库后直接 xml 定义 view 即可，而且本身不依赖于其他开源项目所以相对下面的 ImageViewEx 简单的多  \n项目地址：https://github.com/koral--/android-gif-drawable  \n\n1. ImageViewEx  \n支持 Gif 显示的 ImageView，依赖很多，编译过程很繁琐  \n项目地址：https://github.com/frapontillo/ImageViewEx  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true  \n\n1. RoundedImageView  \n带圆角的 ImageView  \n项目地址：https://github.com/vinc3m1/RoundedImageView  \n\n1. SelectableRoundedImageView  \nImageView 允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边  \n项目地址：https://github.com/pungrue26/SelectableRoundedImageView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.joooonho  \n\n1. ColorArt  \n根据图片的均色设置背景色显示文字和图片，类似 itune11 中效果  \n项目地址：https://github.com/MichaelEvans/ColorArt  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true  \n\n1. CircleImageView  \n圆形的 ImageView  \n项目地址：https://github.com/hdodenhof/CircleImageView  \n\n1. ImageViewZoom  \n支持放大和平移的 ImageView  \n项目地址：https://github.com/sephiroth74/ImageViewZoom  \nAPP 示例：https://play.google.com/store/apps/details?id=com.aviary.android.feather  \n\n1. KenBurnsView  \n实现 Ken Burns effect 效果，达到身临其境效果的 ImageView  \n项目地址：https://github.com/flavioarfaria/KenBurnsView  \n\n1. CustomShapeImageView  \n各种形状的 ImageView, 相比上面的圆形 ImageView，多了更多形状  \n项目地址：https://github.com/MostafaGazar/CustomShapeImageView  \n\n1. Shape Image View  \n可以自定义各种形状的 ImageView, 并且支持边框  \n项目地址：https://github.com/siyamed/android-shape-imageview  \n\n1. TextDrawable  \n一个用于生成带有文本或者字母的图片的轻量级库。扩展自 Drawable，因此可用于现有/自定义/网络等 ImageView 类，并且包含一个流接口用于创建 drawables 以及一个定制的 ColorGenerator  \n项目地址：https://github.com/amulyakhare/TextDrawable  \n\n1. android-smart-image-view  \n可从 URL 或 contact address book 加载图片的 ImageView，支持缓存  \n项目地址：https://github.com/loopj/android-smart-image-view  \n\n1. PhotoView  \n支持双指/双击缩放的ImageView,支持从一个PhotoView缩放到另外一个PhotoView(点击图片放大预览),相对于其他PhototView有更加平滑的缩放,平移的动画,并且支持所有的ScaleType,可以作为普通的ImageView使用  \n项目地址：https://github.com/bm-x/PhotoView  \n\n### 七、ProgressBar\n1. SmoothProgressBar  \n水平进度条  \n项目地址：https://github.com/castorflex/SmoothProgressBar  \nDemo 地址：https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample  \n\n1. MaterialProgessBar  \nMaterial Design 的进度条，支持 Android 4.0  \n项目地址：https://github.com/DreaminginCodeZH/MaterialProgressBar  \nDemo 地址：https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk  \n\n1. ProgressWheel  \n支持进度显示的圆形 ProgressBar  \n项目地址：https://github.com/Todd-Davies/ProgressWheel  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true  \n\n1. android-square-progressbar  \n在图片周围显示进度  \n项目地址：https://github.com/mrwonderman/android-square-progressbar  \nDemo 地址：https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example  \nAPP 示例：square  \n\n1. HoloCircularProgressBar  \nAndroid4.1 时钟 App 样式  \n项目地址：https://github.com/passsy/android-HoloCircularProgressBar  \nAPP 示例：Android4.1 时钟 App  \n\n1. ProgressButton  \n通过图钉的不同状态显示进度  \n项目地址：https://github.com/f2prateek/progressbutton  \n文档介绍：http://f2prateek.com/progressbutton/  \n\n1. GoogleProgressBar  \n类似 google 多个圆形卡片翻转的 progressBar  \n项目地址：https://github.com/jpardogo/GoogleProgressBar  \n\n1. TH-ProgressButton  \n带圆形进度显示的按钮  \n项目地址：https://github.com/torryharris/TH-ProgressButton  \n\n1. NumberProgressBar  \n带数字进度的进度条  \n项目地址：https://github.com/daimajia/NumberProgressBar  \n\n1. CircularProgressDrawable  \n带圆形进度显示的进度条  \n项目地址：https://github.com/Sefford/CircularProgressDrawable  \n\n1. Android-RoundCornerProgressBar  \nAndroid 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。  \n项目地址：https://github.com/akexorcist/Android-RoundCornerProgressBar  \n\n1. circular-progress-button  \n带进度显示的 Button  \n项目地址：https://github.com/dmytrodanylyk/circular-progress-button  \n\n1. WaveView  \n一个波纹效果的 View，可用来做 ProgressBar  \n项目地址：https://github.com/john990/WaveView  \nDemo 地址：https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk  \n\n1. MaterialLoadingProgressBar  \n抽取自 SwipeRefreshLayout 的 Material Design 进度指示器  \n项目地址：https://github.com/lsjwzh/MaterialLoadingProgressBar  \n\n1. MetaballLoading  \nA 2d metaball loading\n项目地址：https://github.com/dodola/MetaballLoading\n\n1. SectorProgressView  \n一个圆形或环形的进度显示控件，用圆中扇形的角度大小来表示进度信息\n项目地址：https://github.com/timqi/SectorProgressView\nDemo：[apk download](https://github.com/timqi/SectorProgressView/raw/master/art/example.apk) \n\n1. CircularFillableLoaders  \n一个可以用于闪屏或者其他地方加载的控件\n项目地址：https://github.com/lopspower/CircularFillableLoaders\nDemo地址：(https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample) \n\n1. PinWheel  \n一个旋转的大风车Dialog \n项目地址：https://github.com/codingWang/PinWheel\n\n1. ColorArcProgressBar\n一个可定制的圆形进度条，通过xml参数配置可实现QQ健康中步数的弧形进度显示、仪盘表显示速度、最常见的下载进度条等功能。\n项目地址：https://github.com/Shinelw/ColorArcProgressBar\n\n### 八、TextView\n包括 TextView 及所有继承自 TextView 控件，如 EditText、Button、RadioButton  \n\n1. android-flowtextview  \n文字自动环绕其他 View 的 Layout  \n项目地址：https://github.com/deano2390/FlowTextView  \n\n1. Android Form EditText  \n验证输入合法性的编辑框，支持输入、英文、ip、url 等多种正则验证  \n项目地址：https://github.com/vekexasia/android-edittext-validator  \nDemo 地址：https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample  \n\n1. Emojicon  \n支持 emojis 的 TextView 和 EditText  \n项目地址：https://github.com/rockerhieu/emojicon  \n文档介绍：http://rockerhieu.com/emojicon/  \n\n1. android-circlebutton  \nAndroid 圆形按钮，实际实现是继承自 ImageView  \n项目地址：https://github.com/markushi/android-circlebutton  \nDemo 地址：https://github.com/markushi/android-circlebutton/blob/master/example/example.apk  \n\n1. Segmented Radio Buttons for Android  \niOS’s segmented controls 的实现  \n项目地址：https://github.com/vinc3m1/android-segmentedradiobutton  \nDemo 地址：https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true  \n\n1. Chips EditText Library  \n支持国家名字联想从而选择显示该国国旗的 EditText，实际就是通过 SpannableStringBuilder 实现  \n项目地址：https://github.com/kpbird/chips-edittext-library  \nDemo 地址：https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin  \n\n1. AutoFitTextView  \n可固定边界内容字体大小自适应的 TextView  \n项目地址：https://github.com/grantland/android-autofittextview  \n\n1. Shimmer for Android  \n文字发淡光的 TextView  \n项目地址：https://github.com/RomainPiel/Shimmer-android  \n\n1. Titanic  \n可以显示水位上升下降(不知道该怎么描述 囧)的 TextView  \n项目地址：https://github.com/RomainPiel/Titanic  \n\n1. android-iconify  \n提供带 Icon 的 TextView,Menu,Button 等  \n项目地址：https://github.com/JoanZapata/android-iconify  \n\n1. Calligraphy  \n让我们在 android 开发中使用自定义字体变得更加简单  \n项目地址：https://github.com/chrisjenx/Calligraphy  \n\n1. CreditsRoll  \n类似星球大战字幕效果的 TextView  \n项目地址：https://github.com/frakbot/CreditsRoll  \n\n1. android-process-buton  \n带加载或提交进度的 Button  \n项目地址：https://github.com/dmytrodanylyk/android-process-buton  \n\n1. FButton  \n扁平化的 Button  \n项目地址：https://github.com/hoang8f/android-flat-button  \nDemo 地址：https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo  \n\n1. FloatingActionButton  \n一个类似 Android 版 Google+浮动功能按钮的控件，可以响应 ListView 的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。  \n项目地址：https://github.com/makovkastar/FloatingActionButton  \nDemo 地址：https://github.com/makovkastar/FloatingActionButton/tree/master/  \n\n1. Android Saripaar  \nAndroid 表单验证  \n项目地址：https://github.com/ragunathjawahar/android-saripaar/  \n\n1. JumpingBeans  \n文字像 Mexican beans 一样跳动  \n项目地址：https://github.com/frakbot/JumpingBeans  \nDemo 地址：http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo  \n\n1. FancyButtons  \n一个不用图片就可以帮助我们创建出漂亮按钮的库。  \n项目地址：https://github.com/medyo/fancybuttons  \nDemo 地址：https://github.com/medyo/fancybuttons/tree/master/samples  \n\n1. Android-RobotoTextView  \n一个实现了所有 Roboto 字体的 TextView，包括新出的 Roboto Slab 字体。  \n项目地址：https://github.com/johnkil/Android-RobotoTextView  \nDemo 地址：http://play.google.com/store/apps/details?id=com.devspark.robototextview  \nDemo 项目：https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample  \n\n1. Android-WizardPager  \n一个表单向导库  \n项目地址：https://github.com/romannurik/android-wizardpager  \nDemo 项目：https://github.com/str4d/android-wizardpager/tree/textfield  \n\n1. RippleView  \n一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮  \n项目地址：https://github.com/siriscac/RippleView  \nDemo 项目：https://github.com/siriscac/RippleView/tree/master/RippleViewExample  \n\n1. RippleEffect  \n一个实现 Material Design Ripple 效果的库，支持 Android API 9+以上版本。  \n项目地址：https://github.com/traex/RippleEffect  \nDemo 项目：https://github.com/traex/RippleEffect/tree/master/sample  \n\n1. RippleCompat\n使用易于移植的方式为UI控件实现波纹效应，可以适配控件原背景及Palette支持。api简单，可自定义效果，兼容至Android API 7+。\n项目地址：https://github.com/desmond1121/RippleCompat\nDemo 项目：https://github.com/desmond1121/RippleCompat/tree/master/app\n\n1. Android Floating Label Widgets  \n包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示  \n项目地址：https://github.com/marvinlabs/android-floatinglabel-widgets  \nDemo 地址：https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo  \n在线演示：http://www.youtube.com/watch?v=hpZD9gJcRg0&feature=youtu.be  \n\n1. MaterialEditText  \nEditText 的 Material Design 实现。包含 [Google Material Design Spec](http://www.google.com/design/spec/components/text-fields.html)中的 UI 效果和一些新增特性。  \n项目地址：https://github.com/rengwuxian/MaterialEditText  \n\n1. MaterialEditText  \n实现 [Material Design](http://www.google.com/design/spec/components/text-fields.html) 中 Ripple 效果线条背景的 EditText。直接替换原生 EditText 即可集成。  \n项目地址：https://github.com/DreamingInCodeZH/MaterialEditText    \n\n1. MultiActionTextView  \n可以分别给 TextView 中的某几个字设置点击事件的 TextView  \n项目地址：https://github.com/ajaysahani/MultiActionTextView  \n\n1. ToggleButton  \n状态切换的 Button，类似 iOS，用 View 实现  \n项目地址：https://github.com/zcweng/ToggleButton  \n\n1. SwitchButton  \n状态切换的 Button，类似 iOS，拥有良好的用户界面  \n项目地址：https://github.com/kyleduo/SwitchButton  \n\n1. SlideSwitch  \n状态切换的开关，可以设置为类似 IOS 的圆形，也可以设置为矩形，用 View 实现  \n项目地址：https://github.com/Leaking/SlideSwitch  \n\n1. ExpandableTextView  \n可展开和收缩内容的 TextView。  \n项目地址：https://github.com/Manabu-GT/ExpandableTextView  \n\n1. TagCloudView(支持 SingleLine 模式的标签云)  \n标签云效果，只需要一行代码即可设置为 SingleLine 模式，轻松实现知乎问题话题列表效果。SingleLine 模式时末尾文字及图片可自定义。\n项目地址：https://github.com/kingideayou/TagCloudView  \n示例APK地址：https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk  \nAPP示例：知乎  \n\n1. BubbleTextView \nAndroid Bubble View \n项目地址：https://github.com/dupengtao/BubbleTextView \n\n1. shadow-layout\nAndroid Shadow Layout\n解决了`CardView`：1.不能画圆的阴影。2.设置阴影的位置。3.设置阴影颜色。\n项目地址：https://github.com/dmytrodanylyk/shadow-layout\n\n### 九、ScrollView\n1. Discrollview  \n支持滚动时 Item 淡入淡出，平移，缩放效果的 ScrollView  \n项目地址：https://github.com/flavienlaurent/discrollview  \nDemo 地址：https://github.com/flavienlaurent/discrollview/raw/master/sample.apk  \n\n1. PullScrollView  \n仿照新浪微博 Android 客户端个人中心的 ScrollView，下拉背景伸缩回弹效果。  \n项目地址：https://github.com/MarkMjw/PullScrollView  \n\n1. ArcLayout  \n一个非常简单的弧布局库  \n项目地址：https://github.com/ogaclejapan/ArcLayout  \nDemo 地址：https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo  \n\n1. ParallaxScrollView  \n支持视差滚动的 ScrollView ，背景图片的滚动速度小于 ScrollView 中子控件的滚动速度  \n项目地址：https://github.com/chrisjenx/ParallaxScrollView  \nDemo 地址：http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk  \n\n1. AKParallax-Android  \n支持视差滚动的 ScrollView  \n项目地址：https://github.com/ideaismobile/AKParallax-Android  \nDemo 地址：https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample  \n\n1. Android-ObservableScrollView  \n监听滚动视图滚动事件的库，帮助与 Toolbar 的交互动效处理与 Material Design 的实现  \n项目地址：https://github.com/ksoichiro/Android-ObservableScrollView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2  \n\n1. OverScrollView  \n有弹性的 ScrollView，实现了当手指滑动到 ScrollView 的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹  \n项目地址：https://github.com/EverythingMe/OverScrollView  \n\n### 十、TimeView\n包括 TimePicker、DatePicker、CalendarView、Clock 等时间相关控件  \n\n1. android-times-square  \nAndroid 日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示  \n项目地址：https://github.com/square/android-times-square  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true  \n\n1. android-calendar-card  \n日历  \n项目地址：https://github.com/kenumir/android-calendar-card  \nDemo 地址：https://play.google.com/store/apps/details?id=com.wt.calendarcardsample  \n\n1. AndroidWheel  \nAndroid Wheel 支持城市、多种日期时间、密码、图片  \n项目地址：https://code.google.com/p/android-wheel/  \n\n1. GoogleDateTimePickers  \n时间选择部件  \n项目地址：https://github.com/Mirkoddd/GoogleDateTimePickers  \n文档介绍：https://play.google.com/store/apps/details?id=com.mirko.sample&hl=it  \n\n1. DateTimePicker  \n日期选择部件(Google Agenda 的样式风格)  \n项目地址：https://github.com/flavienlaurent/datetimepicker  \nDemo 地址：https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk  \n\n1. android-betterpickers  \n提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以 DialogFragment 的弹窗选择  \n项目地址：https://github.com/derekbrameyer/android-betterpickers  \nDemo 地址：https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample  \n\n1. Android Week View  \n日期控件，支持周，天视图，支持自定义样式  \n项目地址：https://github.com/alamkanak/Android-Week-View  \n\n1. PickerView  \n仿 iOS 的 PickerView 控件，有时间选择和选项选择并支持一二三级联动效果，TimePopupWindow 时间选择器，支持年月日时分，年月日，时分等格式；OptionsPopupWindow 选项选择器，支持一，二，三级选项选择，并且可以设置是否联动  \n项目地址：https://github.com/saiwu-bigkoo/Android-PickerView  \n\n1. CountdownView  \nAndroid 倒计时控件，使用Canvas绘制，支持多种样式  \n项目地址：https://github.com/iwgang/CountdownView  \n\n### 十一、TipView\n包括 Toast、角标、UndoBar 等提示性控件  \n\n1. SVProgressHUD \nSVProgressHUD For Android 精仿iOS的提示库 SVProgressHUD，api也几乎一样。  \n项目地址：https://github.com/saiwu-bigkoo/Android-SVProgressHUD  \n\n1. Crouton  \n丰富样式的 Toast，允许 alert、comfirm、info 样式及点击消失样式，允许设置 Toast 显示时间，允许自定义 View。 本文 32. SuperToasts 为其扩展版  \n项目地址：https://github.com/keyboardsurfer/Crouton  \nDemo 地址：http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton  \n\n1. supertooltips  \n带动画效果的 Tips 显示  \n项目地址：https://github.com/nhaarman/supertooltips  \nDemo 地址：https://play.google.com/store/apps/details?id=com.haarman.supertooltips  \n\n1. Android ViewBadger  \n为其他 View 添加角标（消息圆点）等  \n项目地址：https://github.com/jgilfelt/android-viewbadger  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true  \n\n1. SuperToasts  \n更丰富样式的 toast，支持 Button、Progress、Horizontal Progress 样式、支持进入动画、支持撤销及其动画设置  \n项目地址：https://github.com/JohnPersano/SuperToasts  \nDemo 地址：https://play.google.com/store/apps/details?id=com.supertoastsdemo  \n\n1. UndoBar  \n屏幕底部显示取消或是确认的 PopupWindows  \n项目地址：https://github.com/soarcn/UndoBar  \n\n1. UndoBar  \n屏幕底部显示取消或是确认某操作  \n项目地址：https://github.com/jenzz/Android-UndoBar  \n\n1. Android-ActionItemBadge  \n可以在 ActionBar 的 MenuItem 上显示一个小角标  \n项目地址：https://github.com/mikepenz/Android-ActionItemBadge  \n\n1. SnackBar  \nMaterial Design 风格的 Toast，类似 Google inbox 中的提示  \n项目地址：https://github.com/MrEngineer13/SnackBar  \nDemo 地址：https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample  \n\n1. HeadsUp  \n在 2.3 上使用 android  5.0 的 HeadsUp 效果  \n项目地址：https://github.com/zzz40500/HeadsUp  \n\n### 十二、FlipView\n1. android-flip  \n类似 Flipboard 翻转动画的实现  \n项目地址：https://github.com/openaphid/android-flip  \nDemo 地址：https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true  \nAPP 示例：flipboard  \n\n1. FlipImageView  \n支持 x、y、z 及动画选择的翻转动画的实现  \n项目地址：https://github.com/castorflex/FlipImageView  \nDemo 地址：https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview  \n\n1. FoldableLayout  \nFlip 翻转效果的 ListView，目前还不支持 ListView 缓存  \n项目地址：https://github.com/alexvasilkov/FoldableLayout  \nDemo 地址：http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample  \n\n1. FlipViewPager.Draco  \nFlip 翻转效果的 ViewPager  \n项目地址：https://github.com/Yalantis/FlipViewPager.Draco  \n\n### 十三、ColorPickView\n1. ColorPickerView  \n颜色选择器，支持 PopupWindows 或新的 Activity 中打开  \n项目地址：https://code.google.com/p/color-picker-view/  \n\n1. HoloColorPicker  \n颜色选择器  \n项目地址：https://github.com/LarsWerkman/HoloColorPicker  \nDemo 地址：https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit  \n\n1. ColorPickerPreference  \n颜色选择器  \n项目地址：https://github.com/attenzione/android-ColorPickerPreference  \n\n1. ColorPicker  \n颜色选择器（Google Agenda 中的样式风格）  \n项目地址：https://github.com/flavienlaurent/colorpicker  \nDemo 地址：https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk  \n\n### 十四、GraphView\n1. MPAndroidChart  \n强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图等；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表  \n项目地址：https://github.com/PhilJay/MPAndroidChart  \nDemo 地址：https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample  \nDemo 项目：https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample  \n在线演示：https://www.youtube.com/watch?v=ufaK_Hd6BpI  \n\n1. achartengine  \n强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合  \n项目地址：https://code.google.com/p/achartengine/  \n官网网址：http://www.achartengine.org/  \nAPP 示例：Wordpress Android，Google Analytics  \n\n1. GraphView  \n绘制图表和曲线图的 View，可用于 Android 上的曲形图、柱状图、波浪图展示  \n项目地址：https://github.com/jjoe64/GraphView  \nDemo 项目：https://github.com/jjoe64/GraphView-Demos  \nAPP 示例：Wordpress Android，Google Analytics  \n\n1. HoloGraphLibrary  \n绘制现状图、柱状图、饼状图  \n项目地址：https://bitbucket.org/danielnadeau/holographlibrary/src  \n文档介绍：https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home  \n\n1. XCL-Charts  \nXCL-Charts 基于原生的 Canvas 来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持 3D/非 3D 柱形图(Bar Chart)、3D/非 3D 饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。  \n项目地址：https://github.com/xcltapestry/XCL-Charts  \nDemo 地址：https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true  \n\n1. EazeGraph  \nAndroid 图表库，支持柱状图、分层柱状图、饼状图、线性图  \n项目地址：https://github.com/blackfizz/EazeGraph  \nDemo 地址：https://play.google.com/store/apps/details?id=org.eazegraph.app  \n\n1. WilliamChart  \n绘制图表的库，支持 LineChartView、BarChartView 和 StackBarChartView 三中图表类型，并且支持 Android 2.2 及以上的系统。  \n项目地址：https://github.com/diogobernardino/WilliamChart  \nDemo 地址：https://play.google.com/store/apps/details?id=com.db.williamchartdemo  \nDemo 项目：https://github.com/diogobernardino/WilliamChart/tree/master/sample  \n\n1. HelloCharts for Android  \n支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上  \n项目地址：https://github.com/lecho/hellocharts-android  \nDemo 地址：https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples  \n在线演示：https://www.youtube.com/watch?v=xbSBjyjH2SY  \n\n1. PieChartView  \n比较简单直接的饼状统计报表图，使用方便，设置相应的属性参数即可  \n项目地址：https://github.com/wuseal/PieChartView  \nDemo 地址：https://github.com/wuseal/PieChartView  \n\n### 十五、UI Style\n不同样式的系统 UI 风格，如 IOS、Bootstrap 风格  \n\n1. UITableView  \nios 风格控件，包括 Button、ListView、TableView  \n项目地址：https://github.com/thiagolocatelli/android-uitableview  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true  \n\n1. ATableView  \nios 风格控件  \n项目地址：https://github.com/dmacosta/ATableView  \nDemo 地址：https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo  \n\n1. Cards-UI  \n卡片式 View，支持单个卡片，item 为卡片的 ListView  \n项目地址：https://github.com/afollestad/Cards-UI  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true  \n\n1. cardslib  \n卡片式 View，支持单个卡片，item 为卡片的 ListView 和 GridView  \n项目地址：https://github.com/gabrielemariotti/cardslib  \nDemo 地址：https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo  \n\n1. Android-Bootstrap  \nBootstrap 风格的按钮  \n项目地址：https://github.com/Bearded-Hen/Android-Bootstrap  \n\n1. Material Design Android Library  \nAndroid L 中 Material Design 风格的组件适配到 Android 2.2+  \n项目地址：https://github.com/navasmdc/MaterialDesignLibrary  \n\n1. Android FlatUI  \nAndroid 扁平化风格的组件，支持一些自定义样式  \n项目地址：https://github.com/eluleci/FlatUI  \n\n1. cheesesquare  \n全新 Android 设计库演示 Demo，包括 Collapsing Toolbar、FloatingActionButton、View anchoring、NavigationView、Snackbar  \n项目地址：https://github.com/chrisbanes/cheesesquare  \n\n### 十六、其他\n1. SnappingStepper   \n一种漂亮的UI控件，能更灵活的控制数字的增减。可用于购物车商品数量控制。  \n项目地址：https://github.com/saiwu-bigkoo/Android-SnappingStepper  \n\n1. SwipeBackLayout  \n左右或向上滑动返回的 Activity  \n项目地址：https://github.com/Issacw0ng/SwipeBackLayout  \nDemo 地址：https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo  \nAPP 示例：知乎  \n\n1. android-styled-dialogs  \n可自定义样式的 dialog，默认与 Holo 主题样式一致，在 Android2.2 以上同一样式  \n项目地址：https://github.com/inmite/android-styled-dialogs  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true  \n\n1. Android Sliding Up Panel  \n可拖动的 View，能在当前 Activity 上扶起一个可拖动的 Panel  \n项目地址：https://github.com/umano/AndroidSlidingUpPanel  \nDemo 地址：https://play.google.com/store/apps/details?id=com.sothree.umano  \nAPP 示例：Google Music 精简播放栏  \n\n1. TableFixHeaders  \n第一列固定的 Table  \n项目地址：https://github.com/InQBarna/TableFixHeaders  \nDemo 地址：http://bit.ly/13buAIq  \n\n1. Inscription  \n可用于展示应用 change 和 new feature 信息  \n项目地址：https://github.com/MartinvanZ/Inscription  \n\n1. ActivityTransition  \nActivity 切换动画，包括渐变、flip、某个位置进入等等  \n项目地址：https://github.com/ophilbert/ActivityTransition  \n文档介绍：https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true  \n\n1. EasyAndroidAnimations  \n针对 View 的各种动画  \n项目地址：https://github.com/2359media/EasyAndroidAnimations  \n\n1. ViewAnimation    \n对android view 动画进行封装,实现起更简单，自带三种常见运动路径，其他的可自定义  \n项目地址：https://github.com/guohuanwen/ViewAniamtion  \nAPP 示例：QQ名片圈圈效果  \n\n1. AndroidLoadingAnimation  \n多种android加载动画  \n项目地址：https://github.com/guohuanwen/AndroidLoadingAnimation  \n\n1. android-lockpattern  \nAndroid 的图案密码解锁  \n项目地址：https://code.google.com/p/android-lockpattern/  \n原理剖析文档：[android-lockpattern](http://a.codekk.com/detail/Android/爱早起/Android Lock Pattern 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo  \n文档介绍：https://code.google.com/p/android-lockpattern/wiki/QuickUse  \nAPP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  \n\n1. PatternLock  \n另一个 Android 图案解锁库  \n项目地址：https://github.com/DreaminginCodeZH/PatternLock  \nDemo 地址：https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk  \nAPP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  \n\n1. RangeBar  \n类似于 SeekBar，不同的是可以选择一个范围内的值而不是单个值  \n项目地址：https://github.com/edmodo/range-bar  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true  \n\n1. ChromeView  \n利用 Chromium 实现的 WebView，解决各个 Android 版本 WebView 不同的问题，同时利用最新 Chrome 代码  \n项目地址：https://github.com/pwnall/chromeview  \n\n1. android-phased-seek-bar  \n支持预先定义状态的 SeekBar  \n项目地址：https://github.com/ademar111190/android-phased-seek-bar  \n\n1. Android Slider Preference Library  \n可添加到设置中的基于对话框的 RankBar 小部件  \n项目地址：https://github.com/jayschwa/AndroidSliderPreference  \n\n1. ShowcaseView library  \n用于高亮显示应用程序的特定部分，从而突出突出重点  \n项目地址：https://github.com/amlcurran/ShowcaseView  \n\n1. android-segmented-control  \nAndroid 上的 Segmented Controls，相当于 RadioButton 组  \n项目地址：https://github.com/hoang8f/android-segmented-control  \n\n1. Swipeable Cards  \n类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢  \n项目地址：https://github.com/kikoso/Swipeable-Cards  \nDemo 地址：https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo  \n\n1. EdgeEffectOverride  \n改变 ScrollView, ListView, ExpandableListView, GridView, ViewPager 等滚动控件滚动到边缘的颜色效果  \n项目地址：https://github.com/AndroidAlliance/EdgeEffectOverride  \n\n1. android-pinned-header-listviews  \n使 ExpandListView 的 Group 滑动到顶端时会固定不动直到另外一个 Group 到达顶端  \n项目地址：https://github.com/rtyley/android-pinned-header-listviews  \n\n1. AndroidSwipeLayout  \n滑动 Layout，支持单个 View，ListView，GridView  \n项目地址：https://github.com/daimajia/AndroidSwipeLayout  \nDemo 地址：[Download Demo](https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk)  \n\n1. DynamicCardLayout  \n在 Android 中实现的类似 Windows8 的瓷片布局  \n项目地址：https://github.com/dodola/DynamicCardLayout  \n\n1. Emoticons-Keyboard  \n带表情情符号的自定义键盘  \n项目地址：https://github.com/chiragjain/Emoticons-Keyboard  \n\n1. Android Typeface Helper  \n可以帮你轻松实现自定义字体的库  \n项目地址：https://github.com/norbsoft/android-typeface-helper  \n\n1. Android-Anim-Playground  \n几个动画效果，其中第二个基于 android-svg 的绘制效果非常好  \n项目地址：https://github.com/Tibolte/Android-Anim-Playground  \n\n1. AlertView \n仿iOS的AlertViewController 几乎完美还原iOS 的 AlertViewController ，同时支持Alert和ActionSheet模式，每一个细节都是精雕细琢，并把api封装成懒到极致模式，一行代码就可以进行弹窗.  \n项目地址：https://github.com/saiwu-bigkoo/Android-AlertView  \n\n1. NiftyDialogEffects  \n支持自定义飞入动画样式的 Dialog  \n项目地址：https://github.com/sd6352051/NiftyDialogEffects  \n在线演示：http://tympanus.net/Development/ModalWindowEffects/  \n\n1. PostOffice  \n创建 Holo 及 Material Design 样式的 Dialog  \n项目地址：https://github.com/r0adkll/PostOffice  \n\n1. Swipecards  \n类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso's Swipeable-Cards 改造而来  \n项目地址：https://github.com/Diolor/Swipecards  \n\n1. SeekArc  \n圆形的 SeekBar  \n项目地址：https://github.com/TriggerTrap/SeekArc  \n\n1. BlurDialogFragment  \n显示  DialogFragment 时背景模糊效果  \n项目地址：https://github.com/tvbarthel/BlurDialogFragment  \nDemo 地址：https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample  \n\n1. range-seek-bar  \n随机值选取的 SeekBar  \n项目地址：https://github.com/yahoo/android-range-seek-bar  \n\n1. MaterialRangeBar  \n可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配  \n项目地址：https://github.com/oli107/material-range-bar  \n\n1. MaterialList  \nMaterial Design 风格的 CardView  \n项目地址：https://github.com/dexafree/MaterialList  \nDemo 地址：https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample  \n\n1. road-trip  \n设置 path 的各种动画效果，以及如何实现复杂路径动画，类似于 ios 中的指纹注册界面的指纹动画效果  \n项目地址：https://github.com/romainguy/road-trip  \n\n1. dialogplus  \n一个简单的 Android 对话框，支持不同的弹出模式  \n项目地址：https://github.com/orhanobut/dialogplus  \n\n1. FlowLayout  \n一个简单的流式布局，用法类似 LinearLayout，但是能够让子元素根据宽度自动换行  \n项目地址：[FLowLayout](https://github.com/LyndonChin/AndroidFlowLayout)  \n\n1. CircleSeekbar  \n一个环形Seekbar组件,支持叠加复合使用  \n项目地址：[CircleSeekbar](https://github.com/feeeei/CircleSeekbar)  \n\n1. FinestWebView  \n美麗的和可定制的Android的活動，顯示在一個應用程序的網頁。  \n项目地址: https://github.com/TheFinestArtist/FinestWebView-Android  \nSample 地址: https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample  \n\n1. YouTubePlayerActivity  \n只需通過一個URL來在新的活動播放YouTube視頻。它支持屏幕方向，媒體音量控制等。  \n项目地址: https://github.com/TheFinestArtist/YouTubePlayerActivity  \nSample 地址: https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample  \n\n1. material-camera  \nmaterial风格的camera。能使camera使用起来更简单的库。  \n项目地址：https://github.com/afollestad/material-camera   \n\n1. material-dialogs  \n各种material风格的dialog。\n漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8。  \n项目地址：https://github.com/afollestad/material-dialogs   \nSample地址：https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk  \n  \n1. NotifyUtil  \n最常见的通知样式库  \n项目地址:https://github.com/wenmingvs/NotifyUtil  \ndemo地址：https://github.com/wenmingvs/NotifyUtil#notifydemo  \n\n1. CanPhotos\n使用fresco选取多张图片并可预览图片  \n项目地址：https://github.com/canyinghao/CanPhotos   \n\n1. CanDialog\n仿照系统Dialog所写，继承于FrameLayout，添加一些动画，一些显示类型。  \n项目地址：https://github.com/canyinghao/CanDialog  \n\n## 第二部分 工具库\n主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络请求、数据库 ORM 建模、Android 公共库、Android 高版本向低版本兼容、多媒体相关及其他。  \n\n### 一、依赖注入 DI\n通过依赖注入减少 View、服务、资源简化初始化，事件绑定等重复繁琐工作  \n\n1. AndroidAnnotations(Code Diet)  \nandroid 快速开发框架  \n项目地址：https://github.com/excilys/androidannotations  \n文档介绍：https://github.com/excilys/androidannotations/wiki  \n官网网址：http://androidannotations.org/  \n特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等  \n(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程  \n(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类  \n(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现  \n(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类  \n(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。  \n其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响  \n\n1. roboguice  \n帮你处理了很多代码异常，利用 annotation 使得更少的代码完成项目  \n项目地址：https://github.com/roboguice/roboguice  \n文档介绍：https://github.com/roboguice/roboguice/wiki  \n\n1. butterknife  \n利用 annotation 帮你快速完成 View 的初始化，减少代码  \n项目地址：https://github.com/JakeWharton/butterknife  \n文档介绍：http://jakewharton.github.io/butterknife/  \n\n1. Dagger  \n依赖注入，适用于 Android 和 Java  \n项目地址：https://github.com/square/dagger  \n原理剖析文档：[Dagger](http://a.codekk.com/detail/Android/扔物线/Dagger 源码解析)  \n文档介绍：http://square.github.io/dagger/  \n\n1. AutoParcel  \n注解自动生成Parcelable实现代码的库     \n项目地址：https://github.com/frankiesardo/auto-parcel    \n这篇文章详细介绍了它的使用方法：[AutoParcel](https://passy.svbtle.com/simpler-android-apis-with-autoparcel)     \n作者认为使用AutoParcel的好处是，可以简化构造函数，方便IDE代码自动完成，方便测试，前向兼容，生成不可变的对象。      \n文档介绍：https://github.com/frankiesardo/auto-parcel\n\n\n\n### 二、图片缓存\n1. Android-Universal-Image-Loader  \n图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。  \n项目地址：https://github.com/nostra13/Android-Universal-Image-Loader  \n原理剖析文档：[Android-Universal-Image-Loader](http://a.codekk.com/detail/Android/huxian99/Android Universal Image Loader 源码分析)  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true  \n文档介绍：http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html  \n\n1. picasso  \nsquare 开源的图片缓存  \n项目地址：https://github.com/square/picasso  \n文档介绍：http://square.github.io/picasso/  \n特点：(1)可以自动检测 adapter 的重用并取消之前的下载  \n(2)图片变换  \n(3)可以加载本地资源  \n(4)可以设置占位资源  \n(5)支持 debug 模式  \n\n1. Cube ImageLoader  \n阿里巴巴一淘使用的图片加载，综合了 Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持  \n项目地址：https://github.com/etao-open-source/cube-sdk  \nDemo 地址：https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk  \n文档介绍：http://cube-sdk.liaohuqiu.net/  \n\n1. fresco  \n一款强大的图片缓存工具，由 Facebook 开发  \n项目地址：https://github.com/facebook/fresco  \n文档介绍：http://frescolib.org/  \n特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存  \n(2) 支持流式，可以类似网页上模糊渐进式显示图片  \n(3) 对多帧动画图片支持更好，如 Gif、WebP  \n(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点  \n(5) 更多样的加载，如支持 EXIF、全面支持 WebP  \n(6) 支持 Android 2.3+  \n\n1. Glide  \nGlide 是一个 android 平台上的快速和高效的开源的多媒体资源管理库,提供 多媒体文件的压缩,内存和磁盘缓存, 资源池的接口。  \n它可以最大性能地在 Android 设备上读取、解码、显示图片和视频。Glide 可以将远程的图片、视频、动画图片等缓存在设备本地便于提高用户浏览图片的流畅体验。  \n项目地址：https://github.com/bumptech/glide  \n特点：  \n(1) GIF 动画的解码  \n(2) 本地视频剧照的解码  \n(3) 支持缩略图  \n(4) Activity 生命周期的集成  \n(5) 转码的支持  \n(6) 动画的支持  \n(7) OkHttp 和 Volley 的支持  \n\n### 三、网络请求\n1. Volley  \nGoogle 提供的网络通信库，使得网络请求更简单、更快速  \n项目地址：https://android.googlesource.com/platform/frameworks/volley  \n文档介绍：http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf  \n\n1. Asynchronous Http Client for Android  \nAndroid 异步 Http 请求  \n项目地址：https://github.com/loopj/android-async-http  \n文档介绍：http://loopj.com/android-async-http/  \n特点：(1) 在匿名回调中处理请求结果  \n(2) 在 UI 线程外进行 http 请求  \n(3) 文件断点上传  \n(4) 智能重试  \n(5) 默认 gzip 压缩  \n(6) 支持解析成 Json 格式  \n(7) 可将 Cookies 持久化到 SharedPreferences  \n\n1. android-query  \n异步加载，更少代码完成 Android 加载  \n项目地址：https://github.com/androidquery/androidquery 或 https://code.google.com/p/android-query/  \nDemo 地址：https://play.google.com/store/apps/details?id=com.androidquery  \n文档介绍：https://code.google.com/p/android-query/#Why_AQuery?  \n特点：https://code.google.com/p/android-query/#Why_AQuery?  \n\n1. Async Http Client  \nJava 异步 Http 请求  \n项目地址：https://github.com/AsyncHttpClient/async-http-client  \n文档介绍：http://sonatype.github.io/async-http-client/  \n\n1. Ion  \n支持图片、json、http post 等异步请求  \n项目地址：https://github.com/koush/ion  \n文档介绍：https://github.com/koush/ion#more-examples  \n\n1. Http Request  \n项目地址：https://github.com/kevinsawicki/http-request  \n文档介绍：https://github.com/kevinsawicki/http-request#examples  \n\n1. okhttp  \nsquare 开源的 http 工具类  \n项目地址：https://github.com/square/okhttp  \n文档介绍：http://square.github.io/okhttp/  \n特点：(1) 支持 SPDY( http://zh.wikipedia.org/wiki/SPDY )协议。SPDY 协议是 Google 开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个 TCP 链接传送网页和图片等资源)和优先级来缩短加载时间。  \n(2) 如果 SPDY 不可用，利用连接池减少请求延迟  \n(3) Gzip 压缩  \n(4) Response 缓存减少不必要的请求  \n\n1. Retrofit  \nRESTFUL API 设计  \n项目地址：https://github.com/square/retrofit  \n文档介绍：http://square.github.io/retrofit/  \n\n1. RoboSpice  \nAndroid 异步网络请求工具，支持缓存、REST 等等  \n项目地址：https://github.com/stephanenicolas/robospice  \nDemo 地址：https://github.com/stephanenicolas/RoboDemo/downloads  \n\n1. TwistVolley  \nTwistVolley 是对 Volley 的一个封装库。提供类似 Picasso 一样的串联式 API。使得使用 Volley 更加方便。  \n项目地址：https://github.com/TwistedEquations/TwistVolley  \n\n### 四、数据库 orm 工具包\norm 的 db 工具类，简化建表、查询、更新、插入、事务、索引的操作 \n\n1. greenDAO  \nAndroid Sqlite orm 的 db 工具类  \n项目地址：https://github.com/greenrobot/greenDAO  \n文档介绍：http://greendao-orm.com/documentation/  \n官网网址：http://greendao-orm.com/  \n特点：(1) 性能佳  \n(2) 简单易用的 API  \n(3) 内存小好小  \n(4) 库大小小  \n\n1. GreenDaoUpgradeHelper  \ngreenDAO的数据库升级帮助类，只需一行代码解决数据库升级  \n项目地址：https://github.com/yuweiguocn/GreenDaoUpgradeHelper\n\n1. ActiveAndroid  \nAndroid Sqlite orm 的 db 工具类  \n项目地址：https://github.com/pardom/ActiveAndroid  \n文档介绍：https://github.com/pardom/ActiveAndroid/wiki/_pages  \n\n1. Sprinkles  \nAndroid Sqlite orm 的 db 工具类，比较显著的特点就是配合 https://github.com/square/retrofit 能保存从服务器获取的数据  \n项目地址：https://github.com/emilsjolander/sprinkles  \n文档介绍：http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/  \n\n1. Realm  \n移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好  \n项目地址：https://github.com/realm/realm-java  \n文档介绍：http://realm.io/docs/java/0.72.0/  \n\n1. ormlite-android  \n项目地址：https://github.com/j256/ormlite-android  \n文档介绍：http://ormlite.com/sqlite_java_android_orm.shtml  \n\n1. Schematic  \n根据 SQLite 生成 ContentProvider  \n项目地址：https://github.com/SimonVT/schematic  \n\n1. DBFlow  \nAndroid SQLite ORM 工具库。综合了 Active Android, Schematic, Ollie,Sprinkles 等库的优点；通过注解实现，性能好；能生成 ContentProvider。  \n项目地址：https://github.com/Raizlabs/DBFlow  \n文档介绍：https://github.com/Raizlabs/DBFlow#usage-docs  \n\n1. SnappyDB\nSnappyDB是一个key-value数据库，非常流行的NoSQL数据库。\n项目地址：https://github.com/nhachicha/SnappyDB\n演示Demo：https://play.google.com/store/apps/details?id=com.snappydb.snippets.app\n\n### 五、Android 公共库\n1. Guava  \nGoogle 的基于 java1.6 的类库集合的扩展项目，包括 collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O 等等. 这些高质量的 API 可以使你的 JAVa 代码更加优雅，更加简洁  \n项目地址：https://code.google.com/p/guava-libraries/  \n文档介绍：https://code.google.com/p/guava-libraries/wiki/GuavaExplained  \n\n1. AndroidCommon  \nAndroid 公共库  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo 地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/android-common-lib/  \n包括：a. ImageCache 图片缓存，包含内存和 Sdcard 缓存  \nhttp://www.trinea.cn/android/android-imagecache/  \n特点：(1)支持预取新图片，支持等待队列  \n(2)包含二级缓存，可自定义文件名保存规则  \n(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU 等 13 种)或自定义缓存算法  \n(4)可方便的保存及初始化恢复数据  \n(5)支持不同类型网络处理  \n(6)可根据系统配置初始化缓存等  \n\n1. HttpCache Http 缓存  \n文档介绍：http://www.trinea.cn/android/android-http-cache  \n特点是：(1) 根据 cache-control、expires 缓存 http 请求  \n(2) 支持同步、异步 Http 请求  \n(3) 在匿名回调中处理请求结果  \n(4) 在 UI 线程外进行 http 请求  \n(5) 默认 gzip 压缩  \n(2) 公共 View(下拉及底部加载更多 ListView、底部加载更多 ScrollView、滑动一页 Gallery)  \n(3) Android 常用工具类(网络、下载、Android 资源操作、shell、文件、Json、随机数、Collection 等等)  \n\n1. DropDownListView 下拉刷新及滑动到底部加载更多 ListView  \n文档介绍：http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/  \n\n1. shipfaster  \n整合了 Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发  \n项目地址：https://github.com/pyricau/shipfaster  \n\n1. CleanAndroidCode  \n整合了 Dagger Otto AndroidAnnotations，方便快速开发  \n项目地址：https://github.com/pyricau/CleanAndroidCode  \n\n1. xUtils  \n基于 Afinal，包含 DbUtils、ViewUtils、HttpUtils、BitmapUtils 四大模块，可用于快速开发  \n项目地址：https://github.com/wyouflf/xUtils  \n原理剖析文档：[xUtils](http://a.codekk.com/detail/Android/Caij/xUtils 源码解析)  \n\n1. Afinal  \nAfinal 是一个 android 的 ioc，orm 框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过 finalActivity，我们可以通过注解的方式进行绑定 ui 和事件。通过 finalBitmap，我们可以方便的加载 bitmap 图片，而无需考虑 oom 等问题。通过 finalDB 模块，我们一行代码就可以对 android 的 sqlite 数据库进行增删改查。通过 FinalHttp 模块，我们可以以 ajax 形式请求 http 数据  \n项目地址：https://github.com/yangfuhai/afinal  \n官网网址：http://www.afinal.org  \n\n1. UltimateAndroid  \nUltimateAndroid 是一个快速开发 Android 应用的框架，框架目前主要包含的功能有 View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘 LRU 等功能.同时提供了类似于 TripleDes、Webview 快速设置、Md5 处理、String 处理,Https 处理等常用工具类，还有超过 100 多种 UI 控件效果。  \n项目地址：https://github.com/cymcsg/UltimateAndroid  \n官网网址：http://blog.marshalchen.com/UltimateAndroid/  \n\n1. SAF  \nSAF(Simple Android Framework)是一个简单的 android 框架，它为开发 Android app 提供了基础性组件。  \n项目地址：https://github.com/fengzhizi715/SAF  \n官网网址：http://www.salesuite.cn/  \n包括：(1)Event Bus(事件总线)  \n(2) Rest Client(http 的框架)  \n(3) Image Cache(图片缓存)  \n(4) Dependency Injection(依赖注入)  \n(5) Sqlite ORM(sqlite 的 orm)  \n(6) Router(Activity、Fragment 的 Router)  \n(7) Utils(各种常用的工具类)  \n\n1. Barber  \nCustom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。  \n项目地址：https://github.com/hzsweers/barber  \n\n1. device-year-class  \nA library that analyzes an Android device's specifications and calculates which year the device would be considered \"high end”.(facebook 开发的检测手机主流配置工具)  \n项目地址：https://github.com/facebook/device-year-class  \n\n1. RxAndroid   \n对RxJava在Android上的扩展，使得Android上也很容易实现reactive components，简化线程操作，从而写出很漂亮的代码。   \n项目地址：https://github.com/ReactiveX/RxAndroid   \n文档介绍：[给Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)  \n\n1. MultiImageSelector   \n一个本地图片选择器，支持图片的单选和多选，直接返回所选图片的路径。   \n项目地址：https://github.com/lovetuzitong/MultiImageSelector.git \n\n### 六、Android 高版本向低版本兼容\n1. Nine Old Androids  \n将 Android 3.0(Honeycomb)所有动画 API(ObjectAnimator ValueAnimator 等)兼容到 Android1.0  \n项目地址：https://github.com/JakeWharton/NineOldAndroids  \n原理剖析文档：[Nine Old Androids](http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations 源码解析)  \nDemo 地址：https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample  \n文档介绍：http://nineoldandroids.com/  \n\n1. HoloEverywhere  \n将 Android 3.0 的 Holo 主题兼容到 Android2.1++  \n项目地址：https://github.com/Prototik/HoloEverywhere  \nDemo 地址：https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk  \n文档介绍：http://android-developers.blogspot.com/2012/01/holo-everywhere.html  \n\n1. SherlockNavigationDrawer  \n将 Android NavigationDrawer 和 ActionbarSherlock 结合，解决 4.0 以下 NavigationDrawer 的适配问题  \n项目地址：https://github.com/tobykurien/SherlockNavigationDrawer  \n文档介绍：http://developer.android.com/training/implementing-navigation/nav-drawer.html  \n\n1. Notifications4EveryWhere  \n将 Android 4.1 的 Notification 兼容到 Android2.2++  \n项目地址：https://github.com/youxiachai/Notifications4EveryWhere  \n\n1. Android Switch Widget Backport  \n将 Android Switch 和 SwitchPreference 的兼容到 Android2.1++  \n项目地址：https://github.com/BoD/android-switch-backport  \nDemo 地址：https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample  \n文档介绍：https://github.com/BoD/android-switch-backport#using-the-switch  \n\n1. android-datepicker  \n将 Android 4.0 的 datepicker 兼容到 Android2.2++  \n项目地址：https://github.com/SimonVT/android-datepicker  \n\n1. Transitions Everywhere  \nAndroid 4.4 的 Transitions API 兼容到 Android 2.2 以上  \n项目地址：https://github.com/andkulikov/transitions-everywhere  \n\n1. KShareViewActivityManager  \n一个兼容Android 5.0 以下Shared Element Transition （页面间共享元素位移动画）库  \n项目地址：https://github.com/kot32go/KShareViewActivityManager  \n\n### 七、多媒体相关\n1. cocos2d-x  \n跨平台的 2d 游戏框架，支持 Android、IOS、Linux、Windows 等众多平台  \n项目地址：https://github.com/cocos2d/cocos2d-x  \n文档介绍：http://www.cocos2d-x.org/wiki  \n官网网址：http://www.cocos2d-x.org/  \n\n1. JustWeEngine  \nAndroid的轻量级游戏框架，能大大缩减编写原生游戏的代码量和难度，仍在持续更新中。  \n项目地址: https://github.com/lfkdsk/JustWeEngine  \nDemo地址: https://github.com/lfkdsk/EngineDemo  \n\n1. Vitamio  \n是一款 Android 与 iOS 平台上的全能多媒体开发框架  \n项目地址：https://github.com/yixia/VitamioBundle  \n网站介绍：http://www.vitamio.org/docs/  \n特点：(1) 全面支持硬件解码与 GPU 渲染  \n(2) 能够流畅播放 720P 甚至 1080P 高清 MKV，FLV，MP4，MOV，TS，RMVB 等常见格式的视频  \n(3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。 \n\n1. VDPlayerSDK  \n最容易集成的开源播放器组件，支持直播，支持软硬解切换，支持清晰度切换  \n项目地址：https://github.com/SinaVDDeveloper/  \nDemo 地址：https://github.com/SinaVDDeveloper/demo  \n文档介绍：https://github.com/SinaVDDeveloper/sinavideo_playersdk  \n特点：  \n(1) 使用自定义控件方式提供播放器UI，不需要视频相关知识，能编写android应用就能使用  \n(2) 软硬解切换、点播直播支持  \n(3) 解码内核小于4M，更方便集成到非专业视频app中  \n(4) 修正一些vitaimio的问题，比如m3u8可以拖动等等\n\n1. VideoPlayerManager  \n帮助实现VideoPlayer控制，使得它更容易使用ListView和recyclerview。它还可以跟踪滚动列表中可见的项。当列表中的新项可见域最大时，该库给出了接口来跟踪它。  \n项目地址：https://github.com/danylovolokh/VideoPlayerManager  \n文档介绍：https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn  \n\n1. UniversalVideoView  \nAndroid上定义播放器控件,支持自定义控制UI, 全屏播放, 重力感应自动切换横竖屏.  \n项目地址：https://github.com/linsea/UniversalVideoView  \n\n1. PhotoProcessing  \n利用 ndk 处理图片库，支持 Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效  \n项目地址：https://github.com/lightbox/PhotoProcessing  \nDemo 地址：https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true  \n\n1. Android StackBlur  \n图片模糊效果工具类  \n项目地址：https://github.com/kikoso/android-stackblur  \nDemo 地址：https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true  \n文档介绍：https://github.com/kikoso/android-stackblur#usage  \n\n1. Bitmap Smart Clipping using OpenCV  \n图片智能裁剪保留重要部分显示  \n项目地址：https://github.com/beartung/tclip-android  \n利用淘宝的 http://code.taobao.org/p/tclip/ 库完成  \n一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域  \n特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉  \n(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  \n\n1. Cropper  \n图片局部剪切工具，可触摸控制选择区域或旋转  \n项目地址：https://github.com/edmodo/cropper  \n文档介绍：https://github.com/edmodo/cropper/wiki  \n\n1. uCrop  \nYalantis 出品的强大的图片裁剪库 ，支持缩放，旋转图片，支持各种比例的裁剪框  \n项目地址：https://github.com/Yalantis/uCrop  \n\n1. android-crop  \n图片裁剪 Activity\n项目地址：https://github.com/jdamcd/android-crop  \n\n1. TileView  \n可分块显示大图，支持 2D 拖动、双击、双指放大、双指捏合  \n项目地址：https://github.com/moagrius/TileView  \nDemo 地址：http://moagrius.github.io/TileView/TileViewDemo.apk  \n\n1. BlurEffectForAndroidDesign  \n图片模糊效果  \n项目地址：https://github.com/PomepuyN/BlurEffectForAndroidDesign  \n\n1. android-eye  \nPC 端网页查看同一局域网内的手机摄像头内容，可以用来监控哦  \n项目地址：https://github.com/Teaonly/android-eye  \nDemo 地址：https://play.google.com/store/apps/details?id=teaonly.droideye  \n\n1. libpng for Android  \nPNG 图片的 jni 库，支持几乎 png 的所有特性  \n项目地址：https://github.com/julienr/libpng-android  \n文档介绍：http://www.libpng.org/pub/png/libpng.html  \n\n1. android-gpuimage  \n基于 GPU 的图片滤镜  \n项目地址：https://github.com/CyberAgent/android-gpuimage  \n\n1. AndroidFaceCropper  \n图片脸部自动识别，将识别后的局部图片返回  \n项目地址：https://github.com/lafosca/AndroidFaceCropper  \n\n1. Android Video Crop  \n利用 TextureView 播放和剪切视频，类似 ImageView.setScaleType  \n项目地址：https://github.com/dmytrodanylyk/android-video-crop  \nDemo 地址：https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk  \n\n1. svg-android  \nAndroid Svg 矢量图形支持  \n项目地址：https://github.com/japgolly/svg-android https://github.com/japgolly/svg-android  \n\n1. Android Visualizer  \n从 Android MediaPlayer 获得音频，然后像 iTunes 及 WinAmp 一样展示音轨  \n项目地址：https://github.com/felixpalmer/android-visualizer  \n\n1. ExoPlayer  \n包括仪表板和 SmoothStreaming 自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新  \n项目地址：https://github.com/google/ExoPlayer  \n\n1. DanmakuFlameMaster  \nandroid 上开源弹幕解析绘制引擎项目  \n项目地址：https://github.com/ctiao/DanmakuFlameMaster  \n\n1. OpenDanmaku  \nandroid 上一个轻量级的更简单的开源弹幕控件  \n项目地址：https://github.com/linsea/OpenDanmaku  \n\n### 八、事件总线(订阅者模式)\n通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments 及后台线程)之间的通信  \n\n1. EventBus  \ngreenrobot 的开源项目  \n项目地址：https://github.com/greenrobot/EventBus  \n原理剖析文档：[EventBus](http://a.codekk.com/detail/Android/Trinea/EventBus 源码解析)  \n文档介绍：https://github.com/greenrobot/EventBus#general-usage-and-api  \n特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI 线程、单一后台线程、异步线程  \n(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊  \n(3) 不是基于 annotations  \n(4) 性能更优  \n(5) 体积小  \n(6) 支持单例创建或创建多个对象  \n(7) 支持根据事件类型订阅  \n\n1. Otto  \nSquare 的开源项目，基于 Guava 的 Android 优化  \n项目地址：https://github.com/square/otto  \n文档介绍：http://square.github.io/otto/  \n[EventBus 与 Otto 的功能及性能对比文档](https://github.com/greenrobot/EventBus#comparison-with-squares-otto)  \n[EventBus 与 Otto 性能对比 Demo Apk](https://play.google.com/store/apps/details?id=de.greenrobot.eventperf)  \n\n### 九、传感器\n1. Great Android Sensing Toolkit  \nAndroid 感应器工具包，包含示例及使用过程中可能需要的算法  \n项目地址：https://github.com/gast-lib/gast-lib  \nDemo 地址：https://play.google.com/store/apps/details?id=root.gast.playground  \n文档介绍：https://github.com/gast-lib/gast-lib#documentation  \n\n1. SensorManager  \nAndroid 传感器管理  \n项目地址：https://github.com/nlathia/SensorManager  \n文档介绍：https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit  \n\n1. GPSLogger  \n记录 GPS 信息  \n项目地址：https://github.com/mendhak/gpslogger  \nDemo 地址：https://play.google.com/store/apps/details?id=com.mendhak.gpslogger  \n文档介绍：http://code.mendhak.com/gpslogger/  \n\n1. Pedometer  \n计步器，使用硬件计步感应器  \n项目地址：https://github.com/j4velin/Pedometer  \n\n1. leapcast  \nChromeCast 模拟器的 App  \n项目地址：https://github.com/dz0ny/leapcast  \n\n1. Arduino-Communicator  \n与 Arduino 通信的 App  \n项目地址：https://github.com/jeppsson/Arduino-Communicator  \n\n1. android-pedometer  \nAndroid 计步器  \n项目地址：https://github.com/bagilevi/android-pedometer  \nDemo 地址：http://pedometer.googlecode.com/files/Pedometer-1.4.apk  \n\n1. OwnTracks for Android  \n自己的轨迹记录  \n项目地址：https://github.com/owntracks/android  \n\n1. Shake Detector library for Android  \nAndroid 手机震动摇晃检测库，提供供 UI 线程调用的回调接口  \n项目地址：https://github.com/tbouron/ShakeDetector  \nDemo 地址：https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example  \n\n1. Android heart rate monitor  \nAndroid 心跳检测  \n项目地址：https://github.com/phishman3579/android-heart-rate-monitor  \n\n1. Bluetooth LE Library for Android  \n蓝牙源信息，包括宝库 Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息  \n项目地址：https://github.com/alt236/Bluetooth-LE-Library---Android  \nDemo 地址：https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan  \n\n1. farebot  \n通过 NFC 从公交卡中读取数据的一个应用  \n项目地址：https://github.com/codebutler/farebot  \n\n### 十、安全\n1. SQLCipher  \nSqlite 加密工具  \n项目地址：https://github.com/sqlcipher/sqlcipher  \n文档介绍：http://sqlcipher.net/sqlcipher-for-android/  \n\n1. Conceal  \n快速高效的进行文件加密解密  \n项目地址：https://github.com/facebook/conceal  \n文档介绍：https://github.com/facebook/conceal#usage  \n\n1. Android-PasscodeLock  \n应用锁，每次启动或从任何 Activity 启动应用都需要输入四位数字的密码方可进入  \n项目地址：https://github.com/wordpress-mobile/Android-PasscodeLock  \nDemo 地址：https://play.google.com/store/apps/details?id=org.wordpress.android  \nAPP 示例：Wordpress Android，支付宝，挖财  \n\n1. GlowPadBackport  \n将 Android4.2 的锁屏界面解锁扩展到 Android1.6 及 1.6+  \n项目地址：https://github.com/rock3r/GlowPadBackport  \nDemo 地址：https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample  \n\n1. GlowPadView  \nAndroid 4 锁屏界面解锁  \n项目地址：https://github.com/nadavfima/GlowPadView  \n\n1. Android-InsecureBank  \n关于 Android 不安全性的示例  \n项目地址：https://github.com/dineshshetty/Android-InsecureBankv2  \n\n### 十一、插件化\n更多见：[Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案](http://www.trinea.cn/android/android-plugin/)  \n\n1. dynamic-load-apk  \nAndroid 动态加载 Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决  \n项目地址：https://github.com/singwhatiwanna/dynamic-load-apk  \n原理剖析文档：[dynamic-load-apk](http://a.codekk.com/detail/Android/FFish/DynamicLoadApk 源码解析)  \n文档介绍：http://blog.csdn.net/singwhatiwanna/article/details/22597587  \n\n1. Android Dynamic Loader  \n点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现  \n项目地址：https://github.com/mmin18/AndroidDynamicLoader  \nDemo 地址：https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk  \n\n1. xCombine  \nAndroid App 插件式插件开发，插件必须先安装，更推荐看上面两个开源项目  \n项目地址：https://github.com/wyouflf/xCombine  \n文档介绍：http://my.oschina.net/u/1171837/blog/155377  \n\n1. Android Plugin Framework  \nAndroid 插件式开发，开放的源码目前不完整  \n项目地址：https://github.com/umeng/apf  \n\n1. Android OpenAtlas  \nAndroid插件框架，基于OSGI，非代理方式，组件需要在宿主中声明  \n项目地址：https://github.com/bunnyblue/OpenAtlas  \nDemo 地址：https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk \n\n1. multidex  \n安装多 dex 的 classloader  \n项目地址：https://github.com/casidiablo/multidex  \n\n1. ANR-WatchDog  \nAndroid ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件  \n项目地址：https://github.com/SalomonBrys/ANR-WatchDog  \n\n### 十二、文件\n对不同文档类型的处理，包括 PDF、Word、EPub、Html、Zip 等  \n\n1. purePDF  \n允许从任何运行的 SWF 文件读取和创建 PDF 文档  \n项目地址：https://github.com/sephiroth74/purePDF  \n\n1. android-pdfview  \n快速解析 pdf 的 view，默认支持手势缩放和相关动画  \n项目地址：https://github.com/JoanZapata/android-pdfview  \n\n1. Office 365 SDK for Android Preview  \n可支持 Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail  \n项目地址：https://github.com/OfficeDev/Office-365-SDK-for-Android  \n\n1. OpenSpritz-Android  \nEPub 阅读器  \n项目地址：https://github.com/OnlyInAmerica/OpenSpritz-Android  \n\n1. jsoup  \n一个解析 html 的 java 库，可方便的提取和操作数据  \n项目地址：https://github.com/jhy/jsoup  \n官网网址：http://jsoup.org/  \n作用：(1) 从一个 url、文件或 string 获得 html 并解析  \n(2) 利用 dom 遍历或 css 选择器查找、提取数据  \n(3) 操作 html 元素  \n(4) 根据白名单去除用于提交的非法数据防止 xss 攻击  \n(5) 输出整齐的 html  \n\n1. ZIP  \njava 压缩和解压库  \n项目地址：https://github.com/zeroturnaround/zt-zip  \n文档介绍：https://github.com/zeroturnaround/zt-zip#examples  \n作用：(1) 解压和压缩，并支持文件夹内递归操作  \n(2) 支持包含和排除某些元素  \n(3) 支持重命名元素  \n(4) 支持遍历 zip 包内容  \n(5) 比较两个 zip 包等功能  \n\n1. Image File Selector  \n轻量级的图片文件选择器，用系统api选取，压缩和裁切图片，可以方便的得要指定尺寸的图片  \n项目地址：https://github.com/sw926/ImageFileSelector  \n\t\n### 十三、其他\n\n1. FragmentStack  \n一个封装了启动模式的Fragment便捷使用库,方便构建单Activity+多Fragment轻量级框架  \n项目地址：https://github.com/Mr-wangyong/FragmentStack  \nApp示例：[南瓜电影](http://www.wandoujia.com/apps/cn.vcinema.cinema)  \n\n1. CustomTabsHelper\n快速集成 CustomTabs 的工具类  \n项目地址：https://github.com/DreaminginCodeZH/CustomTabsHelper  \n\n1. Salvage view  \n带 View 缓存的 Viewpager PagerAdapter，很方便使用  \n项目地址：https://github.com/JakeWharton/salvage  \n\n1. Android Priority Job Queue  \nAndroid 后台任务队列  \n项目地址：https://github.com/path/android-priority-jobqueue  \n文档介绍：https://github.com/path/android-priority-jobqueue#getting-started  \n\n1. Cobub Razor  \n开源的 mobile 行为分析系统，包括 web 端、android 端，支持 ios 和 window phone  \n项目地址：https://github.com/cobub/razor  \nDemo 地址：http://demo.cobub.com/razor  \n官网网址：http://dev.cobub.com/  \n\n1. Countly  \nAndroid 移动端数据采集分析系统  \n项目地址：https://github.com/Countly/countly-sdk-android  \n官网网址：https://count.ly/  \n\n1. aFileChooser  \n文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。  \n项目地址：https://github.com/iPaulPro/aFileChooser  \n\n1. androidpn  \n基于 xmpp 协议的消息推送解决方案，包括服务器端和 android 端。  \n项目地址：https://github.com/dannytiehui/androidpn  \n\n1. Bolts  \nAndroid 的异步编程模式  \n项目地址：https://github.com/BoltsFramework/Bolts-Android/  \n与 AsyncTask 比较：(1) 使用的是无大小限制的线程池  \n(2) 任务可组合可级联，防止了代码耦合  \n\n1. CastCompanionLibrary-android  \n使 Android 程序中更快的接入 Google Cast  \n项目地址：https://github.com/googlecast/CastCompanionLibrary-android  \n文档介绍：https://developers.google.com/cast/  \n\n1. CastVideos-android  \n从 Android 设备分享 Video 通过 Google Cast  \n项目地址：https://github.com/googlecast/CastVideos-android  \n文档介绍：https://developers.google.com/cast/  \n\n1. Uninstall_Statics  \nAndroid 应用自身被卸载监听及打开浏览器等反馈功能实现  \n项目地址：https://github.com/sevenler/Uninstall_Statics  \n文档介绍：http://www.cnblogs.com/zealotrouge/p/3157126.html  http://www.cnblogs.com/zealotrouge/p/3159772.html  \n1. Memento  \n保证在系统配置改变时，Activity 中的某些数据可以简单安全的保持不变  \n项目地址：https://github.com/mttkay/memento  \n文档介绍：https://github.com/mttkay/memento#usage  \n\n1. FreeFlow  \n布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画  \n项目地址：https://github.com/Comcast/FreeFlow  \nDemo 地址：https://github.com/Comcast/FreeFlow/releases  \n\n1. Android Gesture Detectors Framework  \nAndroid 手势框架，支持双指旋转、移动、平移、缩放等  \n项目地址：https://github.com/Almeros/android-gesture-detectors  \n\n1. Mapbox Android SDK  \nAndroid Map 的替代版  \n项目地址：https://github.com/mapbox/mapbox-android-sdk  \n\n1. Activity animation  \nActivity 跳转动画，支持各个方向波浪的效果  \n项目地址：https://github.com/flavienlaurent/activityanimation  \n在线演示：https://www.youtube.com/watch?v=-E0sc6w_Jck  \n\n1. KryoNet  \n通过 NIO 提供客户端和服务器端 TCP/UDP 网络传输的 Java 库  \n项目地址：https://github.com/EsotericSoftware/kryonet  \n\n1. Rebound  \n一个模仿弹簧反弹的 Java 库，可用于创建动画  \n项目地址：https://github.com/facebook/rebound  \n\n1. Android Social Networks  \n社交网络接入统一管理器，可方便的从 Twitter, LinkedIn, Facebook, Google Plus 登陆、获得个人信息、发送消息、发送专篇、添加或删除好友  \n项目地址：https://github.com/antonkrasov/AndroidSocialNetworks  \nDemo 地址：https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos  \n\n1. SmartAppUpdates  \nAndroid App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级  \n项目地址：https://github.com/cundong/SmartAppUpdates  \n\n1. Magnet  \n创建类似 Facebook 聊天桌面悬浮窗的效果  \n项目地址：https://github.com/premnirmal/Magnet  \n\n1. AcDisplay  \n将 Android 的通知都集中到锁屏显示  \n项目地址：https://github.com/AChep/AcDisplay  \nDemo 地址：https://play.google.com/store/apps/details?id=com.achep.acdisplay  \n\n1. QrCodeScan  \nZXing 和 ZBar 结合的二维码扫描项目，提高了扫描效率  \n项目地址：https://github.com/SkillCollege/QrCodeScan  \n\n1. Android-ScreenShot  \n实现 android 系统截屏功能  \n项目地址：https://github.com/Android-ScreenShot/AndroidScreenShotService  \n文档介绍：http://blog.csdn.net/buptgshengod/article/details/39155979  \n\n1. card.io SDK for Android  \n信用卡扫描 Android SDK  \n项目地址：https://github.com/card-io/card.io-Android-SDK  \nDemo 项目：https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp  \n\n1. ASNE  \nTwitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能  \n项目地址：https://github.com/gorbin/ASNE  \nDemo 地址：https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne  \n\n1. Android Signature Pad  \nAndroid 自定义的签名 View，可自定义笔颜色和大小  \n项目地址：https://github.com/gcacace/android-signaturepad  \nDemo 项目：https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example  \n\n1. Teleport  \nAndroid Wear 数据同步和消息传送库  \n项目地址：https://github.com/Mariuxtheone/Teleport  \n\n1. DebugLog  \n可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。  \n项目地址：https://github.com/MustafaFerhan/DebugLog  \n\n1. Logger  \n简单、美观而且十分强大的 Android 日志工具  \n项目地址：https://github.com/orhanobut/logger  \nDemo 地址：https://github.com/orhanobut/logger/tree/master/app  \n\n1. jlog  \n可以灵活配置的日志工具，支持JSON打印，日志保存到指定文件，日志显示调用位置（混淆模式下依然有效）  \n项目地址：https://github.com/JiongBull/jlog  \nDemo 地址：[apk地址](https://raw.githubusercontent.com/JiongBull/jlog/master/apk/JLog_sample.apk)  \n\n1. Phrase  \nsquare 组开源大牛写的字符串替换类  \n项目地址：https://github.com/square/phrase  \n\n1. ColorPhrase  \n模仿 phrase 写的对字符串个别字符颜色改变的类，高效强大！  \n项目地址：https://github.com/THEONE10211024/ColorPhrase  \n\n1. PinyinSearch  \n一个为 T9 搜索和 Qwerty 搜索,提供数据解析与匹配等方法的拼音搜索 java 库。  \n项目地址： https://github.com/handsomezhou/PinyinSearchLibrary  \nDemo 地址： [ContactsSearch](https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/ContactsSearch.apk?raw=true)    [AppSearch](https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/AppSearch.apk?raw=true)  \nAPP 示例： 通讯录应用，微信电话本  \n\n1. PrainView  \nPaintView 是一个画图工具:  \n可直接使用设定按钮来实现已拥有的方法，且拓展性强  \n基础功能：更换颜色、更换橡皮、以及更换橡皮和笔的粗细、清屏、倒入图片  \n特殊功能：保存画笔轨迹帧动画、帧动画导入导出、ReDo和UnDo  \n项目地址：[Paintview](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/DrawAPicture.apk)  \n原理解析：[PaintView 绘图控件解析](http://www.cnblogs.com/lfk-dsk/p/4768850.html)  \n\n1. CodeView  \nCodeView代码查看／修改工具: 基于WebView制作的代码编辑器,实现代码高亮，暗色主题  \n项目地址：[CodeView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. ExplorerView  \n文件浏览器：继承自ListView，可拓展性强，可进行文件类型分析  \n项目地址：[CodeView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. ReadView  \n小说阅读器，支持文字字体、颜色、背景、进度等多种调整，支持一键设置。  \n项目地址：[ReadView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. MarkDownView  \n支持MarkDown语法的渲染器,基于WebView的MarkDown渲染器,支持标准化的MarkDown语法,\n调用接口和CodeView保持一致使用简便  \n项目地址：[ReadView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. VerTextView竖行排版的TextView:  \n支持竖行排版，添加了下划线功能，开启简便，下划线粗细、颜色、间距均可自定义，  \n接口调用方式与TextView相似，使用简便。  \n项目地址：[ReadView](https://github.com/lfkdsk/JustWeTools)  \ndemo地址：[apk地址](https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk)  \n\n1. GHDownload下载框架  \n支持单线程和多线程断点下载，简单易用。  \n项目地址：[GHDownload](https://github.com/guanchao/GHDownload)  \n\n\n## 第三部分 优秀项目\n主要介绍那些 Android 还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。  \n\n### 一、系统及平台\n1. Linux  \n项目地址：https://github.com/torvalds/linux  \n1. Android  \n项目地址：https://android.googlesource.com/  \n\n### 二、项目\n1. ZXing  \n二维码扫描工具  \n项目地址：https://github.com/zxing/zxing 或 https://code.google.com/p/zxing/  \nAPK 地址：https://play.google.com/store/apps/details?id=com.google.zxing.client.android  \n其他：现在市面上很多应用的二维码扫描功能都是从这个修改而来  \n\n1. photup  \n编辑机批量上传照片到 facebook 上  \n项目地址：https://github.com/chrisbanes/photup  \nAPK 地址：https://play.google.com/store/apps/details?id=uk.co.senab.photup  \n其他：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  \n\n1. github-android  \nGithub 的 Android 客户端项目  \n项目地址：https://github.com/github/android  \nAPK 地址：https://play.google.com/store/apps/details?id=com.github.mobile  \n\n1. Notes  \nMIUI 便签  \n项目地址：https://github.com/MiCode/Notes  \nAPK 地址：https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true  \n其他：项目分包比较合理，相比较 miui 的文件管理器 https://github.com/MiCode/FileExplorer 代码规范较好得多  \n\n1. weicuiyuan  \n四次元-新浪微博客户端  \n项目地址：https://github.com/qii/weiciyuan  \nAPK 地址：https://play.google.com/store/apps/details?id=org.qii.weiciyuan  \n\n1. Douya  \n豆芽——Material Design 的豆瓣客户端  \n项目地址：https://github.com/DreaminginCodeZH/Douya  \n\n1. gnucash-android  \n一个记账理财软件  \n项目地址：https://github.com/codinguser/gnucash-android  \nAPK 地址：http://play.google.com/store/apps/details?id=org.gnucash.android  \n\n1. AntennaPod  \n支持 rss 订阅、音乐订阅  \n项目地址：https://github.com/danieloeh/AntennaPod  \nAPK 地址：https://play.google.com/store/apps/details?id=de.danoeh.antennapod  \n\n1. ChaseWhisplyProject  \n打鬼游戏  \n项目地址：https://github.com/tvbarthel/ChaseWhisplyProject  \nAPK 地址：https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply  \n\n1. Tweet Lanes  \n功能完整的 Twitter 客户端  \n项目地址：https://github.com/chrislacy/TweetLanes  \nAPK 地址：https://play.google.com/store/apps/details?id=com.tweetlanes.android  \n\n1. Financius  \n简单易用的记账程序  \n项目地址：https://github.com/mvarnagiris/Financius  \nAPK 地址：https://play.google.com/store/apps/details?id=com.code44.finance  \n\n1. todo.txt-android  \ntodo.txt 的官方 Android 应用  \n项目地址：https://github.com/ginatrapani/todo.txt-android  \nAPK 地址：https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch  \n\n1. simpletask  \n基于 todo.txt 官方应用的另一个客户端  \n项目地址：https://github.com/mpcjanssen/simpletask-android  \nAPK 地址：https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo  \n\n1. Muzei Live Wallpaper  \n定时更换桌面精美壁纸  \n项目地址：https://github.com/romannurik/muzei  \nAPK 地址：https://play.google.com/store/apps/details?id=net.nurik.roman.muzei  \n\n1. Scanbook  \n扫描搜索查询图书信息  \n项目地址：https://github.com/JayFang1993/ScanBook  \nAPK 地址：http://www.wandoujia.com/apps/com.scanbook  \n\n1. iosched  \nThe Google I/O 2014 Android App  \n项目地址：https://github.com/google/iosched  \nAPK 地址：https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched  \n\n## 第四部分 开发工具及测试工具\n主要介绍和 Android 开发工具和测试工具相关的开源项目。  \n\n### 一、开发效率工具\n1. Parceler  \n通过注解及工具类自动完成实体类 Parcelable 及值传递  \n项目地址：https://github.com/johncarl81/parceler  \n\n1. Json2Java  \n根据 JSon 数据自动生成对应的 Java 实体类，还支持 Parcel、Gson Annotations 对应代码自动生成。期待后续的提取父类以及多 url 构建整个工程的功能  \n项目地址：https://github.com/jonfhancock/JsonToJava  \n在线演示：http://jsontojava.appspot.com/  \n\n1. IntelliJ Plugin for Android Parcelable boilerplate code generation  \nAndroid studio 插件，生成 Parcelable 代码  \n项目地址：https://github.com/mcharmas/android-parcelable-intellij-plugin  \n\n1. Android Holo Colors IntelliJ Plugin  \nAndroid studio 插件，生成 holo 样式 9 patch 图片  \n项目地址：https://github.com/jeromevdl/android-holo-colors-idea-plugin  \n\n1. Android Drawable Factory  \n用于生成各个分辨率的图片  \n项目地址：https://github.com/tizionario/AndroidDrawableFactory  \n\n1. SelectorChapek for Android  \nAndroid Studio 插件，可根据固定文件名格式资源自动生成 drawable selectors xml 文件。  \n项目地址：https://github.com/inmite/android-selector-chapek  \n\n1. Android Action Bar Style Generator  \nAndroid ActionBar 样式生成器，可在线选择 ActionBar 样式自动生成所需要的图片资源及 xml 文件  \n项目地址：https://github.com/jgilfelt/android-actionbarstylegenerator  \n在线演示：http://jgilfelt.github.io/android-actionbarstylegenerator/  \n\n1. ButterKnifeZelezny  \n用于快速生成[ButterKnife](https://github.com/JakeWharton/butterknife)View 注入代码的 Android Studio/IDEA 插件  \n项目地址：https://github.com/inmite/android-butterknife-zelezny  \n\n1. RoboCoP  \n利用 Gradle task 根据固定格式的 json 文件生成 ContentProvider  \n项目地址：https://github.com/mediarain/RoboCoP  \n\n1. appiconsizes  \n用于生成各个分辨率的图片  \n项目地址：http://www.appiconsizes.com/  \n\n1. AndroidUtiles \n集合了所有常用的安卓工具类\n项目地址：https://github.com/l123456789jy/Lazy\n\n1. Gradle Retrolambda Plugin  \n[Retrolambda](https://github.com/orfjackal/retrolambda)是将 Java8 的 Lambdas 应用于 Java7 的工具，本项目是 Gradle 插件，通过 Retrolambda 从而使 Java 或 Android 项目用 Java8 的 Lambdas 编写，将编译后的字节码转换为 Java6 和 7 的字节码从而正常运行  \n项目地址：https://github.com/evant/gradle-retrolambda  \n\n1. Dagger IntelliJ Plugin  \ndagger 的 intellij 插件  \n项目地址：https://github.com/square/dagger-intellij-plugin  \n\n1. Android Gen Drawable Maven plugin  \n在编译时根据 SVG 描述文件生成不同分辨率的 jpg、png 或点 9 图片  \n项目地址：https://github.com/avianey/androidgendrawable-maven-plugin  \n\n1. Android Asset Studio  \n各种 Android 资源自动生成器，包括启动图标、ActionBar 图标、通知栏图标、点 9 等  \n项目地址：https://github.com/romannurik/AndroidAssetStudio  \n在线演示：http://romannurik.github.io/AndroidAssetStudio/  \n\n1. jsonschema2pojo  \n根据 Json 内容生成 java 对象，支持 jackjson 和 gson  \n项目地址：https://github.com/joelittlejohn/jsonschema2pojo  \n在线演示：http://www.jsonschema2pojo.org/  \n\n1. GsonFormat  \n根据 JSONObject 格式的字符串,自动生成实体类参数的 Android Studio/IntelliJ IDEA 插件  \n项目地址：https://github.com/zzz40500/GsonFormat  \n\n1. 9-Patch-Resizer  \n自动生成 png 及点 9 图片的不同分辨率版本  \n项目地址：https://github.com/redwarp/9-Patch-Resizer  \n\n1. AndroidLocalizationer  \n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件  \n项目地址：https://github.com/westlinkin/AndroidLocalizationer  \n\n1. Material Palette  \n一个将现有的色彩方案组合成材料设计的调色板方案，提供下载。选取两个主要色彩后便可以提供下载，提供下载的格式可以是 android 的资源 xml 文件，以色彩的方式提供，也可以是 CSS、SVG、PNG 等常见格式文件。  \n项目地址：http://www.materialpalette.com/  \n\n### 二、开发自测相关\n1. Quality Tools for Android  \nAndroid 测试及自测工具集合和示例  \n项目地址：https://github.com/stephanenicolas/Quality-Tools-for-Android  \n\n1. android-test-kit  \nGoogle 的 Android 测试工具  \n包括 GoogleInstrumentationTestRunner(增强版的 InstrumentationTestRunner)和 Espresso(用于快速写出可靠测试用例的 API)  \n项目地址：https://code.google.com/p/android-test-kit/  \n文档介绍：https://code.google.com/p/android-test-kit/w/list  \n\n1. robolectric  \n测试用例编写框架  \n项目地址：https://github.com/robolectric/robolectric  \nDemo 地址：https://github.com/robolectric/robolectricsample  \n文档介绍：http://robolectric.org/  \n特点：(1). 不需要模拟器在一般 JVM 就可以运行测试用例  \n(2). 能完成在真机上的大部分测试包括感应器  \n其他的测试用例及相关模块 Mock 可见：[android-mock](https://code.google.com/p/android-mock/), [mockito](https://code.google.com/p/mockito/), [easy-mock](https://github.com/easymock/easymock)  \n\n1. Android FEST  \n提供一些列方便的断言，可用于提高编写 Android 自测代码效率  \n项目地址：https://github.com/square/fest-android  \n\n1. BoundBox  \n可用于测试类各种访问权限的属性、方法。实际是通过 BoundBox 这个 annotation 生成一个属性和方法都是 public 权限的中间类并对此类进行测试完成的  \n项目地址：https://github.com/stephanenicolas/boundbox  \n\n1. Hugo  \n用于打印函数信息及执行时间的工具，仅在 debug 模式生效  \n项目地址：https://github.com/JakeWharton/hugo  \n\n1. scalpel  \n在应用下面添加一层用于界面调试  \n项目地址：https://github.com/JakeWharton/scalpel  \n\n1. Android Screenshot library  \nAndroid 截图工具类，用于在持续集成时截图  \n项目地址：https://github.com/rtyley/android-screenshot-lib  \n\n1. sonar-android-lint-plugin  \n将 android lint 的错误在 sonar 中展现  \n项目地址：https://github.com/SonarCommunity/sonar-android  \n\n### 三、测试工具\n1. Spoon  \n可用于 android 不同机型设备自动化测试，能将应用 apk 和测试 apk 运行在不同机器上并生成相应测试报告。  \n项目地址：https://github.com/square/spoon  \n\n1. Tencent APT  \nAPT 是腾讯开源的一个 Android 平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试  \n项目地址：https://github.com/stormzhang/APT  \n\n1. Emmagee  \n网易开源的性能测试工具，包括 CPU、内存、网络流量、启动时间、电池状态等  \n项目地址：https://github.com/NetEase/Emmagee  \n\n1. Android py-uiautomator  \npy-uiautomator 是一个对 Android uiautomator 用 python 进行封装的测试框架.  \n项目地址：https://github.com/xiaocong/uiautomator  \n\n1. Augmented Traffic Control  \n模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率  \n项目地址：https://github.com/facebook/augmented-traffic-control  \n\n1. stetho  \n强大的 Android Debug 工具。支持网络请求监控以及数据库查看，可以和 Chrome DevTools 结合或者命令行模式。  \n项目地址：https://github.com/facebook/stetho  \n\n### 四、开发及编译环境\n1. Buck  \nfacebook 开源的 Android 编译工具，效率是 ant 的两倍。主要优点在于：  \n(1) 加快编译速度，通过并行利用多核 cpu 和跟踪不变资源减少增量编译时间实现  \n(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件  \n(3) 编译同时可生成单元测试结果  \n(4) 既可用于 IDE 编译也可用于持续集成编译  \n(5) facebook 持续优化中  \n项目地址：https://github.com/facebook/buck  \n\n1. Android Maven Plugin  \nAndroid Maven 插件，可用于对 android 三方依赖进行管理。在 J2EE 开发中，maven 是非常成熟的依赖库管理工具，可统一管理依赖库。  \n项目地址：https://github.com/jayway/maven-android-plugin  \n\n1. umeng-muti-channel-build-tool  \n渠道打包工具  \n项目地址：https://github.com/umeng/umeng-muti-channel-build-tool  \n另可参见 Google 的构建系统 Gradle：http://tools.android.com/tech-docs/new-build-system/user-guide  \n\n1. Genymotion  \n目前最好用最快的 android 模拟器  \n项目地址：http://www.genymotion.com/  \nAndroid studio 集成控件： http://plugins.jetbrains.com/plugin/7269?pr=idea  \nCyril Mottier 推荐：http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/  \n\n1. gradle-mvn-push  \n方便的将 Gradle 的 Artifacts 上传到 Maven 仓库  \n项目地址：https://github.com/chrisbanes/gradle-mvn-push  \n文档介绍：https://github.com/chrisbanes/gradle-mvn-push#usage  \n\n1. Android Emulator Plugin for Jenkins  \nAndroid 模拟器 jenkins 插件，用于 Jenkins 做持续集成时跑模拟器测试  \n项目地址：https://github.com/jenkinsci/android-emulator-plugin  \n\n1. Android Maven Plugin  \n管理应用所需要的依赖库。包括的构建工具有 Maven、Gradle、ant、sbt  \n项目地址：https://github.com/mosabua/maven-android-sdk-deployer  \n\n1. SDK Manager Plugin  \n下载和管理 Android SDK 的 Gradle 插件  \n项目地址：https://github.com/JakeWharton/sdk-manager-plugin  \n\n1. Gradle Protobuf Plugin  \n将.proto 文件转换成 Java 文件的 gradle 插件  \n项目地址：https://github.com/andrewkroh/gradle-protobuf-plugin  \n\n1. ChromeADB  \nChrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等  \n项目地址：https://github.com/importre/chromeadb  \n\n### 五、其他\n1. GT  \nAPP的随身调试平台，它是直接运行在手机上的“集成调试环境”(IDTE, Integrated Debug Environment)。  \n项目地址：https://github.com/TencentOpen/GT  \n文档介绍：http://gt.qq.com/docs.html  \n\n1. ViewServer  \n允许 app 运行在任何手机上都可以用 HierarchyViewer 查看  \n项目地址：https://github.com/romainguy/ViewServer  \n\n1. GridWichterle for Android  \n在整个系统上显示一个 grid，用来帮助查看应用布局及使得布局更美观，可设置 grid 网格大小和颜色，android 推荐 48dp 和 8dp，可见 Android Design Guidelines – Metrics and Grids，比起 hierarchyviewer 相差甚远，不过偶尔可用来作为布局查看工具。  \n项目地址：https://github.com/inmite/android-grid-wichterle  \nDemo 地址：https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle  \n\n1. Catlog  \n手机端 log 查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程 id 过滤、录制功能等  \n项目地址：https://github.com/nolanlawson/Catlog  \n在线演示：https://play.google.com/store/apps/details?id=com.nolanlawson.logcat  \n\n1. PID Cat  \n根据 package 查看 logcat 日志  \n项目地址：https://github.com/JakeWharton/pidcat  \n\n1. ACRA  \n应用崩溃信息日志上报到 GoogleDoc 工具，网页版展现结果三方开源地址 https://github.com/BenoitDuffez/crashreportsviewer  \n项目地址：https://github.com/ACRA/acra  \n文档介绍：https://github.com/ACRA/acra/wiki/BasicSetup  \n\n1. Crashlytics  \n提供丰富的应用崩溃信息日志收集  \n轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知  \n项目地址：http://www.crashlytics.com/  \n集成插件：[Android Studio, Eclipse and IntelliJ](http://try.crashlytics.com/sdk-android/?utm_source=blog&utm_medium=blog&utm_campaign=Announcing_android_studio_wp&utm_content=CTA_button)  \n\n1. Android Resource Navigator  \nchrome 插件，可以方便的查看 github 上 android 源码工程的 styles.xml 和 themes.xml。主要功能：  \n(1) 快速打开 android styles.xml themes.xml  \n(2) 方便在资源间跳转。styles.xml themes.xml 文件中资源链接跳转，可以方便跳转到某个资源  \n(3) 方便查找某个 style 和 theme。chrome 地址栏输入 arn+tab+搜索内容回车即可  \n(4) 自动下载不同分辨率下的 drawable  \n(5) 通过映射查找那些不是按照固定命名规则命名的 style 和 theme  \n项目地址：https://github.com/jgilfelt/android-resource-navigator  \n在线演示：https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&gl=GB  \n\n1. android-resource-remover  \n根据 lint 的提示删除项目中无用的资源，减少包的大小  \n项目地址：https://github.com/KeepSafe/android-resource-remover  \n\n1. Telescope  \n通过手势截图以特定主题发送到特定邮箱地址报告 Bug  \n项目地址：https://github.com/mattprecious/telescope  \n\n1. Complete Android Fragment & Activity Lifecycle  \n完整的 Android Fragment/Activity 生命周期图  \n项目地址：https://github.com/xxv/android-lifecycle  \n\n1. Bugsnag Notifier for Android  \n通过`Thread.UncaughtExceptionHandler`捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器  \n项目地址：https://github.com/bugsnag/bugsnag-android  \n文档介绍：https://github.com/bugsnag/bugsnag-android#installation--setup  \n\n1. Material Design Icons  \nGoogle Material Design 规范中的 Icon  \n项目地址：https://github.com/google/material-design-icons  \n\n1. scrollscreenshot  \nAndroid 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接  \n项目地址：https://github.com/PGSSoft/scrollscreenshot  \n\n1. droidicon  \n1600+的海量 Icon，包括 750+的 Material Design icons  \n项目地址：https://github.com/theDazzler/droidicon  \n\n1. leakcanary  \nAndroid 内存泄露检测工具，集成方便，出现泄露后报告直观  \n项目地址：https://github.com/square/leakcanary  \n\n1. CacheUtilsLibrary  \n将任何Java Object类型的数据序列化后写入缓存文件，将来使用时读取缓存文件并反序列化成对应Java Object的库  \n项目地址：https://github.com/westlinkin/CacheUtilsLibrary\n\n1. BlockCanary  \nBlockCanary是一个Android平台的一个非侵入式的性能监控组件，应用只需要实现一个抽象类，提供一些该组件需要的上下文环境，就可以在平时使用应用的时候检测主线程上的各种卡慢问题，并通过组件提供的各种信息分析出原因并进行修复。  \n项目地址: https://github.com/moduth/blockcanary  \n\n## 第五部分  \n主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow 大神，深挖大神的项目和 following，你会发现很多。  \n\n### 一、个人  \n1. JakeWharton  \n就职于 Square，绝对牛逼的大神，项目主要集中在 Android 版本兼容，ViewPager 及开发工具上  \nGithub 地址：https://github.com/JakeWharton  \n代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel    \npidcat 另外对 square 及其他开源项目有很多贡献  \n主页：http://jakewharton.com/  \n\n1. Chris Banes  \nGithub 地址：https://github.com/chrisbanes  \n代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh  \n主页：http://chris.banes.me/  \n\n1. Koushik Dutta  \n就职于 ClockworkMod  \nGithub 地址：https://github.com/koush  \n代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对 https://github.com/CyanogenMod 的开源项目有很多贡献  \n主页：http://koush.com/  \n\n1. Simon Vig  \nGithub 地址：https://github.com/SimonVT  \n代表作：android-menudrawer，MessageBar  \n主页：http://simonvt.net/  \n\n1. Manuel Peinado  \nGithub 地址：https://github.com/ManuelPeinado  \n代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  \n\n1. Emil Sj?lander  \nGithub 地址：https://github.com/emilsjolander  \n代表作：StickyListHeaders，sprinkles，android-FlipView  \n主页：http://emilsjolander.se/  \n\n1. greenrobot  \nGithub 地址：https://github.com/greenrobot  \n代表作：greenDAO，EventBus  \n主页：http://greenrobot.de/  \n\n1. Jeff Gilfelt  \nGithub 地址：https://github.com/jgilfelt  \n代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper  \n主页：http://jeffgilfelt.com  \n\n1. Romain Guy  \nAndroid team 成员(2013.10 已离开 Android team，仍在 Google)  \nGithub 地址：https://github.com/romainguy  \n代表作：ViewServer  \n主页：http://www.curious-creature.org/category/android/  \n個人攝影作品：http://www.flickr.com/photos/romainguy  \n\n1. sephiroth74  \n就职于 Aviary.com  \nGithub 地址：https://github.com/sephiroth74  \n代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF  \n主页：http://www.sephiroth.it/  \n\n1. Cyril Mottier  \nGoogle 开发者专家认证，发布一些 Android 技巧及文章  \nGithub 地址：https://github.com/cyrilmottier  \n代表作：GreenDroid，Polaris  \n主页：http://cyrilmottier.com/  \n\n### 二、组织  \n1. Square  \n有态度有良心的企业，很多不错的分享  \nGithub 地址：https://github.com/square  \n代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon 等等  \n主页：http://square.github.io/  \n\n1. Inmite s.r.o.  \nGithub 地址：https://github.com/inmite  \n代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek  \n主页：http://www.inmite.eu/  \n\n### 三、博客  \n[部分国外著名 Android 开发者信息](https://github.com/android-cn/android-dev-com)  \n\n## 注意\n> 本文转自——**[Trinea 汇总的开源项目](https://github.com/Trinea/android-open-project)**\n> 欢迎大家关注他的微信公众号：codekk。二维码如下：  \n>  专注于 Android 开源分享、源码解析、框架设计、Android 内推。  \n>   ![img](http://www.trinea.cn/wp-content/uploads/2016/01/weixin-codekk-160.jpg)  \n>    他的网站：[www.codekk.com](http://a.codekk.com)\n>  **关于trinea，欢迎关注**  \n>  微博：<a title=\"Android 技术及移动互联网分享\" href=\"http://weibo.com/trinea?s=6cm7D0\" target=\"_blank\">Trinea</a>&nbsp;&nbsp;&nbsp;&nbsp;主页：<a title=\"关注于 Android、Java、性能优化、开源项目\" href=\"http://www.trinea.cn/\" target=\"_blank\">trinea.cn</a> \n\n## 推荐\n> [Android 开源项目源码解析(Volley、UIL、Dagger、EventBus、插件化库等分析)](http://a.codekk.com)\n> \n> [Android 职位内部推荐(阿里、腾讯、百度、京东、滴滴、美团、58、华为、网易、魅族等)](http://j.codekk.com)","slug":"android-open-project","published":1,"updated":"2017-06-06T14:08:27.000Z","layout":"post","photos":[],"link":"","_id":"cjr64ild4007tkds6yzh5e4li","content":"<h2 id=\"目前包括：\"><a href=\"#目前包括：\" class=\"headerlink\" title=\"目前包括：\"></a>目前包括：</h2><blockquote>\n<ol>\n<li>Android 开源项目第一篇——个性化控件(View)篇<br><em>包括：ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style、其他</em>  </li>\n<li>Android 开源项目第二篇——工具库篇<br><em>包括：依赖注入、图片缓存、网络请求、数据库 ORM 工具包、Android 公共库、高版本向低版本兼容库、多媒体、事件总线、传感器、安全、插件化、文件、其他</em>  </li>\n<li>Android 开源项目第三篇——优秀项目篇<br><em>比较有意思的完整的 Android 项目</em>  </li>\n<li>Android 开源项目第四篇——开发及测试工具篇<br><em>包括：开发效率工具、开发自测相关、测试工具、开发及编译环境、其他</em>  </li>\n<li>Android 开源项目第五篇——优秀个人和团体篇<br><em>乐于分享并且有一些很不错的开源项目的个人和组织，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛</em>  <a id=\"more\"></a>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>以下链接网址若存在不能访问，请自行尝试翻墙，推荐使用GreenVPN<br><a href=\"http://gjsq.me/15038648\" target=\"_blank\" rel=\"external\"><img src=\"/resources/greenvpn.gif\" alt=\"好用的GreenVPN\"></a></p>\n<h2 id=\"第一部分-个性化控件-View\"><a href=\"#第一部分-个性化控件-View\" class=\"headerlink\" title=\"第一部分 个性化控件(View)\"></a>第一部分 个性化控件(View)</h2><p>主要介绍那些不错个性化的 View，包括 ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style 等等。  </p>\n<h3 id=\"一、ListView\"><a href=\"#一、ListView\" class=\"headerlink\" title=\"一、ListView\"></a>一、ListView</h3><ol>\n<li><p>android-pulltorefresh<br>一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment 上下左右拉动刷新，比下面 johannilsson 那个只支持 ListView 的强大的多。并且它实现的下拉刷新 ListView 在 item 不足一屏情况下也不会显示刷新提示，体验更好。<br>项目地址：<a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/Android-PullToRefresh</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true</a><br>APP 示例：新浪微博各个页面 </p>\n</li>\n<li><p>android-pulltorefresh-listview<br>下拉刷新 ListView，这个被很多人使用的项目实际有不少 bug，推荐使用 <a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">android-Ultra-Pull-to-Refresh</a><br>项目地址：<a href=\"https://github.com/johannilsson/android-pulltorefresh\" target=\"_blank\" rel=\"external\">https://github.com/johannilsson/android-pulltorefresh</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-Ultra-Pull-to-Refresh<br>下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 <code>API LEVEL &gt;= 8</code><br>项目地址：<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh 源码解析\" target=\"_blank\" rel=\"external\">android-Ultra-Pull-to-Refresh</a><br>Demo 地址：<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>Android-PullToRefreshRecyclerView<br>支持下拉刷新的RecyclerView，同时支持滑动到底部自动加载数据、给RecyclerView添加Header。并且不更改原有RecyclerView的逻辑。<br>项目地址：<a href=\"https://github.com/HomHomLin/Android-PullToRefreshRecyclerView。\" target=\"_blank\" rel=\"external\">https://github.com/HomHomLin/Android-PullToRefreshRecyclerView。</a><br>Demo地址：<a href=\"https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk</a>  </p>\n</li>\n<li><p>DragSortListView<br>拖动排序的 ListView，同时支持 ListView 滑动 item 删除，各个 Item 高度不一、单选、复选、CursorAdapter 做为适配器、拖动背景变化等<br>项目地址：<a href=\"https://github.com/bauerca/drag-sort-listview\" target=\"_blank\" rel=\"external\">https://github.com/bauerca/drag-sort-listview</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv</a><br>APP 示例：Wordpress Android  </p>\n</li>\n<li><p>SwipeListView<br>支持定义 ListView 左右滑动事件，支持左右滑动位移，支持定义动画时间<br>项目地址：<a href=\"https://github.com/47deg/android-swipelistview\" target=\"_blank\" rel=\"external\">https://github.com/47deg/android-swipelistview</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview</a><br>APP 示例：微信 </p>\n</li>\n<li><p>SlideAndDragListView<br>支持ListView的Item的拖动排序、左右滑动事件，可自定义左右滑动显示文字、图标、位移，同时支持onItemClick、onItemLongClick等监听器，提供丰富的回调接口。<br>项目地址：<a href=\"https://github.com/yydcdut/SlideAndDragListView\" target=\"_blank\" rel=\"external\">https://github.com/yydcdut/SlideAndDragListView</a><br>Demo 地址：<a href=\"https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true</a><br>APP 示例：Android 手机QQ 5.0  </p>\n</li>\n<li><p>Android-SwipeToDismiss<br>滑动 Item 消失 ListView，支持 3.0 以下版本见：<a href=\"https://github.com/JakeWharton/SwipeToDismissNOA\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/SwipeToDismissNOA</a><br>项目地址：<a href=\"https://github.com/romannurik/Android-SwipeToDismiss\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/Android-SwipeToDismiss</a><br>Demo 地址：<a href=\"https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code</a>  </p>\n</li>\n<li><p>RecyclerViewSwipeDismiss<br>轻量级支持 support-v7 中的 RecyclerView 的滑动删除(Swipe to dismiss)行为，不需要修改源代码，只要简单的绑定<code>onTouchListener</code><br>项目地址：<a href=\"https://github.com/CodeFalling/RecyclerViewSwipeDismiss\" target=\"_blank\" rel=\"external\">https://github.com/CodeFalling/RecyclerViewSwipeDismiss</a>  </p>\n</li>\n<li><p>PinnedHeaderExpandableListView<br>首先它是一个 ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩<br>项目地址：<a href=\"https://github.com/singwhatiwanna/PinnedHeaderExpandableListView\" target=\"_blank\" rel=\"external\">https://github.com/singwhatiwanna/PinnedHeaderExpandableListView</a><br>APP 示例：百度手机卫士垃圾清理界面  </p>\n</li>\n<li><p>StickyListHeaders<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView，支持快速滑动，支持 Android2.3 及以上<br>项目地址：<a href=\"https://github.com/emilsjolander/StickyListHeaders\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander/StickyListHeaders</a><br>APP 示例：Android 4.0 联系人  </p>\n</li>\n<li><p>pinned-section-listview<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView<br>项目地址：<a href=\"https://github.com/beworker/pinned-section-listview\" target=\"_blank\" rel=\"external\">https://github.com/beworker/pinned-section-listview</a>  </p>\n</li>\n<li><p>PinnedHeaderListView<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView<br>项目地址：<a href=\"https://github.com/JimiSmith/PinnedHeaderListView\" target=\"_blank\" rel=\"external\">https://github.com/JimiSmith/PinnedHeaderListView</a>  </p>\n</li>\n<li><p>QuickReturn<br>ListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href=\"https://github.com/lawloretienne/QuickReturn\" target=\"_blank\" rel=\"external\">https://github.com/lawloretienne/QuickReturn</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn</a>  </p>\n</li>\n<li><p>QuickReturnHeader<br>ListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href=\"https://github.com/ManuelPeinado/QuickReturnHeader\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/QuickReturnHeader</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true</a><br>APP 示例：google plus  </p>\n</li>\n<li><p>IndexableListView<br>ListView 右侧会显示 item 首字母快捷索引，点击可快速滑动到某个 item<br>项目地址：<a href=\"https://github.com/woozzu/IndexableListView\" target=\"_blank\" rel=\"external\">https://github.com/woozzu/IndexableListView</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true</a><br>APP 示例：微信通讯录、小米联系人  </p>\n</li>\n<li><p>CustomFastScrollView<br>ListView 快速滑动，同时屏幕中间 PopupWindows 显示滑动到的 item 内容或首字母<br>项目地址：<a href=\"https://github.com/nolanlawson/CustomFastScrollViewDemo\" target=\"_blank\" rel=\"external\">https://github.com/nolanlawson/CustomFastScrollViewDemo</a>  </p>\n</li>\n<li><p>Android-ScrollBarPanel<br>ListView 滑动时固定的 Panel 指示显示在 scrollbar 旁边<br>项目地址：<a href=\"https://github.com/rno/Android-ScrollBarPanel\" target=\"_blank\" rel=\"external\">https://github.com/rno/Android-ScrollBarPanel</a>  </p>\n</li>\n<li><p>SlideExpandableListView<br>用户点击 listView item 滑出固定区域，其他 item 的区域收缩<br>项目地址：<a href=\"https://github.com/tjerkw/Android-SlideExpandableListView\" target=\"_blank\" rel=\"external\">https://github.com/tjerkw/Android-SlideExpandableListView</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>JazzyListView<br>ListView 及 GridView item 以特殊动画效果进入屏幕，效果包括 grow、cards、curl、wave、flip、fly 等等<br>项目地址：<a href=\"https://github.com/twotoasters/JazzyListView\" target=\"_blank\" rel=\"external\">https://github.com/twotoasters/JazzyListView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample</a><br>在线演示：<a href=\"http://lab.hakim.se/scroll-effects/\" target=\"_blank\" rel=\"external\">http://lab.hakim.se/scroll-effects/</a>  </p>\n</li>\n<li><p>ListViewAnimations<br>带 Item 显示动画的 ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等<br>项目地址：<a href=\"https://github.com/nhaarman/ListViewAnimations\" target=\"_blank\" rel=\"external\">https://github.com/nhaarman/ListViewAnimations</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.haarman.listviewanimations\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.haarman.listviewanimations</a><br>APP 示例：Google plus、Google Now 卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的 ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  </p>\n</li>\n<li><p>DevsmartLib-Android<br>横向 ListView<br>项目地址：<a href=\"https://github.com/dinocore1/DevsmartLib-Android\" target=\"_blank\" rel=\"external\">https://github.com/dinocore1/DevsmartLib-Android</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>TwoWayView<br>横向 ListView 的效果，继承自 AdapterView<br>项目地址：<a href=\"https://github.com/lucasr/twoway-view\" target=\"_blank\" rel=\"external\">https://github.com/lucasr/twoway-view</a>  </p>\n</li>\n<li><p>HorizontalVariableListView<br>支持 Item 宽度不一致的 ListView<br>项目地址：<a href=\"https://github.com/sephiroth74/HorizontalVariableListView\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/HorizontalVariableListView</a>  </p>\n</li>\n<li><p>LinearListView<br>用 LinearLayout 实现的 ListView，可解决多个 ListView 并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍<br>项目地址：<a href=\"https://github.com/frankiesardo/LinearListView\" target=\"_blank\" rel=\"external\">https://github.com/frankiesardo/LinearListView</a>  </p>\n</li>\n<li><p>MultiChoiceAdapter<br>支持多选的 ListView Adapter<br>项目地址：<a href=\"https://github.com/ManuelPeinado/MultiChoiceAdapter\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/MultiChoiceAdapter</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo</a>  </p>\n</li>\n<li><p>EnhancedListView<br>支持横向滑动删除列表项以及撤销删除的 ListView，该项目的前身是<a href=\"https://github.com/timroes/SwipeToDismissUndoList\" target=\"_blank\" rel=\"external\">SwipeToDismissUndoList</a><br>项目地址：<a href=\"https://github.com/timroes/EnhancedListView\" target=\"_blank\" rel=\"external\">https://github.com/timroes/EnhancedListView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo</a>  </p>\n</li>\n<li><p>ListBuddies<br>自动滚动的双列 ListView ，两个 ListView 滚动速度不一致，有视差效果<br>项目地址：<a href=\"https://github.com/jpardogo/ListBuddies\" target=\"_blank\" rel=\"external\">https://github.com/jpardogo/ListBuddies</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies</a>  </p>\n</li>\n<li><p>SwipeMenuListView<br>针对 ListView item 的侧滑菜单<br>项目地址：<a href=\"https://github.com/baoyongzhang/SwipeMenuListView\" target=\"_blank\" rel=\"external\">https://github.com/baoyongzhang/SwipeMenuListView</a><br>APP 示例：手机 QQV5.0  </p>\n</li>\n<li><p>PagingListView<br>分页加载的 ListView。当滑动到 ListView 底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href=\"https://github.com/nicolasjafelle/PagingListView\" target=\"_blank\" rel=\"external\">https://github.com/nicolasjafelle/PagingListView</a>  </p>\n</li>\n<li><p>PullZoomView<br>支持下拉时 HeaderView 缩放的 ListView、ScrollView<br>项目地址：<a href=\"https://github.com/Frank-Zhu/PullZoomView\" target=\"_blank\" rel=\"external\">https://github.com/Frank-Zhu/PullZoomView</a>  </p>\n</li>\n<li><p>PullToZoomInListView<br>滑动 ListView 时使其 HeaderView 跟随滑动缩放<br>项目地址：<a href=\"https://github.com/matrixxun/PullToZoomInListView\" target=\"_blank\" rel=\"external\">https://github.com/matrixxun/PullToZoomInListView</a>  </p>\n</li>\n<li><p>CalendarListview<br>实现每个月一行日历效果的 ListView<br>项目地址：<a href=\"https://github.com/traex/CalendarListview\" target=\"_blank\" rel=\"external\">https://github.com/traex/CalendarListview</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Rogary/CalendarListView%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\" target=\"_blank\" rel=\"external\">CalendarListview</a>  </p>\n</li>\n<li><p>sticky-headers-recyclerview<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ListView，采用 support-v7 中的 RecyclerView 实现<br>项目地址：<a href=\"https://github.com/timehop/sticky-headers-recyclerview\" target=\"_blank\" rel=\"external\">https://github.com/timehop/sticky-headers-recyclerview</a>  </p>\n</li>\n<li><p>PullSeparateListView<br>到达顶部或底部继续拉动时，实现 Item 间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有 Item 都会分离 (2)部分分离模式，以点击位置为分界点，部分 item 分离<br>项目地址：<a href=\"https://github.com/chiemy/PullSeparateListView\" target=\"_blank\" rel=\"external\">https://github.com/chiemy/PullSeparateListView</a>  </p>\n</li>\n<li><p>ExpandableLayout<br>Header 和 Content Item 都可以展开的 ExpandableListview<br>项目地址：<a href=\"https://github.com/traex/ExpandableLayout\" target=\"_blank\" rel=\"external\">https://github.com/traex/ExpandableLayout</a>  </p>\n</li>\n<li><p>PagedHeadListView<br>支持 paginated header 以及 material page indicator 的 ListView.<br>项目地址：<a href=\"https://github.com/JorgeCastilloPrz/PagedHeadListView\" target=\"_blank\" rel=\"external\">https://github.com/JorgeCastilloPrz/PagedHeadListView</a>  </p>\n</li>\n<li><p>CustomSwipeListView<br>支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。<br>项目地址：<a href=\"https://github.com/xyczero/Android-CustomSwipeListView\" target=\"_blank\" rel=\"external\">https://github.com/xyczero/Android-CustomSwipeListView</a><br>Demo 地址：<a href=\"http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk\" target=\"_blank\" rel=\"external\">Download here</a>  </p>\n</li>\n<li><p>Pull-to-Refresh.Rentals-Android<br>提供一个简单可以自定义的下拉刷新实现，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a> 出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android</a>  </p>\n</li>\n<li><p>ScrollerCalendar<br>实现每行显示一年的 12 个月份的 RecyclerView 年历<br>项目地址：<a href=\"https://github.com/guanchao/ScrollerCalendar\" target=\"_blank\" rel=\"external\">https://github.com/guanchao/ScrollerCalendar</a>  </p>\n</li>\n<li><p>ExtractWordView<br>一个可以提取单词的 ListView,支持”放大镜”效果。<br>项目地址：<a href=\"https://github.com/jcodeing/ExtractWordView\" target=\"_blank\" rel=\"external\">https://github.com/jcodeing/ExtractWordView</a><br>Demo 地址：<a href=\"https://raw.githubusercontent.com/jcodeing/ExtractWordView/master/ExtractWordView-demo.apk\" target=\"_blank\" rel=\"external\">Download here</a>  </p>\n</li>\n<li><p>FlyRefresh<br>支持 ListView, GridView, RecyclerView, ScrollView 的下拉刷新<br>项目地址：<a href=\"https://github.com/race604/FlyRefresh\" target=\"_blank\" rel=\"external\">https://github.com/race604/FlyRefresh</a>  </p>\n</li>\n<li><p>MVCHelper<br>实现下拉刷新，滚动底部自动加载更多，分页加载，自动切换显示网络失败布局，暂无数据布局，支持任意 view，真正的 MVC 架构<br>支持切换主流下拉刷新框架 Android-PullToRefresh-Library,android-Ultra-Pull-To-Refresh-library，SwipeRefreshLayout<br>项目地址：<a href=\"https://github.com/LuckyJayce/MVCHelper\" target=\"_blank\" rel=\"external\">https://github.com/LuckyJayce/MVCHelper</a><br>Demo 地址：<a href=\"https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true</a>  </p>\n</li>\n<li><p>RecyclerViewSwipeDismiss<br>支持滑动 Item 操作、点击展开、拖动排序、展开后拖动排序等特性的 RecyclerView<br>项目地址：<a href=\"https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview</a><br>视频：<a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=S7cSwMArjUQ\" target=\"_blank\" rel=\"external\">http://www.youtube.com/watch?feature=player_embedded&amp;v=S7cSwMArjUQ</a>  </p>\n</li>\n<li><p>WaterDropListView<br>模仿 iOS 下拉刷新“水滴”效果，支持下拉刷新和上拉加载<br>项目地址：<a href=\"https://github.com/THEONE10211024/WaterDropListView\" target=\"_blank\" rel=\"external\">https://github.com/THEONE10211024/WaterDropListView</a>  </p>\n</li>\n<li><p>PopupListView<br>實現ListItem 點擊後置頂並可顯示客製化添加的item的內部View 的ListView<br>项目地址：<a href=\"https://github.com/s8871404/PopupListView\" target=\"_blank\" rel=\"external\">https://github.com/s8871404/PopupListView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample</a>  </p>\n</li>\n<li><p>CircleRefreshLayout<br>一个包含有趣的动画的自定义下拉刷新布局<br>项目地址：<a href=\"https://github.com/tuesda/CircleRefreshLayout\" target=\"_blank\" rel=\"external\">https://github.com/tuesda/CircleRefreshLayout</a>  </p>\n</li>\n<li><p>EasyRecyclerView<br>一款简单易用的EasyRecyclerView<br>1.提供EasyRecyclerView，不需要写太多RecyclerView的配置代码<br>2.提供好一个可以适配单布局和多布局的RecyclerViewAdapter<br>3.提供了分割线的实现类，只需要传入一个DrawableId<br>项目地址：<a href=\"https://github.com/CaMnter/EasyRecyclerView\" target=\"_blank\" rel=\"external\">https://github.com/CaMnter/EasyRecyclerView</a>  </p>\n</li>\n<li><p>CanRefresh<br>可适配所有视图的下拉刷新上拉加载，并支持各种风格<br>项目地址：<a href=\"https://github.com/canyinghao/CanRefresh\" target=\"_blank\" rel=\"external\">https://github.com/canyinghao/CanRefresh</a>  </p>\n</li>\n</ol>\n<h3 id=\"二、ActionBar\"><a href=\"#二、ActionBar\" class=\"headerlink\" title=\"二、ActionBar\"></a>二、ActionBar</h3><ol>\n<li><p>ActionBarSherlock<br>为 Android 所有版本提供统一的 ActionBar，解决 4.0 以下 ActionBar 的适配问题<br>项目地址：<a href=\"https://github.com/JakeWharton/ActionBarSherlock\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/ActionBarSherlock</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos</a><br>标签：兼容库, ActionBar  </p>\n</li>\n<li><p>ActionBar-PullToRefresh<br>下拉刷新，ActionBar 出现加载中提示<br>项目地址：<a href=\"https://github.com/chrisbanes/ActionBar-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/ActionBar-PullToRefresh</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock</a><br>APP 示例：Gmail，Google Plus，知乎等  </p>\n</li>\n<li><p>FadingActionBar<br>ListView 向下滚动逐渐显现的 ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/FadingActionBar\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/FadingActionBar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo</a><br>APP 示例：google music，知乎  </p>\n</li>\n<li><p>NotBoringActionBar<br>google music 下拉收缩的 ActionBar<br>项目地址：<a href=\"https://github.com/flavienlaurent/NotBoringActionBar\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/NotBoringActionBar</a><br>Demo 地址：<a href=\"http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/\" target=\"_blank\" rel=\"external\">http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/</a><br>APP 示例：Google 音乐  </p>\n</li>\n<li><p>RefreshActionItem<br>带进度显示和刷新按钮的 ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/RefreshActionItem\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/RefreshActionItem</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo</a><br>APP 示例：The New York Times，DevAppsDirect  </p>\n</li>\n<li><p>GlassActionBar<br>类似玻璃的有一定透明度的 ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/GlassActionBar\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/GlassActionBar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo</a><br>APP 示例：google music  </p>\n</li>\n</ol>\n<h3 id=\"三、Menu\"><a href=\"#三、Menu\" class=\"headerlink\" title=\"三、Menu\"></a>三、Menu</h3><ol>\n<li><p>MenuDrawer<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前 View 处于上下层，支持 Windows 边缘、ListView 边缘、ViewPager 变化划出菜单等。<br>项目地址：<a href=\"https://github.com/SimonVT/android-menudrawer\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/android-menudrawer</a><br>Demo 地址：<a href=\"http://simonvt.github.io/android-menudrawer/\" target=\"_blank\" rel=\"external\">http://simonvt.github.io/android-menudrawer/</a><br>APP 示例：Gmail、Google Music 等大部分 google app  </p>\n</li>\n<li><p>SlidingMenu<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单 zoom、scale、slide up 三种动画样式出现。与 MenuDrawer 相比而言，SlidingMenu 支持菜单动画样式出现，MenuDrawer 支持菜单 view 处于内容的上下层<br>项目地址：<a href=\"https://github.com/jfeinstein10/SlidingMenu\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/SlidingMenu</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/huxian99/SlidingMenu 源码解析\" target=\"_blank\" rel=\"external\">SlidingMenu</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.slidingmenu.example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.slidingmenu.example</a><br>APP 示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  </p>\n</li>\n<li><p>ArcMenu<br>支持类似 Path 的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单<br>项目地址：<a href=\"https://github.com/daCapricorn/ArcMenu\" target=\"_blank\" rel=\"external\">https://github.com/daCapricorn/ArcMenu</a><br><a href=\"https://dl.dropboxusercontent.com/u/11369687/preview1.png\" target=\"_blank\" rel=\"external\">https://dl.dropboxusercontent.com/u/11369687/preview1.png</a><br><a href=\"https://dl.dropboxusercontent.com/u/11369687/raymenu.png\" target=\"_blank\" rel=\"external\">https://dl.dropboxusercontent.com/u/11369687/raymenu.png</a><br>APP 示例：Path  </p>\n</li>\n<li><p>android-satellite-menu<br>类似 Path 的左下角动画旋转菜单<br>项目地址：<a href=\"https://github.com/siyamed/android-satellite-menu\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-satellite-menu</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true</a><br>APP 示例：Path  </p>\n</li>\n<li><p>radial-menu-widget<br>圆形菜单，支持二级菜单<br>项目地址：<a href=\"https://code.google.com/p/radial-menu-widget/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/radial-menu-widget/</a>  </p>\n</li>\n<li><p>Android Wheel Menu<br>圆形旋转选取菜单<br>项目地址：<a href=\"https://github.com/anupcowkur/Android-Wheel-Menu\" target=\"_blank\" rel=\"external\">https://github.com/anupcowkur/Android-Wheel-Menu</a>  </p>\n</li>\n<li><p>FoldingNavigationDrawer<br>滑动并以折叠方式打开菜单<br>项目地址：<a href=\"https://github.com/tibi1712/FoldingNavigationDrawer-Android\" target=\"_blank\" rel=\"external\">https://github.com/tibi1712/FoldingNavigationDrawer-Android</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.ptr.folding.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ptr.folding.sample</a>  </p>\n</li>\n<li><p>AndroidResideMenu<br>仿 Dribbble 的边栏菜单<br>项目地址：<a href=\"https://github.com/SpecialCyCi/AndroidResideMenu\" target=\"_blank\" rel=\"external\">https://github.com/SpecialCyCi/AndroidResideMenu</a>  </p>\n</li>\n<li><p>CircularFloatingActionMenu<br>一个可定制的圆形的浮动菜单控件，类似于 Path 的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。<br>项目地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu\" target=\"_blank\" rel=\"external\">https://github.com/oguzbilgener/CircularFloatingActionMenu</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/cpacm/CircularFloatingActionMenu 源码解析\" target=\"_blank\" rel=\"external\">CircularFloatingActionMenu</a><br>Demo 地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples\" target=\"_blank\" rel=\"external\">https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples</a>  </p>\n</li>\n<li><p>NavigationDrawerSI<br>Navigation Drawer 的一个简单实现，滑动并以折叠方式打开菜单<br>项目地址：<a href=\"https://github.com/mmBs/NavigationDrawerSI\" target=\"_blank\" rel=\"external\">https://github.com/mmBs/NavigationDrawerSI</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a><br>APP 示例：<a href=\"https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a>  </p>\n</li>\n<li><p>DragLayout<br>使用 support.v4 包下的 ViewDragHelper 实现 QQ5.0 侧滑<br>项目地址：<a href=\"https://github.com/BlueMor/DragLayout\" target=\"_blank\" rel=\"external\">https://github.com/BlueMor/DragLayout</a>  </p>\n</li>\n<li><p>LDrawer<br>Material Design 形式的展开折叠 Icon<br>项目地址：<a href=\"https://github.com/ikimuhendis/LDrawer\" target=\"_blank\" rel=\"external\">https://github.com/ikimuhendis/LDrawer</a>  </p>\n</li>\n<li><p>Floating Action Button<br>悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置<br>项目地址：<a href=\"https://github.com/shamanland/floating-action-button\" target=\"_blank\" rel=\"external\">https://github.com/shamanland/floating-action-button</a>  </p>\n</li>\n<li><p>Side-Menu.Android<br>分类侧滑菜单，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a> 出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Side-Menu.Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Side-Menu.Android</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/cpacm/Side Menu.Android 源码解析\" target=\"_blank\" rel=\"external\">Side-Menu.Android</a>  </p>\n</li>\n<li><p>Context-Menu.Android<br>可以方便快速集成漂亮带有动画效果的上下文菜单，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a>出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Context-Menu.Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Context-Menu.Android</a>  </p>\n</li>\n<li><p>Droppy<br>支持多种样式的下拉菜单<br>项目地址：<a href=\"https://github.com/shehabic/Droppy\" target=\"_blank\" rel=\"external\">https://github.com/shehabic/Droppy</a>  </p>\n</li>\n<li><p>MaterialDrawer<br>Material Design 风格的导航抽屉，提供简便且强大的定制功能<br>项目地址：<a href=\"https://github.com/mikepenz/MaterialDrawer\" target=\"_blank\" rel=\"external\">https://github.com/mikepenz/MaterialDrawer</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app</a>  </p>\n</li>\n<li><p>SlideBottomPanel<br>底部划出菜单，滑动时背景图透明度渐变，支持嵌套 LiewView 或 ScrollView<br>项目地址：<a href=\"https://github.com/kingideayou/SlideBottomPanel\" target=\"_blank\" rel=\"external\">https://github.com/kingideayou/SlideBottomPanel</a><br>Demo 地址：<a href=\"https://github.com/kingideayou/SlideBottomPanel/raw/master/apk/SlideBottomPanelDemo.apk\" target=\"_blank\" rel=\"external\">SlideBottomPanelDemo 下载</a>  </p>\n</li>\n<li><p>FlowingDrawer<br>带手势流动效果侧滑菜单<br>项目地址：<a href=\"https://github.com/mxn21/FlowingDrawer\" target=\"_blank\" rel=\"external\">https://github.com/mxn21/FlowingDrawer</a></p>\n</li>\n</ol>\n<h3 id=\"四、ViewPager-、Gallery\"><a href=\"#四、ViewPager-、Gallery\" class=\"headerlink\" title=\"四、ViewPager 、Gallery\"></a>四、ViewPager 、Gallery</h3><ol>\n<li><p>AdvancedPagerSlidingTabStrip<br>一个完美兼容ViewPager的导航栏组件；可以自定义TabView；能动态加载Tab上的Icon图片； 能显示Tab的消息数量和提示小圆点。<br>项目地址：<a href=\"https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip\" target=\"_blank\" rel=\"external\">https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip</a></p>\n</li>\n<li><p>ConvenientBanner<br>通用的广告栏控件，让你轻松实现广告头效果。支持无限循环，可以设置自动翻页和时间(而且非常智能，手指触碰则暂停翻页，离开自动开始翻页。你也可以设置在界面onPause的时候不进行自动翻页，onResume之后继续自动翻页)，并且提供多种翻页特效。 对比其他广告栏控件，大多都需要对源码进行改动才能加载网络图片，或者帮你集成不是你所需要的图片缓存库。而这个库能让有代码洁癖的你欢喜，不需要对库源码进行修改你就可以使用任何你喜欢的网络图片库进行配合。<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-ConvenientBanner\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-ConvenientBanner</a>  </p>\n</li>\n<li><p>Android-ViewPagerIndicator<br>配合 ViewPager 使用的 Indicator，支持各种位置和样式<br>项目地址：<a href=\"https://github.com/JakeWharton/Android-ViewPagerIndicator\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/Android-ViewPagerIndicator</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample</a><br>APP 示例：太多了。。  </p>\n</li>\n<li><p>JazzyViewPager<br>支持 Fragment 切换动画的 ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用 ViewPager 实现而已<br>项目地址：<a href=\"https://github.com/jfeinstein10/JazzyViewPager\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager</a><br>Demo 地址：<a href=\"https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>\n</li>\n<li><p>JellyViewPager<br>特殊切换动画的 ViewPager<br>项目地址：<a href=\"https://github.com/chiemy/JellyViewPager\" target=\"_blank\" rel=\"external\">https://github.com/chiemy/JellyViewPager</a>  </p>\n</li>\n<li><p>Android-DirectionalViewPager<br>支持横向和纵向(垂直)的 ViewPager<br>项目地址：<a href=\"https://github.com/JakeWharton/Android-DirectionalViewPager\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/Android-DirectionalViewPager</a><br>Demo 地址：<a href=\"https://market.android.com/details?id=com.directionalviewpager.sample\" target=\"_blank\" rel=\"external\">https://market.android.com/details?id=com.directionalviewpager.sample</a>  </p>\n</li>\n<li><p>FancyCoverFlow<br>支持 Item 切换动画效果的类似 Gallery View<br>项目地址：<a href=\"https://github.com/davidschreiber/FancyCoverFlow\" target=\"_blank\" rel=\"external\">https://github.com/davidschreiber/FancyCoverFlow</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples</a>  </p>\n</li>\n<li><p>AndroidTouchGallery<br>支持双击或双指缩放的 Gallery(用 ViewPager 实现)，相比下面的 PhotoView，在被放大后依然能滑到下一个 item，并且支持直接从 url 和文件中获取图片，<br>项目地址：<a href=\"https://github.com/Dreddik/AndroidTouchGallery\" target=\"_blank\" rel=\"external\">https://github.com/Dreddik/AndroidTouchGallery</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true</a><br>APP 示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  </p>\n</li>\n<li><p>Android Auto Scroll ViewPager<br>Android 自动滚动 轮播循环的 ViewPager<br>项目地址：<a href=\"https://github.com/Trinea/android-auto-scroll-view-pager\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/android-auto-scroll-view-pager</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/auto-scroll-view-pager/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/auto-scroll-view-pager/</a>  </p>\n</li>\n<li><p>Android PagerSlidingTabStrip<br>配合 ViewPager 使用的 Indicator，支持 ViewPager Scroll 时 Indicator 联动<br>项目地址：<a href=\"https://github.com/astuetz/PagerSlidingTabStrip\" target=\"_blank\" rel=\"external\">https://github.com/astuetz/PagerSlidingTabStrip</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/ayyb1988/PagerSlidingTabStrip 源码解析\" target=\"_blank\" rel=\"external\">Android PagerSlidingTabStrip</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample</a>  </p>\n</li>\n<li><p>ViewPager3D<br>ViewPager3D 效果<br>项目地址：<a href=\"https://github.com/inovex/ViewPager3D\" target=\"_blank\" rel=\"external\">https://github.com/inovex/ViewPager3D</a>  </p>\n</li>\n<li><p>AnimaTabsview<br>仿网易云音乐标签切换的动画,带透明小三角<br>项目地址：<a href=\"https://github.com/wuyexiong/transparent-over-animtabsview\" target=\"_blank\" rel=\"external\">https://github.com/wuyexiong/transparent-over-animtabsview</a><br>在线演示：<a href=\"http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html\" target=\"_blank\" rel=\"external\">http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html</a>  </p>\n</li>\n<li><p>LoopingViewPager<br>无限循环的 ViewPager<br>项目地址：<a href=\"https://github.com/imbryk/LoopingViewPager\" target=\"_blank\" rel=\"external\">https://github.com/imbryk/LoopingViewPager</a>  </p>\n</li>\n<li><p>android_page_curl<br>翻书卷曲效果<br>项目地址：<a href=\"https://github.com/harism/android_page_curl\" target=\"_blank\" rel=\"external\">https://github.com/harism/android_page_curl</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=iwu7P5PCpsw\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=iwu7P5PCpsw</a><br>APP 示例：iReader  </p>\n</li>\n<li><p>ViewPagerIndicator<br>简化并实现 android 的 TabHost 效果，顶部滑动 tab，引导页，支持自定义 tab 样式,自定义滑动块样式和位置,自定义切换 tab 的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动<br>项目地址：<a href=\"https://github.com/LuckyJayce/ViewPagerIndicator\" target=\"_blank\" rel=\"external\">https://github.com/LuckyJayce/ViewPagerIndicator</a>  </p>\n</li>\n<li><p>ScreenSlideIndicator<br>轻量级的圆形 Indicadtor，位置可以自由调整，不会对 ViewPager 产生任何影响。<br>项目地址：<a href=\"https://github.com/LyndonChin/Android-ScreenSlidePager\" target=\"_blank\" rel=\"external\">ScreenSlidePager</a>  </p>\n</li>\n<li><p>SmartTabLayout<br>自定义的 Tab title strip，基于 Google Samples 中的 android-SlidingTabBasic 项目，滑动时 Indicator 可平滑过渡。<br>项目地址：<a href=\"https://github.com/ogaclejapan/SmartTabLayout\" target=\"_blank\" rel=\"external\">https://github.com/ogaclejapan/SmartTabLayout</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo</a>  </p>\n</li>\n<li><p>AndroidImageSlider<br>Android 图片滑动<br>项目地址：<a href=\"https://github.com/daimajia/AndroidImageSlider\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidImageSlider</a><br>App示例：<a href=\"https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk</a>  </p>\n</li>\n<li><p>RecyclerViewPager<br>完全继承自 RecyclerView，可以自定义触发翻页的距离，可自定义翻页速度，支持垂直方向的 ViewPager，支持 Fragment。<br>项目地址：<a href=\"https://github.com/lsjwzh/RecyclerViewPager\" target=\"_blank\" rel=\"external\">RecyclerViewPager</a>  </p>\n</li>\n<li><p>CircleIndicator<br>轻量级ViewPager指示器,支持三种不同的模式<br>项目地址：<a href=\"https://github.com/THEONE10211024/CircleIndicator\" target=\"_blank\" rel=\"external\">CircleIndicator</a>  </p>\n</li>\n<li><p>EasySlidingTabs<br>一款简单、易用的滑动标签页<br>项目地址： <a href=\"https://github.com/CaMnter/EasySlidingTabs\" target=\"_blank\" rel=\"external\">https://github.com/CaMnter/EasySlidingTabs</a>  </p>\n</li>\n</ol>\n<h3 id=\"五、GridView\"><a href=\"#五、GridView\" class=\"headerlink\" title=\"五、GridView\"></a>五、GridView</h3><ol>\n<li><p>StaggeredGridView<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，并且跟 ListView 一样自带 View 缓存，继承自 ViewGroup<br>项目地址：<a href=\"https://github.com/maurycyw/StaggeredGridView\" target=\"_blank\" rel=\"external\">https://github.com/maurycyw/StaggeredGridView</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true</a><br>APP 示例：Pinterest 等  </p>\n</li>\n<li><p>AndroidStaggeredGrid<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，继承自 AbsListView<br>项目地址：<a href=\"https://github.com/etsy/AndroidStaggeredGrid\" target=\"_blank\" rel=\"external\">https://github.com/etsy/AndroidStaggeredGrid</a><br>APP 示例：Pinterest 等  </p>\n</li>\n<li><p>PinterestLikeAdapterView<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，允许下拉刷新<br>项目地址：<a href=\"https://github.com/GDG-Korea/PinterestLikeAdapterView\" target=\"_blank\" rel=\"external\">https://github.com/GDG-Korea/PinterestLikeAdapterView</a><br>APP 示例：Pinterest 等  </p>\n</li>\n<li><p>DraggableGridView<br>Item 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的单屏效果，可屏幕自动上下滚动进行 Item 移动交换，多屏效果见下面 PagedDragDropGrid<br>项目地址：<a href=\"https://github.com/thquinn/DraggableGridView\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView</a><br>Demo 地址：<a href=\"https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a><br>也可以自定义item的宽高和每行的个数，并且修改交换逻辑，当移动到另一个item时就进行交换，删除滚动逻辑。<br>项目地址：<a href=\"https://github.com/andyken/DraggableGridView\" target=\"_blank\" rel=\"external\">DraggableGridView</a>  </p>\n</li>\n<li><p>StickyGridHeaders<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 GridView<br>项目地址：<a href=\"https://github.com/TonicArtos/StickyGridHeaders\" target=\"_blank\" rel=\"external\">https://github.com/TonicArtos/StickyGridHeaders</a>  </p>\n</li>\n<li><p>PagedDragDropGrid<br>Item 可拖动交换位置、拖动删除的自定义控件，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行 Item 移动交换，可拖动进行删除，单屏效果见上面 DraggableGridView<br>项目地址：<a href=\"https://github.com/mrKlar/PagedDragDropGrid\" target=\"_blank\" rel=\"external\">https://github.com/mrKlar/PagedDragDropGrid</a><br>在线演示：<a href=\"http://youtu.be/FYTSRfthSuQ\" target=\"_blank\" rel=\"external\">http://youtu.be/FYTSRfthSuQ</a>  </p>\n</li>\n<li><p>Android-DraggableGridViewPager<br>Item 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可屏幕自动左右滚动进行 Item 移动交换，单屏效果见上面 DraggableGridView<br>项目地址：<a href=\"https://github.com/zzhouj/Android-DraggableGridViewPager\" target=\"_blank\" rel=\"external\">https://github.com/zzhouj/Android-DraggableGridViewPager</a><br>Demo 地址：<a href=\"https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>TwoWayGridView<br>可横向滚动的 GridView<br>项目地址：<a href=\"https://github.com/jess-anders/two-way-gridview\" target=\"_blank\" rel=\"external\">https://github.com/jess-anders/two-way-gridview</a>  </p>\n</li>\n<li><p>PagingGridView<br>分页加载的 GridView。当滑动到 GridView 底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href=\"https://github.com/nicolasjafelle/PagingGridView\" target=\"_blank\" rel=\"external\">https://github.com/nicolasjafelle/PagingGridView</a>  </p>\n</li>\n<li><p>AsymmetricGridView<br>一个支持跨行和跨列可变 Item 大小的 GridView<br>项目地址：<a href=\"https://github.com/felipecsl/AsymmetricGridView\" target=\"_blank\" rel=\"external\">https://github.com/felipecsl/AsymmetricGridView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app</a>  </p>\n</li>\n<li><p>GridView with Header and Footer<br>和<code>ListView</code>一样带头部和底部的<code>GridView</code>，用法和<code>ListView</code>一样<br>项目地址：<a href=\"https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter</a>  </p>\n</li>\n</ol>\n<h3 id=\"六、ImageView\"><a href=\"#六、ImageView\" class=\"headerlink\" title=\"六、ImageView\"></a>六、ImageView</h3><ol>\n<li><p>PhotoView<br>支持双击或双指缩放的 ImageView，在 ViewPager 等 Scrolling view 中正常使用，相比上面的 AndroidTouchGallery，不仅支持 ViewPager，同时支持单个 ImageView<br>项目地址：<a href=\"https://github.com/chrisbanes/PhotoView\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/PhotoView</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/dkmeteor/PhotoView 源码解析\" target=\"_blank\" rel=\"external\">PhotoView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample</a><br>APP 示例：photup  </p>\n</li>\n<li><p>Fresco-ImageView<br>Fresco-ImageView是一种Android平台的图像控件，底层是对Fresco的封装，可以异步加载网络图片、项目资源和本地图片，并且支持双指缩放、图片的基本处理以及Fresco的所有特性。<br>项目地址：<a href=\"https://github.com/HomHomLin/FrescoImageView。\" target=\"_blank\" rel=\"external\">https://github.com/HomHomLin/FrescoImageView。</a>  </p>\n</li>\n<li><p>android-gif-drawable<br>支持 gif 显示的 view，用 jni 实现的，编译生成 so 库后直接 xml 定义 view 即可，而且本身不依赖于其他开源项目所以相对下面的 ImageViewEx 简单的多<br>项目地址：<a href=\"https://github.com/koral--/android-gif-drawable\" target=\"_blank\" rel=\"external\">https://github.com/koral--/android-gif-drawable</a>  </p>\n</li>\n<li><p>ImageViewEx<br>支持 Gif 显示的 ImageView，依赖很多，编译过程很繁琐<br>项目地址：<a href=\"https://github.com/frapontillo/ImageViewEx\" target=\"_blank\" rel=\"external\">https://github.com/frapontillo/ImageViewEx</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>RoundedImageView<br>带圆角的 ImageView<br>项目地址：<a href=\"https://github.com/vinc3m1/RoundedImageView\" target=\"_blank\" rel=\"external\">https://github.com/vinc3m1/RoundedImageView</a>  </p>\n</li>\n<li><p>SelectableRoundedImageView<br>ImageView 允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边<br>项目地址：<a href=\"https://github.com/pungrue26/SelectableRoundedImageView\" target=\"_blank\" rel=\"external\">https://github.com/pungrue26/SelectableRoundedImageView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.joooonho\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.joooonho</a>  </p>\n</li>\n<li><p>ColorArt<br>根据图片的均色设置背景色显示文字和图片，类似 itune11 中效果<br>项目地址：<a href=\"https://github.com/MichaelEvans/ColorArt\" target=\"_blank\" rel=\"external\">https://github.com/MichaelEvans/ColorArt</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>CircleImageView<br>圆形的 ImageView<br>项目地址：<a href=\"https://github.com/hdodenhof/CircleImageView\" target=\"_blank\" rel=\"external\">https://github.com/hdodenhof/CircleImageView</a>  </p>\n</li>\n<li><p>ImageViewZoom<br>支持放大和平移的 ImageView<br>项目地址：<a href=\"https://github.com/sephiroth74/ImageViewZoom\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/ImageViewZoom</a><br>APP 示例：<a href=\"https://play.google.com/store/apps/details?id=com.aviary.android.feather\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.aviary.android.feather</a>  </p>\n</li>\n<li><p>KenBurnsView<br>实现 Ken Burns effect 效果，达到身临其境效果的 ImageView<br>项目地址：<a href=\"https://github.com/flavioarfaria/KenBurnsView\" target=\"_blank\" rel=\"external\">https://github.com/flavioarfaria/KenBurnsView</a>  </p>\n</li>\n<li><p>CustomShapeImageView<br>各种形状的 ImageView, 相比上面的圆形 ImageView，多了更多形状<br>项目地址：<a href=\"https://github.com/MostafaGazar/CustomShapeImageView\" target=\"_blank\" rel=\"external\">https://github.com/MostafaGazar/CustomShapeImageView</a>  </p>\n</li>\n<li><p>Shape Image View<br>可以自定义各种形状的 ImageView, 并且支持边框<br>项目地址：<a href=\"https://github.com/siyamed/android-shape-imageview\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-shape-imageview</a>  </p>\n</li>\n<li><p>TextDrawable<br>一个用于生成带有文本或者字母的图片的轻量级库。扩展自 Drawable，因此可用于现有/自定义/网络等 ImageView 类，并且包含一个流接口用于创建 drawables 以及一个定制的 ColorGenerator<br>项目地址：<a href=\"https://github.com/amulyakhare/TextDrawable\" target=\"_blank\" rel=\"external\">https://github.com/amulyakhare/TextDrawable</a>  </p>\n</li>\n<li><p>android-smart-image-view<br>可从 URL 或 contact address book 加载图片的 ImageView，支持缓存<br>项目地址：<a href=\"https://github.com/loopj/android-smart-image-view\" target=\"_blank\" rel=\"external\">https://github.com/loopj/android-smart-image-view</a>  </p>\n</li>\n<li><p>PhotoView<br>支持双指/双击缩放的ImageView,支持从一个PhotoView缩放到另外一个PhotoView(点击图片放大预览),相对于其他PhototView有更加平滑的缩放,平移的动画,并且支持所有的ScaleType,可以作为普通的ImageView使用<br>项目地址：<a href=\"https://github.com/bm-x/PhotoView\" target=\"_blank\" rel=\"external\">https://github.com/bm-x/PhotoView</a>  </p>\n</li>\n</ol>\n<h3 id=\"七、ProgressBar\"><a href=\"#七、ProgressBar\" class=\"headerlink\" title=\"七、ProgressBar\"></a>七、ProgressBar</h3><ol>\n<li><p>SmoothProgressBar<br>水平进度条<br>项目地址：<a href=\"https://github.com/castorflex/SmoothProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/castorflex/SmoothProgressBar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample</a>  </p>\n</li>\n<li><p>MaterialProgessBar<br>Material Design 的进度条，支持 Android 4.0<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/MaterialProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/MaterialProgressBar</a><br>Demo 地址：<a href=\"https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk</a>  </p>\n</li>\n<li><p>ProgressWheel<br>支持进度显示的圆形 ProgressBar<br>项目地址：<a href=\"https://github.com/Todd-Davies/ProgressWheel\" target=\"_blank\" rel=\"external\">https://github.com/Todd-Davies/ProgressWheel</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-square-progressbar<br>在图片周围显示进度<br>项目地址：<a href=\"https://github.com/mrwonderman/android-square-progressbar\" target=\"_blank\" rel=\"external\">https://github.com/mrwonderman/android-square-progressbar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example</a><br>APP 示例：square  </p>\n</li>\n<li><p>HoloCircularProgressBar<br>Android4.1 时钟 App 样式<br>项目地址：<a href=\"https://github.com/passsy/android-HoloCircularProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/passsy/android-HoloCircularProgressBar</a><br>APP 示例：Android4.1 时钟 App  </p>\n</li>\n<li><p>ProgressButton<br>通过图钉的不同状态显示进度<br>项目地址：<a href=\"https://github.com/f2prateek/progressbutton\" target=\"_blank\" rel=\"external\">https://github.com/f2prateek/progressbutton</a><br>文档介绍：<a href=\"http://f2prateek.com/progressbutton/\" target=\"_blank\" rel=\"external\">http://f2prateek.com/progressbutton/</a>  </p>\n</li>\n<li><p>GoogleProgressBar<br>类似 google 多个圆形卡片翻转的 progressBar<br>项目地址：<a href=\"https://github.com/jpardogo/GoogleProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/jpardogo/GoogleProgressBar</a>  </p>\n</li>\n<li><p>TH-ProgressButton<br>带圆形进度显示的按钮<br>项目地址：<a href=\"https://github.com/torryharris/TH-ProgressButton\" target=\"_blank\" rel=\"external\">https://github.com/torryharris/TH-ProgressButton</a>  </p>\n</li>\n<li><p>NumberProgressBar<br>带数字进度的进度条<br>项目地址：<a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/NumberProgressBar</a>  </p>\n</li>\n<li><p>CircularProgressDrawable<br>带圆形进度显示的进度条<br>项目地址：<a href=\"https://github.com/Sefford/CircularProgressDrawable\" target=\"_blank\" rel=\"external\">https://github.com/Sefford/CircularProgressDrawable</a>  </p>\n</li>\n<li><p>Android-RoundCornerProgressBar<br>Android 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。<br>项目地址：<a href=\"https://github.com/akexorcist/Android-RoundCornerProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/akexorcist/Android-RoundCornerProgressBar</a>  </p>\n</li>\n<li><p>circular-progress-button<br>带进度显示的 Button<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/circular-progress-button</a>  </p>\n</li>\n<li><p>WaveView<br>一个波纹效果的 View，可用来做 ProgressBar<br>项目地址：<a href=\"https://github.com/john990/WaveView\" target=\"_blank\" rel=\"external\">https://github.com/john990/WaveView</a><br>Demo 地址：<a href=\"https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk</a>  </p>\n</li>\n<li><p>MaterialLoadingProgressBar<br>抽取自 SwipeRefreshLayout 的 Material Design 进度指示器<br>项目地址：<a href=\"https://github.com/lsjwzh/MaterialLoadingProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/lsjwzh/MaterialLoadingProgressBar</a>  </p>\n</li>\n<li><p>MetaballLoading<br>A 2d metaball loading<br>项目地址：<a href=\"https://github.com/dodola/MetaballLoading\" target=\"_blank\" rel=\"external\">https://github.com/dodola/MetaballLoading</a></p>\n</li>\n<li><p>SectorProgressView<br>一个圆形或环形的进度显示控件，用圆中扇形的角度大小来表示进度信息<br>项目地址：<a href=\"https://github.com/timqi/SectorProgressView\" target=\"_blank\" rel=\"external\">https://github.com/timqi/SectorProgressView</a><br>Demo：<a href=\"https://github.com/timqi/SectorProgressView/raw/master/art/example.apk\" target=\"_blank\" rel=\"external\">apk download</a> </p>\n</li>\n<li><p>CircularFillableLoaders<br>一个可以用于闪屏或者其他地方加载的控件<br>项目地址：<a href=\"https://github.com/lopspower/CircularFillableLoaders\" target=\"_blank\" rel=\"external\">https://github.com/lopspower/CircularFillableLoaders</a><br>Demo地址：(<a href=\"https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample</a>) </p>\n</li>\n<li><p>PinWheel<br>一个旋转的大风车Dialog<br>项目地址：<a href=\"https://github.com/codingWang/PinWheel\" target=\"_blank\" rel=\"external\">https://github.com/codingWang/PinWheel</a></p>\n</li>\n<li><p>ColorArcProgressBar<br>一个可定制的圆形进度条，通过xml参数配置可实现QQ健康中步数的弧形进度显示、仪盘表显示速度、最常见的下载进度条等功能。<br>项目地址：<a href=\"https://github.com/Shinelw/ColorArcProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/Shinelw/ColorArcProgressBar</a></p>\n</li>\n</ol>\n<h3 id=\"八、TextView\"><a href=\"#八、TextView\" class=\"headerlink\" title=\"八、TextView\"></a>八、TextView</h3><p>包括 TextView 及所有继承自 TextView 控件，如 EditText、Button、RadioButton  </p>\n<ol>\n<li><p>android-flowtextview<br>文字自动环绕其他 View 的 Layout<br>项目地址：<a href=\"https://github.com/deano2390/FlowTextView\" target=\"_blank\" rel=\"external\">https://github.com/deano2390/FlowTextView</a>  </p>\n</li>\n<li><p>Android Form EditText<br>验证输入合法性的编辑框，支持输入、英文、ip、url 等多种正则验证<br>项目地址：<a href=\"https://github.com/vekexasia/android-edittext-validator\" target=\"_blank\" rel=\"external\">https://github.com/vekexasia/android-edittext-validator</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample</a>  </p>\n</li>\n<li><p>Emojicon<br>支持 emojis 的 TextView 和 EditText<br>项目地址：<a href=\"https://github.com/rockerhieu/emojicon\" target=\"_blank\" rel=\"external\">https://github.com/rockerhieu/emojicon</a><br>文档介绍：<a href=\"http://rockerhieu.com/emojicon/\" target=\"_blank\" rel=\"external\">http://rockerhieu.com/emojicon/</a>  </p>\n</li>\n<li><p>android-circlebutton<br>Android 圆形按钮，实际实现是继承自 ImageView<br>项目地址：<a href=\"https://github.com/markushi/android-circlebutton\" target=\"_blank\" rel=\"external\">https://github.com/markushi/android-circlebutton</a><br>Demo 地址：<a href=\"https://github.com/markushi/android-circlebutton/blob/master/example/example.apk\" target=\"_blank\" rel=\"external\">https://github.com/markushi/android-circlebutton/blob/master/example/example.apk</a>  </p>\n</li>\n<li><p>Segmented Radio Buttons for Android<br>iOS’s segmented controls 的实现<br>项目地址：<a href=\"https://github.com/vinc3m1/android-segmentedradiobutton\" target=\"_blank\" rel=\"external\">https://github.com/vinc3m1/android-segmentedradiobutton</a><br>Demo 地址：<a href=\"https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a>  </p>\n</li>\n<li><p>Chips EditText Library<br>支持国家名字联想从而选择显示该国国旗的 EditText，实际就是通过 SpannableStringBuilder 实现<br>项目地址：<a href=\"https://github.com/kpbird/chips-edittext-library\" target=\"_blank\" rel=\"external\">https://github.com/kpbird/chips-edittext-library</a><br>Demo 地址：<a href=\"https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin\" target=\"_blank\" rel=\"external\">https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin</a>  </p>\n</li>\n<li><p>AutoFitTextView<br>可固定边界内容字体大小自适应的 TextView<br>项目地址：<a href=\"https://github.com/grantland/android-autofittextview\" target=\"_blank\" rel=\"external\">https://github.com/grantland/android-autofittextview</a>  </p>\n</li>\n<li><p>Shimmer for Android<br>文字发淡光的 TextView<br>项目地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Shimmer-android</a>  </p>\n</li>\n<li><p>Titanic<br>可以显示水位上升下降(不知道该怎么描述 囧)的 TextView<br>项目地址：<a href=\"https://github.com/RomainPiel/Titanic\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Titanic</a>  </p>\n</li>\n<li><p>android-iconify<br>提供带 Icon 的 TextView,Menu,Button 等<br>项目地址：<a href=\"https://github.com/JoanZapata/android-iconify\" target=\"_blank\" rel=\"external\">https://github.com/JoanZapata/android-iconify</a>  </p>\n</li>\n<li><p>Calligraphy<br>让我们在 android 开发中使用自定义字体变得更加简单<br>项目地址：<a href=\"https://github.com/chrisjenx/Calligraphy\" target=\"_blank\" rel=\"external\">https://github.com/chrisjenx/Calligraphy</a>  </p>\n</li>\n<li><p>CreditsRoll<br>类似星球大战字幕效果的 TextView<br>项目地址：<a href=\"https://github.com/frakbot/CreditsRoll\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/CreditsRoll</a>  </p>\n</li>\n<li><p>android-process-buton<br>带加载或提交进度的 Button<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/android-process-buton\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-process-buton</a>  </p>\n</li>\n<li><p>FButton<br>扁平化的 Button<br>项目地址：<a href=\"https://github.com/hoang8f/android-flat-button\" target=\"_blank\" rel=\"external\">https://github.com/hoang8f/android-flat-button</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>\n</li>\n<li><p>FloatingActionButton<br>一个类似 Android 版 Google+浮动功能按钮的控件，可以响应 ListView 的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。<br>项目地址：<a href=\"https://github.com/makovkastar/FloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/makovkastar/FloatingActionButton</a><br>Demo 地址：<a href=\"https://github.com/makovkastar/FloatingActionButton/tree/master/\" target=\"_blank\" rel=\"external\">https://github.com/makovkastar/FloatingActionButton/tree/master/</a>  </p>\n</li>\n<li><p>Android Saripaar<br>Android 表单验证<br>项目地址：<a href=\"https://github.com/ragunathjawahar/android-saripaar/\" target=\"_blank\" rel=\"external\">https://github.com/ragunathjawahar/android-saripaar/</a>  </p>\n</li>\n<li><p>JumpingBeans<br>文字像 Mexican beans 一样跳动<br>项目地址：<a href=\"https://github.com/frakbot/JumpingBeans\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/JumpingBeans</a><br>Demo 地址：<a href=\"http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo</a>  </p>\n</li>\n<li><p>FancyButtons<br>一个不用图片就可以帮助我们创建出漂亮按钮的库。<br>项目地址：<a href=\"https://github.com/medyo/fancybuttons\" target=\"_blank\" rel=\"external\">https://github.com/medyo/fancybuttons</a><br>Demo 地址：<a href=\"https://github.com/medyo/fancybuttons/tree/master/samples\" target=\"_blank\" rel=\"external\">https://github.com/medyo/fancybuttons/tree/master/samples</a>  </p>\n</li>\n<li><p>Android-RobotoTextView<br>一个实现了所有 Roboto 字体的 TextView，包括新出的 Roboto Slab 字体。<br>项目地址：<a href=\"https://github.com/johnkil/Android-RobotoTextView\" target=\"_blank\" rel=\"external\">https://github.com/johnkil/Android-RobotoTextView</a><br>Demo 地址：<a href=\"http://play.google.com/store/apps/details?id=com.devspark.robototextview\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=com.devspark.robototextview</a><br>Demo 项目：<a href=\"https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample\" target=\"_blank\" rel=\"external\">https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample</a>  </p>\n</li>\n<li><p>Android-WizardPager<br>一个表单向导库<br>项目地址：<a href=\"https://github.com/romannurik/android-wizardpager\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/android-wizardpager</a><br>Demo 项目：<a href=\"https://github.com/str4d/android-wizardpager/tree/textfield\" target=\"_blank\" rel=\"external\">https://github.com/str4d/android-wizardpager/tree/textfield</a>  </p>\n</li>\n<li><p>RippleView<br>一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮<br>项目地址：<a href=\"https://github.com/siriscac/RippleView\" target=\"_blank\" rel=\"external\">https://github.com/siriscac/RippleView</a><br>Demo 项目：<a href=\"https://github.com/siriscac/RippleView/tree/master/RippleViewExample\" target=\"_blank\" rel=\"external\">https://github.com/siriscac/RippleView/tree/master/RippleViewExample</a>  </p>\n</li>\n<li><p>RippleEffect<br>一个实现 Material Design Ripple 效果的库，支持 Android API 9+以上版本。<br>项目地址：<a href=\"https://github.com/traex/RippleEffect\" target=\"_blank\" rel=\"external\">https://github.com/traex/RippleEffect</a><br>Demo 项目：<a href=\"https://github.com/traex/RippleEffect/tree/master/sample\" target=\"_blank\" rel=\"external\">https://github.com/traex/RippleEffect/tree/master/sample</a>  </p>\n</li>\n<li><p>RippleCompat<br>使用易于移植的方式为UI控件实现波纹效应，可以适配控件原背景及Palette支持。api简单，可自定义效果，兼容至Android API 7+。<br>项目地址：<a href=\"https://github.com/desmond1121/RippleCompat\" target=\"_blank\" rel=\"external\">https://github.com/desmond1121/RippleCompat</a><br>Demo 项目：<a href=\"https://github.com/desmond1121/RippleCompat/tree/master/app\" target=\"_blank\" rel=\"external\">https://github.com/desmond1121/RippleCompat/tree/master/app</a></p>\n</li>\n<li><p>Android Floating Label Widgets<br>包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示<br>项目地址：<a href=\"https://github.com/marvinlabs/android-floatinglabel-widgets\" target=\"_blank\" rel=\"external\">https://github.com/marvinlabs/android-floatinglabel-widgets</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo</a><br>在线演示：<a href=\"http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be\" target=\"_blank\" rel=\"external\">http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be</a>  </p>\n</li>\n<li><p>MaterialEditText<br>EditText 的 Material Design 实现。包含 <a href=\"http://www.google.com/design/spec/components/text-fields.html\" target=\"_blank\" rel=\"external\">Google Material Design Spec</a>中的 UI 效果和一些新增特性。<br>项目地址：<a href=\"https://github.com/rengwuxian/MaterialEditText\" target=\"_blank\" rel=\"external\">https://github.com/rengwuxian/MaterialEditText</a>  </p>\n</li>\n<li><p>MaterialEditText<br>实现 <a href=\"http://www.google.com/design/spec/components/text-fields.html\" target=\"_blank\" rel=\"external\">Material Design</a> 中 Ripple 效果线条背景的 EditText。直接替换原生 EditText 即可集成。<br>项目地址：<a href=\"https://github.com/DreamingInCodeZH/MaterialEditText\" target=\"_blank\" rel=\"external\">https://github.com/DreamingInCodeZH/MaterialEditText</a>    </p>\n</li>\n<li><p>MultiActionTextView<br>可以分别给 TextView 中的某几个字设置点击事件的 TextView<br>项目地址：<a href=\"https://github.com/ajaysahani/MultiActionTextView\" target=\"_blank\" rel=\"external\">https://github.com/ajaysahani/MultiActionTextView</a>  </p>\n</li>\n<li><p>ToggleButton<br>状态切换的 Button，类似 iOS，用 View 实现<br>项目地址：<a href=\"https://github.com/zcweng/ToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/zcweng/ToggleButton</a>  </p>\n</li>\n<li><p>SwitchButton<br>状态切换的 Button，类似 iOS，拥有良好的用户界面<br>项目地址：<a href=\"https://github.com/kyleduo/SwitchButton\" target=\"_blank\" rel=\"external\">https://github.com/kyleduo/SwitchButton</a>  </p>\n</li>\n<li><p>SlideSwitch<br>状态切换的开关，可以设置为类似 IOS 的圆形，也可以设置为矩形，用 View 实现<br>项目地址：<a href=\"https://github.com/Leaking/SlideSwitch\" target=\"_blank\" rel=\"external\">https://github.com/Leaking/SlideSwitch</a>  </p>\n</li>\n<li><p>ExpandableTextView<br>可展开和收缩内容的 TextView。<br>项目地址：<a href=\"https://github.com/Manabu-GT/ExpandableTextView\" target=\"_blank\" rel=\"external\">https://github.com/Manabu-GT/ExpandableTextView</a>  </p>\n</li>\n<li><p>TagCloudView(支持 SingleLine 模式的标签云)<br>标签云效果，只需要一行代码即可设置为 SingleLine 模式，轻松实现知乎问题话题列表效果。SingleLine 模式时末尾文字及图片可自定义。<br>项目地址：<a href=\"https://github.com/kingideayou/TagCloudView\" target=\"_blank\" rel=\"external\">https://github.com/kingideayou/TagCloudView</a><br>示例APK地址：<a href=\"https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk\" target=\"_blank\" rel=\"external\">https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk</a><br>APP示例：知乎  </p>\n</li>\n<li><p>BubbleTextView<br>Android Bubble View<br>项目地址：<a href=\"https://github.com/dupengtao/BubbleTextView\" target=\"_blank\" rel=\"external\">https://github.com/dupengtao/BubbleTextView</a> </p>\n</li>\n<li><p>shadow-layout<br>Android Shadow Layout<br>解决了<code>CardView</code>：1.不能画圆的阴影。2.设置阴影的位置。3.设置阴影颜色。<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/shadow-layout\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/shadow-layout</a></p>\n</li>\n</ol>\n<h3 id=\"九、ScrollView\"><a href=\"#九、ScrollView\" class=\"headerlink\" title=\"九、ScrollView\"></a>九、ScrollView</h3><ol>\n<li><p>Discrollview<br>支持滚动时 Item 淡入淡出，平移，缩放效果的 ScrollView<br>项目地址：<a href=\"https://github.com/flavienlaurent/discrollview\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/discrollview</a><br>Demo 地址：<a href=\"https://github.com/flavienlaurent/discrollview/raw/master/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/discrollview/raw/master/sample.apk</a>  </p>\n</li>\n<li><p>PullScrollView<br>仿照新浪微博 Android 客户端个人中心的 ScrollView，下拉背景伸缩回弹效果。<br>项目地址：<a href=\"https://github.com/MarkMjw/PullScrollView\" target=\"_blank\" rel=\"external\">https://github.com/MarkMjw/PullScrollView</a>  </p>\n</li>\n<li><p>ArcLayout<br>一个非常简单的弧布局库<br>项目地址：<a href=\"https://github.com/ogaclejapan/ArcLayout\" target=\"_blank\" rel=\"external\">https://github.com/ogaclejapan/ArcLayout</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo</a>  </p>\n</li>\n<li><p>ParallaxScrollView<br>支持视差滚动的 ScrollView ，背景图片的滚动速度小于 ScrollView 中子控件的滚动速度<br>项目地址：<a href=\"https://github.com/chrisjenx/ParallaxScrollView\" target=\"_blank\" rel=\"external\">https://github.com/chrisjenx/ParallaxScrollView</a><br>Demo 地址：<a href=\"http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk\" target=\"_blank\" rel=\"external\">http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk</a>  </p>\n</li>\n<li><p>AKParallax-Android<br>支持视差滚动的 ScrollView<br>项目地址：<a href=\"https://github.com/ideaismobile/AKParallax-Android\" target=\"_blank\" rel=\"external\">https://github.com/ideaismobile/AKParallax-Android</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample</a>  </p>\n</li>\n<li><p>Android-ObservableScrollView<br>监听滚动视图滚动事件的库，帮助与 Toolbar 的交互动效处理与 Material Design 的实现<br>项目地址：<a href=\"https://github.com/ksoichiro/Android-ObservableScrollView\" target=\"_blank\" rel=\"external\">https://github.com/ksoichiro/Android-ObservableScrollView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2</a>  </p>\n</li>\n<li><p>OverScrollView<br>有弹性的 ScrollView，实现了当手指滑动到 ScrollView 的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹<br>项目地址：<a href=\"https://github.com/EverythingMe/OverScrollView\" target=\"_blank\" rel=\"external\">https://github.com/EverythingMe/OverScrollView</a>  </p>\n</li>\n</ol>\n<h3 id=\"十、TimeView\"><a href=\"#十、TimeView\" class=\"headerlink\" title=\"十、TimeView\"></a>十、TimeView</h3><p>包括 TimePicker、DatePicker、CalendarView、Clock 等时间相关控件  </p>\n<ol>\n<li><p>android-times-square<br>Android 日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示<br>项目地址：<a href=\"https://github.com/square/android-times-square\" target=\"_blank\" rel=\"external\">https://github.com/square/android-times-square</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-calendar-card<br>日历<br>项目地址：<a href=\"https://github.com/kenumir/android-calendar-card\" target=\"_blank\" rel=\"external\">https://github.com/kenumir/android-calendar-card</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.wt.calendarcardsample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.wt.calendarcardsample</a>  </p>\n</li>\n<li><p>AndroidWheel<br>Android Wheel 支持城市、多种日期时间、密码、图片<br>项目地址：<a href=\"https://code.google.com/p/android-wheel/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-wheel/</a>  </p>\n</li>\n<li><p>GoogleDateTimePickers<br>时间选择部件<br>项目地址：<a href=\"https://github.com/Mirkoddd/GoogleDateTimePickers\" target=\"_blank\" rel=\"external\">https://github.com/Mirkoddd/GoogleDateTimePickers</a><br>文档介绍：<a href=\"https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it</a>  </p>\n</li>\n<li><p>DateTimePicker<br>日期选择部件(Google Agenda 的样式风格)<br>项目地址：<a href=\"https://github.com/flavienlaurent/datetimepicker\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/datetimepicker</a><br>Demo 地址：<a href=\"https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk</a>  </p>\n</li>\n<li><p>android-betterpickers<br>提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以 DialogFragment 的弹窗选择<br>项目地址：<a href=\"https://github.com/derekbrameyer/android-betterpickers\" target=\"_blank\" rel=\"external\">https://github.com/derekbrameyer/android-betterpickers</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample</a>  </p>\n</li>\n<li><p>Android Week View<br>日期控件，支持周，天视图，支持自定义样式<br>项目地址：<a href=\"https://github.com/alamkanak/Android-Week-View\" target=\"_blank\" rel=\"external\">https://github.com/alamkanak/Android-Week-View</a>  </p>\n</li>\n<li><p>PickerView<br>仿 iOS 的 PickerView 控件，有时间选择和选项选择并支持一二三级联动效果，TimePopupWindow 时间选择器，支持年月日时分，年月日，时分等格式；OptionsPopupWindow 选项选择器，支持一，二，三级选项选择，并且可以设置是否联动<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-PickerView\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-PickerView</a>  </p>\n</li>\n<li><p>CountdownView<br>Android 倒计时控件，使用Canvas绘制，支持多种样式<br>项目地址：<a href=\"https://github.com/iwgang/CountdownView\" target=\"_blank\" rel=\"external\">https://github.com/iwgang/CountdownView</a>  </p>\n</li>\n</ol>\n<h3 id=\"十一、TipView\"><a href=\"#十一、TipView\" class=\"headerlink\" title=\"十一、TipView\"></a>十一、TipView</h3><p>包括 Toast、角标、UndoBar 等提示性控件  </p>\n<ol>\n<li><p>SVProgressHUD<br>SVProgressHUD For Android 精仿iOS的提示库 SVProgressHUD，api也几乎一样。<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-SVProgressHUD\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-SVProgressHUD</a>  </p>\n</li>\n<li><p>Crouton<br>丰富样式的 Toast，允许 alert、comfirm、info 样式及点击消失样式，允许设置 Toast 显示时间，允许自定义 View。 本文 32. SuperToasts 为其扩展版<br>项目地址：<a href=\"https://github.com/keyboardsurfer/Crouton\" target=\"_blank\" rel=\"external\">https://github.com/keyboardsurfer/Crouton</a><br>Demo 地址：<a href=\"http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton</a>  </p>\n</li>\n<li><p>supertooltips<br>带动画效果的 Tips 显示<br>项目地址：<a href=\"https://github.com/nhaarman/supertooltips\" target=\"_blank\" rel=\"external\">https://github.com/nhaarman/supertooltips</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.haarman.supertooltips\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.haarman.supertooltips</a>  </p>\n</li>\n<li><p>Android ViewBadger<br>为其他 View 添加角标（消息圆点）等<br>项目地址：<a href=\"https://github.com/jgilfelt/android-viewbadger\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-viewbadger</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true</a>  </p>\n</li>\n<li><p>SuperToasts<br>更丰富样式的 toast，支持 Button、Progress、Horizontal Progress 样式、支持进入动画、支持撤销及其动画设置<br>项目地址：<a href=\"https://github.com/JohnPersano/SuperToasts\" target=\"_blank\" rel=\"external\">https://github.com/JohnPersano/SuperToasts</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.supertoastsdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.supertoastsdemo</a>  </p>\n</li>\n<li><p>UndoBar<br>屏幕底部显示取消或是确认的 PopupWindows<br>项目地址：<a href=\"https://github.com/soarcn/UndoBar\" target=\"_blank\" rel=\"external\">https://github.com/soarcn/UndoBar</a>  </p>\n</li>\n<li><p>UndoBar<br>屏幕底部显示取消或是确认某操作<br>项目地址：<a href=\"https://github.com/jenzz/Android-UndoBar\" target=\"_blank\" rel=\"external\">https://github.com/jenzz/Android-UndoBar</a>  </p>\n</li>\n<li><p>Android-ActionItemBadge<br>可以在 ActionBar 的 MenuItem 上显示一个小角标<br>项目地址：<a href=\"https://github.com/mikepenz/Android-ActionItemBadge\" target=\"_blank\" rel=\"external\">https://github.com/mikepenz/Android-ActionItemBadge</a>  </p>\n</li>\n<li><p>SnackBar<br>Material Design 风格的 Toast，类似 Google inbox 中的提示<br>项目地址：<a href=\"https://github.com/MrEngineer13/SnackBar\" target=\"_blank\" rel=\"external\">https://github.com/MrEngineer13/SnackBar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample</a>  </p>\n</li>\n<li><p>HeadsUp<br>在 2.3 上使用 android  5.0 的 HeadsUp 效果<br>项目地址：<a href=\"https://github.com/zzz40500/HeadsUp\" target=\"_blank\" rel=\"external\">https://github.com/zzz40500/HeadsUp</a>  </p>\n</li>\n</ol>\n<h3 id=\"十二、FlipView\"><a href=\"#十二、FlipView\" class=\"headerlink\" title=\"十二、FlipView\"></a>十二、FlipView</h3><ol>\n<li><p>android-flip<br>类似 Flipboard 翻转动画的实现<br>项目地址：<a href=\"https://github.com/openaphid/android-flip\" target=\"_blank\" rel=\"external\">https://github.com/openaphid/android-flip</a><br>Demo 地址：<a href=\"https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true</a><br>APP 示例：flipboard  </p>\n</li>\n<li><p>FlipImageView<br>支持 x、y、z 及动画选择的翻转动画的实现<br>项目地址：<a href=\"https://github.com/castorflex/FlipImageView\" target=\"_blank\" rel=\"external\">https://github.com/castorflex/FlipImageView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview</a>  </p>\n</li>\n<li><p>FoldableLayout<br>Flip 翻转效果的 ListView，目前还不支持 ListView 缓存<br>项目地址：<a href=\"https://github.com/alexvasilkov/FoldableLayout\" target=\"_blank\" rel=\"external\">https://github.com/alexvasilkov/FoldableLayout</a><br>Demo 地址：<a href=\"http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample</a>  </p>\n</li>\n<li><p>FlipViewPager.Draco<br>Flip 翻转效果的 ViewPager<br>项目地址：<a href=\"https://github.com/Yalantis/FlipViewPager.Draco\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/FlipViewPager.Draco</a>  </p>\n</li>\n</ol>\n<h3 id=\"十三、ColorPickView\"><a href=\"#十三、ColorPickView\" class=\"headerlink\" title=\"十三、ColorPickView\"></a>十三、ColorPickView</h3><ol>\n<li><p>ColorPickerView<br>颜色选择器，支持 PopupWindows 或新的 Activity 中打开<br>项目地址：<a href=\"https://code.google.com/p/color-picker-view/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/color-picker-view/</a>  </p>\n</li>\n<li><p>HoloColorPicker<br>颜色选择器<br>项目地址：<a href=\"https://github.com/LarsWerkman/HoloColorPicker\" target=\"_blank\" rel=\"external\">https://github.com/LarsWerkman/HoloColorPicker</a><br>Demo 地址：<a href=\"https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit\" target=\"_blank\" rel=\"external\">https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit</a>  </p>\n</li>\n<li><p>ColorPickerPreference<br>颜色选择器<br>项目地址：<a href=\"https://github.com/attenzione/android-ColorPickerPreference\" target=\"_blank\" rel=\"external\">https://github.com/attenzione/android-ColorPickerPreference</a>  </p>\n</li>\n<li><p>ColorPicker<br>颜色选择器（Google Agenda 中的样式风格）<br>项目地址：<a href=\"https://github.com/flavienlaurent/colorpicker\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/colorpicker</a><br>Demo 地址：<a href=\"https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk</a>  </p>\n</li>\n</ol>\n<h3 id=\"十四、GraphView\"><a href=\"#十四、GraphView\" class=\"headerlink\" title=\"十四、GraphView\"></a>十四、GraphView</h3><ol>\n<li><p>MPAndroidChart<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图等；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表<br>项目地址：<a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample</a><br>Demo 项目：<a href=\"https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=ufaK_Hd6BpI\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=ufaK_Hd6BpI</a>  </p>\n</li>\n<li><p>achartengine<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合<br>项目地址：<a href=\"https://code.google.com/p/achartengine/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/achartengine/</a><br>官网网址：<a href=\"http://www.achartengine.org/\" target=\"_blank\" rel=\"external\">http://www.achartengine.org/</a><br>APP 示例：Wordpress Android，Google Analytics  </p>\n</li>\n<li><p>GraphView<br>绘制图表和曲线图的 View，可用于 Android 上的曲形图、柱状图、波浪图展示<br>项目地址：<a href=\"https://github.com/jjoe64/GraphView\" target=\"_blank\" rel=\"external\">https://github.com/jjoe64/GraphView</a><br>Demo 项目：<a href=\"https://github.com/jjoe64/GraphView-Demos\" target=\"_blank\" rel=\"external\">https://github.com/jjoe64/GraphView-Demos</a><br>APP 示例：Wordpress Android，Google Analytics  </p>\n</li>\n<li><p>HoloGraphLibrary<br>绘制现状图、柱状图、饼状图<br>项目地址：<a href=\"https://bitbucket.org/danielnadeau/holographlibrary/src\" target=\"_blank\" rel=\"external\">https://bitbucket.org/danielnadeau/holographlibrary/src</a><br>文档介绍：<a href=\"https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home\" target=\"_blank\" rel=\"external\">https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home</a>  </p>\n</li>\n<li><p>XCL-Charts<br>XCL-Charts 基于原生的 Canvas 来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持 3D/非 3D 柱形图(Bar Chart)、3D/非 3D 饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。<br>项目地址：<a href=\"https://github.com/xcltapestry/XCL-Charts\" target=\"_blank\" rel=\"external\">https://github.com/xcltapestry/XCL-Charts</a><br>Demo 地址：<a href=\"https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>EazeGraph<br>Android 图表库，支持柱状图、分层柱状图、饼状图、线性图<br>项目地址：<a href=\"https://github.com/blackfizz/EazeGraph\" target=\"_blank\" rel=\"external\">https://github.com/blackfizz/EazeGraph</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=org.eazegraph.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.eazegraph.app</a>  </p>\n</li>\n<li><p>WilliamChart<br>绘制图表的库，支持 LineChartView、BarChartView 和 StackBarChartView 三中图表类型，并且支持 Android 2.2 及以上的系统。<br>项目地址：<a href=\"https://github.com/diogobernardino/WilliamChart\" target=\"_blank\" rel=\"external\">https://github.com/diogobernardino/WilliamChart</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.db.williamchartdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.db.williamchartdemo</a><br>Demo 项目：<a href=\"https://github.com/diogobernardino/WilliamChart/tree/master/sample\" target=\"_blank\" rel=\"external\">https://github.com/diogobernardino/WilliamChart/tree/master/sample</a>  </p>\n</li>\n<li><p>HelloCharts for Android<br>支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上<br>项目地址：<a href=\"https://github.com/lecho/hellocharts-android\" target=\"_blank\" rel=\"external\">https://github.com/lecho/hellocharts-android</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=xbSBjyjH2SY\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=xbSBjyjH2SY</a>  </p>\n</li>\n<li><p>PieChartView<br>比较简单直接的饼状统计报表图，使用方便，设置相应的属性参数即可<br>项目地址：<a href=\"https://github.com/wuseal/PieChartView\" target=\"_blank\" rel=\"external\">https://github.com/wuseal/PieChartView</a><br>Demo 地址：<a href=\"https://github.com/wuseal/PieChartView\" target=\"_blank\" rel=\"external\">https://github.com/wuseal/PieChartView</a>  </p>\n</li>\n</ol>\n<h3 id=\"十五、UI-Style\"><a href=\"#十五、UI-Style\" class=\"headerlink\" title=\"十五、UI Style\"></a>十五、UI Style</h3><p>不同样式的系统 UI 风格，如 IOS、Bootstrap 风格  </p>\n<ol>\n<li><p>UITableView<br>ios 风格控件，包括 Button、ListView、TableView<br>项目地址：<a href=\"https://github.com/thiagolocatelli/android-uitableview\" target=\"_blank\" rel=\"external\">https://github.com/thiagolocatelli/android-uitableview</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>ATableView<br>ios 风格控件<br>项目地址：<a href=\"https://github.com/dmacosta/ATableView\" target=\"_blank\" rel=\"external\">https://github.com/dmacosta/ATableView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo</a>  </p>\n</li>\n<li><p>Cards-UI<br>卡片式 View，支持单个卡片，item 为卡片的 ListView<br>项目地址：<a href=\"https://github.com/afollestad/Cards-UI\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/Cards-UI</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>cardslib<br>卡片式 View，支持单个卡片，item 为卡片的 ListView 和 GridView<br>项目地址：<a href=\"https://github.com/gabrielemariotti/cardslib\" target=\"_blank\" rel=\"external\">https://github.com/gabrielemariotti/cardslib</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo</a>  </p>\n</li>\n<li><p>Android-Bootstrap<br>Bootstrap 风格的按钮<br>项目地址：<a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\" target=\"_blank\" rel=\"external\">https://github.com/Bearded-Hen/Android-Bootstrap</a>  </p>\n</li>\n<li><p>Material Design Android Library<br>Android L 中 Material Design 风格的组件适配到 Android 2.2+<br>项目地址：<a href=\"https://github.com/navasmdc/MaterialDesignLibrary\" target=\"_blank\" rel=\"external\">https://github.com/navasmdc/MaterialDesignLibrary</a>  </p>\n</li>\n<li><p>Android FlatUI<br>Android 扁平化风格的组件，支持一些自定义样式<br>项目地址：<a href=\"https://github.com/eluleci/FlatUI\" target=\"_blank\" rel=\"external\">https://github.com/eluleci/FlatUI</a>  </p>\n</li>\n<li><p>cheesesquare<br>全新 Android 设计库演示 Demo，包括 Collapsing Toolbar、FloatingActionButton、View anchoring、NavigationView、Snackbar<br>项目地址：<a href=\"https://github.com/chrisbanes/cheesesquare\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/cheesesquare</a>  </p>\n</li>\n</ol>\n<h3 id=\"十六、其他\"><a href=\"#十六、其他\" class=\"headerlink\" title=\"十六、其他\"></a>十六、其他</h3><ol>\n<li><p>SnappingStepper<br>一种漂亮的UI控件，能更灵活的控制数字的增减。可用于购物车商品数量控制。<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-SnappingStepper\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-SnappingStepper</a>  </p>\n</li>\n<li><p>SwipeBackLayout<br>左右或向上滑动返回的 Activity<br>项目地址：<a href=\"https://github.com/Issacw0ng/SwipeBackLayout\" target=\"_blank\" rel=\"external\">https://github.com/Issacw0ng/SwipeBackLayout</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo</a><br>APP 示例：知乎  </p>\n</li>\n<li><p>android-styled-dialogs<br>可自定义样式的 dialog，默认与 Holo 主题样式一致，在 Android2.2 以上同一样式<br>项目地址：<a href=\"https://github.com/inmite/android-styled-dialogs\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-styled-dialogs</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>Android Sliding Up Panel<br>可拖动的 View，能在当前 Activity 上扶起一个可拖动的 Panel<br>项目地址：<a href=\"https://github.com/umano/AndroidSlidingUpPanel\" target=\"_blank\" rel=\"external\">https://github.com/umano/AndroidSlidingUpPanel</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.sothree.umano\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.sothree.umano</a><br>APP 示例：Google Music 精简播放栏  </p>\n</li>\n<li><p>TableFixHeaders<br>第一列固定的 Table<br>项目地址：<a href=\"https://github.com/InQBarna/TableFixHeaders\" target=\"_blank\" rel=\"external\">https://github.com/InQBarna/TableFixHeaders</a><br>Demo 地址：<a href=\"http://bit.ly/13buAIq\" target=\"_blank\" rel=\"external\">http://bit.ly/13buAIq</a>  </p>\n</li>\n<li><p>Inscription<br>可用于展示应用 change 和 new feature 信息<br>项目地址：<a href=\"https://github.com/MartinvanZ/Inscription\" target=\"_blank\" rel=\"external\">https://github.com/MartinvanZ/Inscription</a>  </p>\n</li>\n<li><p>ActivityTransition<br>Activity 切换动画，包括渐变、flip、某个位置进入等等<br>项目地址：<a href=\"https://github.com/ophilbert/ActivityTransition\" target=\"_blank\" rel=\"external\">https://github.com/ophilbert/ActivityTransition</a><br>文档介绍：<a href=\"https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>\n</li>\n<li><p>EasyAndroidAnimations<br>针对 View 的各种动画<br>项目地址：<a href=\"https://github.com/2359media/EasyAndroidAnimations\" target=\"_blank\" rel=\"external\">https://github.com/2359media/EasyAndroidAnimations</a>  </p>\n</li>\n<li><p>ViewAnimation<br>对android view 动画进行封装,实现起更简单，自带三种常见运动路径，其他的可自定义<br>项目地址：<a href=\"https://github.com/guohuanwen/ViewAniamtion\" target=\"_blank\" rel=\"external\">https://github.com/guohuanwen/ViewAniamtion</a><br>APP 示例：QQ名片圈圈效果  </p>\n</li>\n<li><p>AndroidLoadingAnimation<br>多种android加载动画<br>项目地址：<a href=\"https://github.com/guohuanwen/AndroidLoadingAnimation\" target=\"_blank\" rel=\"external\">https://github.com/guohuanwen/AndroidLoadingAnimation</a>  </p>\n</li>\n<li><p>android-lockpattern<br>Android 的图案密码解锁<br>项目地址：<a href=\"https://code.google.com/p/android-lockpattern/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-lockpattern/</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/爱早起/Android Lock Pattern 源码解析\" target=\"_blank\" rel=\"external\">android-lockpattern</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo</a><br>文档介绍：<a href=\"https://code.google.com/p/android-lockpattern/wiki/QuickUse\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-lockpattern/wiki/QuickUse</a><br>APP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  </p>\n</li>\n<li><p>PatternLock<br>另一个 Android 图案解锁库<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/PatternLock\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/PatternLock</a><br>Demo 地址：<a href=\"https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk</a><br>APP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  </p>\n</li>\n<li><p>RangeBar<br>类似于 SeekBar，不同的是可以选择一个范围内的值而不是单个值<br>项目地址：<a href=\"https://github.com/edmodo/range-bar\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/range-bar</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>ChromeView<br>利用 Chromium 实现的 WebView，解决各个 Android 版本 WebView 不同的问题，同时利用最新 Chrome 代码<br>项目地址：<a href=\"https://github.com/pwnall/chromeview\" target=\"_blank\" rel=\"external\">https://github.com/pwnall/chromeview</a>  </p>\n</li>\n<li><p>android-phased-seek-bar<br>支持预先定义状态的 SeekBar<br>项目地址：<a href=\"https://github.com/ademar111190/android-phased-seek-bar\" target=\"_blank\" rel=\"external\">https://github.com/ademar111190/android-phased-seek-bar</a>  </p>\n</li>\n<li><p>Android Slider Preference Library<br>可添加到设置中的基于对话框的 RankBar 小部件<br>项目地址：<a href=\"https://github.com/jayschwa/AndroidSliderPreference\" target=\"_blank\" rel=\"external\">https://github.com/jayschwa/AndroidSliderPreference</a>  </p>\n</li>\n<li><p>ShowcaseView library<br>用于高亮显示应用程序的特定部分，从而突出突出重点<br>项目地址：<a href=\"https://github.com/amlcurran/ShowcaseView\" target=\"_blank\" rel=\"external\">https://github.com/amlcurran/ShowcaseView</a>  </p>\n</li>\n<li><p>android-segmented-control<br>Android 上的 Segmented Controls，相当于 RadioButton 组<br>项目地址：<a href=\"https://github.com/hoang8f/android-segmented-control\" target=\"_blank\" rel=\"external\">https://github.com/hoang8f/android-segmented-control</a>  </p>\n</li>\n<li><p>Swipeable Cards<br>类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢<br>项目地址：<a href=\"https://github.com/kikoso/Swipeable-Cards\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/Swipeable-Cards</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>\n</li>\n<li><p>EdgeEffectOverride<br>改变 ScrollView, ListView, ExpandableListView, GridView, ViewPager 等滚动控件滚动到边缘的颜色效果<br>项目地址：<a href=\"https://github.com/AndroidAlliance/EdgeEffectOverride\" target=\"_blank\" rel=\"external\">https://github.com/AndroidAlliance/EdgeEffectOverride</a>  </p>\n</li>\n<li><p>android-pinned-header-listviews<br>使 ExpandListView 的 Group 滑动到顶端时会固定不动直到另外一个 Group 到达顶端<br>项目地址：<a href=\"https://github.com/rtyley/android-pinned-header-listviews\" target=\"_blank\" rel=\"external\">https://github.com/rtyley/android-pinned-header-listviews</a>  </p>\n</li>\n<li><p>AndroidSwipeLayout<br>滑动 Layout，支持单个 View，ListView，GridView<br>项目地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidSwipeLayout</a><br>Demo 地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk\" target=\"_blank\" rel=\"external\">Download Demo</a>  </p>\n</li>\n<li><p>DynamicCardLayout<br>在 Android 中实现的类似 Windows8 的瓷片布局<br>项目地址：<a href=\"https://github.com/dodola/DynamicCardLayout\" target=\"_blank\" rel=\"external\">https://github.com/dodola/DynamicCardLayout</a>  </p>\n</li>\n<li><p>Emoticons-Keyboard<br>带表情情符号的自定义键盘<br>项目地址：<a href=\"https://github.com/chiragjain/Emoticons-Keyboard\" target=\"_blank\" rel=\"external\">https://github.com/chiragjain/Emoticons-Keyboard</a>  </p>\n</li>\n<li><p>Android Typeface Helper<br>可以帮你轻松实现自定义字体的库<br>项目地址：<a href=\"https://github.com/norbsoft/android-typeface-helper\" target=\"_blank\" rel=\"external\">https://github.com/norbsoft/android-typeface-helper</a>  </p>\n</li>\n<li><p>Android-Anim-Playground<br>几个动画效果，其中第二个基于 android-svg 的绘制效果非常好<br>项目地址：<a href=\"https://github.com/Tibolte/Android-Anim-Playground\" target=\"_blank\" rel=\"external\">https://github.com/Tibolte/Android-Anim-Playground</a>  </p>\n</li>\n<li><p>AlertView<br>仿iOS的AlertViewController 几乎完美还原iOS 的 AlertViewController ，同时支持Alert和ActionSheet模式，每一个细节都是精雕细琢，并把api封装成懒到极致模式，一行代码就可以进行弹窗.<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-AlertView\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-AlertView</a>  </p>\n</li>\n<li><p>NiftyDialogEffects<br>支持自定义飞入动画样式的 Dialog<br>项目地址：<a href=\"https://github.com/sd6352051/NiftyDialogEffects\" target=\"_blank\" rel=\"external\">https://github.com/sd6352051/NiftyDialogEffects</a><br>在线演示：<a href=\"http://tympanus.net/Development/ModalWindowEffects/\" target=\"_blank\" rel=\"external\">http://tympanus.net/Development/ModalWindowEffects/</a>  </p>\n</li>\n<li><p>PostOffice<br>创建 Holo 及 Material Design 样式的 Dialog<br>项目地址：<a href=\"https://github.com/r0adkll/PostOffice\" target=\"_blank\" rel=\"external\">https://github.com/r0adkll/PostOffice</a>  </p>\n</li>\n<li><p>Swipecards<br>类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso’s Swipeable-Cards 改造而来<br>项目地址：<a href=\"https://github.com/Diolor/Swipecards\" target=\"_blank\" rel=\"external\">https://github.com/Diolor/Swipecards</a>  </p>\n</li>\n<li><p>SeekArc<br>圆形的 SeekBar<br>项目地址：<a href=\"https://github.com/TriggerTrap/SeekArc\" target=\"_blank\" rel=\"external\">https://github.com/TriggerTrap/SeekArc</a>  </p>\n</li>\n<li><p>BlurDialogFragment<br>显示  DialogFragment 时背景模糊效果<br>项目地址：<a href=\"https://github.com/tvbarthel/BlurDialogFragment\" target=\"_blank\" rel=\"external\">https://github.com/tvbarthel/BlurDialogFragment</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample</a>  </p>\n</li>\n<li><p>range-seek-bar<br>随机值选取的 SeekBar<br>项目地址：<a href=\"https://github.com/yahoo/android-range-seek-bar\" target=\"_blank\" rel=\"external\">https://github.com/yahoo/android-range-seek-bar</a>  </p>\n</li>\n<li><p>MaterialRangeBar<br>可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配<br>项目地址：<a href=\"https://github.com/oli107/material-range-bar\" target=\"_blank\" rel=\"external\">https://github.com/oli107/material-range-bar</a>  </p>\n</li>\n<li><p>MaterialList<br>Material Design 风格的 CardView<br>项目地址：<a href=\"https://github.com/dexafree/MaterialList\" target=\"_blank\" rel=\"external\">https://github.com/dexafree/MaterialList</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample</a>  </p>\n</li>\n<li><p>road-trip<br>设置 path 的各种动画效果，以及如何实现复杂路径动画，类似于 ios 中的指纹注册界面的指纹动画效果<br>项目地址：<a href=\"https://github.com/romainguy/road-trip\" target=\"_blank\" rel=\"external\">https://github.com/romainguy/road-trip</a>  </p>\n</li>\n<li><p>dialogplus<br>一个简单的 Android 对话框，支持不同的弹出模式<br>项目地址：<a href=\"https://github.com/orhanobut/dialogplus\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/dialogplus</a>  </p>\n</li>\n<li><p>FlowLayout<br>一个简单的流式布局，用法类似 LinearLayout，但是能够让子元素根据宽度自动换行<br>项目地址：<a href=\"https://github.com/LyndonChin/AndroidFlowLayout\" target=\"_blank\" rel=\"external\">FLowLayout</a>  </p>\n</li>\n<li><p>CircleSeekbar<br>一个环形Seekbar组件,支持叠加复合使用<br>项目地址：<a href=\"https://github.com/feeeei/CircleSeekbar\" target=\"_blank\" rel=\"external\">CircleSeekbar</a>  </p>\n</li>\n<li><p>FinestWebView<br>美麗的和可定制的Android的活動，顯示在一個應用程序的網頁。<br>项目地址: <a href=\"https://github.com/TheFinestArtist/FinestWebView-Android\" target=\"_blank\" rel=\"external\">https://github.com/TheFinestArtist/FinestWebView-Android</a><br>Sample 地址: <a href=\"https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample</a>  </p>\n</li>\n<li><p>YouTubePlayerActivity<br>只需通過一個URL來在新的活動播放YouTube視頻。它支持屏幕方向，媒體音量控制等。<br>项目地址: <a href=\"https://github.com/TheFinestArtist/YouTubePlayerActivity\" target=\"_blank\" rel=\"external\">https://github.com/TheFinestArtist/YouTubePlayerActivity</a><br>Sample 地址: <a href=\"https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample</a>  </p>\n</li>\n<li><p>material-camera<br>material风格的camera。能使camera使用起来更简单的库。<br>项目地址：<a href=\"https://github.com/afollestad/material-camera\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/material-camera</a>   </p>\n</li>\n<li><p>material-dialogs<br>各种material风格的dialog。<br>漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8。<br>项目地址：<a href=\"https://github.com/afollestad/material-dialogs\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/material-dialogs</a><br>Sample地址：<a href=\"https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk</a>  </p>\n</li>\n<li><p>NotifyUtil<br>最常见的通知样式库<br>项目地址:<a href=\"https://github.com/wenmingvs/NotifyUtil\" target=\"_blank\" rel=\"external\">https://github.com/wenmingvs/NotifyUtil</a><br>demo地址：<a href=\"https://github.com/wenmingvs/NotifyUtil#notifydemo\" target=\"_blank\" rel=\"external\">https://github.com/wenmingvs/NotifyUtil#notifydemo</a>  </p>\n</li>\n<li><p>CanPhotos<br>使用fresco选取多张图片并可预览图片<br>项目地址：<a href=\"https://github.com/canyinghao/CanPhotos\" target=\"_blank\" rel=\"external\">https://github.com/canyinghao/CanPhotos</a>   </p>\n</li>\n<li><p>CanDialog<br>仿照系统Dialog所写，继承于FrameLayout，添加一些动画，一些显示类型。<br>项目地址：<a href=\"https://github.com/canyinghao/CanDialog\" target=\"_blank\" rel=\"external\">https://github.com/canyinghao/CanDialog</a>  </p>\n</li>\n</ol>\n<h2 id=\"第二部分-工具库\"><a href=\"#第二部分-工具库\" class=\"headerlink\" title=\"第二部分 工具库\"></a>第二部分 工具库</h2><p>主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络请求、数据库 ORM 建模、Android 公共库、Android 高版本向低版本兼容、多媒体相关及其他。  </p>\n<h3 id=\"一、依赖注入-DI\"><a href=\"#一、依赖注入-DI\" class=\"headerlink\" title=\"一、依赖注入 DI\"></a>一、依赖注入 DI</h3><p>通过依赖注入减少 View、服务、资源简化初始化，事件绑定等重复繁琐工作  </p>\n<ol>\n<li><p>AndroidAnnotations(Code Diet)<br>android 快速开发框架<br>项目地址：<a href=\"https://github.com/excilys/androidannotations\" target=\"_blank\" rel=\"external\">https://github.com/excilys/androidannotations</a><br>文档介绍：<a href=\"https://github.com/excilys/androidannotations/wiki\" target=\"_blank\" rel=\"external\">https://github.com/excilys/androidannotations/wiki</a><br>官网网址：<a href=\"http://androidannotations.org/\" target=\"_blank\" rel=\"external\">http://androidannotations.org/</a><br>特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等<br>(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程<br>(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类<br>(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现<br>(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类<br>(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。<br>其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响  </p>\n</li>\n<li><p>roboguice<br>帮你处理了很多代码异常，利用 annotation 使得更少的代码完成项目<br>项目地址：<a href=\"https://github.com/roboguice/roboguice\" target=\"_blank\" rel=\"external\">https://github.com/roboguice/roboguice</a><br>文档介绍：<a href=\"https://github.com/roboguice/roboguice/wiki\" target=\"_blank\" rel=\"external\">https://github.com/roboguice/roboguice/wiki</a>  </p>\n</li>\n<li><p>butterknife<br>利用 annotation 帮你快速完成 View 的初始化，减少代码<br>项目地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/butterknife</a><br>文档介绍：<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">http://jakewharton.github.io/butterknife/</a>  </p>\n</li>\n<li><p>Dagger<br>依赖注入，适用于 Android 和 Java<br>项目地址：<a href=\"https://github.com/square/dagger\" target=\"_blank\" rel=\"external\">https://github.com/square/dagger</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/扔物线/Dagger 源码解析\" target=\"_blank\" rel=\"external\">Dagger</a><br>文档介绍：<a href=\"http://square.github.io/dagger/\" target=\"_blank\" rel=\"external\">http://square.github.io/dagger/</a>  </p>\n</li>\n<li><p>AutoParcel<br>注解自动生成Parcelable实现代码的库<br>项目地址：<a href=\"https://github.com/frankiesardo/auto-parcel\" target=\"_blank\" rel=\"external\">https://github.com/frankiesardo/auto-parcel</a><br>这篇文章详细介绍了它的使用方法：<a href=\"https://passy.svbtle.com/simpler-android-apis-with-autoparcel\" target=\"_blank\" rel=\"external\">AutoParcel</a><br>作者认为使用AutoParcel的好处是，可以简化构造函数，方便IDE代码自动完成，方便测试，前向兼容，生成不可变的对象。<br>文档介绍：<a href=\"https://github.com/frankiesardo/auto-parcel\" target=\"_blank\" rel=\"external\">https://github.com/frankiesardo/auto-parcel</a></p>\n</li>\n</ol>\n<h3 id=\"二、图片缓存\"><a href=\"#二、图片缓存\" class=\"headerlink\" title=\"二、图片缓存\"></a>二、图片缓存</h3><ol>\n<li><p>Android-Universal-Image-Loader<br>图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。<br>项目地址：<a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"external\">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/huxian99/Android Universal Image Loader 源码分析\" target=\"_blank\" rel=\"external\">Android-Universal-Image-Loader</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true</a><br>文档介绍：<a href=\"http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html\" target=\"_blank\" rel=\"external\">http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html</a>  </p>\n</li>\n<li><p>picasso<br>square 开源的图片缓存<br>项目地址：<a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">https://github.com/square/picasso</a><br>文档介绍：<a href=\"http://square.github.io/picasso/\" target=\"_blank\" rel=\"external\">http://square.github.io/picasso/</a><br>特点：(1)可以自动检测 adapter 的重用并取消之前的下载<br>(2)图片变换<br>(3)可以加载本地资源<br>(4)可以设置占位资源<br>(5)支持 debug 模式  </p>\n</li>\n<li><p>Cube ImageLoader<br>阿里巴巴一淘使用的图片加载，综合了 Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持<br>项目地址：<a href=\"https://github.com/etao-open-source/cube-sdk\" target=\"_blank\" rel=\"external\">https://github.com/etao-open-source/cube-sdk</a><br>Demo 地址：<a href=\"https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk</a><br>文档介绍：<a href=\"http://cube-sdk.liaohuqiu.net/\" target=\"_blank\" rel=\"external\">http://cube-sdk.liaohuqiu.net/</a>  </p>\n</li>\n<li><p>fresco<br>一款强大的图片缓存工具，由 Facebook 开发<br>项目地址：<a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">https://github.com/facebook/fresco</a><br>文档介绍：<a href=\"http://frescolib.org/\" target=\"_blank\" rel=\"external\">http://frescolib.org/</a><br>特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存<br>(2) 支持流式，可以类似网页上模糊渐进式显示图片<br>(3) 对多帧动画图片支持更好，如 Gif、WebP<br>(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点<br>(5) 更多样的加载，如支持 EXIF、全面支持 WebP<br>(6) 支持 Android 2.3+  </p>\n</li>\n<li><p>Glide<br>Glide 是一个 android 平台上的快速和高效的开源的多媒体资源管理库,提供 多媒体文件的压缩,内存和磁盘缓存, 资源池的接口。<br>它可以最大性能地在 Android 设备上读取、解码、显示图片和视频。Glide 可以将远程的图片、视频、动画图片等缓存在设备本地便于提高用户浏览图片的流畅体验。<br>项目地址：<a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"external\">https://github.com/bumptech/glide</a><br>特点：<br>(1) GIF 动画的解码<br>(2) 本地视频剧照的解码<br>(3) 支持缩略图<br>(4) Activity 生命周期的集成<br>(5) 转码的支持<br>(6) 动画的支持<br>(7) OkHttp 和 Volley 的支持  </p>\n</li>\n</ol>\n<h3 id=\"三、网络请求\"><a href=\"#三、网络请求\" class=\"headerlink\" title=\"三、网络请求\"></a>三、网络请求</h3><ol>\n<li><p>Volley<br>Google 提供的网络通信库，使得网络请求更简单、更快速<br>项目地址：<a href=\"https://android.googlesource.com/platform/frameworks/volley\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/platform/frameworks/volley</a><br>文档介绍：<a href=\"http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf\" target=\"_blank\" rel=\"external\">http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf</a>  </p>\n</li>\n<li><p>Asynchronous Http Client for Android<br>Android 异步 Http 请求<br>项目地址：<a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">https://github.com/loopj/android-async-http</a><br>文档介绍：<a href=\"http://loopj.com/android-async-http/\" target=\"_blank\" rel=\"external\">http://loopj.com/android-async-http/</a><br>特点：(1) 在匿名回调中处理请求结果<br>(2) 在 UI 线程外进行 http 请求<br>(3) 文件断点上传<br>(4) 智能重试<br>(5) 默认 gzip 压缩<br>(6) 支持解析成 Json 格式<br>(7) 可将 Cookies 持久化到 SharedPreferences  </p>\n</li>\n<li><p>android-query<br>异步加载，更少代码完成 Android 加载<br>项目地址：<a href=\"https://github.com/androidquery/androidquery\" target=\"_blank\" rel=\"external\">https://github.com/androidquery/androidquery</a> 或 <a href=\"https://code.google.com/p/android-query/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.androidquery\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.androidquery</a><br>文档介绍：<a href=\"https://code.google.com/p/android-query/#Why_AQuery?\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/#Why_AQuery?</a><br>特点：<a href=\"https://code.google.com/p/android-query/#Why_AQuery?\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/#Why_AQuery?</a>  </p>\n</li>\n<li><p>Async Http Client<br>Java 异步 Http 请求<br>项目地址：<a href=\"https://github.com/AsyncHttpClient/async-http-client\" target=\"_blank\" rel=\"external\">https://github.com/AsyncHttpClient/async-http-client</a><br>文档介绍：<a href=\"http://sonatype.github.io/async-http-client/\" target=\"_blank\" rel=\"external\">http://sonatype.github.io/async-http-client/</a>  </p>\n</li>\n<li><p>Ion<br>支持图片、json、http post 等异步请求<br>项目地址：<a href=\"https://github.com/koush/ion\" target=\"_blank\" rel=\"external\">https://github.com/koush/ion</a><br>文档介绍：<a href=\"https://github.com/koush/ion#more-examples\" target=\"_blank\" rel=\"external\">https://github.com/koush/ion#more-examples</a>  </p>\n</li>\n<li><p>Http Request<br>项目地址：<a href=\"https://github.com/kevinsawicki/http-request\" target=\"_blank\" rel=\"external\">https://github.com/kevinsawicki/http-request</a><br>文档介绍：<a href=\"https://github.com/kevinsawicki/http-request#examples\" target=\"_blank\" rel=\"external\">https://github.com/kevinsawicki/http-request#examples</a>  </p>\n</li>\n<li><p>okhttp<br>square 开源的 http 工具类<br>项目地址：<a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">https://github.com/square/okhttp</a><br>文档介绍：<a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">http://square.github.io/okhttp/</a><br>特点：(1) 支持 SPDY( <a href=\"http://zh.wikipedia.org/wiki/SPDY\" target=\"_blank\" rel=\"external\">http://zh.wikipedia.org/wiki/SPDY</a> )协议。SPDY 协议是 Google 开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个 TCP 链接传送网页和图片等资源)和优先级来缩短加载时间。<br>(2) 如果 SPDY 不可用，利用连接池减少请求延迟<br>(3) Gzip 压缩<br>(4) Response 缓存减少不必要的请求  </p>\n</li>\n<li><p>Retrofit<br>RESTFUL API 设计<br>项目地址：<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a><br>文档介绍：<a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">http://square.github.io/retrofit/</a>  </p>\n</li>\n<li><p>RoboSpice<br>Android 异步网络请求工具，支持缓存、REST 等等<br>项目地址：<a href=\"https://github.com/stephanenicolas/robospice\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/robospice</a><br>Demo 地址：<a href=\"https://github.com/stephanenicolas/RoboDemo/downloads\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/RoboDemo/downloads</a>  </p>\n</li>\n<li><p>TwistVolley<br>TwistVolley 是对 Volley 的一个封装库。提供类似 Picasso 一样的串联式 API。使得使用 Volley 更加方便。<br>项目地址：<a href=\"https://github.com/TwistedEquations/TwistVolley\" target=\"_blank\" rel=\"external\">https://github.com/TwistedEquations/TwistVolley</a>  </p>\n</li>\n</ol>\n<h3 id=\"四、数据库-orm-工具包\"><a href=\"#四、数据库-orm-工具包\" class=\"headerlink\" title=\"四、数据库 orm 工具包\"></a>四、数据库 orm 工具包</h3><p>orm 的 db 工具类，简化建表、查询、更新、插入、事务、索引的操作 </p>\n<ol>\n<li><p>greenDAO<br>Android Sqlite orm 的 db 工具类<br>项目地址：<a href=\"https://github.com/greenrobot/greenDAO\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/greenDAO</a><br>文档介绍：<a href=\"http://greendao-orm.com/documentation/\" target=\"_blank\" rel=\"external\">http://greendao-orm.com/documentation/</a><br>官网网址：<a href=\"http://greendao-orm.com/\" target=\"_blank\" rel=\"external\">http://greendao-orm.com/</a><br>特点：(1) 性能佳<br>(2) 简单易用的 API<br>(3) 内存小好小<br>(4) 库大小小  </p>\n</li>\n<li><p>GreenDaoUpgradeHelper<br>greenDAO的数据库升级帮助类，只需一行代码解决数据库升级<br>项目地址：<a href=\"https://github.com/yuweiguocn/GreenDaoUpgradeHelper\" target=\"_blank\" rel=\"external\">https://github.com/yuweiguocn/GreenDaoUpgradeHelper</a></p>\n</li>\n<li><p>ActiveAndroid<br>Android Sqlite orm 的 db 工具类<br>项目地址：<a href=\"https://github.com/pardom/ActiveAndroid\" target=\"_blank\" rel=\"external\">https://github.com/pardom/ActiveAndroid</a><br>文档介绍：<a href=\"https://github.com/pardom/ActiveAndroid/wiki/_pages\" target=\"_blank\" rel=\"external\">https://github.com/pardom/ActiveAndroid/wiki/_pages</a>  </p>\n</li>\n<li><p>Sprinkles<br>Android Sqlite orm 的 db 工具类，比较显著的特点就是配合 <a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a> 能保存从服务器获取的数据<br>项目地址：<a href=\"https://github.com/emilsjolander/sprinkles\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander/sprinkles</a><br>文档介绍：<a href=\"http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/\" target=\"_blank\" rel=\"external\">http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/</a>  </p>\n</li>\n<li><p>Realm<br>移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好<br>项目地址：<a href=\"https://github.com/realm/realm-java\" target=\"_blank\" rel=\"external\">https://github.com/realm/realm-java</a><br>文档介绍：<a href=\"http://realm.io/docs/java/0.72.0/\" target=\"_blank\" rel=\"external\">http://realm.io/docs/java/0.72.0/</a>  </p>\n</li>\n<li><p>ormlite-android<br>项目地址：<a href=\"https://github.com/j256/ormlite-android\" target=\"_blank\" rel=\"external\">https://github.com/j256/ormlite-android</a><br>文档介绍：<a href=\"http://ormlite.com/sqlite_java_android_orm.shtml\" target=\"_blank\" rel=\"external\">http://ormlite.com/sqlite_java_android_orm.shtml</a>  </p>\n</li>\n<li><p>Schematic<br>根据 SQLite 生成 ContentProvider<br>项目地址：<a href=\"https://github.com/SimonVT/schematic\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/schematic</a>  </p>\n</li>\n<li><p>DBFlow<br>Android SQLite ORM 工具库。综合了 Active Android, Schematic, Ollie,Sprinkles 等库的优点；通过注解实现，性能好；能生成 ContentProvider。<br>项目地址：<a href=\"https://github.com/Raizlabs/DBFlow\" target=\"_blank\" rel=\"external\">https://github.com/Raizlabs/DBFlow</a><br>文档介绍：<a href=\"https://github.com/Raizlabs/DBFlow#usage-docs\" target=\"_blank\" rel=\"external\">https://github.com/Raizlabs/DBFlow#usage-docs</a>  </p>\n</li>\n<li><p>SnappyDB<br>SnappyDB是一个key-value数据库，非常流行的NoSQL数据库。<br>项目地址：<a href=\"https://github.com/nhachicha/SnappyDB\" target=\"_blank\" rel=\"external\">https://github.com/nhachicha/SnappyDB</a><br>演示Demo：<a href=\"https://play.google.com/store/apps/details?id=com.snappydb.snippets.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.snappydb.snippets.app</a></p>\n</li>\n</ol>\n<h3 id=\"五、Android-公共库\"><a href=\"#五、Android-公共库\" class=\"headerlink\" title=\"五、Android 公共库\"></a>五、Android 公共库</h3><ol>\n<li><p>Guava<br>Google 的基于 java1.6 的类库集合的扩展项目，包括 collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O 等等. 这些高质量的 API 可以使你的 JAVa 代码更加优雅，更加简洁<br>项目地址：<a href=\"https://code.google.com/p/guava-libraries/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/guava-libraries/</a><br>文档介绍：<a href=\"https://code.google.com/p/guava-libraries/wiki/GuavaExplained\" target=\"_blank\" rel=\"external\">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a>  </p>\n</li>\n<li><p>AndroidCommon<br>Android 公共库<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/AndroidCommon</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/android-common-lib/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-common-lib/</a><br>包括：a. ImageCache 图片缓存，包含内存和 Sdcard 缓存<br><a href=\"http://www.trinea.cn/android/android-imagecache/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-imagecache/</a><br>特点：(1)支持预取新图片，支持等待队列<br>(2)包含二级缓存，可自定义文件名保存规则<br>(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU 等 13 种)或自定义缓存算法<br>(4)可方便的保存及初始化恢复数据<br>(5)支持不同类型网络处理<br>(6)可根据系统配置初始化缓存等  </p>\n</li>\n<li><p>HttpCache Http 缓存<br>文档介绍：<a href=\"http://www.trinea.cn/android/android-http-cache\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-http-cache</a><br>特点是：(1) 根据 cache-control、expires 缓存 http 请求<br>(2) 支持同步、异步 Http 请求<br>(3) 在匿名回调中处理请求结果<br>(4) 在 UI 线程外进行 http 请求<br>(5) 默认 gzip 压缩<br>(2) 公共 View(下拉及底部加载更多 ListView、底部加载更多 ScrollView、滑动一页 Gallery)<br>(3) Android 常用工具类(网络、下载、Android 资源操作、shell、文件、Json、随机数、Collection 等等)  </p>\n</li>\n<li><p>DropDownListView 下拉刷新及滑动到底部加载更多 ListView<br>文档介绍：<a href=\"http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/</a>  </p>\n</li>\n<li><p>shipfaster<br>整合了 Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发<br>项目地址：<a href=\"https://github.com/pyricau/shipfaster\" target=\"_blank\" rel=\"external\">https://github.com/pyricau/shipfaster</a>  </p>\n</li>\n<li><p>CleanAndroidCode<br>整合了 Dagger Otto AndroidAnnotations，方便快速开发<br>项目地址：<a href=\"https://github.com/pyricau/CleanAndroidCode\" target=\"_blank\" rel=\"external\">https://github.com/pyricau/CleanAndroidCode</a>  </p>\n</li>\n<li><p>xUtils<br>基于 Afinal，包含 DbUtils、ViewUtils、HttpUtils、BitmapUtils 四大模块，可用于快速开发<br>项目地址：<a href=\"https://github.com/wyouflf/xUtils\" target=\"_blank\" rel=\"external\">https://github.com/wyouflf/xUtils</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Caij/xUtils 源码解析\" target=\"_blank\" rel=\"external\">xUtils</a>  </p>\n</li>\n<li><p>Afinal<br>Afinal 是一个 android 的 ioc，orm 框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过 finalActivity，我们可以通过注解的方式进行绑定 ui 和事件。通过 finalBitmap，我们可以方便的加载 bitmap 图片，而无需考虑 oom 等问题。通过 finalDB 模块，我们一行代码就可以对 android 的 sqlite 数据库进行增删改查。通过 FinalHttp 模块，我们可以以 ajax 形式请求 http 数据<br>项目地址：<a href=\"https://github.com/yangfuhai/afinal\" target=\"_blank\" rel=\"external\">https://github.com/yangfuhai/afinal</a><br>官网网址：<a href=\"http://www.afinal.org\" target=\"_blank\" rel=\"external\">http://www.afinal.org</a>  </p>\n</li>\n<li><p>UltimateAndroid<br>UltimateAndroid 是一个快速开发 Android 应用的框架，框架目前主要包含的功能有 View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘 LRU 等功能.同时提供了类似于 TripleDes、Webview 快速设置、Md5 处理、String 处理,Https 处理等常用工具类，还有超过 100 多种 UI 控件效果。<br>项目地址：<a href=\"https://github.com/cymcsg/UltimateAndroid\" target=\"_blank\" rel=\"external\">https://github.com/cymcsg/UltimateAndroid</a><br>官网网址：<a href=\"http://blog.marshalchen.com/UltimateAndroid/\" target=\"_blank\" rel=\"external\">http://blog.marshalchen.com/UltimateAndroid/</a>  </p>\n</li>\n<li><p>SAF<br>SAF(Simple Android Framework)是一个简单的 android 框架，它为开发 Android app 提供了基础性组件。<br>项目地址：<a href=\"https://github.com/fengzhizi715/SAF\" target=\"_blank\" rel=\"external\">https://github.com/fengzhizi715/SAF</a><br>官网网址：<a href=\"http://www.salesuite.cn/\" target=\"_blank\" rel=\"external\">http://www.salesuite.cn/</a><br>包括：(1)Event Bus(事件总线)<br>(2) Rest Client(http 的框架)<br>(3) Image Cache(图片缓存)<br>(4) Dependency Injection(依赖注入)<br>(5) Sqlite ORM(sqlite 的 orm)<br>(6) Router(Activity、Fragment 的 Router)<br>(7) Utils(各种常用的工具类)  </p>\n</li>\n<li><p>Barber<br>Custom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。<br>项目地址：<a href=\"https://github.com/hzsweers/barber\" target=\"_blank\" rel=\"external\">https://github.com/hzsweers/barber</a>  </p>\n</li>\n<li><p>device-year-class<br>A library that analyzes an Android device’s specifications and calculates which year the device would be considered “high end”.(facebook 开发的检测手机主流配置工具)<br>项目地址：<a href=\"https://github.com/facebook/device-year-class\" target=\"_blank\" rel=\"external\">https://github.com/facebook/device-year-class</a>  </p>\n</li>\n<li><p>RxAndroid<br>对RxJava在Android上的扩展，使得Android上也很容易实现reactive components，简化线程操作，从而写出很漂亮的代码。<br>项目地址：<a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">https://github.com/ReactiveX/RxAndroid</a><br>文档介绍：<a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">给Android 开发者的 RxJava 详解</a>  </p>\n</li>\n<li><p>MultiImageSelector<br>一个本地图片选择器，支持图片的单选和多选，直接返回所选图片的路径。<br>项目地址：<a href=\"https://github.com/lovetuzitong/MultiImageSelector.git\" target=\"_blank\" rel=\"external\">https://github.com/lovetuzitong/MultiImageSelector.git</a> </p>\n</li>\n</ol>\n<h3 id=\"六、Android-高版本向低版本兼容\"><a href=\"#六、Android-高版本向低版本兼容\" class=\"headerlink\" title=\"六、Android 高版本向低版本兼容\"></a>六、Android 高版本向低版本兼容</h3><ol>\n<li><p>Nine Old Androids<br>将 Android 3.0(Honeycomb)所有动画 API(ObjectAnimator ValueAnimator 等)兼容到 Android1.0<br>项目地址：<a href=\"https://github.com/JakeWharton/NineOldAndroids\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/NineOldAndroids</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations 源码解析\" target=\"_blank\" rel=\"external\">Nine Old Androids</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample</a><br>文档介绍：<a href=\"http://nineoldandroids.com/\" target=\"_blank\" rel=\"external\">http://nineoldandroids.com/</a>  </p>\n</li>\n<li><p>HoloEverywhere<br>将 Android 3.0 的 Holo 主题兼容到 Android2.1++<br>项目地址：<a href=\"https://github.com/Prototik/HoloEverywhere\" target=\"_blank\" rel=\"external\">https://github.com/Prototik/HoloEverywhere</a><br>Demo 地址：<a href=\"https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk</a><br>文档介绍：<a href=\"http://android-developers.blogspot.com/2012/01/holo-everywhere.html\" target=\"_blank\" rel=\"external\">http://android-developers.blogspot.com/2012/01/holo-everywhere.html</a>  </p>\n</li>\n<li><p>SherlockNavigationDrawer<br>将 Android NavigationDrawer 和 ActionbarSherlock 结合，解决 4.0 以下 NavigationDrawer 的适配问题<br>项目地址：<a href=\"https://github.com/tobykurien/SherlockNavigationDrawer\" target=\"_blank\" rel=\"external\">https://github.com/tobykurien/SherlockNavigationDrawer</a><br>文档介绍：<a href=\"http://developer.android.com/training/implementing-navigation/nav-drawer.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/training/implementing-navigation/nav-drawer.html</a>  </p>\n</li>\n<li><p>Notifications4EveryWhere<br>将 Android 4.1 的 Notification 兼容到 Android2.2++<br>项目地址：<a href=\"https://github.com/youxiachai/Notifications4EveryWhere\" target=\"_blank\" rel=\"external\">https://github.com/youxiachai/Notifications4EveryWhere</a>  </p>\n</li>\n<li><p>Android Switch Widget Backport<br>将 Android Switch 和 SwitchPreference 的兼容到 Android2.1++<br>项目地址：<a href=\"https://github.com/BoD/android-switch-backport\" target=\"_blank\" rel=\"external\">https://github.com/BoD/android-switch-backport</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample</a><br>文档介绍：<a href=\"https://github.com/BoD/android-switch-backport#using-the-switch\" target=\"_blank\" rel=\"external\">https://github.com/BoD/android-switch-backport#using-the-switch</a>  </p>\n</li>\n<li><p>android-datepicker<br>将 Android 4.0 的 datepicker 兼容到 Android2.2++<br>项目地址：<a href=\"https://github.com/SimonVT/android-datepicker\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/android-datepicker</a>  </p>\n</li>\n<li><p>Transitions Everywhere<br>Android 4.4 的 Transitions API 兼容到 Android 2.2 以上<br>项目地址：<a href=\"https://github.com/andkulikov/transitions-everywhere\" target=\"_blank\" rel=\"external\">https://github.com/andkulikov/transitions-everywhere</a>  </p>\n</li>\n<li><p>KShareViewActivityManager<br>一个兼容Android 5.0 以下Shared Element Transition （页面间共享元素位移动画）库<br>项目地址：<a href=\"https://github.com/kot32go/KShareViewActivityManager\" target=\"_blank\" rel=\"external\">https://github.com/kot32go/KShareViewActivityManager</a>  </p>\n</li>\n</ol>\n<h3 id=\"七、多媒体相关\"><a href=\"#七、多媒体相关\" class=\"headerlink\" title=\"七、多媒体相关\"></a>七、多媒体相关</h3><ol>\n<li><p>cocos2d-x<br>跨平台的 2d 游戏框架，支持 Android、IOS、Linux、Windows 等众多平台<br>项目地址：<a href=\"https://github.com/cocos2d/cocos2d-x\" target=\"_blank\" rel=\"external\">https://github.com/cocos2d/cocos2d-x</a><br>文档介绍：<a href=\"http://www.cocos2d-x.org/wiki\" target=\"_blank\" rel=\"external\">http://www.cocos2d-x.org/wiki</a><br>官网网址：<a href=\"http://www.cocos2d-x.org/\" target=\"_blank\" rel=\"external\">http://www.cocos2d-x.org/</a>  </p>\n</li>\n<li><p>JustWeEngine<br>Android的轻量级游戏框架，能大大缩减编写原生游戏的代码量和难度，仍在持续更新中。<br>项目地址: <a href=\"https://github.com/lfkdsk/JustWeEngine\" target=\"_blank\" rel=\"external\">https://github.com/lfkdsk/JustWeEngine</a><br>Demo地址: <a href=\"https://github.com/lfkdsk/EngineDemo\" target=\"_blank\" rel=\"external\">https://github.com/lfkdsk/EngineDemo</a>  </p>\n</li>\n<li><p>Vitamio<br>是一款 Android 与 iOS 平台上的全能多媒体开发框架<br>项目地址：<a href=\"https://github.com/yixia/VitamioBundle\" target=\"_blank\" rel=\"external\">https://github.com/yixia/VitamioBundle</a><br>网站介绍：<a href=\"http://www.vitamio.org/docs/\" target=\"_blank\" rel=\"external\">http://www.vitamio.org/docs/</a><br>特点：(1) 全面支持硬件解码与 GPU 渲染<br>(2) 能够流畅播放 720P 甚至 1080P 高清 MKV，FLV，MP4，MOV，TS，RMVB 等常见格式的视频<br>(3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。 </p>\n</li>\n<li><p>VDPlayerSDK<br>最容易集成的开源播放器组件，支持直播，支持软硬解切换，支持清晰度切换<br>项目地址：<a href=\"https://github.com/SinaVDDeveloper/\" target=\"_blank\" rel=\"external\">https://github.com/SinaVDDeveloper/</a><br>Demo 地址：<a href=\"https://github.com/SinaVDDeveloper/demo\" target=\"_blank\" rel=\"external\">https://github.com/SinaVDDeveloper/demo</a><br>文档介绍：<a href=\"https://github.com/SinaVDDeveloper/sinavideo_playersdk\" target=\"_blank\" rel=\"external\">https://github.com/SinaVDDeveloper/sinavideo_playersdk</a><br>特点：<br>(1) 使用自定义控件方式提供播放器UI，不需要视频相关知识，能编写android应用就能使用<br>(2) 软硬解切换、点播直播支持<br>(3) 解码内核小于4M，更方便集成到非专业视频app中<br>(4) 修正一些vitaimio的问题，比如m3u8可以拖动等等</p>\n</li>\n<li><p>VideoPlayerManager<br>帮助实现VideoPlayer控制，使得它更容易使用ListView和recyclerview。它还可以跟踪滚动列表中可见的项。当列表中的新项可见域最大时，该库给出了接口来跟踪它。<br>项目地址：<a href=\"https://github.com/danylovolokh/VideoPlayerManager\" target=\"_blank\" rel=\"external\">https://github.com/danylovolokh/VideoPlayerManager</a><br>文档介绍：<a href=\"https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn\" target=\"_blank\" rel=\"external\">https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn</a>  </p>\n</li>\n<li><p>UniversalVideoView<br>Android上定义播放器控件,支持自定义控制UI, 全屏播放, 重力感应自动切换横竖屏.<br>项目地址：<a href=\"https://github.com/linsea/UniversalVideoView\" target=\"_blank\" rel=\"external\">https://github.com/linsea/UniversalVideoView</a>  </p>\n</li>\n<li><p>PhotoProcessing<br>利用 ndk 处理图片库，支持 Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效<br>项目地址：<a href=\"https://github.com/lightbox/PhotoProcessing\" target=\"_blank\" rel=\"external\">https://github.com/lightbox/PhotoProcessing</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true</a>  </p>\n</li>\n<li><p>Android StackBlur<br>图片模糊效果工具类<br>项目地址：<a href=\"https://github.com/kikoso/android-stackblur\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur</a><br>Demo 地址：<a href=\"https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true</a><br>文档介绍：<a href=\"https://github.com/kikoso/android-stackblur#usage\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur#usage</a>  </p>\n</li>\n<li><p>Bitmap Smart Clipping using OpenCV<br>图片智能裁剪保留重要部分显示<br>项目地址：<a href=\"https://github.com/beartung/tclip-android\" target=\"_blank\" rel=\"external\">https://github.com/beartung/tclip-android</a><br>利用淘宝的 <a href=\"http://code.taobao.org/p/tclip/\" target=\"_blank\" rel=\"external\">http://code.taobao.org/p/tclip/</a> 库完成<br>一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域<br>特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉<br>(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  </p>\n</li>\n<li><p>Cropper<br>图片局部剪切工具，可触摸控制选择区域或旋转<br>项目地址：<a href=\"https://github.com/edmodo/cropper\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/cropper</a><br>文档介绍：<a href=\"https://github.com/edmodo/cropper/wiki\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/cropper/wiki</a>  </p>\n</li>\n<li><p>uCrop<br>Yalantis 出品的强大的图片裁剪库 ，支持缩放，旋转图片，支持各种比例的裁剪框<br>项目地址：<a href=\"https://github.com/Yalantis/uCrop\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/uCrop</a>  </p>\n</li>\n<li><p>android-crop<br>图片裁剪 Activity<br>项目地址：<a href=\"https://github.com/jdamcd/android-crop\" target=\"_blank\" rel=\"external\">https://github.com/jdamcd/android-crop</a>  </p>\n</li>\n<li><p>TileView<br>可分块显示大图，支持 2D 拖动、双击、双指放大、双指捏合<br>项目地址：<a href=\"https://github.com/moagrius/TileView\" target=\"_blank\" rel=\"external\">https://github.com/moagrius/TileView</a><br>Demo 地址：<a href=\"http://moagrius.github.io/TileView/TileViewDemo.apk\" target=\"_blank\" rel=\"external\">http://moagrius.github.io/TileView/TileViewDemo.apk</a>  </p>\n</li>\n<li><p>BlurEffectForAndroidDesign<br>图片模糊效果<br>项目地址：<a href=\"https://github.com/PomepuyN/BlurEffectForAndroidDesign\" target=\"_blank\" rel=\"external\">https://github.com/PomepuyN/BlurEffectForAndroidDesign</a>  </p>\n</li>\n<li><p>android-eye<br>PC 端网页查看同一局域网内的手机摄像头内容，可以用来监控哦<br>项目地址：<a href=\"https://github.com/Teaonly/android-eye\" target=\"_blank\" rel=\"external\">https://github.com/Teaonly/android-eye</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=teaonly.droideye\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=teaonly.droideye</a>  </p>\n</li>\n<li><p>libpng for Android<br>PNG 图片的 jni 库，支持几乎 png 的所有特性<br>项目地址：<a href=\"https://github.com/julienr/libpng-android\" target=\"_blank\" rel=\"external\">https://github.com/julienr/libpng-android</a><br>文档介绍：<a href=\"http://www.libpng.org/pub/png/libpng.html\" target=\"_blank\" rel=\"external\">http://www.libpng.org/pub/png/libpng.html</a>  </p>\n</li>\n<li><p>android-gpuimage<br>基于 GPU 的图片滤镜<br>项目地址：<a href=\"https://github.com/CyberAgent/android-gpuimage\" target=\"_blank\" rel=\"external\">https://github.com/CyberAgent/android-gpuimage</a>  </p>\n</li>\n<li><p>AndroidFaceCropper<br>图片脸部自动识别，将识别后的局部图片返回<br>项目地址：<a href=\"https://github.com/lafosca/AndroidFaceCropper\" target=\"_blank\" rel=\"external\">https://github.com/lafosca/AndroidFaceCropper</a>  </p>\n</li>\n<li><p>Android Video Crop<br>利用 TextureView 播放和剪切视频，类似 ImageView.setScaleType<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/android-video-crop\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-video-crop</a><br>Demo 地址：<a href=\"https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk\" target=\"_blank\" rel=\"external\">https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk</a>  </p>\n</li>\n<li><p>svg-android<br>Android Svg 矢量图形支持<br>项目地址：<a href=\"https://github.com/japgolly/svg-android\" target=\"_blank\" rel=\"external\">https://github.com/japgolly/svg-android</a> <a href=\"https://github.com/japgolly/svg-android\" target=\"_blank\" rel=\"external\">https://github.com/japgolly/svg-android</a>  </p>\n</li>\n<li><p>Android Visualizer<br>从 Android MediaPlayer 获得音频，然后像 iTunes 及 WinAmp 一样展示音轨<br>项目地址：<a href=\"https://github.com/felixpalmer/android-visualizer\" target=\"_blank\" rel=\"external\">https://github.com/felixpalmer/android-visualizer</a>  </p>\n</li>\n<li><p>ExoPlayer<br>包括仪表板和 SmoothStreaming 自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新<br>项目地址：<a href=\"https://github.com/google/ExoPlayer\" target=\"_blank\" rel=\"external\">https://github.com/google/ExoPlayer</a>  </p>\n</li>\n<li><p>DanmakuFlameMaster<br>android 上开源弹幕解析绘制引擎项目<br>项目地址：<a href=\"https://github.com/ctiao/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">https://github.com/ctiao/DanmakuFlameMaster</a>  </p>\n</li>\n<li><p>OpenDanmaku<br>android 上一个轻量级的更简单的开源弹幕控件<br>项目地址：<a href=\"https://github.com/linsea/OpenDanmaku\" target=\"_blank\" rel=\"external\">https://github.com/linsea/OpenDanmaku</a>  </p>\n</li>\n</ol>\n<h3 id=\"八、事件总线-订阅者模式\"><a href=\"#八、事件总线-订阅者模式\" class=\"headerlink\" title=\"八、事件总线(订阅者模式)\"></a>八、事件总线(订阅者模式)</h3><p>通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments 及后台线程)之间的通信  </p>\n<ol>\n<li><p>EventBus<br>greenrobot 的开源项目<br>项目地址：<a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Trinea/EventBus 源码解析\" target=\"_blank\" rel=\"external\">EventBus</a><br>文档介绍：<a href=\"https://github.com/greenrobot/EventBus#general-usage-and-api\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus#general-usage-and-api</a><br>特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI 线程、单一后台线程、异步线程<br>(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊<br>(3) 不是基于 annotations<br>(4) 性能更优<br>(5) 体积小<br>(6) 支持单例创建或创建多个对象<br>(7) 支持根据事件类型订阅  </p>\n</li>\n<li><p>Otto<br>Square 的开源项目，基于 Guava 的 Android 优化<br>项目地址：<a href=\"https://github.com/square/otto\" target=\"_blank\" rel=\"external\">https://github.com/square/otto</a><br>文档介绍：<a href=\"http://square.github.io/otto/\" target=\"_blank\" rel=\"external\">http://square.github.io/otto/</a><br><a href=\"https://github.com/greenrobot/EventBus#comparison-with-squares-otto\" target=\"_blank\" rel=\"external\">EventBus 与 Otto 的功能及性能对比文档</a><br><a href=\"https://play.google.com/store/apps/details?id=de.greenrobot.eventperf\" target=\"_blank\" rel=\"external\">EventBus 与 Otto 性能对比 Demo Apk</a>  </p>\n</li>\n</ol>\n<h3 id=\"九、传感器\"><a href=\"#九、传感器\" class=\"headerlink\" title=\"九、传感器\"></a>九、传感器</h3><ol>\n<li><p>Great Android Sensing Toolkit<br>Android 感应器工具包，包含示例及使用过程中可能需要的算法<br>项目地址：<a href=\"https://github.com/gast-lib/gast-lib\" target=\"_blank\" rel=\"external\">https://github.com/gast-lib/gast-lib</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=root.gast.playground\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=root.gast.playground</a><br>文档介绍：<a href=\"https://github.com/gast-lib/gast-lib#documentation\" target=\"_blank\" rel=\"external\">https://github.com/gast-lib/gast-lib#documentation</a>  </p>\n</li>\n<li><p>SensorManager<br>Android 传感器管理<br>项目地址：<a href=\"https://github.com/nlathia/SensorManager\" target=\"_blank\" rel=\"external\">https://github.com/nlathia/SensorManager</a><br>文档介绍：<a href=\"https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit\" target=\"_blank\" rel=\"external\">https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit</a>  </p>\n</li>\n<li><p>GPSLogger<br>记录 GPS 信息<br>项目地址：<a href=\"https://github.com/mendhak/gpslogger\" target=\"_blank\" rel=\"external\">https://github.com/mendhak/gpslogger</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.mendhak.gpslogger\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mendhak.gpslogger</a><br>文档介绍：<a href=\"http://code.mendhak.com/gpslogger/\" target=\"_blank\" rel=\"external\">http://code.mendhak.com/gpslogger/</a>  </p>\n</li>\n<li><p>Pedometer<br>计步器，使用硬件计步感应器<br>项目地址：<a href=\"https://github.com/j4velin/Pedometer\" target=\"_blank\" rel=\"external\">https://github.com/j4velin/Pedometer</a>  </p>\n</li>\n<li><p>leapcast<br>ChromeCast 模拟器的 App<br>项目地址：<a href=\"https://github.com/dz0ny/leapcast\" target=\"_blank\" rel=\"external\">https://github.com/dz0ny/leapcast</a>  </p>\n</li>\n<li><p>Arduino-Communicator<br>与 Arduino 通信的 App<br>项目地址：<a href=\"https://github.com/jeppsson/Arduino-Communicator\" target=\"_blank\" rel=\"external\">https://github.com/jeppsson/Arduino-Communicator</a>  </p>\n</li>\n<li><p>android-pedometer<br>Android 计步器<br>项目地址：<a href=\"https://github.com/bagilevi/android-pedometer\" target=\"_blank\" rel=\"external\">https://github.com/bagilevi/android-pedometer</a><br>Demo 地址：<a href=\"http://pedometer.googlecode.com/files/Pedometer-1.4.apk\" target=\"_blank\" rel=\"external\">http://pedometer.googlecode.com/files/Pedometer-1.4.apk</a>  </p>\n</li>\n<li><p>OwnTracks for Android<br>自己的轨迹记录<br>项目地址：<a href=\"https://github.com/owntracks/android\" target=\"_blank\" rel=\"external\">https://github.com/owntracks/android</a>  </p>\n</li>\n<li><p>Shake Detector library for Android<br>Android 手机震动摇晃检测库，提供供 UI 线程调用的回调接口<br>项目地址：<a href=\"https://github.com/tbouron/ShakeDetector\" target=\"_blank\" rel=\"external\">https://github.com/tbouron/ShakeDetector</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example</a>  </p>\n</li>\n<li><p>Android heart rate monitor<br>Android 心跳检测<br>项目地址：<a href=\"https://github.com/phishman3579/android-heart-rate-monitor\" target=\"_blank\" rel=\"external\">https://github.com/phishman3579/android-heart-rate-monitor</a>  </p>\n</li>\n<li><p>Bluetooth LE Library for Android<br>蓝牙源信息，包括宝库 Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息<br>项目地址：<a href=\"https://github.com/alt236/Bluetooth-LE-Library---Android\" target=\"_blank\" rel=\"external\">https://github.com/alt236/Bluetooth-LE-Library---Android</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan</a>  </p>\n</li>\n<li><p>farebot<br>通过 NFC 从公交卡中读取数据的一个应用<br>项目地址：<a href=\"https://github.com/codebutler/farebot\" target=\"_blank\" rel=\"external\">https://github.com/codebutler/farebot</a>  </p>\n</li>\n</ol>\n<h3 id=\"十、安全\"><a href=\"#十、安全\" class=\"headerlink\" title=\"十、安全\"></a>十、安全</h3><ol>\n<li><p>SQLCipher<br>Sqlite 加密工具<br>项目地址：<a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"external\">https://github.com/sqlcipher/sqlcipher</a><br>文档介绍：<a href=\"http://sqlcipher.net/sqlcipher-for-android/\" target=\"_blank\" rel=\"external\">http://sqlcipher.net/sqlcipher-for-android/</a>  </p>\n</li>\n<li><p>Conceal<br>快速高效的进行文件加密解密<br>项目地址：<a href=\"https://github.com/facebook/conceal\" target=\"_blank\" rel=\"external\">https://github.com/facebook/conceal</a><br>文档介绍：<a href=\"https://github.com/facebook/conceal#usage\" target=\"_blank\" rel=\"external\">https://github.com/facebook/conceal#usage</a>  </p>\n</li>\n<li><p>Android-PasscodeLock<br>应用锁，每次启动或从任何 Activity 启动应用都需要输入四位数字的密码方可进入<br>项目地址：<a href=\"https://github.com/wordpress-mobile/Android-PasscodeLock\" target=\"_blank\" rel=\"external\">https://github.com/wordpress-mobile/Android-PasscodeLock</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=org.wordpress.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.wordpress.android</a><br>APP 示例：Wordpress Android，支付宝，挖财  </p>\n</li>\n<li><p>GlowPadBackport<br>将 Android4.2 的锁屏界面解锁扩展到 Android1.6 及 1.6+<br>项目地址：<a href=\"https://github.com/rock3r/GlowPadBackport\" target=\"_blank\" rel=\"external\">https://github.com/rock3r/GlowPadBackport</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample</a>  </p>\n</li>\n<li><p>GlowPadView<br>Android 4 锁屏界面解锁<br>项目地址：<a href=\"https://github.com/nadavfima/GlowPadView\" target=\"_blank\" rel=\"external\">https://github.com/nadavfima/GlowPadView</a>  </p>\n</li>\n<li><p>Android-InsecureBank<br>关于 Android 不安全性的示例<br>项目地址：<a href=\"https://github.com/dineshshetty/Android-InsecureBankv2\" target=\"_blank\" rel=\"external\">https://github.com/dineshshetty/Android-InsecureBankv2</a>  </p>\n</li>\n</ol>\n<h3 id=\"十一、插件化\"><a href=\"#十一、插件化\" class=\"headerlink\" title=\"十一、插件化\"></a>十一、插件化</h3><p>更多见：<a href=\"http://www.trinea.cn/android/android-plugin/\" target=\"_blank\" rel=\"external\">Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案</a>  </p>\n<ol>\n<li><p>dynamic-load-apk<br>Android 动态加载 Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决<br>项目地址：<a href=\"https://github.com/singwhatiwanna/dynamic-load-apk\" target=\"_blank\" rel=\"external\">https://github.com/singwhatiwanna/dynamic-load-apk</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/FFish/DynamicLoadApk 源码解析\" target=\"_blank\" rel=\"external\">dynamic-load-apk</a><br>文档介绍：<a href=\"http://blog.csdn.net/singwhatiwanna/article/details/22597587\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/singwhatiwanna/article/details/22597587</a>  </p>\n</li>\n<li><p>Android Dynamic Loader<br>点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br>项目地址：<a href=\"https://github.com/mmin18/AndroidDynamicLoader\" target=\"_blank\" rel=\"external\">https://github.com/mmin18/AndroidDynamicLoader</a><br>Demo 地址：<a href=\"https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk\" target=\"_blank\" rel=\"external\">https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk</a>  </p>\n</li>\n<li><p>xCombine<br>Android App 插件式插件开发，插件必须先安装，更推荐看上面两个开源项目<br>项目地址：<a href=\"https://github.com/wyouflf/xCombine\" target=\"_blank\" rel=\"external\">https://github.com/wyouflf/xCombine</a><br>文档介绍：<a href=\"http://my.oschina.net/u/1171837/blog/155377\" target=\"_blank\" rel=\"external\">http://my.oschina.net/u/1171837/blog/155377</a>  </p>\n</li>\n<li><p>Android Plugin Framework<br>Android 插件式开发，开放的源码目前不完整<br>项目地址：<a href=\"https://github.com/umeng/apf\" target=\"_blank\" rel=\"external\">https://github.com/umeng/apf</a>  </p>\n</li>\n<li><p>Android OpenAtlas<br>Android插件框架，基于OSGI，非代理方式，组件需要在宿主中声明<br>项目地址：<a href=\"https://github.com/bunnyblue/OpenAtlas\" target=\"_blank\" rel=\"external\">https://github.com/bunnyblue/OpenAtlas</a><br>Demo 地址：<a href=\"https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk\" target=\"_blank\" rel=\"external\">https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk</a> </p>\n</li>\n<li><p>multidex<br>安装多 dex 的 classloader<br>项目地址：<a href=\"https://github.com/casidiablo/multidex\" target=\"_blank\" rel=\"external\">https://github.com/casidiablo/multidex</a>  </p>\n</li>\n<li><p>ANR-WatchDog<br>Android ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件<br>项目地址：<a href=\"https://github.com/SalomonBrys/ANR-WatchDog\" target=\"_blank\" rel=\"external\">https://github.com/SalomonBrys/ANR-WatchDog</a>  </p>\n</li>\n</ol>\n<h3 id=\"十二、文件\"><a href=\"#十二、文件\" class=\"headerlink\" title=\"十二、文件\"></a>十二、文件</h3><p>对不同文档类型的处理，包括 PDF、Word、EPub、Html、Zip 等  </p>\n<ol>\n<li><p>purePDF<br>允许从任何运行的 SWF 文件读取和创建 PDF 文档<br>项目地址：<a href=\"https://github.com/sephiroth74/purePDF\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/purePDF</a>  </p>\n</li>\n<li><p>android-pdfview<br>快速解析 pdf 的 view，默认支持手势缩放和相关动画<br>项目地址：<a href=\"https://github.com/JoanZapata/android-pdfview\" target=\"_blank\" rel=\"external\">https://github.com/JoanZapata/android-pdfview</a>  </p>\n</li>\n<li><p>Office 365 SDK for Android Preview<br>可支持 Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail<br>项目地址：<a href=\"https://github.com/OfficeDev/Office-365-SDK-for-Android\" target=\"_blank\" rel=\"external\">https://github.com/OfficeDev/Office-365-SDK-for-Android</a>  </p>\n</li>\n<li><p>OpenSpritz-Android<br>EPub 阅读器<br>项目地址：<a href=\"https://github.com/OnlyInAmerica/OpenSpritz-Android\" target=\"_blank\" rel=\"external\">https://github.com/OnlyInAmerica/OpenSpritz-Android</a>  </p>\n</li>\n<li><p>jsoup<br>一个解析 html 的 java 库，可方便的提取和操作数据<br>项目地址：<a href=\"https://github.com/jhy/jsoup\" target=\"_blank\" rel=\"external\">https://github.com/jhy/jsoup</a><br>官网网址：<a href=\"http://jsoup.org/\" target=\"_blank\" rel=\"external\">http://jsoup.org/</a><br>作用：(1) 从一个 url、文件或 string 获得 html 并解析<br>(2) 利用 dom 遍历或 css 选择器查找、提取数据<br>(3) 操作 html 元素<br>(4) 根据白名单去除用于提交的非法数据防止 xss 攻击<br>(5) 输出整齐的 html  </p>\n</li>\n<li><p>ZIP<br>java 压缩和解压库<br>项目地址：<a href=\"https://github.com/zeroturnaround/zt-zip\" target=\"_blank\" rel=\"external\">https://github.com/zeroturnaround/zt-zip</a><br>文档介绍：<a href=\"https://github.com/zeroturnaround/zt-zip#examples\" target=\"_blank\" rel=\"external\">https://github.com/zeroturnaround/zt-zip#examples</a><br>作用：(1) 解压和压缩，并支持文件夹内递归操作<br>(2) 支持包含和排除某些元素<br>(3) 支持重命名元素<br>(4) 支持遍历 zip 包内容<br>(5) 比较两个 zip 包等功能  </p>\n</li>\n<li><p>Image File Selector<br>轻量级的图片文件选择器，用系统api选取，压缩和裁切图片，可以方便的得要指定尺寸的图片<br>项目地址：<a href=\"https://github.com/sw926/ImageFileSelector\" target=\"_blank\" rel=\"external\">https://github.com/sw926/ImageFileSelector</a>  </p>\n</li>\n</ol>\n<h3 id=\"十三、其他\"><a href=\"#十三、其他\" class=\"headerlink\" title=\"十三、其他\"></a>十三、其他</h3><ol>\n<li><p>FragmentStack<br>一个封装了启动模式的Fragment便捷使用库,方便构建单Activity+多Fragment轻量级框架<br>项目地址：<a href=\"https://github.com/Mr-wangyong/FragmentStack\" target=\"_blank\" rel=\"external\">https://github.com/Mr-wangyong/FragmentStack</a><br>App示例：<a href=\"http://www.wandoujia.com/apps/cn.vcinema.cinema\" target=\"_blank\" rel=\"external\">南瓜电影</a>  </p>\n</li>\n<li><p>CustomTabsHelper<br>快速集成 CustomTabs 的工具类<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/CustomTabsHelper\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/CustomTabsHelper</a>  </p>\n</li>\n<li><p>Salvage view<br>带 View 缓存的 Viewpager PagerAdapter，很方便使用<br>项目地址：<a href=\"https://github.com/JakeWharton/salvage\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/salvage</a>  </p>\n</li>\n<li><p>Android Priority Job Queue<br>Android 后台任务队列<br>项目地址：<a href=\"https://github.com/path/android-priority-jobqueue\" target=\"_blank\" rel=\"external\">https://github.com/path/android-priority-jobqueue</a><br>文档介绍：<a href=\"https://github.com/path/android-priority-jobqueue#getting-started\" target=\"_blank\" rel=\"external\">https://github.com/path/android-priority-jobqueue#getting-started</a>  </p>\n</li>\n<li><p>Cobub Razor<br>开源的 mobile 行为分析系统，包括 web 端、android 端，支持 ios 和 window phone<br>项目地址：<a href=\"https://github.com/cobub/razor\" target=\"_blank\" rel=\"external\">https://github.com/cobub/razor</a><br>Demo 地址：<a href=\"http://demo.cobub.com/razor\" target=\"_blank\" rel=\"external\">http://demo.cobub.com/razor</a><br>官网网址：<a href=\"http://dev.cobub.com/\" target=\"_blank\" rel=\"external\">http://dev.cobub.com/</a>  </p>\n</li>\n<li><p>Countly<br>Android 移动端数据采集分析系统<br>项目地址：<a href=\"https://github.com/Countly/countly-sdk-android\" target=\"_blank\" rel=\"external\">https://github.com/Countly/countly-sdk-android</a><br>官网网址：<a href=\"https://count.ly/\" target=\"_blank\" rel=\"external\">https://count.ly/</a>  </p>\n</li>\n<li><p>aFileChooser<br>文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。<br>项目地址：<a href=\"https://github.com/iPaulPro/aFileChooser\" target=\"_blank\" rel=\"external\">https://github.com/iPaulPro/aFileChooser</a>  </p>\n</li>\n<li><p>androidpn<br>基于 xmpp 协议的消息推送解决方案，包括服务器端和 android 端。<br>项目地址：<a href=\"https://github.com/dannytiehui/androidpn\" target=\"_blank\" rel=\"external\">https://github.com/dannytiehui/androidpn</a>  </p>\n</li>\n<li><p>Bolts<br>Android 的异步编程模式<br>项目地址：<a href=\"https://github.com/BoltsFramework/Bolts-Android/\" target=\"_blank\" rel=\"external\">https://github.com/BoltsFramework/Bolts-Android/</a><br>与 AsyncTask 比较：(1) 使用的是无大小限制的线程池<br>(2) 任务可组合可级联，防止了代码耦合  </p>\n</li>\n<li><p>CastCompanionLibrary-android<br>使 Android 程序中更快的接入 Google Cast<br>项目地址：<a href=\"https://github.com/googlecast/CastCompanionLibrary-android\" target=\"_blank\" rel=\"external\">https://github.com/googlecast/CastCompanionLibrary-android</a><br>文档介绍：<a href=\"https://developers.google.com/cast/\" target=\"_blank\" rel=\"external\">https://developers.google.com/cast/</a>  </p>\n</li>\n<li><p>CastVideos-android<br>从 Android 设备分享 Video 通过 Google Cast<br>项目地址：<a href=\"https://github.com/googlecast/CastVideos-android\" target=\"_blank\" rel=\"external\">https://github.com/googlecast/CastVideos-android</a><br>文档介绍：<a href=\"https://developers.google.com/cast/\" target=\"_blank\" rel=\"external\">https://developers.google.com/cast/</a>  </p>\n</li>\n<li><p>Uninstall_Statics<br>Android 应用自身被卸载监听及打开浏览器等反馈功能实现<br>项目地址：<a href=\"https://github.com/sevenler/Uninstall_Statics\" target=\"_blank\" rel=\"external\">https://github.com/sevenler/Uninstall_Statics</a><br>文档介绍：<a href=\"http://www.cnblogs.com/zealotrouge/p/3157126.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zealotrouge/p/3157126.html</a>  <a href=\"http://www.cnblogs.com/zealotrouge/p/3159772.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zealotrouge/p/3159772.html</a>  </p>\n</li>\n<li><p>Memento<br>保证在系统配置改变时，Activity 中的某些数据可以简单安全的保持不变<br>项目地址：<a href=\"https://github.com/mttkay/memento\" target=\"_blank\" rel=\"external\">https://github.com/mttkay/memento</a><br>文档介绍：<a href=\"https://github.com/mttkay/memento#usage\" target=\"_blank\" rel=\"external\">https://github.com/mttkay/memento#usage</a>  </p>\n</li>\n<li><p>FreeFlow<br>布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画<br>项目地址：<a href=\"https://github.com/Comcast/FreeFlow\" target=\"_blank\" rel=\"external\">https://github.com/Comcast/FreeFlow</a><br>Demo 地址：<a href=\"https://github.com/Comcast/FreeFlow/releases\" target=\"_blank\" rel=\"external\">https://github.com/Comcast/FreeFlow/releases</a>  </p>\n</li>\n<li><p>Android Gesture Detectors Framework<br>Android 手势框架，支持双指旋转、移动、平移、缩放等<br>项目地址：<a href=\"https://github.com/Almeros/android-gesture-detectors\" target=\"_blank\" rel=\"external\">https://github.com/Almeros/android-gesture-detectors</a>  </p>\n</li>\n<li><p>Mapbox Android SDK<br>Android Map 的替代版<br>项目地址：<a href=\"https://github.com/mapbox/mapbox-android-sdk\" target=\"_blank\" rel=\"external\">https://github.com/mapbox/mapbox-android-sdk</a>  </p>\n</li>\n<li><p>Activity animation<br>Activity 跳转动画，支持各个方向波浪的效果<br>项目地址：<a href=\"https://github.com/flavienlaurent/activityanimation\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/activityanimation</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=-E0sc6w_Jck\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=-E0sc6w_Jck</a>  </p>\n</li>\n<li><p>KryoNet<br>通过 NIO 提供客户端和服务器端 TCP/UDP 网络传输的 Java 库<br>项目地址：<a href=\"https://github.com/EsotericSoftware/kryonet\" target=\"_blank\" rel=\"external\">https://github.com/EsotericSoftware/kryonet</a>  </p>\n</li>\n<li><p>Rebound<br>一个模仿弹簧反弹的 Java 库，可用于创建动画<br>项目地址：<a href=\"https://github.com/facebook/rebound\" target=\"_blank\" rel=\"external\">https://github.com/facebook/rebound</a>  </p>\n</li>\n<li><p>Android Social Networks<br>社交网络接入统一管理器，可方便的从 Twitter, LinkedIn, Facebook, Google Plus 登陆、获得个人信息、发送消息、发送专篇、添加或删除好友<br>项目地址：<a href=\"https://github.com/antonkrasov/AndroidSocialNetworks\" target=\"_blank\" rel=\"external\">https://github.com/antonkrasov/AndroidSocialNetworks</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos</a>  </p>\n</li>\n<li><p>SmartAppUpdates<br>Android App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级<br>项目地址：<a href=\"https://github.com/cundong/SmartAppUpdates\" target=\"_blank\" rel=\"external\">https://github.com/cundong/SmartAppUpdates</a>  </p>\n</li>\n<li><p>Magnet<br>创建类似 Facebook 聊天桌面悬浮窗的效果<br>项目地址：<a href=\"https://github.com/premnirmal/Magnet\" target=\"_blank\" rel=\"external\">https://github.com/premnirmal/Magnet</a>  </p>\n</li>\n<li><p>AcDisplay<br>将 Android 的通知都集中到锁屏显示<br>项目地址：<a href=\"https://github.com/AChep/AcDisplay\" target=\"_blank\" rel=\"external\">https://github.com/AChep/AcDisplay</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.achep.acdisplay\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.achep.acdisplay</a>  </p>\n</li>\n<li><p>QrCodeScan<br>ZXing 和 ZBar 结合的二维码扫描项目，提高了扫描效率<br>项目地址：<a href=\"https://github.com/SkillCollege/QrCodeScan\" target=\"_blank\" rel=\"external\">https://github.com/SkillCollege/QrCodeScan</a>  </p>\n</li>\n<li><p>Android-ScreenShot<br>实现 android 系统截屏功能<br>项目地址：<a href=\"https://github.com/Android-ScreenShot/AndroidScreenShotService\" target=\"_blank\" rel=\"external\">https://github.com/Android-ScreenShot/AndroidScreenShotService</a><br>文档介绍：<a href=\"http://blog.csdn.net/buptgshengod/article/details/39155979\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/buptgshengod/article/details/39155979</a>  </p>\n</li>\n<li><p>card.io SDK for Android<br>信用卡扫描 Android SDK<br>项目地址：<a href=\"https://github.com/card-io/card.io-Android-SDK\" target=\"_blank\" rel=\"external\">https://github.com/card-io/card.io-Android-SDK</a><br>Demo 项目：<a href=\"https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp\" target=\"_blank\" rel=\"external\">https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp</a>  </p>\n</li>\n<li><p>ASNE<br>Twitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能<br>项目地址：<a href=\"https://github.com/gorbin/ASNE\" target=\"_blank\" rel=\"external\">https://github.com/gorbin/ASNE</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne</a>  </p>\n</li>\n<li><p>Android Signature Pad<br>Android 自定义的签名 View，可自定义笔颜色和大小<br>项目地址：<a href=\"https://github.com/gcacace/android-signaturepad\" target=\"_blank\" rel=\"external\">https://github.com/gcacace/android-signaturepad</a><br>Demo 项目：<a href=\"https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example\" target=\"_blank\" rel=\"external\">https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example</a>  </p>\n</li>\n<li><p>Teleport<br>Android Wear 数据同步和消息传送库<br>项目地址：<a href=\"https://github.com/Mariuxtheone/Teleport\" target=\"_blank\" rel=\"external\">https://github.com/Mariuxtheone/Teleport</a>  </p>\n</li>\n<li><p>DebugLog<br>可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。<br>项目地址：<a href=\"https://github.com/MustafaFerhan/DebugLog\" target=\"_blank\" rel=\"external\">https://github.com/MustafaFerhan/DebugLog</a>  </p>\n</li>\n<li><p>Logger<br>简单、美观而且十分强大的 Android 日志工具<br>项目地址：<a href=\"https://github.com/orhanobut/logger\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/logger</a><br>Demo 地址：<a href=\"https://github.com/orhanobut/logger/tree/master/app\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/logger/tree/master/app</a>  </p>\n</li>\n<li><p>jlog<br>可以灵活配置的日志工具，支持JSON打印，日志保存到指定文件，日志显示调用位置（混淆模式下依然有效）<br>项目地址：<a href=\"https://github.com/JiongBull/jlog\" target=\"_blank\" rel=\"external\">https://github.com/JiongBull/jlog</a><br>Demo 地址：<a href=\"https://raw.githubusercontent.com/JiongBull/jlog/master/apk/JLog_sample.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>Phrase<br>square 组开源大牛写的字符串替换类<br>项目地址：<a href=\"https://github.com/square/phrase\" target=\"_blank\" rel=\"external\">https://github.com/square/phrase</a>  </p>\n</li>\n<li><p>ColorPhrase<br>模仿 phrase 写的对字符串个别字符颜色改变的类，高效强大！<br>项目地址：<a href=\"https://github.com/THEONE10211024/ColorPhrase\" target=\"_blank\" rel=\"external\">https://github.com/THEONE10211024/ColorPhrase</a>  </p>\n</li>\n<li><p>PinyinSearch<br>一个为 T9 搜索和 Qwerty 搜索,提供数据解析与匹配等方法的拼音搜索 java 库。<br>项目地址： <a href=\"https://github.com/handsomezhou/PinyinSearchLibrary\" target=\"_blank\" rel=\"external\">https://github.com/handsomezhou/PinyinSearchLibrary</a><br>Demo 地址： <a href=\"https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/ContactsSearch.apk?raw=true\" target=\"_blank\" rel=\"external\">ContactsSearch</a>    <a href=\"https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/AppSearch.apk?raw=true\" target=\"_blank\" rel=\"external\">AppSearch</a><br>APP 示例： 通讯录应用，微信电话本  </p>\n</li>\n<li><p>PrainView<br>PaintView 是一个画图工具:<br>可直接使用设定按钮来实现已拥有的方法，且拓展性强<br>基础功能：更换颜色、更换橡皮、以及更换橡皮和笔的粗细、清屏、倒入图片<br>特殊功能：保存画笔轨迹帧动画、帧动画导入导出、ReDo和UnDo<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">Paintview</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/DrawAPicture.apk\" target=\"_blank\" rel=\"external\">apk地址</a><br>原理解析：<a href=\"http://www.cnblogs.com/lfk-dsk/p/4768850.html\" target=\"_blank\" rel=\"external\">PaintView 绘图控件解析</a>  </p>\n</li>\n<li><p>CodeView<br>CodeView代码查看／修改工具: 基于WebView制作的代码编辑器,实现代码高亮，暗色主题<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">CodeView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>ExplorerView<br>文件浏览器：继承自ListView，可拓展性强，可进行文件类型分析<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">CodeView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>ReadView<br>小说阅读器，支持文字字体、颜色、背景、进度等多种调整，支持一键设置。<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">ReadView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>MarkDownView<br>支持MarkDown语法的渲染器,基于WebView的MarkDown渲染器,支持标准化的MarkDown语法,<br>调用接口和CodeView保持一致使用简便<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">ReadView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>VerTextView竖行排版的TextView:<br>支持竖行排版，添加了下划线功能，开启简便，下划线粗细、颜色、间距均可自定义，<br>接口调用方式与TextView相似，使用简便。<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">ReadView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>GHDownload下载框架<br>支持单线程和多线程断点下载，简单易用。<br>项目地址：<a href=\"https://github.com/guanchao/GHDownload\" target=\"_blank\" rel=\"external\">GHDownload</a>  </p>\n</li>\n</ol>\n<h2 id=\"第三部分-优秀项目\"><a href=\"#第三部分-优秀项目\" class=\"headerlink\" title=\"第三部分 优秀项目\"></a>第三部分 优秀项目</h2><p>主要介绍那些 Android 还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。  </p>\n<h3 id=\"一、系统及平台\"><a href=\"#一、系统及平台\" class=\"headerlink\" title=\"一、系统及平台\"></a>一、系统及平台</h3><ol>\n<li>Linux<br>项目地址：<a href=\"https://github.com/torvalds/linux\" target=\"_blank\" rel=\"external\">https://github.com/torvalds/linux</a>  </li>\n<li>Android<br>项目地址：<a href=\"https://android.googlesource.com/\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/</a>  </li>\n</ol>\n<h3 id=\"二、项目\"><a href=\"#二、项目\" class=\"headerlink\" title=\"二、项目\"></a>二、项目</h3><ol>\n<li><p>ZXing<br>二维码扫描工具<br>项目地址：<a href=\"https://github.com/zxing/zxing\" target=\"_blank\" rel=\"external\">https://github.com/zxing/zxing</a> 或 <a href=\"https://code.google.com/p/zxing/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/zxing/</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.google.zxing.client.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.google.zxing.client.android</a><br>其他：现在市面上很多应用的二维码扫描功能都是从这个修改而来  </p>\n</li>\n<li><p>photup<br>编辑机批量上传照片到 facebook 上<br>项目地址：<a href=\"https://github.com/chrisbanes/photup\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/photup</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.photup\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.photup</a><br>其他：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  </p>\n</li>\n<li><p>github-android<br>Github 的 Android 客户端项目<br>项目地址：<a href=\"https://github.com/github/android\" target=\"_blank\" rel=\"external\">https://github.com/github/android</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.mobile\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.mobile</a>  </p>\n</li>\n<li><p>Notes<br>MIUI 便签<br>项目地址：<a href=\"https://github.com/MiCode/Notes\" target=\"_blank\" rel=\"external\">https://github.com/MiCode/Notes</a><br>APK 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true</a><br>其他：项目分包比较合理，相比较 miui 的文件管理器 <a href=\"https://github.com/MiCode/FileExplorer\" target=\"_blank\" rel=\"external\">https://github.com/MiCode/FileExplorer</a> 代码规范较好得多  </p>\n</li>\n<li><p>weicuiyuan<br>四次元-新浪微博客户端<br>项目地址：<a href=\"https://github.com/qii/weiciyuan\" target=\"_blank\" rel=\"external\">https://github.com/qii/weiciyuan</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=org.qii.weiciyuan\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.qii.weiciyuan</a>  </p>\n</li>\n<li><p>Douya<br>豆芽——Material Design 的豆瓣客户端<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/Douya\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/Douya</a>  </p>\n</li>\n<li><p>gnucash-android<br>一个记账理财软件<br>项目地址：<a href=\"https://github.com/codinguser/gnucash-android\" target=\"_blank\" rel=\"external\">https://github.com/codinguser/gnucash-android</a><br>APK 地址：<a href=\"http://play.google.com/store/apps/details?id=org.gnucash.android\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=org.gnucash.android</a>  </p>\n</li>\n<li><p>AntennaPod<br>支持 rss 订阅、音乐订阅<br>项目地址：<a href=\"https://github.com/danieloeh/AntennaPod\" target=\"_blank\" rel=\"external\">https://github.com/danieloeh/AntennaPod</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=de.danoeh.antennapod\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=de.danoeh.antennapod</a>  </p>\n</li>\n<li><p>ChaseWhisplyProject<br>打鬼游戏<br>项目地址：<a href=\"https://github.com/tvbarthel/ChaseWhisplyProject\" target=\"_blank\" rel=\"external\">https://github.com/tvbarthel/ChaseWhisplyProject</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply</a>  </p>\n</li>\n<li><p>Tweet Lanes<br>功能完整的 Twitter 客户端<br>项目地址：<a href=\"https://github.com/chrislacy/TweetLanes\" target=\"_blank\" rel=\"external\">https://github.com/chrislacy/TweetLanes</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.tweetlanes.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.tweetlanes.android</a>  </p>\n</li>\n<li><p>Financius<br>简单易用的记账程序<br>项目地址：<a href=\"https://github.com/mvarnagiris/Financius\" target=\"_blank\" rel=\"external\">https://github.com/mvarnagiris/Financius</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.code44.finance\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.code44.finance</a>  </p>\n</li>\n<li><p>todo.txt-android<br>todo.txt 的官方 Android 应用<br>项目地址：<a href=\"https://github.com/ginatrapani/todo.txt-android\" target=\"_blank\" rel=\"external\">https://github.com/ginatrapani/todo.txt-android</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch</a>  </p>\n</li>\n<li><p>simpletask<br>基于 todo.txt 官方应用的另一个客户端<br>项目地址：<a href=\"https://github.com/mpcjanssen/simpletask-android\" target=\"_blank\" rel=\"external\">https://github.com/mpcjanssen/simpletask-android</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo</a>  </p>\n</li>\n<li><p>Muzei Live Wallpaper<br>定时更换桌面精美壁纸<br>项目地址：<a href=\"https://github.com/romannurik/muzei\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/muzei</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=net.nurik.roman.muzei\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.nurik.roman.muzei</a>  </p>\n</li>\n<li><p>Scanbook<br>扫描搜索查询图书信息<br>项目地址：<a href=\"https://github.com/JayFang1993/ScanBook\" target=\"_blank\" rel=\"external\">https://github.com/JayFang1993/ScanBook</a><br>APK 地址：<a href=\"http://www.wandoujia.com/apps/com.scanbook\" target=\"_blank\" rel=\"external\">http://www.wandoujia.com/apps/com.scanbook</a>  </p>\n</li>\n<li><p>iosched<br>The Google I/O 2014 Android App<br>项目地址：<a href=\"https://github.com/google/iosched\" target=\"_blank\" rel=\"external\">https://github.com/google/iosched</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched</a>  </p>\n</li>\n</ol>\n<h2 id=\"第四部分-开发工具及测试工具\"><a href=\"#第四部分-开发工具及测试工具\" class=\"headerlink\" title=\"第四部分 开发工具及测试工具\"></a>第四部分 开发工具及测试工具</h2><p>主要介绍和 Android 开发工具和测试工具相关的开源项目。  </p>\n<h3 id=\"一、开发效率工具\"><a href=\"#一、开发效率工具\" class=\"headerlink\" title=\"一、开发效率工具\"></a>一、开发效率工具</h3><ol>\n<li><p>Parceler<br>通过注解及工具类自动完成实体类 Parcelable 及值传递<br>项目地址：<a href=\"https://github.com/johncarl81/parceler\" target=\"_blank\" rel=\"external\">https://github.com/johncarl81/parceler</a>  </p>\n</li>\n<li><p>Json2Java<br>根据 JSon 数据自动生成对应的 Java 实体类，还支持 Parcel、Gson Annotations 对应代码自动生成。期待后续的提取父类以及多 url 构建整个工程的功能<br>项目地址：<a href=\"https://github.com/jonfhancock/JsonToJava\" target=\"_blank\" rel=\"external\">https://github.com/jonfhancock/JsonToJava</a><br>在线演示：<a href=\"http://jsontojava.appspot.com/\" target=\"_blank\" rel=\"external\">http://jsontojava.appspot.com/</a>  </p>\n</li>\n<li><p>IntelliJ Plugin for Android Parcelable boilerplate code generation<br>Android studio 插件，生成 Parcelable 代码<br>项目地址：<a href=\"https://github.com/mcharmas/android-parcelable-intellij-plugin\" target=\"_blank\" rel=\"external\">https://github.com/mcharmas/android-parcelable-intellij-plugin</a>  </p>\n</li>\n<li><p>Android Holo Colors IntelliJ Plugin<br>Android studio 插件，生成 holo 样式 9 patch 图片<br>项目地址：<a href=\"https://github.com/jeromevdl/android-holo-colors-idea-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jeromevdl/android-holo-colors-idea-plugin</a>  </p>\n</li>\n<li><p>Android Drawable Factory<br>用于生成各个分辨率的图片<br>项目地址：<a href=\"https://github.com/tizionario/AndroidDrawableFactory\" target=\"_blank\" rel=\"external\">https://github.com/tizionario/AndroidDrawableFactory</a>  </p>\n</li>\n<li><p>SelectorChapek for Android<br>Android Studio 插件，可根据固定文件名格式资源自动生成 drawable selectors xml 文件。<br>项目地址：<a href=\"https://github.com/inmite/android-selector-chapek\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-selector-chapek</a>  </p>\n</li>\n<li><p>Android Action Bar Style Generator<br>Android ActionBar 样式生成器，可在线选择 ActionBar 样式自动生成所需要的图片资源及 xml 文件<br>项目地址：<a href=\"https://github.com/jgilfelt/android-actionbarstylegenerator\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-actionbarstylegenerator</a><br>在线演示：<a href=\"http://jgilfelt.github.io/android-actionbarstylegenerator/\" target=\"_blank\" rel=\"external\">http://jgilfelt.github.io/android-actionbarstylegenerator/</a>  </p>\n</li>\n<li><p>ButterKnifeZelezny<br>用于快速生成<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a>View 注入代码的 Android Studio/IDEA 插件<br>项目地址：<a href=\"https://github.com/inmite/android-butterknife-zelezny\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-butterknife-zelezny</a>  </p>\n</li>\n<li><p>RoboCoP<br>利用 Gradle task 根据固定格式的 json 文件生成 ContentProvider<br>项目地址：<a href=\"https://github.com/mediarain/RoboCoP\" target=\"_blank\" rel=\"external\">https://github.com/mediarain/RoboCoP</a>  </p>\n</li>\n<li><p>appiconsizes<br>用于生成各个分辨率的图片<br>项目地址：<a href=\"http://www.appiconsizes.com/\" target=\"_blank\" rel=\"external\">http://www.appiconsizes.com/</a>  </p>\n</li>\n<li><p>AndroidUtiles<br>集合了所有常用的安卓工具类<br>项目地址：<a href=\"https://github.com/l123456789jy/Lazy\" target=\"_blank\" rel=\"external\">https://github.com/l123456789jy/Lazy</a></p>\n</li>\n<li><p>Gradle Retrolambda Plugin<br><a href=\"https://github.com/orfjackal/retrolambda\" target=\"_blank\" rel=\"external\">Retrolambda</a>是将 Java8 的 Lambdas 应用于 Java7 的工具，本项目是 Gradle 插件，通过 Retrolambda 从而使 Java 或 Android 项目用 Java8 的 Lambdas 编写，将编译后的字节码转换为 Java6 和 7 的字节码从而正常运行<br>项目地址：<a href=\"https://github.com/evant/gradle-retrolambda\" target=\"_blank\" rel=\"external\">https://github.com/evant/gradle-retrolambda</a>  </p>\n</li>\n<li><p>Dagger IntelliJ Plugin<br>dagger 的 intellij 插件<br>项目地址：<a href=\"https://github.com/square/dagger-intellij-plugin\" target=\"_blank\" rel=\"external\">https://github.com/square/dagger-intellij-plugin</a>  </p>\n</li>\n<li><p>Android Gen Drawable Maven plugin<br>在编译时根据 SVG 描述文件生成不同分辨率的 jpg、png 或点 9 图片<br>项目地址：<a href=\"https://github.com/avianey/androidgendrawable-maven-plugin\" target=\"_blank\" rel=\"external\">https://github.com/avianey/androidgendrawable-maven-plugin</a>  </p>\n</li>\n<li><p>Android Asset Studio<br>各种 Android 资源自动生成器，包括启动图标、ActionBar 图标、通知栏图标、点 9 等<br>项目地址：<a href=\"https://github.com/romannurik/AndroidAssetStudio\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/AndroidAssetStudio</a><br>在线演示：<a href=\"http://romannurik.github.io/AndroidAssetStudio/\" target=\"_blank\" rel=\"external\">http://romannurik.github.io/AndroidAssetStudio/</a>  </p>\n</li>\n<li><p>jsonschema2pojo<br>根据 Json 内容生成 java 对象，支持 jackjson 和 gson<br>项目地址：<a href=\"https://github.com/joelittlejohn/jsonschema2pojo\" target=\"_blank\" rel=\"external\">https://github.com/joelittlejohn/jsonschema2pojo</a><br>在线演示：<a href=\"http://www.jsonschema2pojo.org/\" target=\"_blank\" rel=\"external\">http://www.jsonschema2pojo.org/</a>  </p>\n</li>\n<li><p>GsonFormat<br>根据 JSONObject 格式的字符串,自动生成实体类参数的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href=\"https://github.com/zzz40500/GsonFormat\" target=\"_blank\" rel=\"external\">https://github.com/zzz40500/GsonFormat</a>  </p>\n</li>\n<li><p>9-Patch-Resizer<br>自动生成 png 及点 9 图片的不同分辨率版本<br>项目地址：<a href=\"https://github.com/redwarp/9-Patch-Resizer\" target=\"_blank\" rel=\"external\">https://github.com/redwarp/9-Patch-Resizer</a>  </p>\n</li>\n<li><p>AndroidLocalizationer<br>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href=\"https://github.com/westlinkin/AndroidLocalizationer\" target=\"_blank\" rel=\"external\">https://github.com/westlinkin/AndroidLocalizationer</a>  </p>\n</li>\n<li><p>Material Palette<br>一个将现有的色彩方案组合成材料设计的调色板方案，提供下载。选取两个主要色彩后便可以提供下载，提供下载的格式可以是 android 的资源 xml 文件，以色彩的方式提供，也可以是 CSS、SVG、PNG 等常见格式文件。<br>项目地址：<a href=\"http://www.materialpalette.com/\" target=\"_blank\" rel=\"external\">http://www.materialpalette.com/</a>  </p>\n</li>\n</ol>\n<h3 id=\"二、开发自测相关\"><a href=\"#二、开发自测相关\" class=\"headerlink\" title=\"二、开发自测相关\"></a>二、开发自测相关</h3><ol>\n<li><p>Quality Tools for Android<br>Android 测试及自测工具集合和示例<br>项目地址：<a href=\"https://github.com/stephanenicolas/Quality-Tools-for-Android\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/Quality-Tools-for-Android</a>  </p>\n</li>\n<li><p>android-test-kit<br>Google 的 Android 测试工具<br>包括 GoogleInstrumentationTestRunner(增强版的 InstrumentationTestRunner)和 Espresso(用于快速写出可靠测试用例的 API)<br>项目地址：<a href=\"https://code.google.com/p/android-test-kit/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-test-kit/</a><br>文档介绍：<a href=\"https://code.google.com/p/android-test-kit/w/list\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-test-kit/w/list</a>  </p>\n</li>\n<li><p>robolectric<br>测试用例编写框架<br>项目地址：<a href=\"https://github.com/robolectric/robolectric\" target=\"_blank\" rel=\"external\">https://github.com/robolectric/robolectric</a><br>Demo 地址：<a href=\"https://github.com/robolectric/robolectricsample\" target=\"_blank\" rel=\"external\">https://github.com/robolectric/robolectricsample</a><br>文档介绍：<a href=\"http://robolectric.org/\" target=\"_blank\" rel=\"external\">http://robolectric.org/</a><br>特点：(1). 不需要模拟器在一般 JVM 就可以运行测试用例<br>(2). 能完成在真机上的大部分测试包括感应器<br>其他的测试用例及相关模块 Mock 可见：<a href=\"https://code.google.com/p/android-mock/\" target=\"_blank\" rel=\"external\">android-mock</a>, <a href=\"https://code.google.com/p/mockito/\" target=\"_blank\" rel=\"external\">mockito</a>, <a href=\"https://github.com/easymock/easymock\" target=\"_blank\" rel=\"external\">easy-mock</a>  </p>\n</li>\n<li><p>Android FEST<br>提供一些列方便的断言，可用于提高编写 Android 自测代码效率<br>项目地址：<a href=\"https://github.com/square/fest-android\" target=\"_blank\" rel=\"external\">https://github.com/square/fest-android</a>  </p>\n</li>\n<li><p>BoundBox<br>可用于测试类各种访问权限的属性、方法。实际是通过 BoundBox 这个 annotation 生成一个属性和方法都是 public 权限的中间类并对此类进行测试完成的<br>项目地址：<a href=\"https://github.com/stephanenicolas/boundbox\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/boundbox</a>  </p>\n</li>\n<li><p>Hugo<br>用于打印函数信息及执行时间的工具，仅在 debug 模式生效<br>项目地址：<a href=\"https://github.com/JakeWharton/hugo\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/hugo</a>  </p>\n</li>\n<li><p>scalpel<br>在应用下面添加一层用于界面调试<br>项目地址：<a href=\"https://github.com/JakeWharton/scalpel\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/scalpel</a>  </p>\n</li>\n<li><p>Android Screenshot library<br>Android 截图工具类，用于在持续集成时截图<br>项目地址：<a href=\"https://github.com/rtyley/android-screenshot-lib\" target=\"_blank\" rel=\"external\">https://github.com/rtyley/android-screenshot-lib</a>  </p>\n</li>\n<li><p>sonar-android-lint-plugin<br>将 android lint 的错误在 sonar 中展现<br>项目地址：<a href=\"https://github.com/SonarCommunity/sonar-android\" target=\"_blank\" rel=\"external\">https://github.com/SonarCommunity/sonar-android</a>  </p>\n</li>\n</ol>\n<h3 id=\"三、测试工具\"><a href=\"#三、测试工具\" class=\"headerlink\" title=\"三、测试工具\"></a>三、测试工具</h3><ol>\n<li><p>Spoon<br>可用于 android 不同机型设备自动化测试，能将应用 apk 和测试 apk 运行在不同机器上并生成相应测试报告。<br>项目地址：<a href=\"https://github.com/square/spoon\" target=\"_blank\" rel=\"external\">https://github.com/square/spoon</a>  </p>\n</li>\n<li><p>Tencent APT<br>APT 是腾讯开源的一个 Android 平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试<br>项目地址：<a href=\"https://github.com/stormzhang/APT\" target=\"_blank\" rel=\"external\">https://github.com/stormzhang/APT</a>  </p>\n</li>\n<li><p>Emmagee<br>网易开源的性能测试工具，包括 CPU、内存、网络流量、启动时间、电池状态等<br>项目地址：<a href=\"https://github.com/NetEase/Emmagee\" target=\"_blank\" rel=\"external\">https://github.com/NetEase/Emmagee</a>  </p>\n</li>\n<li><p>Android py-uiautomator<br>py-uiautomator 是一个对 Android uiautomator 用 python 进行封装的测试框架.<br>项目地址：<a href=\"https://github.com/xiaocong/uiautomator\" target=\"_blank\" rel=\"external\">https://github.com/xiaocong/uiautomator</a>  </p>\n</li>\n<li><p>Augmented Traffic Control<br>模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率<br>项目地址：<a href=\"https://github.com/facebook/augmented-traffic-control\" target=\"_blank\" rel=\"external\">https://github.com/facebook/augmented-traffic-control</a>  </p>\n</li>\n<li><p>stetho<br>强大的 Android Debug 工具。支持网络请求监控以及数据库查看，可以和 Chrome DevTools 结合或者命令行模式。<br>项目地址：<a href=\"https://github.com/facebook/stetho\" target=\"_blank\" rel=\"external\">https://github.com/facebook/stetho</a>  </p>\n</li>\n</ol>\n<h3 id=\"四、开发及编译环境\"><a href=\"#四、开发及编译环境\" class=\"headerlink\" title=\"四、开发及编译环境\"></a>四、开发及编译环境</h3><ol>\n<li><p>Buck<br>facebook 开源的 Android 编译工具，效率是 ant 的两倍。主要优点在于：<br>(1) 加快编译速度，通过并行利用多核 cpu 和跟踪不变资源减少增量编译时间实现<br>(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件<br>(3) 编译同时可生成单元测试结果<br>(4) 既可用于 IDE 编译也可用于持续集成编译<br>(5) facebook 持续优化中<br>项目地址：<a href=\"https://github.com/facebook/buck\" target=\"_blank\" rel=\"external\">https://github.com/facebook/buck</a>  </p>\n</li>\n<li><p>Android Maven Plugin<br>Android Maven 插件，可用于对 android 三方依赖进行管理。在 J2EE 开发中，maven 是非常成熟的依赖库管理工具，可统一管理依赖库。<br>项目地址：<a href=\"https://github.com/jayway/maven-android-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jayway/maven-android-plugin</a>  </p>\n</li>\n<li><p>umeng-muti-channel-build-tool<br>渠道打包工具<br>项目地址：<a href=\"https://github.com/umeng/umeng-muti-channel-build-tool\" target=\"_blank\" rel=\"external\">https://github.com/umeng/umeng-muti-channel-build-tool</a><br>另可参见 Google 的构建系统 Gradle：<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\" target=\"_blank\" rel=\"external\">http://tools.android.com/tech-docs/new-build-system/user-guide</a>  </p>\n</li>\n<li><p>Genymotion<br>目前最好用最快的 android 模拟器<br>项目地址：<a href=\"http://www.genymotion.com/\" target=\"_blank\" rel=\"external\">http://www.genymotion.com/</a><br>Android studio 集成控件： <a href=\"http://plugins.jetbrains.com/plugin/7269?pr=idea\" target=\"_blank\" rel=\"external\">http://plugins.jetbrains.com/plugin/7269?pr=idea</a><br>Cyril Mottier 推荐：<a href=\"http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/\" target=\"_blank\" rel=\"external\">http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/</a>  </p>\n</li>\n<li><p>gradle-mvn-push<br>方便的将 Gradle 的 Artifacts 上传到 Maven 仓库<br>项目地址：<a href=\"https://github.com/chrisbanes/gradle-mvn-push\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/gradle-mvn-push</a><br>文档介绍：<a href=\"https://github.com/chrisbanes/gradle-mvn-push#usage\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/gradle-mvn-push#usage</a>  </p>\n</li>\n<li><p>Android Emulator Plugin for Jenkins<br>Android 模拟器 jenkins 插件，用于 Jenkins 做持续集成时跑模拟器测试<br>项目地址：<a href=\"https://github.com/jenkinsci/android-emulator-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jenkinsci/android-emulator-plugin</a>  </p>\n</li>\n<li><p>Android Maven Plugin<br>管理应用所需要的依赖库。包括的构建工具有 Maven、Gradle、ant、sbt<br>项目地址：<a href=\"https://github.com/mosabua/maven-android-sdk-deployer\" target=\"_blank\" rel=\"external\">https://github.com/mosabua/maven-android-sdk-deployer</a>  </p>\n</li>\n<li><p>SDK Manager Plugin<br>下载和管理 Android SDK 的 Gradle 插件<br>项目地址：<a href=\"https://github.com/JakeWharton/sdk-manager-plugin\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/sdk-manager-plugin</a>  </p>\n</li>\n<li><p>Gradle Protobuf Plugin<br>将.proto 文件转换成 Java 文件的 gradle 插件<br>项目地址：<a href=\"https://github.com/andrewkroh/gradle-protobuf-plugin\" target=\"_blank\" rel=\"external\">https://github.com/andrewkroh/gradle-protobuf-plugin</a>  </p>\n</li>\n<li><p>ChromeADB<br>Chrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等<br>项目地址：<a href=\"https://github.com/importre/chromeadb\" target=\"_blank\" rel=\"external\">https://github.com/importre/chromeadb</a>  </p>\n</li>\n</ol>\n<h3 id=\"五、其他\"><a href=\"#五、其他\" class=\"headerlink\" title=\"五、其他\"></a>五、其他</h3><ol>\n<li><p>GT<br>APP的随身调试平台，它是直接运行在手机上的“集成调试环境”(IDTE, Integrated Debug Environment)。<br>项目地址：<a href=\"https://github.com/TencentOpen/GT\" target=\"_blank\" rel=\"external\">https://github.com/TencentOpen/GT</a><br>文档介绍：<a href=\"http://gt.qq.com/docs.html\" target=\"_blank\" rel=\"external\">http://gt.qq.com/docs.html</a>  </p>\n</li>\n<li><p>ViewServer<br>允许 app 运行在任何手机上都可以用 HierarchyViewer 查看<br>项目地址：<a href=\"https://github.com/romainguy/ViewServer\" target=\"_blank\" rel=\"external\">https://github.com/romainguy/ViewServer</a>  </p>\n</li>\n<li><p>GridWichterle for Android<br>在整个系统上显示一个 grid，用来帮助查看应用布局及使得布局更美观，可设置 grid 网格大小和颜色，android 推荐 48dp 和 8dp，可见 Android Design Guidelines – Metrics and Grids，比起 hierarchyviewer 相差甚远，不过偶尔可用来作为布局查看工具。<br>项目地址：<a href=\"https://github.com/inmite/android-grid-wichterle\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-grid-wichterle</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle</a>  </p>\n</li>\n<li><p>Catlog<br>手机端 log 查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程 id 过滤、录制功能等<br>项目地址：<a href=\"https://github.com/nolanlawson/Catlog\" target=\"_blank\" rel=\"external\">https://github.com/nolanlawson/Catlog</a><br>在线演示：<a href=\"https://play.google.com/store/apps/details?id=com.nolanlawson.logcat\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.nolanlawson.logcat</a>  </p>\n</li>\n<li><p>PID Cat<br>根据 package 查看 logcat 日志<br>项目地址：<a href=\"https://github.com/JakeWharton/pidcat\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/pidcat</a>  </p>\n</li>\n<li><p>ACRA<br>应用崩溃信息日志上报到 GoogleDoc 工具，网页版展现结果三方开源地址 <a href=\"https://github.com/BenoitDuffez/crashreportsviewer\" target=\"_blank\" rel=\"external\">https://github.com/BenoitDuffez/crashreportsviewer</a><br>项目地址：<a href=\"https://github.com/ACRA/acra\" target=\"_blank\" rel=\"external\">https://github.com/ACRA/acra</a><br>文档介绍：<a href=\"https://github.com/ACRA/acra/wiki/BasicSetup\" target=\"_blank\" rel=\"external\">https://github.com/ACRA/acra/wiki/BasicSetup</a>  </p>\n</li>\n<li><p>Crashlytics<br>提供丰富的应用崩溃信息日志收集<br>轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知<br>项目地址：<a href=\"http://www.crashlytics.com/\" target=\"_blank\" rel=\"external\">http://www.crashlytics.com/</a><br>集成插件：<a href=\"http://try.crashlytics.com/sdk-android/?utm_source=blog&amp;utm_medium=blog&amp;utm_campaign=Announcing_android_studio_wp&amp;utm_content=CTA_button\" target=\"_blank\" rel=\"external\">Android Studio, Eclipse and IntelliJ</a>  </p>\n</li>\n<li><p>Android Resource Navigator<br>chrome 插件，可以方便的查看 github 上 android 源码工程的 styles.xml 和 themes.xml。主要功能：<br>(1) 快速打开 android styles.xml themes.xml<br>(2) 方便在资源间跳转。styles.xml themes.xml 文件中资源链接跳转，可以方便跳转到某个资源<br>(3) 方便查找某个 style 和 theme。chrome 地址栏输入 arn+tab+搜索内容回车即可<br>(4) 自动下载不同分辨率下的 drawable<br>(5) 通过映射查找那些不是按照固定命名规则命名的 style 和 theme<br>项目地址：<a href=\"https://github.com/jgilfelt/android-resource-navigator\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-resource-navigator</a><br>在线演示：<a href=\"https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB\" target=\"_blank\" rel=\"external\">https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB</a>  </p>\n</li>\n<li><p>android-resource-remover<br>根据 lint 的提示删除项目中无用的资源，减少包的大小<br>项目地址：<a href=\"https://github.com/KeepSafe/android-resource-remover\" target=\"_blank\" rel=\"external\">https://github.com/KeepSafe/android-resource-remover</a>  </p>\n</li>\n<li><p>Telescope<br>通过手势截图以特定主题发送到特定邮箱地址报告 Bug<br>项目地址：<a href=\"https://github.com/mattprecious/telescope\" target=\"_blank\" rel=\"external\">https://github.com/mattprecious/telescope</a>  </p>\n</li>\n<li><p>Complete Android Fragment &amp; Activity Lifecycle<br>完整的 Android Fragment/Activity 生命周期图<br>项目地址：<a href=\"https://github.com/xxv/android-lifecycle\" target=\"_blank\" rel=\"external\">https://github.com/xxv/android-lifecycle</a>  </p>\n</li>\n<li><p>Bugsnag Notifier for Android<br>通过<code>Thread.UncaughtExceptionHandler</code>捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器<br>项目地址：<a href=\"https://github.com/bugsnag/bugsnag-android\" target=\"_blank\" rel=\"external\">https://github.com/bugsnag/bugsnag-android</a><br>文档介绍：<a href=\"https://github.com/bugsnag/bugsnag-android#installation--setup\" target=\"_blank\" rel=\"external\">https://github.com/bugsnag/bugsnag-android#installation--setup</a>  </p>\n</li>\n<li><p>Material Design Icons<br>Google Material Design 规范中的 Icon<br>项目地址：<a href=\"https://github.com/google/material-design-icons\" target=\"_blank\" rel=\"external\">https://github.com/google/material-design-icons</a>  </p>\n</li>\n<li><p>scrollscreenshot<br>Android 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接<br>项目地址：<a href=\"https://github.com/PGSSoft/scrollscreenshot\" target=\"_blank\" rel=\"external\">https://github.com/PGSSoft/scrollscreenshot</a>  </p>\n</li>\n<li><p>droidicon<br>1600+的海量 Icon，包括 750+的 Material Design icons<br>项目地址：<a href=\"https://github.com/theDazzler/droidicon\" target=\"_blank\" rel=\"external\">https://github.com/theDazzler/droidicon</a>  </p>\n</li>\n<li><p>leakcanary<br>Android 内存泄露检测工具，集成方便，出现泄露后报告直观<br>项目地址：<a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">https://github.com/square/leakcanary</a>  </p>\n</li>\n<li><p>CacheUtilsLibrary<br>将任何Java Object类型的数据序列化后写入缓存文件，将来使用时读取缓存文件并反序列化成对应Java Object的库<br>项目地址：<a href=\"https://github.com/westlinkin/CacheUtilsLibrary\" target=\"_blank\" rel=\"external\">https://github.com/westlinkin/CacheUtilsLibrary</a></p>\n</li>\n<li><p>BlockCanary<br>BlockCanary是一个Android平台的一个非侵入式的性能监控组件，应用只需要实现一个抽象类，提供一些该组件需要的上下文环境，就可以在平时使用应用的时候检测主线程上的各种卡慢问题，并通过组件提供的各种信息分析出原因并进行修复。<br>项目地址: <a href=\"https://github.com/moduth/blockcanary\" target=\"_blank\" rel=\"external\">https://github.com/moduth/blockcanary</a>  </p>\n</li>\n</ol>\n<h2 id=\"第五部分\"><a href=\"#第五部分\" class=\"headerlink\" title=\"第五部分\"></a>第五部分</h2><p>主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow 大神，深挖大神的项目和 following，你会发现很多。  </p>\n<h3 id=\"一、个人\"><a href=\"#一、个人\" class=\"headerlink\" title=\"一、个人\"></a>一、个人</h3><ol>\n<li><p>JakeWharton<br>就职于 Square，绝对牛逼的大神，项目主要集中在 Android 版本兼容，ViewPager 及开发工具上<br>Github 地址：<a href=\"https://github.com/JakeWharton\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton</a><br>代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel<br>pidcat 另外对 square 及其他开源项目有很多贡献<br>主页：<a href=\"http://jakewharton.com/\" target=\"_blank\" rel=\"external\">http://jakewharton.com/</a>  </p>\n</li>\n<li><p>Chris Banes<br>Github 地址：<a href=\"https://github.com/chrisbanes\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes</a><br>代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh<br>主页：<a href=\"http://chris.banes.me/\" target=\"_blank\" rel=\"external\">http://chris.banes.me/</a>  </p>\n</li>\n<li><p>Koushik Dutta<br>就职于 ClockworkMod<br>Github 地址：<a href=\"https://github.com/koush\" target=\"_blank\" rel=\"external\">https://github.com/koush</a><br>代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对 <a href=\"https://github.com/CyanogenMod\" target=\"_blank\" rel=\"external\">https://github.com/CyanogenMod</a> 的开源项目有很多贡献<br>主页：<a href=\"http://koush.com/\" target=\"_blank\" rel=\"external\">http://koush.com/</a>  </p>\n</li>\n<li><p>Simon Vig<br>Github 地址：<a href=\"https://github.com/SimonVT\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT</a><br>代表作：android-menudrawer，MessageBar<br>主页：<a href=\"http://simonvt.net/\" target=\"_blank\" rel=\"external\">http://simonvt.net/</a>  </p>\n</li>\n<li><p>Manuel Peinado<br>Github 地址：<a href=\"https://github.com/ManuelPeinado\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado</a><br>代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  </p>\n</li>\n<li><p>Emil Sj?lander<br>Github 地址：<a href=\"https://github.com/emilsjolander\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander</a><br>代表作：StickyListHeaders，sprinkles，android-FlipView<br>主页：<a href=\"http://emilsjolander.se/\" target=\"_blank\" rel=\"external\">http://emilsjolander.se/</a>  </p>\n</li>\n<li><p>greenrobot<br>Github 地址：<a href=\"https://github.com/greenrobot\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot</a><br>代表作：greenDAO，EventBus<br>主页：<a href=\"http://greenrobot.de/\" target=\"_blank\" rel=\"external\">http://greenrobot.de/</a>  </p>\n</li>\n<li><p>Jeff Gilfelt<br>Github 地址：<a href=\"https://github.com/jgilfelt\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt</a><br>代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper<br>主页：<a href=\"http://jeffgilfelt.com\" target=\"_blank\" rel=\"external\">http://jeffgilfelt.com</a>  </p>\n</li>\n<li><p>Romain Guy<br>Android team 成员(2013.10 已离开 Android team，仍在 Google)<br>Github 地址：<a href=\"https://github.com/romainguy\" target=\"_blank\" rel=\"external\">https://github.com/romainguy</a><br>代表作：ViewServer<br>主页：<a href=\"http://www.curious-creature.org/category/android/\" target=\"_blank\" rel=\"external\">http://www.curious-creature.org/category/android/</a><br>個人攝影作品：<a href=\"http://www.flickr.com/photos/romainguy\" target=\"_blank\" rel=\"external\">http://www.flickr.com/photos/romainguy</a>  </p>\n</li>\n<li><p>sephiroth74<br>就职于 Aviary.com<br>Github 地址：<a href=\"https://github.com/sephiroth74\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74</a><br>代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF<br>主页：<a href=\"http://www.sephiroth.it/\" target=\"_blank\" rel=\"external\">http://www.sephiroth.it/</a>  </p>\n</li>\n<li><p>Cyril Mottier<br>Google 开发者专家认证，发布一些 Android 技巧及文章<br>Github 地址：<a href=\"https://github.com/cyrilmottier\" target=\"_blank\" rel=\"external\">https://github.com/cyrilmottier</a><br>代表作：GreenDroid，Polaris<br>主页：<a href=\"http://cyrilmottier.com/\" target=\"_blank\" rel=\"external\">http://cyrilmottier.com/</a>  </p>\n</li>\n</ol>\n<h3 id=\"二、组织\"><a href=\"#二、组织\" class=\"headerlink\" title=\"二、组织\"></a>二、组织</h3><ol>\n<li><p>Square<br>有态度有良心的企业，很多不错的分享<br>Github 地址：<a href=\"https://github.com/square\" target=\"_blank\" rel=\"external\">https://github.com/square</a><br>代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon 等等<br>主页：<a href=\"http://square.github.io/\" target=\"_blank\" rel=\"external\">http://square.github.io/</a>  </p>\n</li>\n<li><p>Inmite s.r.o.<br>Github 地址：<a href=\"https://github.com/inmite\" target=\"_blank\" rel=\"external\">https://github.com/inmite</a><br>代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek<br>主页：<a href=\"http://www.inmite.eu/\" target=\"_blank\" rel=\"external\">http://www.inmite.eu/</a>  </p>\n</li>\n</ol>\n<h3 id=\"三、博客\"><a href=\"#三、博客\" class=\"headerlink\" title=\"三、博客\"></a>三、博客</h3><p><a href=\"https://github.com/android-cn/android-dev-com\" target=\"_blank\" rel=\"external\">部分国外著名 Android 开发者信息</a>  </p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>本文转自——<strong><a href=\"https://github.com/Trinea/android-open-project\" target=\"_blank\" rel=\"external\">Trinea 汇总的开源项目</a></strong><br>欢迎大家关注他的微信公众号：codekk。二维码如下：<br> 专注于 Android 开源分享、源码解析、框架设计、Android 内推。<br>  <img src=\"http://www.trinea.cn/wp-content/uploads/2016/01/weixin-codekk-160.jpg\" alt=\"img\"><br>   他的网站：<a href=\"http://a.codekk.com\" target=\"_blank\" rel=\"external\">www.codekk.com</a><br> <strong>关于trinea，欢迎关注</strong><br> 微博：<a title=\"Android 技术及移动互联网分享\" href=\"http://weibo.com/trinea?s=6cm7D0\" target=\"_blank\">Trinea</a>&nbsp;&nbsp;&nbsp;&nbsp;主页：<a title=\"关注于 Android、Java、性能优化、开源项目\" href=\"http://www.trinea.cn/\" target=\"_blank\">trinea.cn</a> </p>\n</blockquote>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><blockquote>\n<p><a href=\"http://a.codekk.com\" target=\"_blank\" rel=\"external\">Android 开源项目源码解析(Volley、UIL、Dagger、EventBus、插件化库等分析)</a></p>\n<p><a href=\"http://j.codekk.com\" target=\"_blank\" rel=\"external\">Android 职位内部推荐(阿里、腾讯、百度、京东、滴滴、美团、58、华为、网易、魅族等)</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"目前包括：\"><a href=\"#目前包括：\" class=\"headerlink\" title=\"目前包括：\"></a>目前包括：</h2><blockquote>\n<ol>\n<li>Android 开源项目第一篇——个性化控件(View)篇<br><em>包括：ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style、其他</em>  </li>\n<li>Android 开源项目第二篇——工具库篇<br><em>包括：依赖注入、图片缓存、网络请求、数据库 ORM 工具包、Android 公共库、高版本向低版本兼容库、多媒体、事件总线、传感器、安全、插件化、文件、其他</em>  </li>\n<li>Android 开源项目第三篇——优秀项目篇<br><em>比较有意思的完整的 Android 项目</em>  </li>\n<li>Android 开源项目第四篇——开发及测试工具篇<br><em>包括：开发效率工具、开发自测相关、测试工具、开发及编译环境、其他</em>  </li>\n<li>Android 开源项目第五篇——优秀个人和团体篇<br><em>乐于分享并且有一些很不错的开源项目的个人和组织，包括 JakeWharton、Chris Banes、Koushik Dutta 等大牛</em>","more":"</li>\n</ol>\n</blockquote>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>以下链接网址若存在不能访问，请自行尝试翻墙，推荐使用GreenVPN<br><a href=\"http://gjsq.me/15038648\" target=\"_blank\" rel=\"external\"><img src=\"/resources/greenvpn.gif\" alt=\"好用的GreenVPN\"></a></p>\n<h2 id=\"第一部分-个性化控件-View\"><a href=\"#第一部分-个性化控件-View\" class=\"headerlink\" title=\"第一部分 个性化控件(View)\"></a>第一部分 个性化控件(View)</h2><p>主要介绍那些不错个性化的 View，包括 ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style 等等。  </p>\n<h3 id=\"一、ListView\"><a href=\"#一、ListView\" class=\"headerlink\" title=\"一、ListView\"></a>一、ListView</h3><ol>\n<li><p>android-pulltorefresh<br>一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment 上下左右拉动刷新，比下面 johannilsson 那个只支持 ListView 的强大的多。并且它实现的下拉刷新 ListView 在 item 不足一屏情况下也不会显示刷新提示，体验更好。<br>项目地址：<a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/Android-PullToRefresh</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true</a><br>APP 示例：新浪微博各个页面 </p>\n</li>\n<li><p>android-pulltorefresh-listview<br>下拉刷新 ListView，这个被很多人使用的项目实际有不少 bug，推荐使用 <a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">android-Ultra-Pull-to-Refresh</a><br>项目地址：<a href=\"https://github.com/johannilsson/android-pulltorefresh\" target=\"_blank\" rel=\"external\">https://github.com/johannilsson/android-pulltorefresh</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-Ultra-Pull-to-Refresh<br>下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 <code>API LEVEL &gt;= 8</code><br>项目地址：<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh 源码解析\" target=\"_blank\" rel=\"external\">android-Ultra-Pull-to-Refresh</a><br>Demo 地址：<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>Android-PullToRefreshRecyclerView<br>支持下拉刷新的RecyclerView，同时支持滑动到底部自动加载数据、给RecyclerView添加Header。并且不更改原有RecyclerView的逻辑。<br>项目地址：<a href=\"https://github.com/HomHomLin/Android-PullToRefreshRecyclerView。\" target=\"_blank\" rel=\"external\">https://github.com/HomHomLin/Android-PullToRefreshRecyclerView。</a><br>Demo地址：<a href=\"https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/HomHomLin/Android-PullToRefreshRecyclerView/blob/master/sample.apk</a>  </p>\n</li>\n<li><p>DragSortListView<br>拖动排序的 ListView，同时支持 ListView 滑动 item 删除，各个 Item 高度不一、单选、复选、CursorAdapter 做为适配器、拖动背景变化等<br>项目地址：<a href=\"https://github.com/bauerca/drag-sort-listview\" target=\"_blank\" rel=\"external\">https://github.com/bauerca/drag-sort-listview</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv</a><br>APP 示例：Wordpress Android  </p>\n</li>\n<li><p>SwipeListView<br>支持定义 ListView 左右滑动事件，支持左右滑动位移，支持定义动画时间<br>项目地址：<a href=\"https://github.com/47deg/android-swipelistview\" target=\"_blank\" rel=\"external\">https://github.com/47deg/android-swipelistview</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview</a><br>APP 示例：微信 </p>\n</li>\n<li><p>SlideAndDragListView<br>支持ListView的Item的拖动排序、左右滑动事件，可自定义左右滑动显示文字、图标、位移，同时支持onItemClick、onItemLongClick等监听器，提供丰富的回调接口。<br>项目地址：<a href=\"https://github.com/yydcdut/SlideAndDragListView\" target=\"_blank\" rel=\"external\">https://github.com/yydcdut/SlideAndDragListView</a><br>Demo 地址：<a href=\"https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/yydcdut/SlideAndDragListView/blob/master/apk/sdlv.apk?raw=true</a><br>APP 示例：Android 手机QQ 5.0  </p>\n</li>\n<li><p>Android-SwipeToDismiss<br>滑动 Item 消失 ListView，支持 3.0 以下版本见：<a href=\"https://github.com/JakeWharton/SwipeToDismissNOA\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/SwipeToDismissNOA</a><br>项目地址：<a href=\"https://github.com/romannurik/Android-SwipeToDismiss\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/Android-SwipeToDismiss</a><br>Demo 地址：<a href=\"https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code</a>  </p>\n</li>\n<li><p>RecyclerViewSwipeDismiss<br>轻量级支持 support-v7 中的 RecyclerView 的滑动删除(Swipe to dismiss)行为，不需要修改源代码，只要简单的绑定<code>onTouchListener</code><br>项目地址：<a href=\"https://github.com/CodeFalling/RecyclerViewSwipeDismiss\" target=\"_blank\" rel=\"external\">https://github.com/CodeFalling/RecyclerViewSwipeDismiss</a>  </p>\n</li>\n<li><p>PinnedHeaderExpandableListView<br>首先它是一个 ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩<br>项目地址：<a href=\"https://github.com/singwhatiwanna/PinnedHeaderExpandableListView\" target=\"_blank\" rel=\"external\">https://github.com/singwhatiwanna/PinnedHeaderExpandableListView</a><br>APP 示例：百度手机卫士垃圾清理界面  </p>\n</li>\n<li><p>StickyListHeaders<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView，支持快速滑动，支持 Android2.3 及以上<br>项目地址：<a href=\"https://github.com/emilsjolander/StickyListHeaders\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander/StickyListHeaders</a><br>APP 示例：Android 4.0 联系人  </p>\n</li>\n<li><p>pinned-section-listview<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView<br>项目地址：<a href=\"https://github.com/beworker/pinned-section-listview\" target=\"_blank\" rel=\"external\">https://github.com/beworker/pinned-section-listview</a>  </p>\n</li>\n<li><p>PinnedHeaderListView<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ExpandListView<br>项目地址：<a href=\"https://github.com/JimiSmith/PinnedHeaderListView\" target=\"_blank\" rel=\"external\">https://github.com/JimiSmith/PinnedHeaderListView</a>  </p>\n</li>\n<li><p>QuickReturn<br>ListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href=\"https://github.com/lawloretienne/QuickReturn\" target=\"_blank\" rel=\"external\">https://github.com/lawloretienne/QuickReturn</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn</a>  </p>\n</li>\n<li><p>QuickReturnHeader<br>ListView/ScrollView 的 header 或 footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href=\"https://github.com/ManuelPeinado/QuickReturnHeader\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/QuickReturnHeader</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true</a><br>APP 示例：google plus  </p>\n</li>\n<li><p>IndexableListView<br>ListView 右侧会显示 item 首字母快捷索引，点击可快速滑动到某个 item<br>项目地址：<a href=\"https://github.com/woozzu/IndexableListView\" target=\"_blank\" rel=\"external\">https://github.com/woozzu/IndexableListView</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true</a><br>APP 示例：微信通讯录、小米联系人  </p>\n</li>\n<li><p>CustomFastScrollView<br>ListView 快速滑动，同时屏幕中间 PopupWindows 显示滑动到的 item 内容或首字母<br>项目地址：<a href=\"https://github.com/nolanlawson/CustomFastScrollViewDemo\" target=\"_blank\" rel=\"external\">https://github.com/nolanlawson/CustomFastScrollViewDemo</a>  </p>\n</li>\n<li><p>Android-ScrollBarPanel<br>ListView 滑动时固定的 Panel 指示显示在 scrollbar 旁边<br>项目地址：<a href=\"https://github.com/rno/Android-ScrollBarPanel\" target=\"_blank\" rel=\"external\">https://github.com/rno/Android-ScrollBarPanel</a>  </p>\n</li>\n<li><p>SlideExpandableListView<br>用户点击 listView item 滑出固定区域，其他 item 的区域收缩<br>项目地址：<a href=\"https://github.com/tjerkw/Android-SlideExpandableListView\" target=\"_blank\" rel=\"external\">https://github.com/tjerkw/Android-SlideExpandableListView</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>JazzyListView<br>ListView 及 GridView item 以特殊动画效果进入屏幕，效果包括 grow、cards、curl、wave、flip、fly 等等<br>项目地址：<a href=\"https://github.com/twotoasters/JazzyListView\" target=\"_blank\" rel=\"external\">https://github.com/twotoasters/JazzyListView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample</a><br>在线演示：<a href=\"http://lab.hakim.se/scroll-effects/\" target=\"_blank\" rel=\"external\">http://lab.hakim.se/scroll-effects/</a>  </p>\n</li>\n<li><p>ListViewAnimations<br>带 Item 显示动画的 ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等<br>项目地址：<a href=\"https://github.com/nhaarman/ListViewAnimations\" target=\"_blank\" rel=\"external\">https://github.com/nhaarman/ListViewAnimations</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.haarman.listviewanimations\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.haarman.listviewanimations</a><br>APP 示例：Google plus、Google Now 卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的 ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  </p>\n</li>\n<li><p>DevsmartLib-Android<br>横向 ListView<br>项目地址：<a href=\"https://github.com/dinocore1/DevsmartLib-Android\" target=\"_blank\" rel=\"external\">https://github.com/dinocore1/DevsmartLib-Android</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>TwoWayView<br>横向 ListView 的效果，继承自 AdapterView<br>项目地址：<a href=\"https://github.com/lucasr/twoway-view\" target=\"_blank\" rel=\"external\">https://github.com/lucasr/twoway-view</a>  </p>\n</li>\n<li><p>HorizontalVariableListView<br>支持 Item 宽度不一致的 ListView<br>项目地址：<a href=\"https://github.com/sephiroth74/HorizontalVariableListView\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/HorizontalVariableListView</a>  </p>\n</li>\n<li><p>LinearListView<br>用 LinearLayout 实现的 ListView，可解决多个 ListView 并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍<br>项目地址：<a href=\"https://github.com/frankiesardo/LinearListView\" target=\"_blank\" rel=\"external\">https://github.com/frankiesardo/LinearListView</a>  </p>\n</li>\n<li><p>MultiChoiceAdapter<br>支持多选的 ListView Adapter<br>项目地址：<a href=\"https://github.com/ManuelPeinado/MultiChoiceAdapter\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/MultiChoiceAdapter</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo</a>  </p>\n</li>\n<li><p>EnhancedListView<br>支持横向滑动删除列表项以及撤销删除的 ListView，该项目的前身是<a href=\"https://github.com/timroes/SwipeToDismissUndoList\" target=\"_blank\" rel=\"external\">SwipeToDismissUndoList</a><br>项目地址：<a href=\"https://github.com/timroes/EnhancedListView\" target=\"_blank\" rel=\"external\">https://github.com/timroes/EnhancedListView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo</a>  </p>\n</li>\n<li><p>ListBuddies<br>自动滚动的双列 ListView ，两个 ListView 滚动速度不一致，有视差效果<br>项目地址：<a href=\"https://github.com/jpardogo/ListBuddies\" target=\"_blank\" rel=\"external\">https://github.com/jpardogo/ListBuddies</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies</a>  </p>\n</li>\n<li><p>SwipeMenuListView<br>针对 ListView item 的侧滑菜单<br>项目地址：<a href=\"https://github.com/baoyongzhang/SwipeMenuListView\" target=\"_blank\" rel=\"external\">https://github.com/baoyongzhang/SwipeMenuListView</a><br>APP 示例：手机 QQV5.0  </p>\n</li>\n<li><p>PagingListView<br>分页加载的 ListView。当滑动到 ListView 底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href=\"https://github.com/nicolasjafelle/PagingListView\" target=\"_blank\" rel=\"external\">https://github.com/nicolasjafelle/PagingListView</a>  </p>\n</li>\n<li><p>PullZoomView<br>支持下拉时 HeaderView 缩放的 ListView、ScrollView<br>项目地址：<a href=\"https://github.com/Frank-Zhu/PullZoomView\" target=\"_blank\" rel=\"external\">https://github.com/Frank-Zhu/PullZoomView</a>  </p>\n</li>\n<li><p>PullToZoomInListView<br>滑动 ListView 时使其 HeaderView 跟随滑动缩放<br>项目地址：<a href=\"https://github.com/matrixxun/PullToZoomInListView\" target=\"_blank\" rel=\"external\">https://github.com/matrixxun/PullToZoomInListView</a>  </p>\n</li>\n<li><p>CalendarListview<br>实现每个月一行日历效果的 ListView<br>项目地址：<a href=\"https://github.com/traex/CalendarListview\" target=\"_blank\" rel=\"external\">https://github.com/traex/CalendarListview</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Rogary/CalendarListView%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\" target=\"_blank\" rel=\"external\">CalendarListview</a>  </p>\n</li>\n<li><p>sticky-headers-recyclerview<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 ListView，采用 support-v7 中的 RecyclerView 实现<br>项目地址：<a href=\"https://github.com/timehop/sticky-headers-recyclerview\" target=\"_blank\" rel=\"external\">https://github.com/timehop/sticky-headers-recyclerview</a>  </p>\n</li>\n<li><p>PullSeparateListView<br>到达顶部或底部继续拉动时，实现 Item 间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有 Item 都会分离 (2)部分分离模式，以点击位置为分界点，部分 item 分离<br>项目地址：<a href=\"https://github.com/chiemy/PullSeparateListView\" target=\"_blank\" rel=\"external\">https://github.com/chiemy/PullSeparateListView</a>  </p>\n</li>\n<li><p>ExpandableLayout<br>Header 和 Content Item 都可以展开的 ExpandableListview<br>项目地址：<a href=\"https://github.com/traex/ExpandableLayout\" target=\"_blank\" rel=\"external\">https://github.com/traex/ExpandableLayout</a>  </p>\n</li>\n<li><p>PagedHeadListView<br>支持 paginated header 以及 material page indicator 的 ListView.<br>项目地址：<a href=\"https://github.com/JorgeCastilloPrz/PagedHeadListView\" target=\"_blank\" rel=\"external\">https://github.com/JorgeCastilloPrz/PagedHeadListView</a>  </p>\n</li>\n<li><p>CustomSwipeListView<br>支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。<br>项目地址：<a href=\"https://github.com/xyczero/Android-CustomSwipeListView\" target=\"_blank\" rel=\"external\">https://github.com/xyczero/Android-CustomSwipeListView</a><br>Demo 地址：<a href=\"http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk\" target=\"_blank\" rel=\"external\">Download here</a>  </p>\n</li>\n<li><p>Pull-to-Refresh.Rentals-Android<br>提供一个简单可以自定义的下拉刷新实现，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a> 出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android</a>  </p>\n</li>\n<li><p>ScrollerCalendar<br>实现每行显示一年的 12 个月份的 RecyclerView 年历<br>项目地址：<a href=\"https://github.com/guanchao/ScrollerCalendar\" target=\"_blank\" rel=\"external\">https://github.com/guanchao/ScrollerCalendar</a>  </p>\n</li>\n<li><p>ExtractWordView<br>一个可以提取单词的 ListView,支持”放大镜”效果。<br>项目地址：<a href=\"https://github.com/jcodeing/ExtractWordView\" target=\"_blank\" rel=\"external\">https://github.com/jcodeing/ExtractWordView</a><br>Demo 地址：<a href=\"https://raw.githubusercontent.com/jcodeing/ExtractWordView/master/ExtractWordView-demo.apk\" target=\"_blank\" rel=\"external\">Download here</a>  </p>\n</li>\n<li><p>FlyRefresh<br>支持 ListView, GridView, RecyclerView, ScrollView 的下拉刷新<br>项目地址：<a href=\"https://github.com/race604/FlyRefresh\" target=\"_blank\" rel=\"external\">https://github.com/race604/FlyRefresh</a>  </p>\n</li>\n<li><p>MVCHelper<br>实现下拉刷新，滚动底部自动加载更多，分页加载，自动切换显示网络失败布局，暂无数据布局，支持任意 view，真正的 MVC 架构<br>支持切换主流下拉刷新框架 Android-PullToRefresh-Library,android-Ultra-Pull-To-Refresh-library，SwipeRefreshLayout<br>项目地址：<a href=\"https://github.com/LuckyJayce/MVCHelper\" target=\"_blank\" rel=\"external\">https://github.com/LuckyJayce/MVCHelper</a><br>Demo 地址：<a href=\"https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/LuckyJayce/MVCHelper/blob/master/raw/MVCHelper_Demo.apk?raw=true</a>  </p>\n</li>\n<li><p>RecyclerViewSwipeDismiss<br>支持滑动 Item 操作、点击展开、拖动排序、展开后拖动排序等特性的 RecyclerView<br>项目地址：<a href=\"https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.h6ah4i.android.example.advrecyclerview</a><br>视频：<a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=S7cSwMArjUQ\" target=\"_blank\" rel=\"external\">http://www.youtube.com/watch?feature=player_embedded&amp;v=S7cSwMArjUQ</a>  </p>\n</li>\n<li><p>WaterDropListView<br>模仿 iOS 下拉刷新“水滴”效果，支持下拉刷新和上拉加载<br>项目地址：<a href=\"https://github.com/THEONE10211024/WaterDropListView\" target=\"_blank\" rel=\"external\">https://github.com/THEONE10211024/WaterDropListView</a>  </p>\n</li>\n<li><p>PopupListView<br>實現ListItem 點擊後置頂並可顯示客製化添加的item的內部View 的ListView<br>项目地址：<a href=\"https://github.com/s8871404/PopupListView\" target=\"_blank\" rel=\"external\">https://github.com/s8871404/PopupListView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.baobomb.popuplistview_sample</a>  </p>\n</li>\n<li><p>CircleRefreshLayout<br>一个包含有趣的动画的自定义下拉刷新布局<br>项目地址：<a href=\"https://github.com/tuesda/CircleRefreshLayout\" target=\"_blank\" rel=\"external\">https://github.com/tuesda/CircleRefreshLayout</a>  </p>\n</li>\n<li><p>EasyRecyclerView<br>一款简单易用的EasyRecyclerView<br>1.提供EasyRecyclerView，不需要写太多RecyclerView的配置代码<br>2.提供好一个可以适配单布局和多布局的RecyclerViewAdapter<br>3.提供了分割线的实现类，只需要传入一个DrawableId<br>项目地址：<a href=\"https://github.com/CaMnter/EasyRecyclerView\" target=\"_blank\" rel=\"external\">https://github.com/CaMnter/EasyRecyclerView</a>  </p>\n</li>\n<li><p>CanRefresh<br>可适配所有视图的下拉刷新上拉加载，并支持各种风格<br>项目地址：<a href=\"https://github.com/canyinghao/CanRefresh\" target=\"_blank\" rel=\"external\">https://github.com/canyinghao/CanRefresh</a>  </p>\n</li>\n</ol>\n<h3 id=\"二、ActionBar\"><a href=\"#二、ActionBar\" class=\"headerlink\" title=\"二、ActionBar\"></a>二、ActionBar</h3><ol>\n<li><p>ActionBarSherlock<br>为 Android 所有版本提供统一的 ActionBar，解决 4.0 以下 ActionBar 的适配问题<br>项目地址：<a href=\"https://github.com/JakeWharton/ActionBarSherlock\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/ActionBarSherlock</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos</a><br>标签：兼容库, ActionBar  </p>\n</li>\n<li><p>ActionBar-PullToRefresh<br>下拉刷新，ActionBar 出现加载中提示<br>项目地址：<a href=\"https://github.com/chrisbanes/ActionBar-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/ActionBar-PullToRefresh</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock</a><br>APP 示例：Gmail，Google Plus，知乎等  </p>\n</li>\n<li><p>FadingActionBar<br>ListView 向下滚动逐渐显现的 ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/FadingActionBar\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/FadingActionBar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo</a><br>APP 示例：google music，知乎  </p>\n</li>\n<li><p>NotBoringActionBar<br>google music 下拉收缩的 ActionBar<br>项目地址：<a href=\"https://github.com/flavienlaurent/NotBoringActionBar\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/NotBoringActionBar</a><br>Demo 地址：<a href=\"http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/\" target=\"_blank\" rel=\"external\">http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/</a><br>APP 示例：Google 音乐  </p>\n</li>\n<li><p>RefreshActionItem<br>带进度显示和刷新按钮的 ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/RefreshActionItem\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/RefreshActionItem</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo</a><br>APP 示例：The New York Times，DevAppsDirect  </p>\n</li>\n<li><p>GlassActionBar<br>类似玻璃的有一定透明度的 ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/GlassActionBar\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/GlassActionBar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo</a><br>APP 示例：google music  </p>\n</li>\n</ol>\n<h3 id=\"三、Menu\"><a href=\"#三、Menu\" class=\"headerlink\" title=\"三、Menu\"></a>三、Menu</h3><ol>\n<li><p>MenuDrawer<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前 View 处于上下层，支持 Windows 边缘、ListView 边缘、ViewPager 变化划出菜单等。<br>项目地址：<a href=\"https://github.com/SimonVT/android-menudrawer\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/android-menudrawer</a><br>Demo 地址：<a href=\"http://simonvt.github.io/android-menudrawer/\" target=\"_blank\" rel=\"external\">http://simonvt.github.io/android-menudrawer/</a><br>APP 示例：Gmail、Google Music 等大部分 google app  </p>\n</li>\n<li><p>SlidingMenu<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单 zoom、scale、slide up 三种动画样式出现。与 MenuDrawer 相比而言，SlidingMenu 支持菜单动画样式出现，MenuDrawer 支持菜单 view 处于内容的上下层<br>项目地址：<a href=\"https://github.com/jfeinstein10/SlidingMenu\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/SlidingMenu</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/huxian99/SlidingMenu 源码解析\" target=\"_blank\" rel=\"external\">SlidingMenu</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.slidingmenu.example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.slidingmenu.example</a><br>APP 示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  </p>\n</li>\n<li><p>ArcMenu<br>支持类似 Path 的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单<br>项目地址：<a href=\"https://github.com/daCapricorn/ArcMenu\" target=\"_blank\" rel=\"external\">https://github.com/daCapricorn/ArcMenu</a><br><a href=\"https://dl.dropboxusercontent.com/u/11369687/preview1.png\" target=\"_blank\" rel=\"external\">https://dl.dropboxusercontent.com/u/11369687/preview1.png</a><br><a href=\"https://dl.dropboxusercontent.com/u/11369687/raymenu.png\" target=\"_blank\" rel=\"external\">https://dl.dropboxusercontent.com/u/11369687/raymenu.png</a><br>APP 示例：Path  </p>\n</li>\n<li><p>android-satellite-menu<br>类似 Path 的左下角动画旋转菜单<br>项目地址：<a href=\"https://github.com/siyamed/android-satellite-menu\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-satellite-menu</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true</a><br>APP 示例：Path  </p>\n</li>\n<li><p>radial-menu-widget<br>圆形菜单，支持二级菜单<br>项目地址：<a href=\"https://code.google.com/p/radial-menu-widget/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/radial-menu-widget/</a>  </p>\n</li>\n<li><p>Android Wheel Menu<br>圆形旋转选取菜单<br>项目地址：<a href=\"https://github.com/anupcowkur/Android-Wheel-Menu\" target=\"_blank\" rel=\"external\">https://github.com/anupcowkur/Android-Wheel-Menu</a>  </p>\n</li>\n<li><p>FoldingNavigationDrawer<br>滑动并以折叠方式打开菜单<br>项目地址：<a href=\"https://github.com/tibi1712/FoldingNavigationDrawer-Android\" target=\"_blank\" rel=\"external\">https://github.com/tibi1712/FoldingNavigationDrawer-Android</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.ptr.folding.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ptr.folding.sample</a>  </p>\n</li>\n<li><p>AndroidResideMenu<br>仿 Dribbble 的边栏菜单<br>项目地址：<a href=\"https://github.com/SpecialCyCi/AndroidResideMenu\" target=\"_blank\" rel=\"external\">https://github.com/SpecialCyCi/AndroidResideMenu</a>  </p>\n</li>\n<li><p>CircularFloatingActionMenu<br>一个可定制的圆形的浮动菜单控件，类似于 Path 的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。<br>项目地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu\" target=\"_blank\" rel=\"external\">https://github.com/oguzbilgener/CircularFloatingActionMenu</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/cpacm/CircularFloatingActionMenu 源码解析\" target=\"_blank\" rel=\"external\">CircularFloatingActionMenu</a><br>Demo 地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples\" target=\"_blank\" rel=\"external\">https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples</a>  </p>\n</li>\n<li><p>NavigationDrawerSI<br>Navigation Drawer 的一个简单实现，滑动并以折叠方式打开菜单<br>项目地址：<a href=\"https://github.com/mmBs/NavigationDrawerSI\" target=\"_blank\" rel=\"external\">https://github.com/mmBs/NavigationDrawerSI</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a><br>APP 示例：<a href=\"https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a>  </p>\n</li>\n<li><p>DragLayout<br>使用 support.v4 包下的 ViewDragHelper 实现 QQ5.0 侧滑<br>项目地址：<a href=\"https://github.com/BlueMor/DragLayout\" target=\"_blank\" rel=\"external\">https://github.com/BlueMor/DragLayout</a>  </p>\n</li>\n<li><p>LDrawer<br>Material Design 形式的展开折叠 Icon<br>项目地址：<a href=\"https://github.com/ikimuhendis/LDrawer\" target=\"_blank\" rel=\"external\">https://github.com/ikimuhendis/LDrawer</a>  </p>\n</li>\n<li><p>Floating Action Button<br>悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置<br>项目地址：<a href=\"https://github.com/shamanland/floating-action-button\" target=\"_blank\" rel=\"external\">https://github.com/shamanland/floating-action-button</a>  </p>\n</li>\n<li><p>Side-Menu.Android<br>分类侧滑菜单，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a> 出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Side-Menu.Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Side-Menu.Android</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/cpacm/Side Menu.Android 源码解析\" target=\"_blank\" rel=\"external\">Side-Menu.Android</a>  </p>\n</li>\n<li><p>Context-Menu.Android<br>可以方便快速集成漂亮带有动画效果的上下文菜单，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a>出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Context-Menu.Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Context-Menu.Android</a>  </p>\n</li>\n<li><p>Droppy<br>支持多种样式的下拉菜单<br>项目地址：<a href=\"https://github.com/shehabic/Droppy\" target=\"_blank\" rel=\"external\">https://github.com/shehabic/Droppy</a>  </p>\n</li>\n<li><p>MaterialDrawer<br>Material Design 风格的导航抽屉，提供简便且强大的定制功能<br>项目地址：<a href=\"https://github.com/mikepenz/MaterialDrawer\" target=\"_blank\" rel=\"external\">https://github.com/mikepenz/MaterialDrawer</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details？id=com.mikepenz.materialdrawer.app</a>  </p>\n</li>\n<li><p>SlideBottomPanel<br>底部划出菜单，滑动时背景图透明度渐变，支持嵌套 LiewView 或 ScrollView<br>项目地址：<a href=\"https://github.com/kingideayou/SlideBottomPanel\" target=\"_blank\" rel=\"external\">https://github.com/kingideayou/SlideBottomPanel</a><br>Demo 地址：<a href=\"https://github.com/kingideayou/SlideBottomPanel/raw/master/apk/SlideBottomPanelDemo.apk\" target=\"_blank\" rel=\"external\">SlideBottomPanelDemo 下载</a>  </p>\n</li>\n<li><p>FlowingDrawer<br>带手势流动效果侧滑菜单<br>项目地址：<a href=\"https://github.com/mxn21/FlowingDrawer\" target=\"_blank\" rel=\"external\">https://github.com/mxn21/FlowingDrawer</a></p>\n</li>\n</ol>\n<h3 id=\"四、ViewPager-、Gallery\"><a href=\"#四、ViewPager-、Gallery\" class=\"headerlink\" title=\"四、ViewPager 、Gallery\"></a>四、ViewPager 、Gallery</h3><ol>\n<li><p>AdvancedPagerSlidingTabStrip<br>一个完美兼容ViewPager的导航栏组件；可以自定义TabView；能动态加载Tab上的Icon图片； 能显示Tab的消息数量和提示小圆点。<br>项目地址：<a href=\"https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip\" target=\"_blank\" rel=\"external\">https://github.com/HomHomLin/AdvancedPagerSlidingTabStrip</a></p>\n</li>\n<li><p>ConvenientBanner<br>通用的广告栏控件，让你轻松实现广告头效果。支持无限循环，可以设置自动翻页和时间(而且非常智能，手指触碰则暂停翻页，离开自动开始翻页。你也可以设置在界面onPause的时候不进行自动翻页，onResume之后继续自动翻页)，并且提供多种翻页特效。 对比其他广告栏控件，大多都需要对源码进行改动才能加载网络图片，或者帮你集成不是你所需要的图片缓存库。而这个库能让有代码洁癖的你欢喜，不需要对库源码进行修改你就可以使用任何你喜欢的网络图片库进行配合。<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-ConvenientBanner\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-ConvenientBanner</a>  </p>\n</li>\n<li><p>Android-ViewPagerIndicator<br>配合 ViewPager 使用的 Indicator，支持各种位置和样式<br>项目地址：<a href=\"https://github.com/JakeWharton/Android-ViewPagerIndicator\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/Android-ViewPagerIndicator</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample</a><br>APP 示例：太多了。。  </p>\n</li>\n<li><p>JazzyViewPager<br>支持 Fragment 切换动画的 ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用 ViewPager 实现而已<br>项目地址：<a href=\"https://github.com/jfeinstein10/JazzyViewPager\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager</a><br>Demo 地址：<a href=\"https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>\n</li>\n<li><p>JellyViewPager<br>特殊切换动画的 ViewPager<br>项目地址：<a href=\"https://github.com/chiemy/JellyViewPager\" target=\"_blank\" rel=\"external\">https://github.com/chiemy/JellyViewPager</a>  </p>\n</li>\n<li><p>Android-DirectionalViewPager<br>支持横向和纵向(垂直)的 ViewPager<br>项目地址：<a href=\"https://github.com/JakeWharton/Android-DirectionalViewPager\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/Android-DirectionalViewPager</a><br>Demo 地址：<a href=\"https://market.android.com/details?id=com.directionalviewpager.sample\" target=\"_blank\" rel=\"external\">https://market.android.com/details?id=com.directionalviewpager.sample</a>  </p>\n</li>\n<li><p>FancyCoverFlow<br>支持 Item 切换动画效果的类似 Gallery View<br>项目地址：<a href=\"https://github.com/davidschreiber/FancyCoverFlow\" target=\"_blank\" rel=\"external\">https://github.com/davidschreiber/FancyCoverFlow</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples</a>  </p>\n</li>\n<li><p>AndroidTouchGallery<br>支持双击或双指缩放的 Gallery(用 ViewPager 实现)，相比下面的 PhotoView，在被放大后依然能滑到下一个 item，并且支持直接从 url 和文件中获取图片，<br>项目地址：<a href=\"https://github.com/Dreddik/AndroidTouchGallery\" target=\"_blank\" rel=\"external\">https://github.com/Dreddik/AndroidTouchGallery</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true</a><br>APP 示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  </p>\n</li>\n<li><p>Android Auto Scroll ViewPager<br>Android 自动滚动 轮播循环的 ViewPager<br>项目地址：<a href=\"https://github.com/Trinea/android-auto-scroll-view-pager\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/android-auto-scroll-view-pager</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/auto-scroll-view-pager/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/auto-scroll-view-pager/</a>  </p>\n</li>\n<li><p>Android PagerSlidingTabStrip<br>配合 ViewPager 使用的 Indicator，支持 ViewPager Scroll 时 Indicator 联动<br>项目地址：<a href=\"https://github.com/astuetz/PagerSlidingTabStrip\" target=\"_blank\" rel=\"external\">https://github.com/astuetz/PagerSlidingTabStrip</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/ayyb1988/PagerSlidingTabStrip 源码解析\" target=\"_blank\" rel=\"external\">Android PagerSlidingTabStrip</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample</a>  </p>\n</li>\n<li><p>ViewPager3D<br>ViewPager3D 效果<br>项目地址：<a href=\"https://github.com/inovex/ViewPager3D\" target=\"_blank\" rel=\"external\">https://github.com/inovex/ViewPager3D</a>  </p>\n</li>\n<li><p>AnimaTabsview<br>仿网易云音乐标签切换的动画,带透明小三角<br>项目地址：<a href=\"https://github.com/wuyexiong/transparent-over-animtabsview\" target=\"_blank\" rel=\"external\">https://github.com/wuyexiong/transparent-over-animtabsview</a><br>在线演示：<a href=\"http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html\" target=\"_blank\" rel=\"external\">http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html</a>  </p>\n</li>\n<li><p>LoopingViewPager<br>无限循环的 ViewPager<br>项目地址：<a href=\"https://github.com/imbryk/LoopingViewPager\" target=\"_blank\" rel=\"external\">https://github.com/imbryk/LoopingViewPager</a>  </p>\n</li>\n<li><p>android_page_curl<br>翻书卷曲效果<br>项目地址：<a href=\"https://github.com/harism/android_page_curl\" target=\"_blank\" rel=\"external\">https://github.com/harism/android_page_curl</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=iwu7P5PCpsw\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=iwu7P5PCpsw</a><br>APP 示例：iReader  </p>\n</li>\n<li><p>ViewPagerIndicator<br>简化并实现 android 的 TabHost 效果，顶部滑动 tab，引导页，支持自定义 tab 样式,自定义滑动块样式和位置,自定义切换 tab 的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动<br>项目地址：<a href=\"https://github.com/LuckyJayce/ViewPagerIndicator\" target=\"_blank\" rel=\"external\">https://github.com/LuckyJayce/ViewPagerIndicator</a>  </p>\n</li>\n<li><p>ScreenSlideIndicator<br>轻量级的圆形 Indicadtor，位置可以自由调整，不会对 ViewPager 产生任何影响。<br>项目地址：<a href=\"https://github.com/LyndonChin/Android-ScreenSlidePager\" target=\"_blank\" rel=\"external\">ScreenSlidePager</a>  </p>\n</li>\n<li><p>SmartTabLayout<br>自定义的 Tab title strip，基于 Google Samples 中的 android-SlidingTabBasic 项目，滑动时 Indicator 可平滑过渡。<br>项目地址：<a href=\"https://github.com/ogaclejapan/SmartTabLayout\" target=\"_blank\" rel=\"external\">https://github.com/ogaclejapan/SmartTabLayout</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo</a>  </p>\n</li>\n<li><p>AndroidImageSlider<br>Android 图片滑动<br>项目地址：<a href=\"https://github.com/daimajia/AndroidImageSlider\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidImageSlider</a><br>App示例：<a href=\"https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk</a>  </p>\n</li>\n<li><p>RecyclerViewPager<br>完全继承自 RecyclerView，可以自定义触发翻页的距离，可自定义翻页速度，支持垂直方向的 ViewPager，支持 Fragment。<br>项目地址：<a href=\"https://github.com/lsjwzh/RecyclerViewPager\" target=\"_blank\" rel=\"external\">RecyclerViewPager</a>  </p>\n</li>\n<li><p>CircleIndicator<br>轻量级ViewPager指示器,支持三种不同的模式<br>项目地址：<a href=\"https://github.com/THEONE10211024/CircleIndicator\" target=\"_blank\" rel=\"external\">CircleIndicator</a>  </p>\n</li>\n<li><p>EasySlidingTabs<br>一款简单、易用的滑动标签页<br>项目地址： <a href=\"https://github.com/CaMnter/EasySlidingTabs\" target=\"_blank\" rel=\"external\">https://github.com/CaMnter/EasySlidingTabs</a>  </p>\n</li>\n</ol>\n<h3 id=\"五、GridView\"><a href=\"#五、GridView\" class=\"headerlink\" title=\"五、GridView\"></a>五、GridView</h3><ol>\n<li><p>StaggeredGridView<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，并且跟 ListView 一样自带 View 缓存，继承自 ViewGroup<br>项目地址：<a href=\"https://github.com/maurycyw/StaggeredGridView\" target=\"_blank\" rel=\"external\">https://github.com/maurycyw/StaggeredGridView</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true</a><br>APP 示例：Pinterest 等  </p>\n</li>\n<li><p>AndroidStaggeredGrid<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，继承自 AbsListView<br>项目地址：<a href=\"https://github.com/etsy/AndroidStaggeredGrid\" target=\"_blank\" rel=\"external\">https://github.com/etsy/AndroidStaggeredGrid</a><br>APP 示例：Pinterest 等  </p>\n</li>\n<li><p>PinterestLikeAdapterView<br>允许非对齐行的 GridView，类似 Pinterest 的瀑布流，允许下拉刷新<br>项目地址：<a href=\"https://github.com/GDG-Korea/PinterestLikeAdapterView\" target=\"_blank\" rel=\"external\">https://github.com/GDG-Korea/PinterestLikeAdapterView</a><br>APP 示例：Pinterest 等  </p>\n</li>\n<li><p>DraggableGridView<br>Item 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的单屏效果，可屏幕自动上下滚动进行 Item 移动交换，多屏效果见下面 PagedDragDropGrid<br>项目地址：<a href=\"https://github.com/thquinn/DraggableGridView\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView</a><br>Demo 地址：<a href=\"https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a><br>也可以自定义item的宽高和每行的个数，并且修改交换逻辑，当移动到另一个item时就进行交换，删除滚动逻辑。<br>项目地址：<a href=\"https://github.com/andyken/DraggableGridView\" target=\"_blank\" rel=\"external\">DraggableGridView</a>  </p>\n</li>\n<li><p>StickyGridHeaders<br>GroupName 滑动到顶端时会固定不动直到另外一个 GroupName 到达顶端的 GridView<br>项目地址：<a href=\"https://github.com/TonicArtos/StickyGridHeaders\" target=\"_blank\" rel=\"external\">https://github.com/TonicArtos/StickyGridHeaders</a>  </p>\n</li>\n<li><p>PagedDragDropGrid<br>Item 可拖动交换位置、拖动删除的自定义控件，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行 Item 移动交换，可拖动进行删除，单屏效果见上面 DraggableGridView<br>项目地址：<a href=\"https://github.com/mrKlar/PagedDragDropGrid\" target=\"_blank\" rel=\"external\">https://github.com/mrKlar/PagedDragDropGrid</a><br>在线演示：<a href=\"http://youtu.be/FYTSRfthSuQ\" target=\"_blank\" rel=\"external\">http://youtu.be/FYTSRfthSuQ</a>  </p>\n</li>\n<li><p>Android-DraggableGridViewPager<br>Item 可拖动交换位置的 GridView，实际是自己继承 ViewGroup 实现，类似桌面的多屏效果，可屏幕自动左右滚动进行 Item 移动交换，单屏效果见上面 DraggableGridView<br>项目地址：<a href=\"https://github.com/zzhouj/Android-DraggableGridViewPager\" target=\"_blank\" rel=\"external\">https://github.com/zzhouj/Android-DraggableGridViewPager</a><br>Demo 地址：<a href=\"https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>TwoWayGridView<br>可横向滚动的 GridView<br>项目地址：<a href=\"https://github.com/jess-anders/two-way-gridview\" target=\"_blank\" rel=\"external\">https://github.com/jess-anders/two-way-gridview</a>  </p>\n</li>\n<li><p>PagingGridView<br>分页加载的 GridView。当滑动到 GridView 底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href=\"https://github.com/nicolasjafelle/PagingGridView\" target=\"_blank\" rel=\"external\">https://github.com/nicolasjafelle/PagingGridView</a>  </p>\n</li>\n<li><p>AsymmetricGridView<br>一个支持跨行和跨列可变 Item 大小的 GridView<br>项目地址：<a href=\"https://github.com/felipecsl/AsymmetricGridView\" target=\"_blank\" rel=\"external\">https://github.com/felipecsl/AsymmetricGridView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app</a>  </p>\n</li>\n<li><p>GridView with Header and Footer<br>和<code>ListView</code>一样带头部和底部的<code>GridView</code>，用法和<code>ListView</code>一样<br>项目地址：<a href=\"https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter</a>  </p>\n</li>\n</ol>\n<h3 id=\"六、ImageView\"><a href=\"#六、ImageView\" class=\"headerlink\" title=\"六、ImageView\"></a>六、ImageView</h3><ol>\n<li><p>PhotoView<br>支持双击或双指缩放的 ImageView，在 ViewPager 等 Scrolling view 中正常使用，相比上面的 AndroidTouchGallery，不仅支持 ViewPager，同时支持单个 ImageView<br>项目地址：<a href=\"https://github.com/chrisbanes/PhotoView\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/PhotoView</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/dkmeteor/PhotoView 源码解析\" target=\"_blank\" rel=\"external\">PhotoView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample</a><br>APP 示例：photup  </p>\n</li>\n<li><p>Fresco-ImageView<br>Fresco-ImageView是一种Android平台的图像控件，底层是对Fresco的封装，可以异步加载网络图片、项目资源和本地图片，并且支持双指缩放、图片的基本处理以及Fresco的所有特性。<br>项目地址：<a href=\"https://github.com/HomHomLin/FrescoImageView。\" target=\"_blank\" rel=\"external\">https://github.com/HomHomLin/FrescoImageView。</a>  </p>\n</li>\n<li><p>android-gif-drawable<br>支持 gif 显示的 view，用 jni 实现的，编译生成 so 库后直接 xml 定义 view 即可，而且本身不依赖于其他开源项目所以相对下面的 ImageViewEx 简单的多<br>项目地址：<a href=\"https://github.com/koral--/android-gif-drawable\" target=\"_blank\" rel=\"external\">https://github.com/koral--/android-gif-drawable</a>  </p>\n</li>\n<li><p>ImageViewEx<br>支持 Gif 显示的 ImageView，依赖很多，编译过程很繁琐<br>项目地址：<a href=\"https://github.com/frapontillo/ImageViewEx\" target=\"_blank\" rel=\"external\">https://github.com/frapontillo/ImageViewEx</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>RoundedImageView<br>带圆角的 ImageView<br>项目地址：<a href=\"https://github.com/vinc3m1/RoundedImageView\" target=\"_blank\" rel=\"external\">https://github.com/vinc3m1/RoundedImageView</a>  </p>\n</li>\n<li><p>SelectableRoundedImageView<br>ImageView 允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边<br>项目地址：<a href=\"https://github.com/pungrue26/SelectableRoundedImageView\" target=\"_blank\" rel=\"external\">https://github.com/pungrue26/SelectableRoundedImageView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.joooonho\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.joooonho</a>  </p>\n</li>\n<li><p>ColorArt<br>根据图片的均色设置背景色显示文字和图片，类似 itune11 中效果<br>项目地址：<a href=\"https://github.com/MichaelEvans/ColorArt\" target=\"_blank\" rel=\"external\">https://github.com/MichaelEvans/ColorArt</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>CircleImageView<br>圆形的 ImageView<br>项目地址：<a href=\"https://github.com/hdodenhof/CircleImageView\" target=\"_blank\" rel=\"external\">https://github.com/hdodenhof/CircleImageView</a>  </p>\n</li>\n<li><p>ImageViewZoom<br>支持放大和平移的 ImageView<br>项目地址：<a href=\"https://github.com/sephiroth74/ImageViewZoom\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/ImageViewZoom</a><br>APP 示例：<a href=\"https://play.google.com/store/apps/details?id=com.aviary.android.feather\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.aviary.android.feather</a>  </p>\n</li>\n<li><p>KenBurnsView<br>实现 Ken Burns effect 效果，达到身临其境效果的 ImageView<br>项目地址：<a href=\"https://github.com/flavioarfaria/KenBurnsView\" target=\"_blank\" rel=\"external\">https://github.com/flavioarfaria/KenBurnsView</a>  </p>\n</li>\n<li><p>CustomShapeImageView<br>各种形状的 ImageView, 相比上面的圆形 ImageView，多了更多形状<br>项目地址：<a href=\"https://github.com/MostafaGazar/CustomShapeImageView\" target=\"_blank\" rel=\"external\">https://github.com/MostafaGazar/CustomShapeImageView</a>  </p>\n</li>\n<li><p>Shape Image View<br>可以自定义各种形状的 ImageView, 并且支持边框<br>项目地址：<a href=\"https://github.com/siyamed/android-shape-imageview\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-shape-imageview</a>  </p>\n</li>\n<li><p>TextDrawable<br>一个用于生成带有文本或者字母的图片的轻量级库。扩展自 Drawable，因此可用于现有/自定义/网络等 ImageView 类，并且包含一个流接口用于创建 drawables 以及一个定制的 ColorGenerator<br>项目地址：<a href=\"https://github.com/amulyakhare/TextDrawable\" target=\"_blank\" rel=\"external\">https://github.com/amulyakhare/TextDrawable</a>  </p>\n</li>\n<li><p>android-smart-image-view<br>可从 URL 或 contact address book 加载图片的 ImageView，支持缓存<br>项目地址：<a href=\"https://github.com/loopj/android-smart-image-view\" target=\"_blank\" rel=\"external\">https://github.com/loopj/android-smart-image-view</a>  </p>\n</li>\n<li><p>PhotoView<br>支持双指/双击缩放的ImageView,支持从一个PhotoView缩放到另外一个PhotoView(点击图片放大预览),相对于其他PhototView有更加平滑的缩放,平移的动画,并且支持所有的ScaleType,可以作为普通的ImageView使用<br>项目地址：<a href=\"https://github.com/bm-x/PhotoView\" target=\"_blank\" rel=\"external\">https://github.com/bm-x/PhotoView</a>  </p>\n</li>\n</ol>\n<h3 id=\"七、ProgressBar\"><a href=\"#七、ProgressBar\" class=\"headerlink\" title=\"七、ProgressBar\"></a>七、ProgressBar</h3><ol>\n<li><p>SmoothProgressBar<br>水平进度条<br>项目地址：<a href=\"https://github.com/castorflex/SmoothProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/castorflex/SmoothProgressBar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample</a>  </p>\n</li>\n<li><p>MaterialProgessBar<br>Material Design 的进度条，支持 Android 4.0<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/MaterialProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/MaterialProgressBar</a><br>Demo 地址：<a href=\"https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/MaterialProgressBar/blob/master/dist/sample.apk</a>  </p>\n</li>\n<li><p>ProgressWheel<br>支持进度显示的圆形 ProgressBar<br>项目地址：<a href=\"https://github.com/Todd-Davies/ProgressWheel\" target=\"_blank\" rel=\"external\">https://github.com/Todd-Davies/ProgressWheel</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-square-progressbar<br>在图片周围显示进度<br>项目地址：<a href=\"https://github.com/mrwonderman/android-square-progressbar\" target=\"_blank\" rel=\"external\">https://github.com/mrwonderman/android-square-progressbar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example</a><br>APP 示例：square  </p>\n</li>\n<li><p>HoloCircularProgressBar<br>Android4.1 时钟 App 样式<br>项目地址：<a href=\"https://github.com/passsy/android-HoloCircularProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/passsy/android-HoloCircularProgressBar</a><br>APP 示例：Android4.1 时钟 App  </p>\n</li>\n<li><p>ProgressButton<br>通过图钉的不同状态显示进度<br>项目地址：<a href=\"https://github.com/f2prateek/progressbutton\" target=\"_blank\" rel=\"external\">https://github.com/f2prateek/progressbutton</a><br>文档介绍：<a href=\"http://f2prateek.com/progressbutton/\" target=\"_blank\" rel=\"external\">http://f2prateek.com/progressbutton/</a>  </p>\n</li>\n<li><p>GoogleProgressBar<br>类似 google 多个圆形卡片翻转的 progressBar<br>项目地址：<a href=\"https://github.com/jpardogo/GoogleProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/jpardogo/GoogleProgressBar</a>  </p>\n</li>\n<li><p>TH-ProgressButton<br>带圆形进度显示的按钮<br>项目地址：<a href=\"https://github.com/torryharris/TH-ProgressButton\" target=\"_blank\" rel=\"external\">https://github.com/torryharris/TH-ProgressButton</a>  </p>\n</li>\n<li><p>NumberProgressBar<br>带数字进度的进度条<br>项目地址：<a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/NumberProgressBar</a>  </p>\n</li>\n<li><p>CircularProgressDrawable<br>带圆形进度显示的进度条<br>项目地址：<a href=\"https://github.com/Sefford/CircularProgressDrawable\" target=\"_blank\" rel=\"external\">https://github.com/Sefford/CircularProgressDrawable</a>  </p>\n</li>\n<li><p>Android-RoundCornerProgressBar<br>Android 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。<br>项目地址：<a href=\"https://github.com/akexorcist/Android-RoundCornerProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/akexorcist/Android-RoundCornerProgressBar</a>  </p>\n</li>\n<li><p>circular-progress-button<br>带进度显示的 Button<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/circular-progress-button</a>  </p>\n</li>\n<li><p>WaveView<br>一个波纹效果的 View，可用来做 ProgressBar<br>项目地址：<a href=\"https://github.com/john990/WaveView\" target=\"_blank\" rel=\"external\">https://github.com/john990/WaveView</a><br>Demo 地址：<a href=\"https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk</a>  </p>\n</li>\n<li><p>MaterialLoadingProgressBar<br>抽取自 SwipeRefreshLayout 的 Material Design 进度指示器<br>项目地址：<a href=\"https://github.com/lsjwzh/MaterialLoadingProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/lsjwzh/MaterialLoadingProgressBar</a>  </p>\n</li>\n<li><p>MetaballLoading<br>A 2d metaball loading<br>项目地址：<a href=\"https://github.com/dodola/MetaballLoading\" target=\"_blank\" rel=\"external\">https://github.com/dodola/MetaballLoading</a></p>\n</li>\n<li><p>SectorProgressView<br>一个圆形或环形的进度显示控件，用圆中扇形的角度大小来表示进度信息<br>项目地址：<a href=\"https://github.com/timqi/SectorProgressView\" target=\"_blank\" rel=\"external\">https://github.com/timqi/SectorProgressView</a><br>Demo：<a href=\"https://github.com/timqi/SectorProgressView/raw/master/art/example.apk\" target=\"_blank\" rel=\"external\">apk download</a> </p>\n</li>\n<li><p>CircularFillableLoaders<br>一个可以用于闪屏或者其他地方加载的控件<br>项目地址：<a href=\"https://github.com/lopspower/CircularFillableLoaders\" target=\"_blank\" rel=\"external\">https://github.com/lopspower/CircularFillableLoaders</a><br>Demo地址：(<a href=\"https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mikhaellopez.circularfillableloaderssample</a>) </p>\n</li>\n<li><p>PinWheel<br>一个旋转的大风车Dialog<br>项目地址：<a href=\"https://github.com/codingWang/PinWheel\" target=\"_blank\" rel=\"external\">https://github.com/codingWang/PinWheel</a></p>\n</li>\n<li><p>ColorArcProgressBar<br>一个可定制的圆形进度条，通过xml参数配置可实现QQ健康中步数的弧形进度显示、仪盘表显示速度、最常见的下载进度条等功能。<br>项目地址：<a href=\"https://github.com/Shinelw/ColorArcProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/Shinelw/ColorArcProgressBar</a></p>\n</li>\n</ol>\n<h3 id=\"八、TextView\"><a href=\"#八、TextView\" class=\"headerlink\" title=\"八、TextView\"></a>八、TextView</h3><p>包括 TextView 及所有继承自 TextView 控件，如 EditText、Button、RadioButton  </p>\n<ol>\n<li><p>android-flowtextview<br>文字自动环绕其他 View 的 Layout<br>项目地址：<a href=\"https://github.com/deano2390/FlowTextView\" target=\"_blank\" rel=\"external\">https://github.com/deano2390/FlowTextView</a>  </p>\n</li>\n<li><p>Android Form EditText<br>验证输入合法性的编辑框，支持输入、英文、ip、url 等多种正则验证<br>项目地址：<a href=\"https://github.com/vekexasia/android-edittext-validator\" target=\"_blank\" rel=\"external\">https://github.com/vekexasia/android-edittext-validator</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample</a>  </p>\n</li>\n<li><p>Emojicon<br>支持 emojis 的 TextView 和 EditText<br>项目地址：<a href=\"https://github.com/rockerhieu/emojicon\" target=\"_blank\" rel=\"external\">https://github.com/rockerhieu/emojicon</a><br>文档介绍：<a href=\"http://rockerhieu.com/emojicon/\" target=\"_blank\" rel=\"external\">http://rockerhieu.com/emojicon/</a>  </p>\n</li>\n<li><p>android-circlebutton<br>Android 圆形按钮，实际实现是继承自 ImageView<br>项目地址：<a href=\"https://github.com/markushi/android-circlebutton\" target=\"_blank\" rel=\"external\">https://github.com/markushi/android-circlebutton</a><br>Demo 地址：<a href=\"https://github.com/markushi/android-circlebutton/blob/master/example/example.apk\" target=\"_blank\" rel=\"external\">https://github.com/markushi/android-circlebutton/blob/master/example/example.apk</a>  </p>\n</li>\n<li><p>Segmented Radio Buttons for Android<br>iOS’s segmented controls 的实现<br>项目地址：<a href=\"https://github.com/vinc3m1/android-segmentedradiobutton\" target=\"_blank\" rel=\"external\">https://github.com/vinc3m1/android-segmentedradiobutton</a><br>Demo 地址：<a href=\"https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a>  </p>\n</li>\n<li><p>Chips EditText Library<br>支持国家名字联想从而选择显示该国国旗的 EditText，实际就是通过 SpannableStringBuilder 实现<br>项目地址：<a href=\"https://github.com/kpbird/chips-edittext-library\" target=\"_blank\" rel=\"external\">https://github.com/kpbird/chips-edittext-library</a><br>Demo 地址：<a href=\"https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin\" target=\"_blank\" rel=\"external\">https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin</a>  </p>\n</li>\n<li><p>AutoFitTextView<br>可固定边界内容字体大小自适应的 TextView<br>项目地址：<a href=\"https://github.com/grantland/android-autofittextview\" target=\"_blank\" rel=\"external\">https://github.com/grantland/android-autofittextview</a>  </p>\n</li>\n<li><p>Shimmer for Android<br>文字发淡光的 TextView<br>项目地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Shimmer-android</a>  </p>\n</li>\n<li><p>Titanic<br>可以显示水位上升下降(不知道该怎么描述 囧)的 TextView<br>项目地址：<a href=\"https://github.com/RomainPiel/Titanic\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Titanic</a>  </p>\n</li>\n<li><p>android-iconify<br>提供带 Icon 的 TextView,Menu,Button 等<br>项目地址：<a href=\"https://github.com/JoanZapata/android-iconify\" target=\"_blank\" rel=\"external\">https://github.com/JoanZapata/android-iconify</a>  </p>\n</li>\n<li><p>Calligraphy<br>让我们在 android 开发中使用自定义字体变得更加简单<br>项目地址：<a href=\"https://github.com/chrisjenx/Calligraphy\" target=\"_blank\" rel=\"external\">https://github.com/chrisjenx/Calligraphy</a>  </p>\n</li>\n<li><p>CreditsRoll<br>类似星球大战字幕效果的 TextView<br>项目地址：<a href=\"https://github.com/frakbot/CreditsRoll\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/CreditsRoll</a>  </p>\n</li>\n<li><p>android-process-buton<br>带加载或提交进度的 Button<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/android-process-buton\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-process-buton</a>  </p>\n</li>\n<li><p>FButton<br>扁平化的 Button<br>项目地址：<a href=\"https://github.com/hoang8f/android-flat-button\" target=\"_blank\" rel=\"external\">https://github.com/hoang8f/android-flat-button</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>\n</li>\n<li><p>FloatingActionButton<br>一个类似 Android 版 Google+浮动功能按钮的控件，可以响应 ListView 的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。<br>项目地址：<a href=\"https://github.com/makovkastar/FloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/makovkastar/FloatingActionButton</a><br>Demo 地址：<a href=\"https://github.com/makovkastar/FloatingActionButton/tree/master/\" target=\"_blank\" rel=\"external\">https://github.com/makovkastar/FloatingActionButton/tree/master/</a>  </p>\n</li>\n<li><p>Android Saripaar<br>Android 表单验证<br>项目地址：<a href=\"https://github.com/ragunathjawahar/android-saripaar/\" target=\"_blank\" rel=\"external\">https://github.com/ragunathjawahar/android-saripaar/</a>  </p>\n</li>\n<li><p>JumpingBeans<br>文字像 Mexican beans 一样跳动<br>项目地址：<a href=\"https://github.com/frakbot/JumpingBeans\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/JumpingBeans</a><br>Demo 地址：<a href=\"http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo</a>  </p>\n</li>\n<li><p>FancyButtons<br>一个不用图片就可以帮助我们创建出漂亮按钮的库。<br>项目地址：<a href=\"https://github.com/medyo/fancybuttons\" target=\"_blank\" rel=\"external\">https://github.com/medyo/fancybuttons</a><br>Demo 地址：<a href=\"https://github.com/medyo/fancybuttons/tree/master/samples\" target=\"_blank\" rel=\"external\">https://github.com/medyo/fancybuttons/tree/master/samples</a>  </p>\n</li>\n<li><p>Android-RobotoTextView<br>一个实现了所有 Roboto 字体的 TextView，包括新出的 Roboto Slab 字体。<br>项目地址：<a href=\"https://github.com/johnkil/Android-RobotoTextView\" target=\"_blank\" rel=\"external\">https://github.com/johnkil/Android-RobotoTextView</a><br>Demo 地址：<a href=\"http://play.google.com/store/apps/details?id=com.devspark.robototextview\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=com.devspark.robototextview</a><br>Demo 项目：<a href=\"https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample\" target=\"_blank\" rel=\"external\">https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample</a>  </p>\n</li>\n<li><p>Android-WizardPager<br>一个表单向导库<br>项目地址：<a href=\"https://github.com/romannurik/android-wizardpager\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/android-wizardpager</a><br>Demo 项目：<a href=\"https://github.com/str4d/android-wizardpager/tree/textfield\" target=\"_blank\" rel=\"external\">https://github.com/str4d/android-wizardpager/tree/textfield</a>  </p>\n</li>\n<li><p>RippleView<br>一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮<br>项目地址：<a href=\"https://github.com/siriscac/RippleView\" target=\"_blank\" rel=\"external\">https://github.com/siriscac/RippleView</a><br>Demo 项目：<a href=\"https://github.com/siriscac/RippleView/tree/master/RippleViewExample\" target=\"_blank\" rel=\"external\">https://github.com/siriscac/RippleView/tree/master/RippleViewExample</a>  </p>\n</li>\n<li><p>RippleEffect<br>一个实现 Material Design Ripple 效果的库，支持 Android API 9+以上版本。<br>项目地址：<a href=\"https://github.com/traex/RippleEffect\" target=\"_blank\" rel=\"external\">https://github.com/traex/RippleEffect</a><br>Demo 项目：<a href=\"https://github.com/traex/RippleEffect/tree/master/sample\" target=\"_blank\" rel=\"external\">https://github.com/traex/RippleEffect/tree/master/sample</a>  </p>\n</li>\n<li><p>RippleCompat<br>使用易于移植的方式为UI控件实现波纹效应，可以适配控件原背景及Palette支持。api简单，可自定义效果，兼容至Android API 7+。<br>项目地址：<a href=\"https://github.com/desmond1121/RippleCompat\" target=\"_blank\" rel=\"external\">https://github.com/desmond1121/RippleCompat</a><br>Demo 项目：<a href=\"https://github.com/desmond1121/RippleCompat/tree/master/app\" target=\"_blank\" rel=\"external\">https://github.com/desmond1121/RippleCompat/tree/master/app</a></p>\n</li>\n<li><p>Android Floating Label Widgets<br>包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示<br>项目地址：<a href=\"https://github.com/marvinlabs/android-floatinglabel-widgets\" target=\"_blank\" rel=\"external\">https://github.com/marvinlabs/android-floatinglabel-widgets</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo</a><br>在线演示：<a href=\"http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be\" target=\"_blank\" rel=\"external\">http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be</a>  </p>\n</li>\n<li><p>MaterialEditText<br>EditText 的 Material Design 实现。包含 <a href=\"http://www.google.com/design/spec/components/text-fields.html\" target=\"_blank\" rel=\"external\">Google Material Design Spec</a>中的 UI 效果和一些新增特性。<br>项目地址：<a href=\"https://github.com/rengwuxian/MaterialEditText\" target=\"_blank\" rel=\"external\">https://github.com/rengwuxian/MaterialEditText</a>  </p>\n</li>\n<li><p>MaterialEditText<br>实现 <a href=\"http://www.google.com/design/spec/components/text-fields.html\" target=\"_blank\" rel=\"external\">Material Design</a> 中 Ripple 效果线条背景的 EditText。直接替换原生 EditText 即可集成。<br>项目地址：<a href=\"https://github.com/DreamingInCodeZH/MaterialEditText\" target=\"_blank\" rel=\"external\">https://github.com/DreamingInCodeZH/MaterialEditText</a>    </p>\n</li>\n<li><p>MultiActionTextView<br>可以分别给 TextView 中的某几个字设置点击事件的 TextView<br>项目地址：<a href=\"https://github.com/ajaysahani/MultiActionTextView\" target=\"_blank\" rel=\"external\">https://github.com/ajaysahani/MultiActionTextView</a>  </p>\n</li>\n<li><p>ToggleButton<br>状态切换的 Button，类似 iOS，用 View 实现<br>项目地址：<a href=\"https://github.com/zcweng/ToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/zcweng/ToggleButton</a>  </p>\n</li>\n<li><p>SwitchButton<br>状态切换的 Button，类似 iOS，拥有良好的用户界面<br>项目地址：<a href=\"https://github.com/kyleduo/SwitchButton\" target=\"_blank\" rel=\"external\">https://github.com/kyleduo/SwitchButton</a>  </p>\n</li>\n<li><p>SlideSwitch<br>状态切换的开关，可以设置为类似 IOS 的圆形，也可以设置为矩形，用 View 实现<br>项目地址：<a href=\"https://github.com/Leaking/SlideSwitch\" target=\"_blank\" rel=\"external\">https://github.com/Leaking/SlideSwitch</a>  </p>\n</li>\n<li><p>ExpandableTextView<br>可展开和收缩内容的 TextView。<br>项目地址：<a href=\"https://github.com/Manabu-GT/ExpandableTextView\" target=\"_blank\" rel=\"external\">https://github.com/Manabu-GT/ExpandableTextView</a>  </p>\n</li>\n<li><p>TagCloudView(支持 SingleLine 模式的标签云)<br>标签云效果，只需要一行代码即可设置为 SingleLine 模式，轻松实现知乎问题话题列表效果。SingleLine 模式时末尾文字及图片可自定义。<br>项目地址：<a href=\"https://github.com/kingideayou/TagCloudView\" target=\"_blank\" rel=\"external\">https://github.com/kingideayou/TagCloudView</a><br>示例APK地址：<a href=\"https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk\" target=\"_blank\" rel=\"external\">https://github.com/kingideayou/TagCloudView/raw/master/apk/Demo.apk</a><br>APP示例：知乎  </p>\n</li>\n<li><p>BubbleTextView<br>Android Bubble View<br>项目地址：<a href=\"https://github.com/dupengtao/BubbleTextView\" target=\"_blank\" rel=\"external\">https://github.com/dupengtao/BubbleTextView</a> </p>\n</li>\n<li><p>shadow-layout<br>Android Shadow Layout<br>解决了<code>CardView</code>：1.不能画圆的阴影。2.设置阴影的位置。3.设置阴影颜色。<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/shadow-layout\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/shadow-layout</a></p>\n</li>\n</ol>\n<h3 id=\"九、ScrollView\"><a href=\"#九、ScrollView\" class=\"headerlink\" title=\"九、ScrollView\"></a>九、ScrollView</h3><ol>\n<li><p>Discrollview<br>支持滚动时 Item 淡入淡出，平移，缩放效果的 ScrollView<br>项目地址：<a href=\"https://github.com/flavienlaurent/discrollview\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/discrollview</a><br>Demo 地址：<a href=\"https://github.com/flavienlaurent/discrollview/raw/master/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/discrollview/raw/master/sample.apk</a>  </p>\n</li>\n<li><p>PullScrollView<br>仿照新浪微博 Android 客户端个人中心的 ScrollView，下拉背景伸缩回弹效果。<br>项目地址：<a href=\"https://github.com/MarkMjw/PullScrollView\" target=\"_blank\" rel=\"external\">https://github.com/MarkMjw/PullScrollView</a>  </p>\n</li>\n<li><p>ArcLayout<br>一个非常简单的弧布局库<br>项目地址：<a href=\"https://github.com/ogaclejapan/ArcLayout\" target=\"_blank\" rel=\"external\">https://github.com/ogaclejapan/ArcLayout</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo</a>  </p>\n</li>\n<li><p>ParallaxScrollView<br>支持视差滚动的 ScrollView ，背景图片的滚动速度小于 ScrollView 中子控件的滚动速度<br>项目地址：<a href=\"https://github.com/chrisjenx/ParallaxScrollView\" target=\"_blank\" rel=\"external\">https://github.com/chrisjenx/ParallaxScrollView</a><br>Demo 地址：<a href=\"http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk\" target=\"_blank\" rel=\"external\">http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk</a>  </p>\n</li>\n<li><p>AKParallax-Android<br>支持视差滚动的 ScrollView<br>项目地址：<a href=\"https://github.com/ideaismobile/AKParallax-Android\" target=\"_blank\" rel=\"external\">https://github.com/ideaismobile/AKParallax-Android</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample</a>  </p>\n</li>\n<li><p>Android-ObservableScrollView<br>监听滚动视图滚动事件的库，帮助与 Toolbar 的交互动效处理与 Material Design 的实现<br>项目地址：<a href=\"https://github.com/ksoichiro/Android-ObservableScrollView\" target=\"_blank\" rel=\"external\">https://github.com/ksoichiro/Android-ObservableScrollView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2</a>  </p>\n</li>\n<li><p>OverScrollView<br>有弹性的 ScrollView，实现了当手指滑动到 ScrollView 的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹<br>项目地址：<a href=\"https://github.com/EverythingMe/OverScrollView\" target=\"_blank\" rel=\"external\">https://github.com/EverythingMe/OverScrollView</a>  </p>\n</li>\n</ol>\n<h3 id=\"十、TimeView\"><a href=\"#十、TimeView\" class=\"headerlink\" title=\"十、TimeView\"></a>十、TimeView</h3><p>包括 TimePicker、DatePicker、CalendarView、Clock 等时间相关控件  </p>\n<ol>\n<li><p>android-times-square<br>Android 日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示<br>项目地址：<a href=\"https://github.com/square/android-times-square\" target=\"_blank\" rel=\"external\">https://github.com/square/android-times-square</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-calendar-card<br>日历<br>项目地址：<a href=\"https://github.com/kenumir/android-calendar-card\" target=\"_blank\" rel=\"external\">https://github.com/kenumir/android-calendar-card</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.wt.calendarcardsample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.wt.calendarcardsample</a>  </p>\n</li>\n<li><p>AndroidWheel<br>Android Wheel 支持城市、多种日期时间、密码、图片<br>项目地址：<a href=\"https://code.google.com/p/android-wheel/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-wheel/</a>  </p>\n</li>\n<li><p>GoogleDateTimePickers<br>时间选择部件<br>项目地址：<a href=\"https://github.com/Mirkoddd/GoogleDateTimePickers\" target=\"_blank\" rel=\"external\">https://github.com/Mirkoddd/GoogleDateTimePickers</a><br>文档介绍：<a href=\"https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it</a>  </p>\n</li>\n<li><p>DateTimePicker<br>日期选择部件(Google Agenda 的样式风格)<br>项目地址：<a href=\"https://github.com/flavienlaurent/datetimepicker\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/datetimepicker</a><br>Demo 地址：<a href=\"https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk</a>  </p>\n</li>\n<li><p>android-betterpickers<br>提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以 DialogFragment 的弹窗选择<br>项目地址：<a href=\"https://github.com/derekbrameyer/android-betterpickers\" target=\"_blank\" rel=\"external\">https://github.com/derekbrameyer/android-betterpickers</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample</a>  </p>\n</li>\n<li><p>Android Week View<br>日期控件，支持周，天视图，支持自定义样式<br>项目地址：<a href=\"https://github.com/alamkanak/Android-Week-View\" target=\"_blank\" rel=\"external\">https://github.com/alamkanak/Android-Week-View</a>  </p>\n</li>\n<li><p>PickerView<br>仿 iOS 的 PickerView 控件，有时间选择和选项选择并支持一二三级联动效果，TimePopupWindow 时间选择器，支持年月日时分，年月日，时分等格式；OptionsPopupWindow 选项选择器，支持一，二，三级选项选择，并且可以设置是否联动<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-PickerView\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-PickerView</a>  </p>\n</li>\n<li><p>CountdownView<br>Android 倒计时控件，使用Canvas绘制，支持多种样式<br>项目地址：<a href=\"https://github.com/iwgang/CountdownView\" target=\"_blank\" rel=\"external\">https://github.com/iwgang/CountdownView</a>  </p>\n</li>\n</ol>\n<h3 id=\"十一、TipView\"><a href=\"#十一、TipView\" class=\"headerlink\" title=\"十一、TipView\"></a>十一、TipView</h3><p>包括 Toast、角标、UndoBar 等提示性控件  </p>\n<ol>\n<li><p>SVProgressHUD<br>SVProgressHUD For Android 精仿iOS的提示库 SVProgressHUD，api也几乎一样。<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-SVProgressHUD\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-SVProgressHUD</a>  </p>\n</li>\n<li><p>Crouton<br>丰富样式的 Toast，允许 alert、comfirm、info 样式及点击消失样式，允许设置 Toast 显示时间，允许自定义 View。 本文 32. SuperToasts 为其扩展版<br>项目地址：<a href=\"https://github.com/keyboardsurfer/Crouton\" target=\"_blank\" rel=\"external\">https://github.com/keyboardsurfer/Crouton</a><br>Demo 地址：<a href=\"http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton</a>  </p>\n</li>\n<li><p>supertooltips<br>带动画效果的 Tips 显示<br>项目地址：<a href=\"https://github.com/nhaarman/supertooltips\" target=\"_blank\" rel=\"external\">https://github.com/nhaarman/supertooltips</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.haarman.supertooltips\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.haarman.supertooltips</a>  </p>\n</li>\n<li><p>Android ViewBadger<br>为其他 View 添加角标（消息圆点）等<br>项目地址：<a href=\"https://github.com/jgilfelt/android-viewbadger\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-viewbadger</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true</a>  </p>\n</li>\n<li><p>SuperToasts<br>更丰富样式的 toast，支持 Button、Progress、Horizontal Progress 样式、支持进入动画、支持撤销及其动画设置<br>项目地址：<a href=\"https://github.com/JohnPersano/SuperToasts\" target=\"_blank\" rel=\"external\">https://github.com/JohnPersano/SuperToasts</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.supertoastsdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.supertoastsdemo</a>  </p>\n</li>\n<li><p>UndoBar<br>屏幕底部显示取消或是确认的 PopupWindows<br>项目地址：<a href=\"https://github.com/soarcn/UndoBar\" target=\"_blank\" rel=\"external\">https://github.com/soarcn/UndoBar</a>  </p>\n</li>\n<li><p>UndoBar<br>屏幕底部显示取消或是确认某操作<br>项目地址：<a href=\"https://github.com/jenzz/Android-UndoBar\" target=\"_blank\" rel=\"external\">https://github.com/jenzz/Android-UndoBar</a>  </p>\n</li>\n<li><p>Android-ActionItemBadge<br>可以在 ActionBar 的 MenuItem 上显示一个小角标<br>项目地址：<a href=\"https://github.com/mikepenz/Android-ActionItemBadge\" target=\"_blank\" rel=\"external\">https://github.com/mikepenz/Android-ActionItemBadge</a>  </p>\n</li>\n<li><p>SnackBar<br>Material Design 风格的 Toast，类似 Google inbox 中的提示<br>项目地址：<a href=\"https://github.com/MrEngineer13/SnackBar\" target=\"_blank\" rel=\"external\">https://github.com/MrEngineer13/SnackBar</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample</a>  </p>\n</li>\n<li><p>HeadsUp<br>在 2.3 上使用 android  5.0 的 HeadsUp 效果<br>项目地址：<a href=\"https://github.com/zzz40500/HeadsUp\" target=\"_blank\" rel=\"external\">https://github.com/zzz40500/HeadsUp</a>  </p>\n</li>\n</ol>\n<h3 id=\"十二、FlipView\"><a href=\"#十二、FlipView\" class=\"headerlink\" title=\"十二、FlipView\"></a>十二、FlipView</h3><ol>\n<li><p>android-flip<br>类似 Flipboard 翻转动画的实现<br>项目地址：<a href=\"https://github.com/openaphid/android-flip\" target=\"_blank\" rel=\"external\">https://github.com/openaphid/android-flip</a><br>Demo 地址：<a href=\"https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true</a><br>APP 示例：flipboard  </p>\n</li>\n<li><p>FlipImageView<br>支持 x、y、z 及动画选择的翻转动画的实现<br>项目地址：<a href=\"https://github.com/castorflex/FlipImageView\" target=\"_blank\" rel=\"external\">https://github.com/castorflex/FlipImageView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview</a>  </p>\n</li>\n<li><p>FoldableLayout<br>Flip 翻转效果的 ListView，目前还不支持 ListView 缓存<br>项目地址：<a href=\"https://github.com/alexvasilkov/FoldableLayout\" target=\"_blank\" rel=\"external\">https://github.com/alexvasilkov/FoldableLayout</a><br>Demo 地址：<a href=\"http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample</a>  </p>\n</li>\n<li><p>FlipViewPager.Draco<br>Flip 翻转效果的 ViewPager<br>项目地址：<a href=\"https://github.com/Yalantis/FlipViewPager.Draco\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/FlipViewPager.Draco</a>  </p>\n</li>\n</ol>\n<h3 id=\"十三、ColorPickView\"><a href=\"#十三、ColorPickView\" class=\"headerlink\" title=\"十三、ColorPickView\"></a>十三、ColorPickView</h3><ol>\n<li><p>ColorPickerView<br>颜色选择器，支持 PopupWindows 或新的 Activity 中打开<br>项目地址：<a href=\"https://code.google.com/p/color-picker-view/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/color-picker-view/</a>  </p>\n</li>\n<li><p>HoloColorPicker<br>颜色选择器<br>项目地址：<a href=\"https://github.com/LarsWerkman/HoloColorPicker\" target=\"_blank\" rel=\"external\">https://github.com/LarsWerkman/HoloColorPicker</a><br>Demo 地址：<a href=\"https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit\" target=\"_blank\" rel=\"external\">https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit</a>  </p>\n</li>\n<li><p>ColorPickerPreference<br>颜色选择器<br>项目地址：<a href=\"https://github.com/attenzione/android-ColorPickerPreference\" target=\"_blank\" rel=\"external\">https://github.com/attenzione/android-ColorPickerPreference</a>  </p>\n</li>\n<li><p>ColorPicker<br>颜色选择器（Google Agenda 中的样式风格）<br>项目地址：<a href=\"https://github.com/flavienlaurent/colorpicker\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/colorpicker</a><br>Demo 地址：<a href=\"https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk</a>  </p>\n</li>\n</ol>\n<h3 id=\"十四、GraphView\"><a href=\"#十四、GraphView\" class=\"headerlink\" title=\"十四、GraphView\"></a>十四、GraphView</h3><ol>\n<li><p>MPAndroidChart<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图等；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表<br>项目地址：<a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample</a><br>Demo 项目：<a href=\"https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=ufaK_Hd6BpI\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=ufaK_Hd6BpI</a>  </p>\n</li>\n<li><p>achartengine<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合<br>项目地址：<a href=\"https://code.google.com/p/achartengine/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/achartengine/</a><br>官网网址：<a href=\"http://www.achartengine.org/\" target=\"_blank\" rel=\"external\">http://www.achartengine.org/</a><br>APP 示例：Wordpress Android，Google Analytics  </p>\n</li>\n<li><p>GraphView<br>绘制图表和曲线图的 View，可用于 Android 上的曲形图、柱状图、波浪图展示<br>项目地址：<a href=\"https://github.com/jjoe64/GraphView\" target=\"_blank\" rel=\"external\">https://github.com/jjoe64/GraphView</a><br>Demo 项目：<a href=\"https://github.com/jjoe64/GraphView-Demos\" target=\"_blank\" rel=\"external\">https://github.com/jjoe64/GraphView-Demos</a><br>APP 示例：Wordpress Android，Google Analytics  </p>\n</li>\n<li><p>HoloGraphLibrary<br>绘制现状图、柱状图、饼状图<br>项目地址：<a href=\"https://bitbucket.org/danielnadeau/holographlibrary/src\" target=\"_blank\" rel=\"external\">https://bitbucket.org/danielnadeau/holographlibrary/src</a><br>文档介绍：<a href=\"https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home\" target=\"_blank\" rel=\"external\">https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home</a>  </p>\n</li>\n<li><p>XCL-Charts<br>XCL-Charts 基于原生的 Canvas 来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持 3D/非 3D 柱形图(Bar Chart)、3D/非 3D 饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。<br>项目地址：<a href=\"https://github.com/xcltapestry/XCL-Charts\" target=\"_blank\" rel=\"external\">https://github.com/xcltapestry/XCL-Charts</a><br>Demo 地址：<a href=\"https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>EazeGraph<br>Android 图表库，支持柱状图、分层柱状图、饼状图、线性图<br>项目地址：<a href=\"https://github.com/blackfizz/EazeGraph\" target=\"_blank\" rel=\"external\">https://github.com/blackfizz/EazeGraph</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=org.eazegraph.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.eazegraph.app</a>  </p>\n</li>\n<li><p>WilliamChart<br>绘制图表的库，支持 LineChartView、BarChartView 和 StackBarChartView 三中图表类型，并且支持 Android 2.2 及以上的系统。<br>项目地址：<a href=\"https://github.com/diogobernardino/WilliamChart\" target=\"_blank\" rel=\"external\">https://github.com/diogobernardino/WilliamChart</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.db.williamchartdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.db.williamchartdemo</a><br>Demo 项目：<a href=\"https://github.com/diogobernardino/WilliamChart/tree/master/sample\" target=\"_blank\" rel=\"external\">https://github.com/diogobernardino/WilliamChart/tree/master/sample</a>  </p>\n</li>\n<li><p>HelloCharts for Android<br>支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上<br>项目地址：<a href=\"https://github.com/lecho/hellocharts-android\" target=\"_blank\" rel=\"external\">https://github.com/lecho/hellocharts-android</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=xbSBjyjH2SY\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=xbSBjyjH2SY</a>  </p>\n</li>\n<li><p>PieChartView<br>比较简单直接的饼状统计报表图，使用方便，设置相应的属性参数即可<br>项目地址：<a href=\"https://github.com/wuseal/PieChartView\" target=\"_blank\" rel=\"external\">https://github.com/wuseal/PieChartView</a><br>Demo 地址：<a href=\"https://github.com/wuseal/PieChartView\" target=\"_blank\" rel=\"external\">https://github.com/wuseal/PieChartView</a>  </p>\n</li>\n</ol>\n<h3 id=\"十五、UI-Style\"><a href=\"#十五、UI-Style\" class=\"headerlink\" title=\"十五、UI Style\"></a>十五、UI Style</h3><p>不同样式的系统 UI 风格，如 IOS、Bootstrap 风格  </p>\n<ol>\n<li><p>UITableView<br>ios 风格控件，包括 Button、ListView、TableView<br>项目地址：<a href=\"https://github.com/thiagolocatelli/android-uitableview\" target=\"_blank\" rel=\"external\">https://github.com/thiagolocatelli/android-uitableview</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>ATableView<br>ios 风格控件<br>项目地址：<a href=\"https://github.com/dmacosta/ATableView\" target=\"_blank\" rel=\"external\">https://github.com/dmacosta/ATableView</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo</a>  </p>\n</li>\n<li><p>Cards-UI<br>卡片式 View，支持单个卡片，item 为卡片的 ListView<br>项目地址：<a href=\"https://github.com/afollestad/Cards-UI\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/Cards-UI</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>cardslib<br>卡片式 View，支持单个卡片，item 为卡片的 ListView 和 GridView<br>项目地址：<a href=\"https://github.com/gabrielemariotti/cardslib\" target=\"_blank\" rel=\"external\">https://github.com/gabrielemariotti/cardslib</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo</a>  </p>\n</li>\n<li><p>Android-Bootstrap<br>Bootstrap 风格的按钮<br>项目地址：<a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\" target=\"_blank\" rel=\"external\">https://github.com/Bearded-Hen/Android-Bootstrap</a>  </p>\n</li>\n<li><p>Material Design Android Library<br>Android L 中 Material Design 风格的组件适配到 Android 2.2+<br>项目地址：<a href=\"https://github.com/navasmdc/MaterialDesignLibrary\" target=\"_blank\" rel=\"external\">https://github.com/navasmdc/MaterialDesignLibrary</a>  </p>\n</li>\n<li><p>Android FlatUI<br>Android 扁平化风格的组件，支持一些自定义样式<br>项目地址：<a href=\"https://github.com/eluleci/FlatUI\" target=\"_blank\" rel=\"external\">https://github.com/eluleci/FlatUI</a>  </p>\n</li>\n<li><p>cheesesquare<br>全新 Android 设计库演示 Demo，包括 Collapsing Toolbar、FloatingActionButton、View anchoring、NavigationView、Snackbar<br>项目地址：<a href=\"https://github.com/chrisbanes/cheesesquare\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/cheesesquare</a>  </p>\n</li>\n</ol>\n<h3 id=\"十六、其他\"><a href=\"#十六、其他\" class=\"headerlink\" title=\"十六、其他\"></a>十六、其他</h3><ol>\n<li><p>SnappingStepper<br>一种漂亮的UI控件，能更灵活的控制数字的增减。可用于购物车商品数量控制。<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-SnappingStepper\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-SnappingStepper</a>  </p>\n</li>\n<li><p>SwipeBackLayout<br>左右或向上滑动返回的 Activity<br>项目地址：<a href=\"https://github.com/Issacw0ng/SwipeBackLayout\" target=\"_blank\" rel=\"external\">https://github.com/Issacw0ng/SwipeBackLayout</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo</a><br>APP 示例：知乎  </p>\n</li>\n<li><p>android-styled-dialogs<br>可自定义样式的 dialog，默认与 Holo 主题样式一致，在 Android2.2 以上同一样式<br>项目地址：<a href=\"https://github.com/inmite/android-styled-dialogs\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-styled-dialogs</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>Android Sliding Up Panel<br>可拖动的 View，能在当前 Activity 上扶起一个可拖动的 Panel<br>项目地址：<a href=\"https://github.com/umano/AndroidSlidingUpPanel\" target=\"_blank\" rel=\"external\">https://github.com/umano/AndroidSlidingUpPanel</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.sothree.umano\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.sothree.umano</a><br>APP 示例：Google Music 精简播放栏  </p>\n</li>\n<li><p>TableFixHeaders<br>第一列固定的 Table<br>项目地址：<a href=\"https://github.com/InQBarna/TableFixHeaders\" target=\"_blank\" rel=\"external\">https://github.com/InQBarna/TableFixHeaders</a><br>Demo 地址：<a href=\"http://bit.ly/13buAIq\" target=\"_blank\" rel=\"external\">http://bit.ly/13buAIq</a>  </p>\n</li>\n<li><p>Inscription<br>可用于展示应用 change 和 new feature 信息<br>项目地址：<a href=\"https://github.com/MartinvanZ/Inscription\" target=\"_blank\" rel=\"external\">https://github.com/MartinvanZ/Inscription</a>  </p>\n</li>\n<li><p>ActivityTransition<br>Activity 切换动画，包括渐变、flip、某个位置进入等等<br>项目地址：<a href=\"https://github.com/ophilbert/ActivityTransition\" target=\"_blank\" rel=\"external\">https://github.com/ophilbert/ActivityTransition</a><br>文档介绍：<a href=\"https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>\n</li>\n<li><p>EasyAndroidAnimations<br>针对 View 的各种动画<br>项目地址：<a href=\"https://github.com/2359media/EasyAndroidAnimations\" target=\"_blank\" rel=\"external\">https://github.com/2359media/EasyAndroidAnimations</a>  </p>\n</li>\n<li><p>ViewAnimation<br>对android view 动画进行封装,实现起更简单，自带三种常见运动路径，其他的可自定义<br>项目地址：<a href=\"https://github.com/guohuanwen/ViewAniamtion\" target=\"_blank\" rel=\"external\">https://github.com/guohuanwen/ViewAniamtion</a><br>APP 示例：QQ名片圈圈效果  </p>\n</li>\n<li><p>AndroidLoadingAnimation<br>多种android加载动画<br>项目地址：<a href=\"https://github.com/guohuanwen/AndroidLoadingAnimation\" target=\"_blank\" rel=\"external\">https://github.com/guohuanwen/AndroidLoadingAnimation</a>  </p>\n</li>\n<li><p>android-lockpattern<br>Android 的图案密码解锁<br>项目地址：<a href=\"https://code.google.com/p/android-lockpattern/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-lockpattern/</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/爱早起/Android Lock Pattern 源码解析\" target=\"_blank\" rel=\"external\">android-lockpattern</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo</a><br>文档介绍：<a href=\"https://code.google.com/p/android-lockpattern/wiki/QuickUse\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-lockpattern/wiki/QuickUse</a><br>APP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  </p>\n</li>\n<li><p>PatternLock<br>另一个 Android 图案解锁库<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/PatternLock\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/PatternLock</a><br>Demo 地址：<a href=\"https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk</a><br>APP 示例：Android 开机的图案密码解锁，支付宝的密码解锁  </p>\n</li>\n<li><p>RangeBar<br>类似于 SeekBar，不同的是可以选择一个范围内的值而不是单个值<br>项目地址：<a href=\"https://github.com/edmodo/range-bar\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/range-bar</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>ChromeView<br>利用 Chromium 实现的 WebView，解决各个 Android 版本 WebView 不同的问题，同时利用最新 Chrome 代码<br>项目地址：<a href=\"https://github.com/pwnall/chromeview\" target=\"_blank\" rel=\"external\">https://github.com/pwnall/chromeview</a>  </p>\n</li>\n<li><p>android-phased-seek-bar<br>支持预先定义状态的 SeekBar<br>项目地址：<a href=\"https://github.com/ademar111190/android-phased-seek-bar\" target=\"_blank\" rel=\"external\">https://github.com/ademar111190/android-phased-seek-bar</a>  </p>\n</li>\n<li><p>Android Slider Preference Library<br>可添加到设置中的基于对话框的 RankBar 小部件<br>项目地址：<a href=\"https://github.com/jayschwa/AndroidSliderPreference\" target=\"_blank\" rel=\"external\">https://github.com/jayschwa/AndroidSliderPreference</a>  </p>\n</li>\n<li><p>ShowcaseView library<br>用于高亮显示应用程序的特定部分，从而突出突出重点<br>项目地址：<a href=\"https://github.com/amlcurran/ShowcaseView\" target=\"_blank\" rel=\"external\">https://github.com/amlcurran/ShowcaseView</a>  </p>\n</li>\n<li><p>android-segmented-control<br>Android 上的 Segmented Controls，相当于 RadioButton 组<br>项目地址：<a href=\"https://github.com/hoang8f/android-segmented-control\" target=\"_blank\" rel=\"external\">https://github.com/hoang8f/android-segmented-control</a>  </p>\n</li>\n<li><p>Swipeable Cards<br>类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢<br>项目地址：<a href=\"https://github.com/kikoso/Swipeable-Cards\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/Swipeable-Cards</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>\n</li>\n<li><p>EdgeEffectOverride<br>改变 ScrollView, ListView, ExpandableListView, GridView, ViewPager 等滚动控件滚动到边缘的颜色效果<br>项目地址：<a href=\"https://github.com/AndroidAlliance/EdgeEffectOverride\" target=\"_blank\" rel=\"external\">https://github.com/AndroidAlliance/EdgeEffectOverride</a>  </p>\n</li>\n<li><p>android-pinned-header-listviews<br>使 ExpandListView 的 Group 滑动到顶端时会固定不动直到另外一个 Group 到达顶端<br>项目地址：<a href=\"https://github.com/rtyley/android-pinned-header-listviews\" target=\"_blank\" rel=\"external\">https://github.com/rtyley/android-pinned-header-listviews</a>  </p>\n</li>\n<li><p>AndroidSwipeLayout<br>滑动 Layout，支持单个 View，ListView，GridView<br>项目地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidSwipeLayout</a><br>Demo 地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk\" target=\"_blank\" rel=\"external\">Download Demo</a>  </p>\n</li>\n<li><p>DynamicCardLayout<br>在 Android 中实现的类似 Windows8 的瓷片布局<br>项目地址：<a href=\"https://github.com/dodola/DynamicCardLayout\" target=\"_blank\" rel=\"external\">https://github.com/dodola/DynamicCardLayout</a>  </p>\n</li>\n<li><p>Emoticons-Keyboard<br>带表情情符号的自定义键盘<br>项目地址：<a href=\"https://github.com/chiragjain/Emoticons-Keyboard\" target=\"_blank\" rel=\"external\">https://github.com/chiragjain/Emoticons-Keyboard</a>  </p>\n</li>\n<li><p>Android Typeface Helper<br>可以帮你轻松实现自定义字体的库<br>项目地址：<a href=\"https://github.com/norbsoft/android-typeface-helper\" target=\"_blank\" rel=\"external\">https://github.com/norbsoft/android-typeface-helper</a>  </p>\n</li>\n<li><p>Android-Anim-Playground<br>几个动画效果，其中第二个基于 android-svg 的绘制效果非常好<br>项目地址：<a href=\"https://github.com/Tibolte/Android-Anim-Playground\" target=\"_blank\" rel=\"external\">https://github.com/Tibolte/Android-Anim-Playground</a>  </p>\n</li>\n<li><p>AlertView<br>仿iOS的AlertViewController 几乎完美还原iOS 的 AlertViewController ，同时支持Alert和ActionSheet模式，每一个细节都是精雕细琢，并把api封装成懒到极致模式，一行代码就可以进行弹窗.<br>项目地址：<a href=\"https://github.com/saiwu-bigkoo/Android-AlertView\" target=\"_blank\" rel=\"external\">https://github.com/saiwu-bigkoo/Android-AlertView</a>  </p>\n</li>\n<li><p>NiftyDialogEffects<br>支持自定义飞入动画样式的 Dialog<br>项目地址：<a href=\"https://github.com/sd6352051/NiftyDialogEffects\" target=\"_blank\" rel=\"external\">https://github.com/sd6352051/NiftyDialogEffects</a><br>在线演示：<a href=\"http://tympanus.net/Development/ModalWindowEffects/\" target=\"_blank\" rel=\"external\">http://tympanus.net/Development/ModalWindowEffects/</a>  </p>\n</li>\n<li><p>PostOffice<br>创建 Holo 及 Material Design 样式的 Dialog<br>项目地址：<a href=\"https://github.com/r0adkll/PostOffice\" target=\"_blank\" rel=\"external\">https://github.com/r0adkll/PostOffice</a>  </p>\n</li>\n<li><p>Swipecards<br>类似 Tinder 的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso’s Swipeable-Cards 改造而来<br>项目地址：<a href=\"https://github.com/Diolor/Swipecards\" target=\"_blank\" rel=\"external\">https://github.com/Diolor/Swipecards</a>  </p>\n</li>\n<li><p>SeekArc<br>圆形的 SeekBar<br>项目地址：<a href=\"https://github.com/TriggerTrap/SeekArc\" target=\"_blank\" rel=\"external\">https://github.com/TriggerTrap/SeekArc</a>  </p>\n</li>\n<li><p>BlurDialogFragment<br>显示  DialogFragment 时背景模糊效果<br>项目地址：<a href=\"https://github.com/tvbarthel/BlurDialogFragment\" target=\"_blank\" rel=\"external\">https://github.com/tvbarthel/BlurDialogFragment</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample</a>  </p>\n</li>\n<li><p>range-seek-bar<br>随机值选取的 SeekBar<br>项目地址：<a href=\"https://github.com/yahoo/android-range-seek-bar\" target=\"_blank\" rel=\"external\">https://github.com/yahoo/android-range-seek-bar</a>  </p>\n</li>\n<li><p>MaterialRangeBar<br>可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配<br>项目地址：<a href=\"https://github.com/oli107/material-range-bar\" target=\"_blank\" rel=\"external\">https://github.com/oli107/material-range-bar</a>  </p>\n</li>\n<li><p>MaterialList<br>Material Design 风格的 CardView<br>项目地址：<a href=\"https://github.com/dexafree/MaterialList\" target=\"_blank\" rel=\"external\">https://github.com/dexafree/MaterialList</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample</a>  </p>\n</li>\n<li><p>road-trip<br>设置 path 的各种动画效果，以及如何实现复杂路径动画，类似于 ios 中的指纹注册界面的指纹动画效果<br>项目地址：<a href=\"https://github.com/romainguy/road-trip\" target=\"_blank\" rel=\"external\">https://github.com/romainguy/road-trip</a>  </p>\n</li>\n<li><p>dialogplus<br>一个简单的 Android 对话框，支持不同的弹出模式<br>项目地址：<a href=\"https://github.com/orhanobut/dialogplus\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/dialogplus</a>  </p>\n</li>\n<li><p>FlowLayout<br>一个简单的流式布局，用法类似 LinearLayout，但是能够让子元素根据宽度自动换行<br>项目地址：<a href=\"https://github.com/LyndonChin/AndroidFlowLayout\" target=\"_blank\" rel=\"external\">FLowLayout</a>  </p>\n</li>\n<li><p>CircleSeekbar<br>一个环形Seekbar组件,支持叠加复合使用<br>项目地址：<a href=\"https://github.com/feeeei/CircleSeekbar\" target=\"_blank\" rel=\"external\">CircleSeekbar</a>  </p>\n</li>\n<li><p>FinestWebView<br>美麗的和可定制的Android的活動，顯示在一個應用程序的網頁。<br>项目地址: <a href=\"https://github.com/TheFinestArtist/FinestWebView-Android\" target=\"_blank\" rel=\"external\">https://github.com/TheFinestArtist/FinestWebView-Android</a><br>Sample 地址: <a href=\"https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.thefinestartist.finestwebview.sample</a>  </p>\n</li>\n<li><p>YouTubePlayerActivity<br>只需通過一個URL來在新的活動播放YouTube視頻。它支持屏幕方向，媒體音量控制等。<br>项目地址: <a href=\"https://github.com/TheFinestArtist/YouTubePlayerActivity\" target=\"_blank\" rel=\"external\">https://github.com/TheFinestArtist/YouTubePlayerActivity</a><br>Sample 地址: <a href=\"https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.thefinestartist.ytpa.sample</a>  </p>\n</li>\n<li><p>material-camera<br>material风格的camera。能使camera使用起来更简单的库。<br>项目地址：<a href=\"https://github.com/afollestad/material-camera\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/material-camera</a>   </p>\n</li>\n<li><p>material-dialogs<br>各种material风格的dialog。<br>漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8。<br>项目地址：<a href=\"https://github.com/afollestad/material-dialogs\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/material-dialogs</a><br>Sample地址：<a href=\"https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/material-dialogs/blob/master/sample/sample.apk</a>  </p>\n</li>\n<li><p>NotifyUtil<br>最常见的通知样式库<br>项目地址:<a href=\"https://github.com/wenmingvs/NotifyUtil\" target=\"_blank\" rel=\"external\">https://github.com/wenmingvs/NotifyUtil</a><br>demo地址：<a href=\"https://github.com/wenmingvs/NotifyUtil#notifydemo\" target=\"_blank\" rel=\"external\">https://github.com/wenmingvs/NotifyUtil#notifydemo</a>  </p>\n</li>\n<li><p>CanPhotos<br>使用fresco选取多张图片并可预览图片<br>项目地址：<a href=\"https://github.com/canyinghao/CanPhotos\" target=\"_blank\" rel=\"external\">https://github.com/canyinghao/CanPhotos</a>   </p>\n</li>\n<li><p>CanDialog<br>仿照系统Dialog所写，继承于FrameLayout，添加一些动画，一些显示类型。<br>项目地址：<a href=\"https://github.com/canyinghao/CanDialog\" target=\"_blank\" rel=\"external\">https://github.com/canyinghao/CanDialog</a>  </p>\n</li>\n</ol>\n<h2 id=\"第二部分-工具库\"><a href=\"#第二部分-工具库\" class=\"headerlink\" title=\"第二部分 工具库\"></a>第二部分 工具库</h2><p>主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络请求、数据库 ORM 建模、Android 公共库、Android 高版本向低版本兼容、多媒体相关及其他。  </p>\n<h3 id=\"一、依赖注入-DI\"><a href=\"#一、依赖注入-DI\" class=\"headerlink\" title=\"一、依赖注入 DI\"></a>一、依赖注入 DI</h3><p>通过依赖注入减少 View、服务、资源简化初始化，事件绑定等重复繁琐工作  </p>\n<ol>\n<li><p>AndroidAnnotations(Code Diet)<br>android 快速开发框架<br>项目地址：<a href=\"https://github.com/excilys/androidannotations\" target=\"_blank\" rel=\"external\">https://github.com/excilys/androidannotations</a><br>文档介绍：<a href=\"https://github.com/excilys/androidannotations/wiki\" target=\"_blank\" rel=\"external\">https://github.com/excilys/androidannotations/wiki</a><br>官网网址：<a href=\"http://androidannotations.org/\" target=\"_blank\" rel=\"external\">http://androidannotations.org/</a><br>特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等<br>(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程<br>(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类<br>(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现<br>(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类<br>(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。<br>其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响  </p>\n</li>\n<li><p>roboguice<br>帮你处理了很多代码异常，利用 annotation 使得更少的代码完成项目<br>项目地址：<a href=\"https://github.com/roboguice/roboguice\" target=\"_blank\" rel=\"external\">https://github.com/roboguice/roboguice</a><br>文档介绍：<a href=\"https://github.com/roboguice/roboguice/wiki\" target=\"_blank\" rel=\"external\">https://github.com/roboguice/roboguice/wiki</a>  </p>\n</li>\n<li><p>butterknife<br>利用 annotation 帮你快速完成 View 的初始化，减少代码<br>项目地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/butterknife</a><br>文档介绍：<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">http://jakewharton.github.io/butterknife/</a>  </p>\n</li>\n<li><p>Dagger<br>依赖注入，适用于 Android 和 Java<br>项目地址：<a href=\"https://github.com/square/dagger\" target=\"_blank\" rel=\"external\">https://github.com/square/dagger</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/扔物线/Dagger 源码解析\" target=\"_blank\" rel=\"external\">Dagger</a><br>文档介绍：<a href=\"http://square.github.io/dagger/\" target=\"_blank\" rel=\"external\">http://square.github.io/dagger/</a>  </p>\n</li>\n<li><p>AutoParcel<br>注解自动生成Parcelable实现代码的库<br>项目地址：<a href=\"https://github.com/frankiesardo/auto-parcel\" target=\"_blank\" rel=\"external\">https://github.com/frankiesardo/auto-parcel</a><br>这篇文章详细介绍了它的使用方法：<a href=\"https://passy.svbtle.com/simpler-android-apis-with-autoparcel\" target=\"_blank\" rel=\"external\">AutoParcel</a><br>作者认为使用AutoParcel的好处是，可以简化构造函数，方便IDE代码自动完成，方便测试，前向兼容，生成不可变的对象。<br>文档介绍：<a href=\"https://github.com/frankiesardo/auto-parcel\" target=\"_blank\" rel=\"external\">https://github.com/frankiesardo/auto-parcel</a></p>\n</li>\n</ol>\n<h3 id=\"二、图片缓存\"><a href=\"#二、图片缓存\" class=\"headerlink\" title=\"二、图片缓存\"></a>二、图片缓存</h3><ol>\n<li><p>Android-Universal-Image-Loader<br>图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。<br>项目地址：<a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"external\">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/huxian99/Android Universal Image Loader 源码分析\" target=\"_blank\" rel=\"external\">Android-Universal-Image-Loader</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true</a><br>文档介绍：<a href=\"http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html\" target=\"_blank\" rel=\"external\">http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html</a>  </p>\n</li>\n<li><p>picasso<br>square 开源的图片缓存<br>项目地址：<a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">https://github.com/square/picasso</a><br>文档介绍：<a href=\"http://square.github.io/picasso/\" target=\"_blank\" rel=\"external\">http://square.github.io/picasso/</a><br>特点：(1)可以自动检测 adapter 的重用并取消之前的下载<br>(2)图片变换<br>(3)可以加载本地资源<br>(4)可以设置占位资源<br>(5)支持 debug 模式  </p>\n</li>\n<li><p>Cube ImageLoader<br>阿里巴巴一淘使用的图片加载，综合了 Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持<br>项目地址：<a href=\"https://github.com/etao-open-source/cube-sdk\" target=\"_blank\" rel=\"external\">https://github.com/etao-open-source/cube-sdk</a><br>Demo 地址：<a href=\"https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk</a><br>文档介绍：<a href=\"http://cube-sdk.liaohuqiu.net/\" target=\"_blank\" rel=\"external\">http://cube-sdk.liaohuqiu.net/</a>  </p>\n</li>\n<li><p>fresco<br>一款强大的图片缓存工具，由 Facebook 开发<br>项目地址：<a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">https://github.com/facebook/fresco</a><br>文档介绍：<a href=\"http://frescolib.org/\" target=\"_blank\" rel=\"external\">http://frescolib.org/</a><br>特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存<br>(2) 支持流式，可以类似网页上模糊渐进式显示图片<br>(3) 对多帧动画图片支持更好，如 Gif、WebP<br>(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点<br>(5) 更多样的加载，如支持 EXIF、全面支持 WebP<br>(6) 支持 Android 2.3+  </p>\n</li>\n<li><p>Glide<br>Glide 是一个 android 平台上的快速和高效的开源的多媒体资源管理库,提供 多媒体文件的压缩,内存和磁盘缓存, 资源池的接口。<br>它可以最大性能地在 Android 设备上读取、解码、显示图片和视频。Glide 可以将远程的图片、视频、动画图片等缓存在设备本地便于提高用户浏览图片的流畅体验。<br>项目地址：<a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"external\">https://github.com/bumptech/glide</a><br>特点：<br>(1) GIF 动画的解码<br>(2) 本地视频剧照的解码<br>(3) 支持缩略图<br>(4) Activity 生命周期的集成<br>(5) 转码的支持<br>(6) 动画的支持<br>(7) OkHttp 和 Volley 的支持  </p>\n</li>\n</ol>\n<h3 id=\"三、网络请求\"><a href=\"#三、网络请求\" class=\"headerlink\" title=\"三、网络请求\"></a>三、网络请求</h3><ol>\n<li><p>Volley<br>Google 提供的网络通信库，使得网络请求更简单、更快速<br>项目地址：<a href=\"https://android.googlesource.com/platform/frameworks/volley\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/platform/frameworks/volley</a><br>文档介绍：<a href=\"http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf\" target=\"_blank\" rel=\"external\">http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf</a>  </p>\n</li>\n<li><p>Asynchronous Http Client for Android<br>Android 异步 Http 请求<br>项目地址：<a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">https://github.com/loopj/android-async-http</a><br>文档介绍：<a href=\"http://loopj.com/android-async-http/\" target=\"_blank\" rel=\"external\">http://loopj.com/android-async-http/</a><br>特点：(1) 在匿名回调中处理请求结果<br>(2) 在 UI 线程外进行 http 请求<br>(3) 文件断点上传<br>(4) 智能重试<br>(5) 默认 gzip 压缩<br>(6) 支持解析成 Json 格式<br>(7) 可将 Cookies 持久化到 SharedPreferences  </p>\n</li>\n<li><p>android-query<br>异步加载，更少代码完成 Android 加载<br>项目地址：<a href=\"https://github.com/androidquery/androidquery\" target=\"_blank\" rel=\"external\">https://github.com/androidquery/androidquery</a> 或 <a href=\"https://code.google.com/p/android-query/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.androidquery\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.androidquery</a><br>文档介绍：<a href=\"https://code.google.com/p/android-query/#Why_AQuery?\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/#Why_AQuery?</a><br>特点：<a href=\"https://code.google.com/p/android-query/#Why_AQuery?\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/#Why_AQuery?</a>  </p>\n</li>\n<li><p>Async Http Client<br>Java 异步 Http 请求<br>项目地址：<a href=\"https://github.com/AsyncHttpClient/async-http-client\" target=\"_blank\" rel=\"external\">https://github.com/AsyncHttpClient/async-http-client</a><br>文档介绍：<a href=\"http://sonatype.github.io/async-http-client/\" target=\"_blank\" rel=\"external\">http://sonatype.github.io/async-http-client/</a>  </p>\n</li>\n<li><p>Ion<br>支持图片、json、http post 等异步请求<br>项目地址：<a href=\"https://github.com/koush/ion\" target=\"_blank\" rel=\"external\">https://github.com/koush/ion</a><br>文档介绍：<a href=\"https://github.com/koush/ion#more-examples\" target=\"_blank\" rel=\"external\">https://github.com/koush/ion#more-examples</a>  </p>\n</li>\n<li><p>Http Request<br>项目地址：<a href=\"https://github.com/kevinsawicki/http-request\" target=\"_blank\" rel=\"external\">https://github.com/kevinsawicki/http-request</a><br>文档介绍：<a href=\"https://github.com/kevinsawicki/http-request#examples\" target=\"_blank\" rel=\"external\">https://github.com/kevinsawicki/http-request#examples</a>  </p>\n</li>\n<li><p>okhttp<br>square 开源的 http 工具类<br>项目地址：<a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">https://github.com/square/okhttp</a><br>文档介绍：<a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">http://square.github.io/okhttp/</a><br>特点：(1) 支持 SPDY( <a href=\"http://zh.wikipedia.org/wiki/SPDY\" target=\"_blank\" rel=\"external\">http://zh.wikipedia.org/wiki/SPDY</a> )协议。SPDY 协议是 Google 开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个 TCP 链接传送网页和图片等资源)和优先级来缩短加载时间。<br>(2) 如果 SPDY 不可用，利用连接池减少请求延迟<br>(3) Gzip 压缩<br>(4) Response 缓存减少不必要的请求  </p>\n</li>\n<li><p>Retrofit<br>RESTFUL API 设计<br>项目地址：<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a><br>文档介绍：<a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">http://square.github.io/retrofit/</a>  </p>\n</li>\n<li><p>RoboSpice<br>Android 异步网络请求工具，支持缓存、REST 等等<br>项目地址：<a href=\"https://github.com/stephanenicolas/robospice\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/robospice</a><br>Demo 地址：<a href=\"https://github.com/stephanenicolas/RoboDemo/downloads\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/RoboDemo/downloads</a>  </p>\n</li>\n<li><p>TwistVolley<br>TwistVolley 是对 Volley 的一个封装库。提供类似 Picasso 一样的串联式 API。使得使用 Volley 更加方便。<br>项目地址：<a href=\"https://github.com/TwistedEquations/TwistVolley\" target=\"_blank\" rel=\"external\">https://github.com/TwistedEquations/TwistVolley</a>  </p>\n</li>\n</ol>\n<h3 id=\"四、数据库-orm-工具包\"><a href=\"#四、数据库-orm-工具包\" class=\"headerlink\" title=\"四、数据库 orm 工具包\"></a>四、数据库 orm 工具包</h3><p>orm 的 db 工具类，简化建表、查询、更新、插入、事务、索引的操作 </p>\n<ol>\n<li><p>greenDAO<br>Android Sqlite orm 的 db 工具类<br>项目地址：<a href=\"https://github.com/greenrobot/greenDAO\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/greenDAO</a><br>文档介绍：<a href=\"http://greendao-orm.com/documentation/\" target=\"_blank\" rel=\"external\">http://greendao-orm.com/documentation/</a><br>官网网址：<a href=\"http://greendao-orm.com/\" target=\"_blank\" rel=\"external\">http://greendao-orm.com/</a><br>特点：(1) 性能佳<br>(2) 简单易用的 API<br>(3) 内存小好小<br>(4) 库大小小  </p>\n</li>\n<li><p>GreenDaoUpgradeHelper<br>greenDAO的数据库升级帮助类，只需一行代码解决数据库升级<br>项目地址：<a href=\"https://github.com/yuweiguocn/GreenDaoUpgradeHelper\" target=\"_blank\" rel=\"external\">https://github.com/yuweiguocn/GreenDaoUpgradeHelper</a></p>\n</li>\n<li><p>ActiveAndroid<br>Android Sqlite orm 的 db 工具类<br>项目地址：<a href=\"https://github.com/pardom/ActiveAndroid\" target=\"_blank\" rel=\"external\">https://github.com/pardom/ActiveAndroid</a><br>文档介绍：<a href=\"https://github.com/pardom/ActiveAndroid/wiki/_pages\" target=\"_blank\" rel=\"external\">https://github.com/pardom/ActiveAndroid/wiki/_pages</a>  </p>\n</li>\n<li><p>Sprinkles<br>Android Sqlite orm 的 db 工具类，比较显著的特点就是配合 <a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a> 能保存从服务器获取的数据<br>项目地址：<a href=\"https://github.com/emilsjolander/sprinkles\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander/sprinkles</a><br>文档介绍：<a href=\"http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/\" target=\"_blank\" rel=\"external\">http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/</a>  </p>\n</li>\n<li><p>Realm<br>移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好<br>项目地址：<a href=\"https://github.com/realm/realm-java\" target=\"_blank\" rel=\"external\">https://github.com/realm/realm-java</a><br>文档介绍：<a href=\"http://realm.io/docs/java/0.72.0/\" target=\"_blank\" rel=\"external\">http://realm.io/docs/java/0.72.0/</a>  </p>\n</li>\n<li><p>ormlite-android<br>项目地址：<a href=\"https://github.com/j256/ormlite-android\" target=\"_blank\" rel=\"external\">https://github.com/j256/ormlite-android</a><br>文档介绍：<a href=\"http://ormlite.com/sqlite_java_android_orm.shtml\" target=\"_blank\" rel=\"external\">http://ormlite.com/sqlite_java_android_orm.shtml</a>  </p>\n</li>\n<li><p>Schematic<br>根据 SQLite 生成 ContentProvider<br>项目地址：<a href=\"https://github.com/SimonVT/schematic\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/schematic</a>  </p>\n</li>\n<li><p>DBFlow<br>Android SQLite ORM 工具库。综合了 Active Android, Schematic, Ollie,Sprinkles 等库的优点；通过注解实现，性能好；能生成 ContentProvider。<br>项目地址：<a href=\"https://github.com/Raizlabs/DBFlow\" target=\"_blank\" rel=\"external\">https://github.com/Raizlabs/DBFlow</a><br>文档介绍：<a href=\"https://github.com/Raizlabs/DBFlow#usage-docs\" target=\"_blank\" rel=\"external\">https://github.com/Raizlabs/DBFlow#usage-docs</a>  </p>\n</li>\n<li><p>SnappyDB<br>SnappyDB是一个key-value数据库，非常流行的NoSQL数据库。<br>项目地址：<a href=\"https://github.com/nhachicha/SnappyDB\" target=\"_blank\" rel=\"external\">https://github.com/nhachicha/SnappyDB</a><br>演示Demo：<a href=\"https://play.google.com/store/apps/details?id=com.snappydb.snippets.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.snappydb.snippets.app</a></p>\n</li>\n</ol>\n<h3 id=\"五、Android-公共库\"><a href=\"#五、Android-公共库\" class=\"headerlink\" title=\"五、Android 公共库\"></a>五、Android 公共库</h3><ol>\n<li><p>Guava<br>Google 的基于 java1.6 的类库集合的扩展项目，包括 collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O 等等. 这些高质量的 API 可以使你的 JAVa 代码更加优雅，更加简洁<br>项目地址：<a href=\"https://code.google.com/p/guava-libraries/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/guava-libraries/</a><br>文档介绍：<a href=\"https://code.google.com/p/guava-libraries/wiki/GuavaExplained\" target=\"_blank\" rel=\"external\">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a>  </p>\n</li>\n<li><p>AndroidCommon<br>Android 公共库<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/AndroidCommon</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/android-common-lib/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-common-lib/</a><br>包括：a. ImageCache 图片缓存，包含内存和 Sdcard 缓存<br><a href=\"http://www.trinea.cn/android/android-imagecache/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-imagecache/</a><br>特点：(1)支持预取新图片，支持等待队列<br>(2)包含二级缓存，可自定义文件名保存规则<br>(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU 等 13 种)或自定义缓存算法<br>(4)可方便的保存及初始化恢复数据<br>(5)支持不同类型网络处理<br>(6)可根据系统配置初始化缓存等  </p>\n</li>\n<li><p>HttpCache Http 缓存<br>文档介绍：<a href=\"http://www.trinea.cn/android/android-http-cache\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-http-cache</a><br>特点是：(1) 根据 cache-control、expires 缓存 http 请求<br>(2) 支持同步、异步 Http 请求<br>(3) 在匿名回调中处理请求结果<br>(4) 在 UI 线程外进行 http 请求<br>(5) 默认 gzip 压缩<br>(2) 公共 View(下拉及底部加载更多 ListView、底部加载更多 ScrollView、滑动一页 Gallery)<br>(3) Android 常用工具类(网络、下载、Android 资源操作、shell、文件、Json、随机数、Collection 等等)  </p>\n</li>\n<li><p>DropDownListView 下拉刷新及滑动到底部加载更多 ListView<br>文档介绍：<a href=\"http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/</a>  </p>\n</li>\n<li><p>shipfaster<br>整合了 Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发<br>项目地址：<a href=\"https://github.com/pyricau/shipfaster\" target=\"_blank\" rel=\"external\">https://github.com/pyricau/shipfaster</a>  </p>\n</li>\n<li><p>CleanAndroidCode<br>整合了 Dagger Otto AndroidAnnotations，方便快速开发<br>项目地址：<a href=\"https://github.com/pyricau/CleanAndroidCode\" target=\"_blank\" rel=\"external\">https://github.com/pyricau/CleanAndroidCode</a>  </p>\n</li>\n<li><p>xUtils<br>基于 Afinal，包含 DbUtils、ViewUtils、HttpUtils、BitmapUtils 四大模块，可用于快速开发<br>项目地址：<a href=\"https://github.com/wyouflf/xUtils\" target=\"_blank\" rel=\"external\">https://github.com/wyouflf/xUtils</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Caij/xUtils 源码解析\" target=\"_blank\" rel=\"external\">xUtils</a>  </p>\n</li>\n<li><p>Afinal<br>Afinal 是一个 android 的 ioc，orm 框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过 finalActivity，我们可以通过注解的方式进行绑定 ui 和事件。通过 finalBitmap，我们可以方便的加载 bitmap 图片，而无需考虑 oom 等问题。通过 finalDB 模块，我们一行代码就可以对 android 的 sqlite 数据库进行增删改查。通过 FinalHttp 模块，我们可以以 ajax 形式请求 http 数据<br>项目地址：<a href=\"https://github.com/yangfuhai/afinal\" target=\"_blank\" rel=\"external\">https://github.com/yangfuhai/afinal</a><br>官网网址：<a href=\"http://www.afinal.org\" target=\"_blank\" rel=\"external\">http://www.afinal.org</a>  </p>\n</li>\n<li><p>UltimateAndroid<br>UltimateAndroid 是一个快速开发 Android 应用的框架，框架目前主要包含的功能有 View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘 LRU 等功能.同时提供了类似于 TripleDes、Webview 快速设置、Md5 处理、String 处理,Https 处理等常用工具类，还有超过 100 多种 UI 控件效果。<br>项目地址：<a href=\"https://github.com/cymcsg/UltimateAndroid\" target=\"_blank\" rel=\"external\">https://github.com/cymcsg/UltimateAndroid</a><br>官网网址：<a href=\"http://blog.marshalchen.com/UltimateAndroid/\" target=\"_blank\" rel=\"external\">http://blog.marshalchen.com/UltimateAndroid/</a>  </p>\n</li>\n<li><p>SAF<br>SAF(Simple Android Framework)是一个简单的 android 框架，它为开发 Android app 提供了基础性组件。<br>项目地址：<a href=\"https://github.com/fengzhizi715/SAF\" target=\"_blank\" rel=\"external\">https://github.com/fengzhizi715/SAF</a><br>官网网址：<a href=\"http://www.salesuite.cn/\" target=\"_blank\" rel=\"external\">http://www.salesuite.cn/</a><br>包括：(1)Event Bus(事件总线)<br>(2) Rest Client(http 的框架)<br>(3) Image Cache(图片缓存)<br>(4) Dependency Injection(依赖注入)<br>(5) Sqlite ORM(sqlite 的 orm)<br>(6) Router(Activity、Fragment 的 Router)<br>(7) Utils(各种常用的工具类)  </p>\n</li>\n<li><p>Barber<br>Custom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。<br>项目地址：<a href=\"https://github.com/hzsweers/barber\" target=\"_blank\" rel=\"external\">https://github.com/hzsweers/barber</a>  </p>\n</li>\n<li><p>device-year-class<br>A library that analyzes an Android device’s specifications and calculates which year the device would be considered “high end”.(facebook 开发的检测手机主流配置工具)<br>项目地址：<a href=\"https://github.com/facebook/device-year-class\" target=\"_blank\" rel=\"external\">https://github.com/facebook/device-year-class</a>  </p>\n</li>\n<li><p>RxAndroid<br>对RxJava在Android上的扩展，使得Android上也很容易实现reactive components，简化线程操作，从而写出很漂亮的代码。<br>项目地址：<a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">https://github.com/ReactiveX/RxAndroid</a><br>文档介绍：<a href=\"http://gank.io/post/560e15be2dca930e00da1083\" target=\"_blank\" rel=\"external\">给Android 开发者的 RxJava 详解</a>  </p>\n</li>\n<li><p>MultiImageSelector<br>一个本地图片选择器，支持图片的单选和多选，直接返回所选图片的路径。<br>项目地址：<a href=\"https://github.com/lovetuzitong/MultiImageSelector.git\" target=\"_blank\" rel=\"external\">https://github.com/lovetuzitong/MultiImageSelector.git</a> </p>\n</li>\n</ol>\n<h3 id=\"六、Android-高版本向低版本兼容\"><a href=\"#六、Android-高版本向低版本兼容\" class=\"headerlink\" title=\"六、Android 高版本向低版本兼容\"></a>六、Android 高版本向低版本兼容</h3><ol>\n<li><p>Nine Old Androids<br>将 Android 3.0(Honeycomb)所有动画 API(ObjectAnimator ValueAnimator 等)兼容到 Android1.0<br>项目地址：<a href=\"https://github.com/JakeWharton/NineOldAndroids\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/NineOldAndroids</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations 源码解析\" target=\"_blank\" rel=\"external\">Nine Old Androids</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample</a><br>文档介绍：<a href=\"http://nineoldandroids.com/\" target=\"_blank\" rel=\"external\">http://nineoldandroids.com/</a>  </p>\n</li>\n<li><p>HoloEverywhere<br>将 Android 3.0 的 Holo 主题兼容到 Android2.1++<br>项目地址：<a href=\"https://github.com/Prototik/HoloEverywhere\" target=\"_blank\" rel=\"external\">https://github.com/Prototik/HoloEverywhere</a><br>Demo 地址：<a href=\"https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk</a><br>文档介绍：<a href=\"http://android-developers.blogspot.com/2012/01/holo-everywhere.html\" target=\"_blank\" rel=\"external\">http://android-developers.blogspot.com/2012/01/holo-everywhere.html</a>  </p>\n</li>\n<li><p>SherlockNavigationDrawer<br>将 Android NavigationDrawer 和 ActionbarSherlock 结合，解决 4.0 以下 NavigationDrawer 的适配问题<br>项目地址：<a href=\"https://github.com/tobykurien/SherlockNavigationDrawer\" target=\"_blank\" rel=\"external\">https://github.com/tobykurien/SherlockNavigationDrawer</a><br>文档介绍：<a href=\"http://developer.android.com/training/implementing-navigation/nav-drawer.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/training/implementing-navigation/nav-drawer.html</a>  </p>\n</li>\n<li><p>Notifications4EveryWhere<br>将 Android 4.1 的 Notification 兼容到 Android2.2++<br>项目地址：<a href=\"https://github.com/youxiachai/Notifications4EveryWhere\" target=\"_blank\" rel=\"external\">https://github.com/youxiachai/Notifications4EveryWhere</a>  </p>\n</li>\n<li><p>Android Switch Widget Backport<br>将 Android Switch 和 SwitchPreference 的兼容到 Android2.1++<br>项目地址：<a href=\"https://github.com/BoD/android-switch-backport\" target=\"_blank\" rel=\"external\">https://github.com/BoD/android-switch-backport</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample</a><br>文档介绍：<a href=\"https://github.com/BoD/android-switch-backport#using-the-switch\" target=\"_blank\" rel=\"external\">https://github.com/BoD/android-switch-backport#using-the-switch</a>  </p>\n</li>\n<li><p>android-datepicker<br>将 Android 4.0 的 datepicker 兼容到 Android2.2++<br>项目地址：<a href=\"https://github.com/SimonVT/android-datepicker\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/android-datepicker</a>  </p>\n</li>\n<li><p>Transitions Everywhere<br>Android 4.4 的 Transitions API 兼容到 Android 2.2 以上<br>项目地址：<a href=\"https://github.com/andkulikov/transitions-everywhere\" target=\"_blank\" rel=\"external\">https://github.com/andkulikov/transitions-everywhere</a>  </p>\n</li>\n<li><p>KShareViewActivityManager<br>一个兼容Android 5.0 以下Shared Element Transition （页面间共享元素位移动画）库<br>项目地址：<a href=\"https://github.com/kot32go/KShareViewActivityManager\" target=\"_blank\" rel=\"external\">https://github.com/kot32go/KShareViewActivityManager</a>  </p>\n</li>\n</ol>\n<h3 id=\"七、多媒体相关\"><a href=\"#七、多媒体相关\" class=\"headerlink\" title=\"七、多媒体相关\"></a>七、多媒体相关</h3><ol>\n<li><p>cocos2d-x<br>跨平台的 2d 游戏框架，支持 Android、IOS、Linux、Windows 等众多平台<br>项目地址：<a href=\"https://github.com/cocos2d/cocos2d-x\" target=\"_blank\" rel=\"external\">https://github.com/cocos2d/cocos2d-x</a><br>文档介绍：<a href=\"http://www.cocos2d-x.org/wiki\" target=\"_blank\" rel=\"external\">http://www.cocos2d-x.org/wiki</a><br>官网网址：<a href=\"http://www.cocos2d-x.org/\" target=\"_blank\" rel=\"external\">http://www.cocos2d-x.org/</a>  </p>\n</li>\n<li><p>JustWeEngine<br>Android的轻量级游戏框架，能大大缩减编写原生游戏的代码量和难度，仍在持续更新中。<br>项目地址: <a href=\"https://github.com/lfkdsk/JustWeEngine\" target=\"_blank\" rel=\"external\">https://github.com/lfkdsk/JustWeEngine</a><br>Demo地址: <a href=\"https://github.com/lfkdsk/EngineDemo\" target=\"_blank\" rel=\"external\">https://github.com/lfkdsk/EngineDemo</a>  </p>\n</li>\n<li><p>Vitamio<br>是一款 Android 与 iOS 平台上的全能多媒体开发框架<br>项目地址：<a href=\"https://github.com/yixia/VitamioBundle\" target=\"_blank\" rel=\"external\">https://github.com/yixia/VitamioBundle</a><br>网站介绍：<a href=\"http://www.vitamio.org/docs/\" target=\"_blank\" rel=\"external\">http://www.vitamio.org/docs/</a><br>特点：(1) 全面支持硬件解码与 GPU 渲染<br>(2) 能够流畅播放 720P 甚至 1080P 高清 MKV，FLV，MP4，MOV，TS，RMVB 等常见格式的视频<br>(3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。 </p>\n</li>\n<li><p>VDPlayerSDK<br>最容易集成的开源播放器组件，支持直播，支持软硬解切换，支持清晰度切换<br>项目地址：<a href=\"https://github.com/SinaVDDeveloper/\" target=\"_blank\" rel=\"external\">https://github.com/SinaVDDeveloper/</a><br>Demo 地址：<a href=\"https://github.com/SinaVDDeveloper/demo\" target=\"_blank\" rel=\"external\">https://github.com/SinaVDDeveloper/demo</a><br>文档介绍：<a href=\"https://github.com/SinaVDDeveloper/sinavideo_playersdk\" target=\"_blank\" rel=\"external\">https://github.com/SinaVDDeveloper/sinavideo_playersdk</a><br>特点：<br>(1) 使用自定义控件方式提供播放器UI，不需要视频相关知识，能编写android应用就能使用<br>(2) 软硬解切换、点播直播支持<br>(3) 解码内核小于4M，更方便集成到非专业视频app中<br>(4) 修正一些vitaimio的问题，比如m3u8可以拖动等等</p>\n</li>\n<li><p>VideoPlayerManager<br>帮助实现VideoPlayer控制，使得它更容易使用ListView和recyclerview。它还可以跟踪滚动列表中可见的项。当列表中的新项可见域最大时，该库给出了接口来跟踪它。<br>项目地址：<a href=\"https://github.com/danylovolokh/VideoPlayerManager\" target=\"_blank\" rel=\"external\">https://github.com/danylovolokh/VideoPlayerManager</a><br>文档介绍：<a href=\"https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn\" target=\"_blank\" rel=\"external\">https://medium.com/@v.danylo/implementing-video-playback-in-a-scrolled-list-listview-recyclerview-d04bc2148429#.hs5n0geqn</a>  </p>\n</li>\n<li><p>UniversalVideoView<br>Android上定义播放器控件,支持自定义控制UI, 全屏播放, 重力感应自动切换横竖屏.<br>项目地址：<a href=\"https://github.com/linsea/UniversalVideoView\" target=\"_blank\" rel=\"external\">https://github.com/linsea/UniversalVideoView</a>  </p>\n</li>\n<li><p>PhotoProcessing<br>利用 ndk 处理图片库，支持 Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效<br>项目地址：<a href=\"https://github.com/lightbox/PhotoProcessing\" target=\"_blank\" rel=\"external\">https://github.com/lightbox/PhotoProcessing</a><br>Demo 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true</a>  </p>\n</li>\n<li><p>Android StackBlur<br>图片模糊效果工具类<br>项目地址：<a href=\"https://github.com/kikoso/android-stackblur\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur</a><br>Demo 地址：<a href=\"https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true</a><br>文档介绍：<a href=\"https://github.com/kikoso/android-stackblur#usage\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur#usage</a>  </p>\n</li>\n<li><p>Bitmap Smart Clipping using OpenCV<br>图片智能裁剪保留重要部分显示<br>项目地址：<a href=\"https://github.com/beartung/tclip-android\" target=\"_blank\" rel=\"external\">https://github.com/beartung/tclip-android</a><br>利用淘宝的 <a href=\"http://code.taobao.org/p/tclip/\" target=\"_blank\" rel=\"external\">http://code.taobao.org/p/tclip/</a> 库完成<br>一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域<br>特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉<br>(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  </p>\n</li>\n<li><p>Cropper<br>图片局部剪切工具，可触摸控制选择区域或旋转<br>项目地址：<a href=\"https://github.com/edmodo/cropper\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/cropper</a><br>文档介绍：<a href=\"https://github.com/edmodo/cropper/wiki\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/cropper/wiki</a>  </p>\n</li>\n<li><p>uCrop<br>Yalantis 出品的强大的图片裁剪库 ，支持缩放，旋转图片，支持各种比例的裁剪框<br>项目地址：<a href=\"https://github.com/Yalantis/uCrop\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/uCrop</a>  </p>\n</li>\n<li><p>android-crop<br>图片裁剪 Activity<br>项目地址：<a href=\"https://github.com/jdamcd/android-crop\" target=\"_blank\" rel=\"external\">https://github.com/jdamcd/android-crop</a>  </p>\n</li>\n<li><p>TileView<br>可分块显示大图，支持 2D 拖动、双击、双指放大、双指捏合<br>项目地址：<a href=\"https://github.com/moagrius/TileView\" target=\"_blank\" rel=\"external\">https://github.com/moagrius/TileView</a><br>Demo 地址：<a href=\"http://moagrius.github.io/TileView/TileViewDemo.apk\" target=\"_blank\" rel=\"external\">http://moagrius.github.io/TileView/TileViewDemo.apk</a>  </p>\n</li>\n<li><p>BlurEffectForAndroidDesign<br>图片模糊效果<br>项目地址：<a href=\"https://github.com/PomepuyN/BlurEffectForAndroidDesign\" target=\"_blank\" rel=\"external\">https://github.com/PomepuyN/BlurEffectForAndroidDesign</a>  </p>\n</li>\n<li><p>android-eye<br>PC 端网页查看同一局域网内的手机摄像头内容，可以用来监控哦<br>项目地址：<a href=\"https://github.com/Teaonly/android-eye\" target=\"_blank\" rel=\"external\">https://github.com/Teaonly/android-eye</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=teaonly.droideye\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=teaonly.droideye</a>  </p>\n</li>\n<li><p>libpng for Android<br>PNG 图片的 jni 库，支持几乎 png 的所有特性<br>项目地址：<a href=\"https://github.com/julienr/libpng-android\" target=\"_blank\" rel=\"external\">https://github.com/julienr/libpng-android</a><br>文档介绍：<a href=\"http://www.libpng.org/pub/png/libpng.html\" target=\"_blank\" rel=\"external\">http://www.libpng.org/pub/png/libpng.html</a>  </p>\n</li>\n<li><p>android-gpuimage<br>基于 GPU 的图片滤镜<br>项目地址：<a href=\"https://github.com/CyberAgent/android-gpuimage\" target=\"_blank\" rel=\"external\">https://github.com/CyberAgent/android-gpuimage</a>  </p>\n</li>\n<li><p>AndroidFaceCropper<br>图片脸部自动识别，将识别后的局部图片返回<br>项目地址：<a href=\"https://github.com/lafosca/AndroidFaceCropper\" target=\"_blank\" rel=\"external\">https://github.com/lafosca/AndroidFaceCropper</a>  </p>\n</li>\n<li><p>Android Video Crop<br>利用 TextureView 播放和剪切视频，类似 ImageView.setScaleType<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/android-video-crop\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-video-crop</a><br>Demo 地址：<a href=\"https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk\" target=\"_blank\" rel=\"external\">https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk</a>  </p>\n</li>\n<li><p>svg-android<br>Android Svg 矢量图形支持<br>项目地址：<a href=\"https://github.com/japgolly/svg-android\" target=\"_blank\" rel=\"external\">https://github.com/japgolly/svg-android</a> <a href=\"https://github.com/japgolly/svg-android\" target=\"_blank\" rel=\"external\">https://github.com/japgolly/svg-android</a>  </p>\n</li>\n<li><p>Android Visualizer<br>从 Android MediaPlayer 获得音频，然后像 iTunes 及 WinAmp 一样展示音轨<br>项目地址：<a href=\"https://github.com/felixpalmer/android-visualizer\" target=\"_blank\" rel=\"external\">https://github.com/felixpalmer/android-visualizer</a>  </p>\n</li>\n<li><p>ExoPlayer<br>包括仪表板和 SmoothStreaming 自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新<br>项目地址：<a href=\"https://github.com/google/ExoPlayer\" target=\"_blank\" rel=\"external\">https://github.com/google/ExoPlayer</a>  </p>\n</li>\n<li><p>DanmakuFlameMaster<br>android 上开源弹幕解析绘制引擎项目<br>项目地址：<a href=\"https://github.com/ctiao/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">https://github.com/ctiao/DanmakuFlameMaster</a>  </p>\n</li>\n<li><p>OpenDanmaku<br>android 上一个轻量级的更简单的开源弹幕控件<br>项目地址：<a href=\"https://github.com/linsea/OpenDanmaku\" target=\"_blank\" rel=\"external\">https://github.com/linsea/OpenDanmaku</a>  </p>\n</li>\n</ol>\n<h3 id=\"八、事件总线-订阅者模式\"><a href=\"#八、事件总线-订阅者模式\" class=\"headerlink\" title=\"八、事件总线(订阅者模式)\"></a>八、事件总线(订阅者模式)</h3><p>通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments 及后台线程)之间的通信  </p>\n<ol>\n<li><p>EventBus<br>greenrobot 的开源项目<br>项目地址：<a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/Trinea/EventBus 源码解析\" target=\"_blank\" rel=\"external\">EventBus</a><br>文档介绍：<a href=\"https://github.com/greenrobot/EventBus#general-usage-and-api\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus#general-usage-and-api</a><br>特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI 线程、单一后台线程、异步线程<br>(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊<br>(3) 不是基于 annotations<br>(4) 性能更优<br>(5) 体积小<br>(6) 支持单例创建或创建多个对象<br>(7) 支持根据事件类型订阅  </p>\n</li>\n<li><p>Otto<br>Square 的开源项目，基于 Guava 的 Android 优化<br>项目地址：<a href=\"https://github.com/square/otto\" target=\"_blank\" rel=\"external\">https://github.com/square/otto</a><br>文档介绍：<a href=\"http://square.github.io/otto/\" target=\"_blank\" rel=\"external\">http://square.github.io/otto/</a><br><a href=\"https://github.com/greenrobot/EventBus#comparison-with-squares-otto\" target=\"_blank\" rel=\"external\">EventBus 与 Otto 的功能及性能对比文档</a><br><a href=\"https://play.google.com/store/apps/details?id=de.greenrobot.eventperf\" target=\"_blank\" rel=\"external\">EventBus 与 Otto 性能对比 Demo Apk</a>  </p>\n</li>\n</ol>\n<h3 id=\"九、传感器\"><a href=\"#九、传感器\" class=\"headerlink\" title=\"九、传感器\"></a>九、传感器</h3><ol>\n<li><p>Great Android Sensing Toolkit<br>Android 感应器工具包，包含示例及使用过程中可能需要的算法<br>项目地址：<a href=\"https://github.com/gast-lib/gast-lib\" target=\"_blank\" rel=\"external\">https://github.com/gast-lib/gast-lib</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=root.gast.playground\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=root.gast.playground</a><br>文档介绍：<a href=\"https://github.com/gast-lib/gast-lib#documentation\" target=\"_blank\" rel=\"external\">https://github.com/gast-lib/gast-lib#documentation</a>  </p>\n</li>\n<li><p>SensorManager<br>Android 传感器管理<br>项目地址：<a href=\"https://github.com/nlathia/SensorManager\" target=\"_blank\" rel=\"external\">https://github.com/nlathia/SensorManager</a><br>文档介绍：<a href=\"https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit\" target=\"_blank\" rel=\"external\">https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit</a>  </p>\n</li>\n<li><p>GPSLogger<br>记录 GPS 信息<br>项目地址：<a href=\"https://github.com/mendhak/gpslogger\" target=\"_blank\" rel=\"external\">https://github.com/mendhak/gpslogger</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.mendhak.gpslogger\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mendhak.gpslogger</a><br>文档介绍：<a href=\"http://code.mendhak.com/gpslogger/\" target=\"_blank\" rel=\"external\">http://code.mendhak.com/gpslogger/</a>  </p>\n</li>\n<li><p>Pedometer<br>计步器，使用硬件计步感应器<br>项目地址：<a href=\"https://github.com/j4velin/Pedometer\" target=\"_blank\" rel=\"external\">https://github.com/j4velin/Pedometer</a>  </p>\n</li>\n<li><p>leapcast<br>ChromeCast 模拟器的 App<br>项目地址：<a href=\"https://github.com/dz0ny/leapcast\" target=\"_blank\" rel=\"external\">https://github.com/dz0ny/leapcast</a>  </p>\n</li>\n<li><p>Arduino-Communicator<br>与 Arduino 通信的 App<br>项目地址：<a href=\"https://github.com/jeppsson/Arduino-Communicator\" target=\"_blank\" rel=\"external\">https://github.com/jeppsson/Arduino-Communicator</a>  </p>\n</li>\n<li><p>android-pedometer<br>Android 计步器<br>项目地址：<a href=\"https://github.com/bagilevi/android-pedometer\" target=\"_blank\" rel=\"external\">https://github.com/bagilevi/android-pedometer</a><br>Demo 地址：<a href=\"http://pedometer.googlecode.com/files/Pedometer-1.4.apk\" target=\"_blank\" rel=\"external\">http://pedometer.googlecode.com/files/Pedometer-1.4.apk</a>  </p>\n</li>\n<li><p>OwnTracks for Android<br>自己的轨迹记录<br>项目地址：<a href=\"https://github.com/owntracks/android\" target=\"_blank\" rel=\"external\">https://github.com/owntracks/android</a>  </p>\n</li>\n<li><p>Shake Detector library for Android<br>Android 手机震动摇晃检测库，提供供 UI 线程调用的回调接口<br>项目地址：<a href=\"https://github.com/tbouron/ShakeDetector\" target=\"_blank\" rel=\"external\">https://github.com/tbouron/ShakeDetector</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example</a>  </p>\n</li>\n<li><p>Android heart rate monitor<br>Android 心跳检测<br>项目地址：<a href=\"https://github.com/phishman3579/android-heart-rate-monitor\" target=\"_blank\" rel=\"external\">https://github.com/phishman3579/android-heart-rate-monitor</a>  </p>\n</li>\n<li><p>Bluetooth LE Library for Android<br>蓝牙源信息，包括宝库 Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息<br>项目地址：<a href=\"https://github.com/alt236/Bluetooth-LE-Library---Android\" target=\"_blank\" rel=\"external\">https://github.com/alt236/Bluetooth-LE-Library---Android</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan</a>  </p>\n</li>\n<li><p>farebot<br>通过 NFC 从公交卡中读取数据的一个应用<br>项目地址：<a href=\"https://github.com/codebutler/farebot\" target=\"_blank\" rel=\"external\">https://github.com/codebutler/farebot</a>  </p>\n</li>\n</ol>\n<h3 id=\"十、安全\"><a href=\"#十、安全\" class=\"headerlink\" title=\"十、安全\"></a>十、安全</h3><ol>\n<li><p>SQLCipher<br>Sqlite 加密工具<br>项目地址：<a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"external\">https://github.com/sqlcipher/sqlcipher</a><br>文档介绍：<a href=\"http://sqlcipher.net/sqlcipher-for-android/\" target=\"_blank\" rel=\"external\">http://sqlcipher.net/sqlcipher-for-android/</a>  </p>\n</li>\n<li><p>Conceal<br>快速高效的进行文件加密解密<br>项目地址：<a href=\"https://github.com/facebook/conceal\" target=\"_blank\" rel=\"external\">https://github.com/facebook/conceal</a><br>文档介绍：<a href=\"https://github.com/facebook/conceal#usage\" target=\"_blank\" rel=\"external\">https://github.com/facebook/conceal#usage</a>  </p>\n</li>\n<li><p>Android-PasscodeLock<br>应用锁，每次启动或从任何 Activity 启动应用都需要输入四位数字的密码方可进入<br>项目地址：<a href=\"https://github.com/wordpress-mobile/Android-PasscodeLock\" target=\"_blank\" rel=\"external\">https://github.com/wordpress-mobile/Android-PasscodeLock</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=org.wordpress.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.wordpress.android</a><br>APP 示例：Wordpress Android，支付宝，挖财  </p>\n</li>\n<li><p>GlowPadBackport<br>将 Android4.2 的锁屏界面解锁扩展到 Android1.6 及 1.6+<br>项目地址：<a href=\"https://github.com/rock3r/GlowPadBackport\" target=\"_blank\" rel=\"external\">https://github.com/rock3r/GlowPadBackport</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample</a>  </p>\n</li>\n<li><p>GlowPadView<br>Android 4 锁屏界面解锁<br>项目地址：<a href=\"https://github.com/nadavfima/GlowPadView\" target=\"_blank\" rel=\"external\">https://github.com/nadavfima/GlowPadView</a>  </p>\n</li>\n<li><p>Android-InsecureBank<br>关于 Android 不安全性的示例<br>项目地址：<a href=\"https://github.com/dineshshetty/Android-InsecureBankv2\" target=\"_blank\" rel=\"external\">https://github.com/dineshshetty/Android-InsecureBankv2</a>  </p>\n</li>\n</ol>\n<h3 id=\"十一、插件化\"><a href=\"#十一、插件化\" class=\"headerlink\" title=\"十一、插件化\"></a>十一、插件化</h3><p>更多见：<a href=\"http://www.trinea.cn/android/android-plugin/\" target=\"_blank\" rel=\"external\">Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案</a>  </p>\n<ol>\n<li><p>dynamic-load-apk<br>Android 动态加载 Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决<br>项目地址：<a href=\"https://github.com/singwhatiwanna/dynamic-load-apk\" target=\"_blank\" rel=\"external\">https://github.com/singwhatiwanna/dynamic-load-apk</a><br>原理剖析文档：<a href=\"http://a.codekk.com/detail/Android/FFish/DynamicLoadApk 源码解析\" target=\"_blank\" rel=\"external\">dynamic-load-apk</a><br>文档介绍：<a href=\"http://blog.csdn.net/singwhatiwanna/article/details/22597587\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/singwhatiwanna/article/details/22597587</a>  </p>\n</li>\n<li><p>Android Dynamic Loader<br>点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br>项目地址：<a href=\"https://github.com/mmin18/AndroidDynamicLoader\" target=\"_blank\" rel=\"external\">https://github.com/mmin18/AndroidDynamicLoader</a><br>Demo 地址：<a href=\"https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk\" target=\"_blank\" rel=\"external\">https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk</a>  </p>\n</li>\n<li><p>xCombine<br>Android App 插件式插件开发，插件必须先安装，更推荐看上面两个开源项目<br>项目地址：<a href=\"https://github.com/wyouflf/xCombine\" target=\"_blank\" rel=\"external\">https://github.com/wyouflf/xCombine</a><br>文档介绍：<a href=\"http://my.oschina.net/u/1171837/blog/155377\" target=\"_blank\" rel=\"external\">http://my.oschina.net/u/1171837/blog/155377</a>  </p>\n</li>\n<li><p>Android Plugin Framework<br>Android 插件式开发，开放的源码目前不完整<br>项目地址：<a href=\"https://github.com/umeng/apf\" target=\"_blank\" rel=\"external\">https://github.com/umeng/apf</a>  </p>\n</li>\n<li><p>Android OpenAtlas<br>Android插件框架，基于OSGI，非代理方式，组件需要在宿主中声明<br>项目地址：<a href=\"https://github.com/bunnyblue/OpenAtlas\" target=\"_blank\" rel=\"external\">https://github.com/bunnyblue/OpenAtlas</a><br>Demo 地址：<a href=\"https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk\" target=\"_blank\" rel=\"external\">https://github.com/bunnyblue/OpenAtlasExtension/blob/master/Dist/OpenAtlasLauncher.apk</a> </p>\n</li>\n<li><p>multidex<br>安装多 dex 的 classloader<br>项目地址：<a href=\"https://github.com/casidiablo/multidex\" target=\"_blank\" rel=\"external\">https://github.com/casidiablo/multidex</a>  </p>\n</li>\n<li><p>ANR-WatchDog<br>Android ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件<br>项目地址：<a href=\"https://github.com/SalomonBrys/ANR-WatchDog\" target=\"_blank\" rel=\"external\">https://github.com/SalomonBrys/ANR-WatchDog</a>  </p>\n</li>\n</ol>\n<h3 id=\"十二、文件\"><a href=\"#十二、文件\" class=\"headerlink\" title=\"十二、文件\"></a>十二、文件</h3><p>对不同文档类型的处理，包括 PDF、Word、EPub、Html、Zip 等  </p>\n<ol>\n<li><p>purePDF<br>允许从任何运行的 SWF 文件读取和创建 PDF 文档<br>项目地址：<a href=\"https://github.com/sephiroth74/purePDF\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/purePDF</a>  </p>\n</li>\n<li><p>android-pdfview<br>快速解析 pdf 的 view，默认支持手势缩放和相关动画<br>项目地址：<a href=\"https://github.com/JoanZapata/android-pdfview\" target=\"_blank\" rel=\"external\">https://github.com/JoanZapata/android-pdfview</a>  </p>\n</li>\n<li><p>Office 365 SDK for Android Preview<br>可支持 Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail<br>项目地址：<a href=\"https://github.com/OfficeDev/Office-365-SDK-for-Android\" target=\"_blank\" rel=\"external\">https://github.com/OfficeDev/Office-365-SDK-for-Android</a>  </p>\n</li>\n<li><p>OpenSpritz-Android<br>EPub 阅读器<br>项目地址：<a href=\"https://github.com/OnlyInAmerica/OpenSpritz-Android\" target=\"_blank\" rel=\"external\">https://github.com/OnlyInAmerica/OpenSpritz-Android</a>  </p>\n</li>\n<li><p>jsoup<br>一个解析 html 的 java 库，可方便的提取和操作数据<br>项目地址：<a href=\"https://github.com/jhy/jsoup\" target=\"_blank\" rel=\"external\">https://github.com/jhy/jsoup</a><br>官网网址：<a href=\"http://jsoup.org/\" target=\"_blank\" rel=\"external\">http://jsoup.org/</a><br>作用：(1) 从一个 url、文件或 string 获得 html 并解析<br>(2) 利用 dom 遍历或 css 选择器查找、提取数据<br>(3) 操作 html 元素<br>(4) 根据白名单去除用于提交的非法数据防止 xss 攻击<br>(5) 输出整齐的 html  </p>\n</li>\n<li><p>ZIP<br>java 压缩和解压库<br>项目地址：<a href=\"https://github.com/zeroturnaround/zt-zip\" target=\"_blank\" rel=\"external\">https://github.com/zeroturnaround/zt-zip</a><br>文档介绍：<a href=\"https://github.com/zeroturnaround/zt-zip#examples\" target=\"_blank\" rel=\"external\">https://github.com/zeroturnaround/zt-zip#examples</a><br>作用：(1) 解压和压缩，并支持文件夹内递归操作<br>(2) 支持包含和排除某些元素<br>(3) 支持重命名元素<br>(4) 支持遍历 zip 包内容<br>(5) 比较两个 zip 包等功能  </p>\n</li>\n<li><p>Image File Selector<br>轻量级的图片文件选择器，用系统api选取，压缩和裁切图片，可以方便的得要指定尺寸的图片<br>项目地址：<a href=\"https://github.com/sw926/ImageFileSelector\" target=\"_blank\" rel=\"external\">https://github.com/sw926/ImageFileSelector</a>  </p>\n</li>\n</ol>\n<h3 id=\"十三、其他\"><a href=\"#十三、其他\" class=\"headerlink\" title=\"十三、其他\"></a>十三、其他</h3><ol>\n<li><p>FragmentStack<br>一个封装了启动模式的Fragment便捷使用库,方便构建单Activity+多Fragment轻量级框架<br>项目地址：<a href=\"https://github.com/Mr-wangyong/FragmentStack\" target=\"_blank\" rel=\"external\">https://github.com/Mr-wangyong/FragmentStack</a><br>App示例：<a href=\"http://www.wandoujia.com/apps/cn.vcinema.cinema\" target=\"_blank\" rel=\"external\">南瓜电影</a>  </p>\n</li>\n<li><p>CustomTabsHelper<br>快速集成 CustomTabs 的工具类<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/CustomTabsHelper\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/CustomTabsHelper</a>  </p>\n</li>\n<li><p>Salvage view<br>带 View 缓存的 Viewpager PagerAdapter，很方便使用<br>项目地址：<a href=\"https://github.com/JakeWharton/salvage\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/salvage</a>  </p>\n</li>\n<li><p>Android Priority Job Queue<br>Android 后台任务队列<br>项目地址：<a href=\"https://github.com/path/android-priority-jobqueue\" target=\"_blank\" rel=\"external\">https://github.com/path/android-priority-jobqueue</a><br>文档介绍：<a href=\"https://github.com/path/android-priority-jobqueue#getting-started\" target=\"_blank\" rel=\"external\">https://github.com/path/android-priority-jobqueue#getting-started</a>  </p>\n</li>\n<li><p>Cobub Razor<br>开源的 mobile 行为分析系统，包括 web 端、android 端，支持 ios 和 window phone<br>项目地址：<a href=\"https://github.com/cobub/razor\" target=\"_blank\" rel=\"external\">https://github.com/cobub/razor</a><br>Demo 地址：<a href=\"http://demo.cobub.com/razor\" target=\"_blank\" rel=\"external\">http://demo.cobub.com/razor</a><br>官网网址：<a href=\"http://dev.cobub.com/\" target=\"_blank\" rel=\"external\">http://dev.cobub.com/</a>  </p>\n</li>\n<li><p>Countly<br>Android 移动端数据采集分析系统<br>项目地址：<a href=\"https://github.com/Countly/countly-sdk-android\" target=\"_blank\" rel=\"external\">https://github.com/Countly/countly-sdk-android</a><br>官网网址：<a href=\"https://count.ly/\" target=\"_blank\" rel=\"external\">https://count.ly/</a>  </p>\n</li>\n<li><p>aFileChooser<br>文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。<br>项目地址：<a href=\"https://github.com/iPaulPro/aFileChooser\" target=\"_blank\" rel=\"external\">https://github.com/iPaulPro/aFileChooser</a>  </p>\n</li>\n<li><p>androidpn<br>基于 xmpp 协议的消息推送解决方案，包括服务器端和 android 端。<br>项目地址：<a href=\"https://github.com/dannytiehui/androidpn\" target=\"_blank\" rel=\"external\">https://github.com/dannytiehui/androidpn</a>  </p>\n</li>\n<li><p>Bolts<br>Android 的异步编程模式<br>项目地址：<a href=\"https://github.com/BoltsFramework/Bolts-Android/\" target=\"_blank\" rel=\"external\">https://github.com/BoltsFramework/Bolts-Android/</a><br>与 AsyncTask 比较：(1) 使用的是无大小限制的线程池<br>(2) 任务可组合可级联，防止了代码耦合  </p>\n</li>\n<li><p>CastCompanionLibrary-android<br>使 Android 程序中更快的接入 Google Cast<br>项目地址：<a href=\"https://github.com/googlecast/CastCompanionLibrary-android\" target=\"_blank\" rel=\"external\">https://github.com/googlecast/CastCompanionLibrary-android</a><br>文档介绍：<a href=\"https://developers.google.com/cast/\" target=\"_blank\" rel=\"external\">https://developers.google.com/cast/</a>  </p>\n</li>\n<li><p>CastVideos-android<br>从 Android 设备分享 Video 通过 Google Cast<br>项目地址：<a href=\"https://github.com/googlecast/CastVideos-android\" target=\"_blank\" rel=\"external\">https://github.com/googlecast/CastVideos-android</a><br>文档介绍：<a href=\"https://developers.google.com/cast/\" target=\"_blank\" rel=\"external\">https://developers.google.com/cast/</a>  </p>\n</li>\n<li><p>Uninstall_Statics<br>Android 应用自身被卸载监听及打开浏览器等反馈功能实现<br>项目地址：<a href=\"https://github.com/sevenler/Uninstall_Statics\" target=\"_blank\" rel=\"external\">https://github.com/sevenler/Uninstall_Statics</a><br>文档介绍：<a href=\"http://www.cnblogs.com/zealotrouge/p/3157126.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zealotrouge/p/3157126.html</a>  <a href=\"http://www.cnblogs.com/zealotrouge/p/3159772.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zealotrouge/p/3159772.html</a>  </p>\n</li>\n<li><p>Memento<br>保证在系统配置改变时，Activity 中的某些数据可以简单安全的保持不变<br>项目地址：<a href=\"https://github.com/mttkay/memento\" target=\"_blank\" rel=\"external\">https://github.com/mttkay/memento</a><br>文档介绍：<a href=\"https://github.com/mttkay/memento#usage\" target=\"_blank\" rel=\"external\">https://github.com/mttkay/memento#usage</a>  </p>\n</li>\n<li><p>FreeFlow<br>布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画<br>项目地址：<a href=\"https://github.com/Comcast/FreeFlow\" target=\"_blank\" rel=\"external\">https://github.com/Comcast/FreeFlow</a><br>Demo 地址：<a href=\"https://github.com/Comcast/FreeFlow/releases\" target=\"_blank\" rel=\"external\">https://github.com/Comcast/FreeFlow/releases</a>  </p>\n</li>\n<li><p>Android Gesture Detectors Framework<br>Android 手势框架，支持双指旋转、移动、平移、缩放等<br>项目地址：<a href=\"https://github.com/Almeros/android-gesture-detectors\" target=\"_blank\" rel=\"external\">https://github.com/Almeros/android-gesture-detectors</a>  </p>\n</li>\n<li><p>Mapbox Android SDK<br>Android Map 的替代版<br>项目地址：<a href=\"https://github.com/mapbox/mapbox-android-sdk\" target=\"_blank\" rel=\"external\">https://github.com/mapbox/mapbox-android-sdk</a>  </p>\n</li>\n<li><p>Activity animation<br>Activity 跳转动画，支持各个方向波浪的效果<br>项目地址：<a href=\"https://github.com/flavienlaurent/activityanimation\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/activityanimation</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=-E0sc6w_Jck\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=-E0sc6w_Jck</a>  </p>\n</li>\n<li><p>KryoNet<br>通过 NIO 提供客户端和服务器端 TCP/UDP 网络传输的 Java 库<br>项目地址：<a href=\"https://github.com/EsotericSoftware/kryonet\" target=\"_blank\" rel=\"external\">https://github.com/EsotericSoftware/kryonet</a>  </p>\n</li>\n<li><p>Rebound<br>一个模仿弹簧反弹的 Java 库，可用于创建动画<br>项目地址：<a href=\"https://github.com/facebook/rebound\" target=\"_blank\" rel=\"external\">https://github.com/facebook/rebound</a>  </p>\n</li>\n<li><p>Android Social Networks<br>社交网络接入统一管理器，可方便的从 Twitter, LinkedIn, Facebook, Google Plus 登陆、获得个人信息、发送消息、发送专篇、添加或删除好友<br>项目地址：<a href=\"https://github.com/antonkrasov/AndroidSocialNetworks\" target=\"_blank\" rel=\"external\">https://github.com/antonkrasov/AndroidSocialNetworks</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos</a>  </p>\n</li>\n<li><p>SmartAppUpdates<br>Android App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级<br>项目地址：<a href=\"https://github.com/cundong/SmartAppUpdates\" target=\"_blank\" rel=\"external\">https://github.com/cundong/SmartAppUpdates</a>  </p>\n</li>\n<li><p>Magnet<br>创建类似 Facebook 聊天桌面悬浮窗的效果<br>项目地址：<a href=\"https://github.com/premnirmal/Magnet\" target=\"_blank\" rel=\"external\">https://github.com/premnirmal/Magnet</a>  </p>\n</li>\n<li><p>AcDisplay<br>将 Android 的通知都集中到锁屏显示<br>项目地址：<a href=\"https://github.com/AChep/AcDisplay\" target=\"_blank\" rel=\"external\">https://github.com/AChep/AcDisplay</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.achep.acdisplay\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.achep.acdisplay</a>  </p>\n</li>\n<li><p>QrCodeScan<br>ZXing 和 ZBar 结合的二维码扫描项目，提高了扫描效率<br>项目地址：<a href=\"https://github.com/SkillCollege/QrCodeScan\" target=\"_blank\" rel=\"external\">https://github.com/SkillCollege/QrCodeScan</a>  </p>\n</li>\n<li><p>Android-ScreenShot<br>实现 android 系统截屏功能<br>项目地址：<a href=\"https://github.com/Android-ScreenShot/AndroidScreenShotService\" target=\"_blank\" rel=\"external\">https://github.com/Android-ScreenShot/AndroidScreenShotService</a><br>文档介绍：<a href=\"http://blog.csdn.net/buptgshengod/article/details/39155979\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/buptgshengod/article/details/39155979</a>  </p>\n</li>\n<li><p>card.io SDK for Android<br>信用卡扫描 Android SDK<br>项目地址：<a href=\"https://github.com/card-io/card.io-Android-SDK\" target=\"_blank\" rel=\"external\">https://github.com/card-io/card.io-Android-SDK</a><br>Demo 项目：<a href=\"https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp\" target=\"_blank\" rel=\"external\">https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp</a>  </p>\n</li>\n<li><p>ASNE<br>Twitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能<br>项目地址：<a href=\"https://github.com/gorbin/ASNE\" target=\"_blank\" rel=\"external\">https://github.com/gorbin/ASNE</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne</a>  </p>\n</li>\n<li><p>Android Signature Pad<br>Android 自定义的签名 View，可自定义笔颜色和大小<br>项目地址：<a href=\"https://github.com/gcacace/android-signaturepad\" target=\"_blank\" rel=\"external\">https://github.com/gcacace/android-signaturepad</a><br>Demo 项目：<a href=\"https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example\" target=\"_blank\" rel=\"external\">https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example</a>  </p>\n</li>\n<li><p>Teleport<br>Android Wear 数据同步和消息传送库<br>项目地址：<a href=\"https://github.com/Mariuxtheone/Teleport\" target=\"_blank\" rel=\"external\">https://github.com/Mariuxtheone/Teleport</a>  </p>\n</li>\n<li><p>DebugLog<br>可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。<br>项目地址：<a href=\"https://github.com/MustafaFerhan/DebugLog\" target=\"_blank\" rel=\"external\">https://github.com/MustafaFerhan/DebugLog</a>  </p>\n</li>\n<li><p>Logger<br>简单、美观而且十分强大的 Android 日志工具<br>项目地址：<a href=\"https://github.com/orhanobut/logger\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/logger</a><br>Demo 地址：<a href=\"https://github.com/orhanobut/logger/tree/master/app\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/logger/tree/master/app</a>  </p>\n</li>\n<li><p>jlog<br>可以灵活配置的日志工具，支持JSON打印，日志保存到指定文件，日志显示调用位置（混淆模式下依然有效）<br>项目地址：<a href=\"https://github.com/JiongBull/jlog\" target=\"_blank\" rel=\"external\">https://github.com/JiongBull/jlog</a><br>Demo 地址：<a href=\"https://raw.githubusercontent.com/JiongBull/jlog/master/apk/JLog_sample.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>Phrase<br>square 组开源大牛写的字符串替换类<br>项目地址：<a href=\"https://github.com/square/phrase\" target=\"_blank\" rel=\"external\">https://github.com/square/phrase</a>  </p>\n</li>\n<li><p>ColorPhrase<br>模仿 phrase 写的对字符串个别字符颜色改变的类，高效强大！<br>项目地址：<a href=\"https://github.com/THEONE10211024/ColorPhrase\" target=\"_blank\" rel=\"external\">https://github.com/THEONE10211024/ColorPhrase</a>  </p>\n</li>\n<li><p>PinyinSearch<br>一个为 T9 搜索和 Qwerty 搜索,提供数据解析与匹配等方法的拼音搜索 java 库。<br>项目地址： <a href=\"https://github.com/handsomezhou/PinyinSearchLibrary\" target=\"_blank\" rel=\"external\">https://github.com/handsomezhou/PinyinSearchLibrary</a><br>Demo 地址： <a href=\"https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/ContactsSearch.apk?raw=true\" target=\"_blank\" rel=\"external\">ContactsSearch</a>    <a href=\"https://github.com/handsomezhou/PinyinSearchLibrary/blob/master/external_res/bin/AppSearch.apk?raw=true\" target=\"_blank\" rel=\"external\">AppSearch</a><br>APP 示例： 通讯录应用，微信电话本  </p>\n</li>\n<li><p>PrainView<br>PaintView 是一个画图工具:<br>可直接使用设定按钮来实现已拥有的方法，且拓展性强<br>基础功能：更换颜色、更换橡皮、以及更换橡皮和笔的粗细、清屏、倒入图片<br>特殊功能：保存画笔轨迹帧动画、帧动画导入导出、ReDo和UnDo<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">Paintview</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/DrawAPicture.apk\" target=\"_blank\" rel=\"external\">apk地址</a><br>原理解析：<a href=\"http://www.cnblogs.com/lfk-dsk/p/4768850.html\" target=\"_blank\" rel=\"external\">PaintView 绘图控件解析</a>  </p>\n</li>\n<li><p>CodeView<br>CodeView代码查看／修改工具: 基于WebView制作的代码编辑器,实现代码高亮，暗色主题<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">CodeView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>ExplorerView<br>文件浏览器：继承自ListView，可拓展性强，可进行文件类型分析<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">CodeView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>ReadView<br>小说阅读器，支持文字字体、颜色、背景、进度等多种调整，支持一键设置。<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">ReadView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>MarkDownView<br>支持MarkDown语法的渲染器,基于WebView的MarkDown渲染器,支持标准化的MarkDown语法,<br>调用接口和CodeView保持一致使用简便<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">ReadView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>VerTextView竖行排版的TextView:<br>支持竖行排版，添加了下划线功能，开启简便，下划线粗细、颜色、间距均可自定义，<br>接口调用方式与TextView相似，使用简便。<br>项目地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">ReadView</a><br>demo地址：<a href=\"https://github.com/lfkdsk/JustWeTools/blob/master/demo/JustWeTools.apk\" target=\"_blank\" rel=\"external\">apk地址</a>  </p>\n</li>\n<li><p>GHDownload下载框架<br>支持单线程和多线程断点下载，简单易用。<br>项目地址：<a href=\"https://github.com/guanchao/GHDownload\" target=\"_blank\" rel=\"external\">GHDownload</a>  </p>\n</li>\n</ol>\n<h2 id=\"第三部分-优秀项目\"><a href=\"#第三部分-优秀项目\" class=\"headerlink\" title=\"第三部分 优秀项目\"></a>第三部分 优秀项目</h2><p>主要介绍那些 Android 还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。  </p>\n<h3 id=\"一、系统及平台\"><a href=\"#一、系统及平台\" class=\"headerlink\" title=\"一、系统及平台\"></a>一、系统及平台</h3><ol>\n<li>Linux<br>项目地址：<a href=\"https://github.com/torvalds/linux\" target=\"_blank\" rel=\"external\">https://github.com/torvalds/linux</a>  </li>\n<li>Android<br>项目地址：<a href=\"https://android.googlesource.com/\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/</a>  </li>\n</ol>\n<h3 id=\"二、项目\"><a href=\"#二、项目\" class=\"headerlink\" title=\"二、项目\"></a>二、项目</h3><ol>\n<li><p>ZXing<br>二维码扫描工具<br>项目地址：<a href=\"https://github.com/zxing/zxing\" target=\"_blank\" rel=\"external\">https://github.com/zxing/zxing</a> 或 <a href=\"https://code.google.com/p/zxing/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/zxing/</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.google.zxing.client.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.google.zxing.client.android</a><br>其他：现在市面上很多应用的二维码扫描功能都是从这个修改而来  </p>\n</li>\n<li><p>photup<br>编辑机批量上传照片到 facebook 上<br>项目地址：<a href=\"https://github.com/chrisbanes/photup\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/photup</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.photup\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.photup</a><br>其他：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  </p>\n</li>\n<li><p>github-android<br>Github 的 Android 客户端项目<br>项目地址：<a href=\"https://github.com/github/android\" target=\"_blank\" rel=\"external\">https://github.com/github/android</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.mobile\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.mobile</a>  </p>\n</li>\n<li><p>Notes<br>MIUI 便签<br>项目地址：<a href=\"https://github.com/MiCode/Notes\" target=\"_blank\" rel=\"external\">https://github.com/MiCode/Notes</a><br>APK 地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true</a><br>其他：项目分包比较合理，相比较 miui 的文件管理器 <a href=\"https://github.com/MiCode/FileExplorer\" target=\"_blank\" rel=\"external\">https://github.com/MiCode/FileExplorer</a> 代码规范较好得多  </p>\n</li>\n<li><p>weicuiyuan<br>四次元-新浪微博客户端<br>项目地址：<a href=\"https://github.com/qii/weiciyuan\" target=\"_blank\" rel=\"external\">https://github.com/qii/weiciyuan</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=org.qii.weiciyuan\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.qii.weiciyuan</a>  </p>\n</li>\n<li><p>Douya<br>豆芽——Material Design 的豆瓣客户端<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/Douya\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/Douya</a>  </p>\n</li>\n<li><p>gnucash-android<br>一个记账理财软件<br>项目地址：<a href=\"https://github.com/codinguser/gnucash-android\" target=\"_blank\" rel=\"external\">https://github.com/codinguser/gnucash-android</a><br>APK 地址：<a href=\"http://play.google.com/store/apps/details?id=org.gnucash.android\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=org.gnucash.android</a>  </p>\n</li>\n<li><p>AntennaPod<br>支持 rss 订阅、音乐订阅<br>项目地址：<a href=\"https://github.com/danieloeh/AntennaPod\" target=\"_blank\" rel=\"external\">https://github.com/danieloeh/AntennaPod</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=de.danoeh.antennapod\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=de.danoeh.antennapod</a>  </p>\n</li>\n<li><p>ChaseWhisplyProject<br>打鬼游戏<br>项目地址：<a href=\"https://github.com/tvbarthel/ChaseWhisplyProject\" target=\"_blank\" rel=\"external\">https://github.com/tvbarthel/ChaseWhisplyProject</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply</a>  </p>\n</li>\n<li><p>Tweet Lanes<br>功能完整的 Twitter 客户端<br>项目地址：<a href=\"https://github.com/chrislacy/TweetLanes\" target=\"_blank\" rel=\"external\">https://github.com/chrislacy/TweetLanes</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.tweetlanes.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.tweetlanes.android</a>  </p>\n</li>\n<li><p>Financius<br>简单易用的记账程序<br>项目地址：<a href=\"https://github.com/mvarnagiris/Financius\" target=\"_blank\" rel=\"external\">https://github.com/mvarnagiris/Financius</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.code44.finance\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.code44.finance</a>  </p>\n</li>\n<li><p>todo.txt-android<br>todo.txt 的官方 Android 应用<br>项目地址：<a href=\"https://github.com/ginatrapani/todo.txt-android\" target=\"_blank\" rel=\"external\">https://github.com/ginatrapani/todo.txt-android</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch</a>  </p>\n</li>\n<li><p>simpletask<br>基于 todo.txt 官方应用的另一个客户端<br>项目地址：<a href=\"https://github.com/mpcjanssen/simpletask-android\" target=\"_blank\" rel=\"external\">https://github.com/mpcjanssen/simpletask-android</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo</a>  </p>\n</li>\n<li><p>Muzei Live Wallpaper<br>定时更换桌面精美壁纸<br>项目地址：<a href=\"https://github.com/romannurik/muzei\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/muzei</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=net.nurik.roman.muzei\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.nurik.roman.muzei</a>  </p>\n</li>\n<li><p>Scanbook<br>扫描搜索查询图书信息<br>项目地址：<a href=\"https://github.com/JayFang1993/ScanBook\" target=\"_blank\" rel=\"external\">https://github.com/JayFang1993/ScanBook</a><br>APK 地址：<a href=\"http://www.wandoujia.com/apps/com.scanbook\" target=\"_blank\" rel=\"external\">http://www.wandoujia.com/apps/com.scanbook</a>  </p>\n</li>\n<li><p>iosched<br>The Google I/O 2014 Android App<br>项目地址：<a href=\"https://github.com/google/iosched\" target=\"_blank\" rel=\"external\">https://github.com/google/iosched</a><br>APK 地址：<a href=\"https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched</a>  </p>\n</li>\n</ol>\n<h2 id=\"第四部分-开发工具及测试工具\"><a href=\"#第四部分-开发工具及测试工具\" class=\"headerlink\" title=\"第四部分 开发工具及测试工具\"></a>第四部分 开发工具及测试工具</h2><p>主要介绍和 Android 开发工具和测试工具相关的开源项目。  </p>\n<h3 id=\"一、开发效率工具\"><a href=\"#一、开发效率工具\" class=\"headerlink\" title=\"一、开发效率工具\"></a>一、开发效率工具</h3><ol>\n<li><p>Parceler<br>通过注解及工具类自动完成实体类 Parcelable 及值传递<br>项目地址：<a href=\"https://github.com/johncarl81/parceler\" target=\"_blank\" rel=\"external\">https://github.com/johncarl81/parceler</a>  </p>\n</li>\n<li><p>Json2Java<br>根据 JSon 数据自动生成对应的 Java 实体类，还支持 Parcel、Gson Annotations 对应代码自动生成。期待后续的提取父类以及多 url 构建整个工程的功能<br>项目地址：<a href=\"https://github.com/jonfhancock/JsonToJava\" target=\"_blank\" rel=\"external\">https://github.com/jonfhancock/JsonToJava</a><br>在线演示：<a href=\"http://jsontojava.appspot.com/\" target=\"_blank\" rel=\"external\">http://jsontojava.appspot.com/</a>  </p>\n</li>\n<li><p>IntelliJ Plugin for Android Parcelable boilerplate code generation<br>Android studio 插件，生成 Parcelable 代码<br>项目地址：<a href=\"https://github.com/mcharmas/android-parcelable-intellij-plugin\" target=\"_blank\" rel=\"external\">https://github.com/mcharmas/android-parcelable-intellij-plugin</a>  </p>\n</li>\n<li><p>Android Holo Colors IntelliJ Plugin<br>Android studio 插件，生成 holo 样式 9 patch 图片<br>项目地址：<a href=\"https://github.com/jeromevdl/android-holo-colors-idea-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jeromevdl/android-holo-colors-idea-plugin</a>  </p>\n</li>\n<li><p>Android Drawable Factory<br>用于生成各个分辨率的图片<br>项目地址：<a href=\"https://github.com/tizionario/AndroidDrawableFactory\" target=\"_blank\" rel=\"external\">https://github.com/tizionario/AndroidDrawableFactory</a>  </p>\n</li>\n<li><p>SelectorChapek for Android<br>Android Studio 插件，可根据固定文件名格式资源自动生成 drawable selectors xml 文件。<br>项目地址：<a href=\"https://github.com/inmite/android-selector-chapek\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-selector-chapek</a>  </p>\n</li>\n<li><p>Android Action Bar Style Generator<br>Android ActionBar 样式生成器，可在线选择 ActionBar 样式自动生成所需要的图片资源及 xml 文件<br>项目地址：<a href=\"https://github.com/jgilfelt/android-actionbarstylegenerator\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-actionbarstylegenerator</a><br>在线演示：<a href=\"http://jgilfelt.github.io/android-actionbarstylegenerator/\" target=\"_blank\" rel=\"external\">http://jgilfelt.github.io/android-actionbarstylegenerator/</a>  </p>\n</li>\n<li><p>ButterKnifeZelezny<br>用于快速生成<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a>View 注入代码的 Android Studio/IDEA 插件<br>项目地址：<a href=\"https://github.com/inmite/android-butterknife-zelezny\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-butterknife-zelezny</a>  </p>\n</li>\n<li><p>RoboCoP<br>利用 Gradle task 根据固定格式的 json 文件生成 ContentProvider<br>项目地址：<a href=\"https://github.com/mediarain/RoboCoP\" target=\"_blank\" rel=\"external\">https://github.com/mediarain/RoboCoP</a>  </p>\n</li>\n<li><p>appiconsizes<br>用于生成各个分辨率的图片<br>项目地址：<a href=\"http://www.appiconsizes.com/\" target=\"_blank\" rel=\"external\">http://www.appiconsizes.com/</a>  </p>\n</li>\n<li><p>AndroidUtiles<br>集合了所有常用的安卓工具类<br>项目地址：<a href=\"https://github.com/l123456789jy/Lazy\" target=\"_blank\" rel=\"external\">https://github.com/l123456789jy/Lazy</a></p>\n</li>\n<li><p>Gradle Retrolambda Plugin<br><a href=\"https://github.com/orfjackal/retrolambda\" target=\"_blank\" rel=\"external\">Retrolambda</a>是将 Java8 的 Lambdas 应用于 Java7 的工具，本项目是 Gradle 插件，通过 Retrolambda 从而使 Java 或 Android 项目用 Java8 的 Lambdas 编写，将编译后的字节码转换为 Java6 和 7 的字节码从而正常运行<br>项目地址：<a href=\"https://github.com/evant/gradle-retrolambda\" target=\"_blank\" rel=\"external\">https://github.com/evant/gradle-retrolambda</a>  </p>\n</li>\n<li><p>Dagger IntelliJ Plugin<br>dagger 的 intellij 插件<br>项目地址：<a href=\"https://github.com/square/dagger-intellij-plugin\" target=\"_blank\" rel=\"external\">https://github.com/square/dagger-intellij-plugin</a>  </p>\n</li>\n<li><p>Android Gen Drawable Maven plugin<br>在编译时根据 SVG 描述文件生成不同分辨率的 jpg、png 或点 9 图片<br>项目地址：<a href=\"https://github.com/avianey/androidgendrawable-maven-plugin\" target=\"_blank\" rel=\"external\">https://github.com/avianey/androidgendrawable-maven-plugin</a>  </p>\n</li>\n<li><p>Android Asset Studio<br>各种 Android 资源自动生成器，包括启动图标、ActionBar 图标、通知栏图标、点 9 等<br>项目地址：<a href=\"https://github.com/romannurik/AndroidAssetStudio\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/AndroidAssetStudio</a><br>在线演示：<a href=\"http://romannurik.github.io/AndroidAssetStudio/\" target=\"_blank\" rel=\"external\">http://romannurik.github.io/AndroidAssetStudio/</a>  </p>\n</li>\n<li><p>jsonschema2pojo<br>根据 Json 内容生成 java 对象，支持 jackjson 和 gson<br>项目地址：<a href=\"https://github.com/joelittlejohn/jsonschema2pojo\" target=\"_blank\" rel=\"external\">https://github.com/joelittlejohn/jsonschema2pojo</a><br>在线演示：<a href=\"http://www.jsonschema2pojo.org/\" target=\"_blank\" rel=\"external\">http://www.jsonschema2pojo.org/</a>  </p>\n</li>\n<li><p>GsonFormat<br>根据 JSONObject 格式的字符串,自动生成实体类参数的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href=\"https://github.com/zzz40500/GsonFormat\" target=\"_blank\" rel=\"external\">https://github.com/zzz40500/GsonFormat</a>  </p>\n</li>\n<li><p>9-Patch-Resizer<br>自动生成 png 及点 9 图片的不同分辨率版本<br>项目地址：<a href=\"https://github.com/redwarp/9-Patch-Resizer\" target=\"_blank\" rel=\"external\">https://github.com/redwarp/9-Patch-Resizer</a>  </p>\n</li>\n<li><p>AndroidLocalizationer<br>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href=\"https://github.com/westlinkin/AndroidLocalizationer\" target=\"_blank\" rel=\"external\">https://github.com/westlinkin/AndroidLocalizationer</a>  </p>\n</li>\n<li><p>Material Palette<br>一个将现有的色彩方案组合成材料设计的调色板方案，提供下载。选取两个主要色彩后便可以提供下载，提供下载的格式可以是 android 的资源 xml 文件，以色彩的方式提供，也可以是 CSS、SVG、PNG 等常见格式文件。<br>项目地址：<a href=\"http://www.materialpalette.com/\" target=\"_blank\" rel=\"external\">http://www.materialpalette.com/</a>  </p>\n</li>\n</ol>\n<h3 id=\"二、开发自测相关\"><a href=\"#二、开发自测相关\" class=\"headerlink\" title=\"二、开发自测相关\"></a>二、开发自测相关</h3><ol>\n<li><p>Quality Tools for Android<br>Android 测试及自测工具集合和示例<br>项目地址：<a href=\"https://github.com/stephanenicolas/Quality-Tools-for-Android\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/Quality-Tools-for-Android</a>  </p>\n</li>\n<li><p>android-test-kit<br>Google 的 Android 测试工具<br>包括 GoogleInstrumentationTestRunner(增强版的 InstrumentationTestRunner)和 Espresso(用于快速写出可靠测试用例的 API)<br>项目地址：<a href=\"https://code.google.com/p/android-test-kit/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-test-kit/</a><br>文档介绍：<a href=\"https://code.google.com/p/android-test-kit/w/list\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-test-kit/w/list</a>  </p>\n</li>\n<li><p>robolectric<br>测试用例编写框架<br>项目地址：<a href=\"https://github.com/robolectric/robolectric\" target=\"_blank\" rel=\"external\">https://github.com/robolectric/robolectric</a><br>Demo 地址：<a href=\"https://github.com/robolectric/robolectricsample\" target=\"_blank\" rel=\"external\">https://github.com/robolectric/robolectricsample</a><br>文档介绍：<a href=\"http://robolectric.org/\" target=\"_blank\" rel=\"external\">http://robolectric.org/</a><br>特点：(1). 不需要模拟器在一般 JVM 就可以运行测试用例<br>(2). 能完成在真机上的大部分测试包括感应器<br>其他的测试用例及相关模块 Mock 可见：<a href=\"https://code.google.com/p/android-mock/\" target=\"_blank\" rel=\"external\">android-mock</a>, <a href=\"https://code.google.com/p/mockito/\" target=\"_blank\" rel=\"external\">mockito</a>, <a href=\"https://github.com/easymock/easymock\" target=\"_blank\" rel=\"external\">easy-mock</a>  </p>\n</li>\n<li><p>Android FEST<br>提供一些列方便的断言，可用于提高编写 Android 自测代码效率<br>项目地址：<a href=\"https://github.com/square/fest-android\" target=\"_blank\" rel=\"external\">https://github.com/square/fest-android</a>  </p>\n</li>\n<li><p>BoundBox<br>可用于测试类各种访问权限的属性、方法。实际是通过 BoundBox 这个 annotation 生成一个属性和方法都是 public 权限的中间类并对此类进行测试完成的<br>项目地址：<a href=\"https://github.com/stephanenicolas/boundbox\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/boundbox</a>  </p>\n</li>\n<li><p>Hugo<br>用于打印函数信息及执行时间的工具，仅在 debug 模式生效<br>项目地址：<a href=\"https://github.com/JakeWharton/hugo\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/hugo</a>  </p>\n</li>\n<li><p>scalpel<br>在应用下面添加一层用于界面调试<br>项目地址：<a href=\"https://github.com/JakeWharton/scalpel\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/scalpel</a>  </p>\n</li>\n<li><p>Android Screenshot library<br>Android 截图工具类，用于在持续集成时截图<br>项目地址：<a href=\"https://github.com/rtyley/android-screenshot-lib\" target=\"_blank\" rel=\"external\">https://github.com/rtyley/android-screenshot-lib</a>  </p>\n</li>\n<li><p>sonar-android-lint-plugin<br>将 android lint 的错误在 sonar 中展现<br>项目地址：<a href=\"https://github.com/SonarCommunity/sonar-android\" target=\"_blank\" rel=\"external\">https://github.com/SonarCommunity/sonar-android</a>  </p>\n</li>\n</ol>\n<h3 id=\"三、测试工具\"><a href=\"#三、测试工具\" class=\"headerlink\" title=\"三、测试工具\"></a>三、测试工具</h3><ol>\n<li><p>Spoon<br>可用于 android 不同机型设备自动化测试，能将应用 apk 和测试 apk 运行在不同机器上并生成相应测试报告。<br>项目地址：<a href=\"https://github.com/square/spoon\" target=\"_blank\" rel=\"external\">https://github.com/square/spoon</a>  </p>\n</li>\n<li><p>Tencent APT<br>APT 是腾讯开源的一个 Android 平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试<br>项目地址：<a href=\"https://github.com/stormzhang/APT\" target=\"_blank\" rel=\"external\">https://github.com/stormzhang/APT</a>  </p>\n</li>\n<li><p>Emmagee<br>网易开源的性能测试工具，包括 CPU、内存、网络流量、启动时间、电池状态等<br>项目地址：<a href=\"https://github.com/NetEase/Emmagee\" target=\"_blank\" rel=\"external\">https://github.com/NetEase/Emmagee</a>  </p>\n</li>\n<li><p>Android py-uiautomator<br>py-uiautomator 是一个对 Android uiautomator 用 python 进行封装的测试框架.<br>项目地址：<a href=\"https://github.com/xiaocong/uiautomator\" target=\"_blank\" rel=\"external\">https://github.com/xiaocong/uiautomator</a>  </p>\n</li>\n<li><p>Augmented Traffic Control<br>模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率<br>项目地址：<a href=\"https://github.com/facebook/augmented-traffic-control\" target=\"_blank\" rel=\"external\">https://github.com/facebook/augmented-traffic-control</a>  </p>\n</li>\n<li><p>stetho<br>强大的 Android Debug 工具。支持网络请求监控以及数据库查看，可以和 Chrome DevTools 结合或者命令行模式。<br>项目地址：<a href=\"https://github.com/facebook/stetho\" target=\"_blank\" rel=\"external\">https://github.com/facebook/stetho</a>  </p>\n</li>\n</ol>\n<h3 id=\"四、开发及编译环境\"><a href=\"#四、开发及编译环境\" class=\"headerlink\" title=\"四、开发及编译环境\"></a>四、开发及编译环境</h3><ol>\n<li><p>Buck<br>facebook 开源的 Android 编译工具，效率是 ant 的两倍。主要优点在于：<br>(1) 加快编译速度，通过并行利用多核 cpu 和跟踪不变资源减少增量编译时间实现<br>(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件<br>(3) 编译同时可生成单元测试结果<br>(4) 既可用于 IDE 编译也可用于持续集成编译<br>(5) facebook 持续优化中<br>项目地址：<a href=\"https://github.com/facebook/buck\" target=\"_blank\" rel=\"external\">https://github.com/facebook/buck</a>  </p>\n</li>\n<li><p>Android Maven Plugin<br>Android Maven 插件，可用于对 android 三方依赖进行管理。在 J2EE 开发中，maven 是非常成熟的依赖库管理工具，可统一管理依赖库。<br>项目地址：<a href=\"https://github.com/jayway/maven-android-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jayway/maven-android-plugin</a>  </p>\n</li>\n<li><p>umeng-muti-channel-build-tool<br>渠道打包工具<br>项目地址：<a href=\"https://github.com/umeng/umeng-muti-channel-build-tool\" target=\"_blank\" rel=\"external\">https://github.com/umeng/umeng-muti-channel-build-tool</a><br>另可参见 Google 的构建系统 Gradle：<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\" target=\"_blank\" rel=\"external\">http://tools.android.com/tech-docs/new-build-system/user-guide</a>  </p>\n</li>\n<li><p>Genymotion<br>目前最好用最快的 android 模拟器<br>项目地址：<a href=\"http://www.genymotion.com/\" target=\"_blank\" rel=\"external\">http://www.genymotion.com/</a><br>Android studio 集成控件： <a href=\"http://plugins.jetbrains.com/plugin/7269?pr=idea\" target=\"_blank\" rel=\"external\">http://plugins.jetbrains.com/plugin/7269?pr=idea</a><br>Cyril Mottier 推荐：<a href=\"http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/\" target=\"_blank\" rel=\"external\">http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/</a>  </p>\n</li>\n<li><p>gradle-mvn-push<br>方便的将 Gradle 的 Artifacts 上传到 Maven 仓库<br>项目地址：<a href=\"https://github.com/chrisbanes/gradle-mvn-push\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/gradle-mvn-push</a><br>文档介绍：<a href=\"https://github.com/chrisbanes/gradle-mvn-push#usage\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/gradle-mvn-push#usage</a>  </p>\n</li>\n<li><p>Android Emulator Plugin for Jenkins<br>Android 模拟器 jenkins 插件，用于 Jenkins 做持续集成时跑模拟器测试<br>项目地址：<a href=\"https://github.com/jenkinsci/android-emulator-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jenkinsci/android-emulator-plugin</a>  </p>\n</li>\n<li><p>Android Maven Plugin<br>管理应用所需要的依赖库。包括的构建工具有 Maven、Gradle、ant、sbt<br>项目地址：<a href=\"https://github.com/mosabua/maven-android-sdk-deployer\" target=\"_blank\" rel=\"external\">https://github.com/mosabua/maven-android-sdk-deployer</a>  </p>\n</li>\n<li><p>SDK Manager Plugin<br>下载和管理 Android SDK 的 Gradle 插件<br>项目地址：<a href=\"https://github.com/JakeWharton/sdk-manager-plugin\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/sdk-manager-plugin</a>  </p>\n</li>\n<li><p>Gradle Protobuf Plugin<br>将.proto 文件转换成 Java 文件的 gradle 插件<br>项目地址：<a href=\"https://github.com/andrewkroh/gradle-protobuf-plugin\" target=\"_blank\" rel=\"external\">https://github.com/andrewkroh/gradle-protobuf-plugin</a>  </p>\n</li>\n<li><p>ChromeADB<br>Chrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等<br>项目地址：<a href=\"https://github.com/importre/chromeadb\" target=\"_blank\" rel=\"external\">https://github.com/importre/chromeadb</a>  </p>\n</li>\n</ol>\n<h3 id=\"五、其他\"><a href=\"#五、其他\" class=\"headerlink\" title=\"五、其他\"></a>五、其他</h3><ol>\n<li><p>GT<br>APP的随身调试平台，它是直接运行在手机上的“集成调试环境”(IDTE, Integrated Debug Environment)。<br>项目地址：<a href=\"https://github.com/TencentOpen/GT\" target=\"_blank\" rel=\"external\">https://github.com/TencentOpen/GT</a><br>文档介绍：<a href=\"http://gt.qq.com/docs.html\" target=\"_blank\" rel=\"external\">http://gt.qq.com/docs.html</a>  </p>\n</li>\n<li><p>ViewServer<br>允许 app 运行在任何手机上都可以用 HierarchyViewer 查看<br>项目地址：<a href=\"https://github.com/romainguy/ViewServer\" target=\"_blank\" rel=\"external\">https://github.com/romainguy/ViewServer</a>  </p>\n</li>\n<li><p>GridWichterle for Android<br>在整个系统上显示一个 grid，用来帮助查看应用布局及使得布局更美观，可设置 grid 网格大小和颜色，android 推荐 48dp 和 8dp，可见 Android Design Guidelines – Metrics and Grids，比起 hierarchyviewer 相差甚远，不过偶尔可用来作为布局查看工具。<br>项目地址：<a href=\"https://github.com/inmite/android-grid-wichterle\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-grid-wichterle</a><br>Demo 地址：<a href=\"https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle</a>  </p>\n</li>\n<li><p>Catlog<br>手机端 log 查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程 id 过滤、录制功能等<br>项目地址：<a href=\"https://github.com/nolanlawson/Catlog\" target=\"_blank\" rel=\"external\">https://github.com/nolanlawson/Catlog</a><br>在线演示：<a href=\"https://play.google.com/store/apps/details?id=com.nolanlawson.logcat\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.nolanlawson.logcat</a>  </p>\n</li>\n<li><p>PID Cat<br>根据 package 查看 logcat 日志<br>项目地址：<a href=\"https://github.com/JakeWharton/pidcat\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/pidcat</a>  </p>\n</li>\n<li><p>ACRA<br>应用崩溃信息日志上报到 GoogleDoc 工具，网页版展现结果三方开源地址 <a href=\"https://github.com/BenoitDuffez/crashreportsviewer\" target=\"_blank\" rel=\"external\">https://github.com/BenoitDuffez/crashreportsviewer</a><br>项目地址：<a href=\"https://github.com/ACRA/acra\" target=\"_blank\" rel=\"external\">https://github.com/ACRA/acra</a><br>文档介绍：<a href=\"https://github.com/ACRA/acra/wiki/BasicSetup\" target=\"_blank\" rel=\"external\">https://github.com/ACRA/acra/wiki/BasicSetup</a>  </p>\n</li>\n<li><p>Crashlytics<br>提供丰富的应用崩溃信息日志收集<br>轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知<br>项目地址：<a href=\"http://www.crashlytics.com/\" target=\"_blank\" rel=\"external\">http://www.crashlytics.com/</a><br>集成插件：<a href=\"http://try.crashlytics.com/sdk-android/?utm_source=blog&amp;utm_medium=blog&amp;utm_campaign=Announcing_android_studio_wp&amp;utm_content=CTA_button\" target=\"_blank\" rel=\"external\">Android Studio, Eclipse and IntelliJ</a>  </p>\n</li>\n<li><p>Android Resource Navigator<br>chrome 插件，可以方便的查看 github 上 android 源码工程的 styles.xml 和 themes.xml。主要功能：<br>(1) 快速打开 android styles.xml themes.xml<br>(2) 方便在资源间跳转。styles.xml themes.xml 文件中资源链接跳转，可以方便跳转到某个资源<br>(3) 方便查找某个 style 和 theme。chrome 地址栏输入 arn+tab+搜索内容回车即可<br>(4) 自动下载不同分辨率下的 drawable<br>(5) 通过映射查找那些不是按照固定命名规则命名的 style 和 theme<br>项目地址：<a href=\"https://github.com/jgilfelt/android-resource-navigator\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-resource-navigator</a><br>在线演示：<a href=\"https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB\" target=\"_blank\" rel=\"external\">https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB</a>  </p>\n</li>\n<li><p>android-resource-remover<br>根据 lint 的提示删除项目中无用的资源，减少包的大小<br>项目地址：<a href=\"https://github.com/KeepSafe/android-resource-remover\" target=\"_blank\" rel=\"external\">https://github.com/KeepSafe/android-resource-remover</a>  </p>\n</li>\n<li><p>Telescope<br>通过手势截图以特定主题发送到特定邮箱地址报告 Bug<br>项目地址：<a href=\"https://github.com/mattprecious/telescope\" target=\"_blank\" rel=\"external\">https://github.com/mattprecious/telescope</a>  </p>\n</li>\n<li><p>Complete Android Fragment &amp; Activity Lifecycle<br>完整的 Android Fragment/Activity 生命周期图<br>项目地址：<a href=\"https://github.com/xxv/android-lifecycle\" target=\"_blank\" rel=\"external\">https://github.com/xxv/android-lifecycle</a>  </p>\n</li>\n<li><p>Bugsnag Notifier for Android<br>通过<code>Thread.UncaughtExceptionHandler</code>捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器<br>项目地址：<a href=\"https://github.com/bugsnag/bugsnag-android\" target=\"_blank\" rel=\"external\">https://github.com/bugsnag/bugsnag-android</a><br>文档介绍：<a href=\"https://github.com/bugsnag/bugsnag-android#installation--setup\" target=\"_blank\" rel=\"external\">https://github.com/bugsnag/bugsnag-android#installation--setup</a>  </p>\n</li>\n<li><p>Material Design Icons<br>Google Material Design 规范中的 Icon<br>项目地址：<a href=\"https://github.com/google/material-design-icons\" target=\"_blank\" rel=\"external\">https://github.com/google/material-design-icons</a>  </p>\n</li>\n<li><p>scrollscreenshot<br>Android 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接<br>项目地址：<a href=\"https://github.com/PGSSoft/scrollscreenshot\" target=\"_blank\" rel=\"external\">https://github.com/PGSSoft/scrollscreenshot</a>  </p>\n</li>\n<li><p>droidicon<br>1600+的海量 Icon，包括 750+的 Material Design icons<br>项目地址：<a href=\"https://github.com/theDazzler/droidicon\" target=\"_blank\" rel=\"external\">https://github.com/theDazzler/droidicon</a>  </p>\n</li>\n<li><p>leakcanary<br>Android 内存泄露检测工具，集成方便，出现泄露后报告直观<br>项目地址：<a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">https://github.com/square/leakcanary</a>  </p>\n</li>\n<li><p>CacheUtilsLibrary<br>将任何Java Object类型的数据序列化后写入缓存文件，将来使用时读取缓存文件并反序列化成对应Java Object的库<br>项目地址：<a href=\"https://github.com/westlinkin/CacheUtilsLibrary\" target=\"_blank\" rel=\"external\">https://github.com/westlinkin/CacheUtilsLibrary</a></p>\n</li>\n<li><p>BlockCanary<br>BlockCanary是一个Android平台的一个非侵入式的性能监控组件，应用只需要实现一个抽象类，提供一些该组件需要的上下文环境，就可以在平时使用应用的时候检测主线程上的各种卡慢问题，并通过组件提供的各种信息分析出原因并进行修复。<br>项目地址: <a href=\"https://github.com/moduth/blockcanary\" target=\"_blank\" rel=\"external\">https://github.com/moduth/blockcanary</a>  </p>\n</li>\n</ol>\n<h2 id=\"第五部分\"><a href=\"#第五部分\" class=\"headerlink\" title=\"第五部分\"></a>第五部分</h2><p>主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow 大神，深挖大神的项目和 following，你会发现很多。  </p>\n<h3 id=\"一、个人\"><a href=\"#一、个人\" class=\"headerlink\" title=\"一、个人\"></a>一、个人</h3><ol>\n<li><p>JakeWharton<br>就职于 Square，绝对牛逼的大神，项目主要集中在 Android 版本兼容，ViewPager 及开发工具上<br>Github 地址：<a href=\"https://github.com/JakeWharton\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton</a><br>代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel<br>pidcat 另外对 square 及其他开源项目有很多贡献<br>主页：<a href=\"http://jakewharton.com/\" target=\"_blank\" rel=\"external\">http://jakewharton.com/</a>  </p>\n</li>\n<li><p>Chris Banes<br>Github 地址：<a href=\"https://github.com/chrisbanes\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes</a><br>代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh<br>主页：<a href=\"http://chris.banes.me/\" target=\"_blank\" rel=\"external\">http://chris.banes.me/</a>  </p>\n</li>\n<li><p>Koushik Dutta<br>就职于 ClockworkMod<br>Github 地址：<a href=\"https://github.com/koush\" target=\"_blank\" rel=\"external\">https://github.com/koush</a><br>代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对 <a href=\"https://github.com/CyanogenMod\" target=\"_blank\" rel=\"external\">https://github.com/CyanogenMod</a> 的开源项目有很多贡献<br>主页：<a href=\"http://koush.com/\" target=\"_blank\" rel=\"external\">http://koush.com/</a>  </p>\n</li>\n<li><p>Simon Vig<br>Github 地址：<a href=\"https://github.com/SimonVT\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT</a><br>代表作：android-menudrawer，MessageBar<br>主页：<a href=\"http://simonvt.net/\" target=\"_blank\" rel=\"external\">http://simonvt.net/</a>  </p>\n</li>\n<li><p>Manuel Peinado<br>Github 地址：<a href=\"https://github.com/ManuelPeinado\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado</a><br>代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  </p>\n</li>\n<li><p>Emil Sj?lander<br>Github 地址：<a href=\"https://github.com/emilsjolander\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander</a><br>代表作：StickyListHeaders，sprinkles，android-FlipView<br>主页：<a href=\"http://emilsjolander.se/\" target=\"_blank\" rel=\"external\">http://emilsjolander.se/</a>  </p>\n</li>\n<li><p>greenrobot<br>Github 地址：<a href=\"https://github.com/greenrobot\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot</a><br>代表作：greenDAO，EventBus<br>主页：<a href=\"http://greenrobot.de/\" target=\"_blank\" rel=\"external\">http://greenrobot.de/</a>  </p>\n</li>\n<li><p>Jeff Gilfelt<br>Github 地址：<a href=\"https://github.com/jgilfelt\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt</a><br>代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper<br>主页：<a href=\"http://jeffgilfelt.com\" target=\"_blank\" rel=\"external\">http://jeffgilfelt.com</a>  </p>\n</li>\n<li><p>Romain Guy<br>Android team 成员(2013.10 已离开 Android team，仍在 Google)<br>Github 地址：<a href=\"https://github.com/romainguy\" target=\"_blank\" rel=\"external\">https://github.com/romainguy</a><br>代表作：ViewServer<br>主页：<a href=\"http://www.curious-creature.org/category/android/\" target=\"_blank\" rel=\"external\">http://www.curious-creature.org/category/android/</a><br>個人攝影作品：<a href=\"http://www.flickr.com/photos/romainguy\" target=\"_blank\" rel=\"external\">http://www.flickr.com/photos/romainguy</a>  </p>\n</li>\n<li><p>sephiroth74<br>就职于 Aviary.com<br>Github 地址：<a href=\"https://github.com/sephiroth74\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74</a><br>代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF<br>主页：<a href=\"http://www.sephiroth.it/\" target=\"_blank\" rel=\"external\">http://www.sephiroth.it/</a>  </p>\n</li>\n<li><p>Cyril Mottier<br>Google 开发者专家认证，发布一些 Android 技巧及文章<br>Github 地址：<a href=\"https://github.com/cyrilmottier\" target=\"_blank\" rel=\"external\">https://github.com/cyrilmottier</a><br>代表作：GreenDroid，Polaris<br>主页：<a href=\"http://cyrilmottier.com/\" target=\"_blank\" rel=\"external\">http://cyrilmottier.com/</a>  </p>\n</li>\n</ol>\n<h3 id=\"二、组织\"><a href=\"#二、组织\" class=\"headerlink\" title=\"二、组织\"></a>二、组织</h3><ol>\n<li><p>Square<br>有态度有良心的企业，很多不错的分享<br>Github 地址：<a href=\"https://github.com/square\" target=\"_blank\" rel=\"external\">https://github.com/square</a><br>代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon 等等<br>主页：<a href=\"http://square.github.io/\" target=\"_blank\" rel=\"external\">http://square.github.io/</a>  </p>\n</li>\n<li><p>Inmite s.r.o.<br>Github 地址：<a href=\"https://github.com/inmite\" target=\"_blank\" rel=\"external\">https://github.com/inmite</a><br>代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek<br>主页：<a href=\"http://www.inmite.eu/\" target=\"_blank\" rel=\"external\">http://www.inmite.eu/</a>  </p>\n</li>\n</ol>\n<h3 id=\"三、博客\"><a href=\"#三、博客\" class=\"headerlink\" title=\"三、博客\"></a>三、博客</h3><p><a href=\"https://github.com/android-cn/android-dev-com\" target=\"_blank\" rel=\"external\">部分国外著名 Android 开发者信息</a>  </p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>本文转自——<strong><a href=\"https://github.com/Trinea/android-open-project\" target=\"_blank\" rel=\"external\">Trinea 汇总的开源项目</a></strong><br>欢迎大家关注他的微信公众号：codekk。二维码如下：<br> 专注于 Android 开源分享、源码解析、框架设计、Android 内推。<br>  <img src=\"http://www.trinea.cn/wp-content/uploads/2016/01/weixin-codekk-160.jpg\" alt=\"img\"><br>   他的网站：<a href=\"http://a.codekk.com\" target=\"_blank\" rel=\"external\">www.codekk.com</a><br> <strong>关于trinea，欢迎关注</strong><br> 微博：<a title=\"Android 技术及移动互联网分享\" href=\"http://weibo.com/trinea?s=6cm7D0\" target=\"_blank\">Trinea</a>&nbsp;&nbsp;&nbsp;&nbsp;主页：<a title=\"关注于 Android、Java、性能优化、开源项目\" href=\"http://www.trinea.cn/\" target=\"_blank\">trinea.cn</a> </p>\n</blockquote>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><blockquote>\n<p><a href=\"http://a.codekk.com\" target=\"_blank\" rel=\"external\">Android 开源项目源码解析(Volley、UIL、Dagger、EventBus、插件化库等分析)</a></p>\n<p><a href=\"http://j.codekk.com\" target=\"_blank\" rel=\"external\">Android 职位内部推荐(阿里、腾讯、百度、京东、滴滴、美团、58、华为、网易、魅族等)</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjr64il5g0003kds6mch17hnp","category_id":"cjr64il5m0006kds6g0rqd8cq","_id":"cjr64il5u000fkds6l5o9j0ch"},{"post_id":"cjr64il5k0005kds6rj6ty7tb","category_id":"cjr64il5t000ckds6whyztriw","_id":"cjr64il60000mkds6xgkm5akb"},{"post_id":"cjr64il5x000jkds6yaf31ppb","category_id":"cjr64il5t000ckds6whyztriw","_id":"cjr64il63000skds6lzy98dt2"},{"post_id":"cjr64il5p0009kds67lwkeun0","category_id":"cjr64il5v000hkds6x5ufltob","_id":"cjr64il65000vkds60brilbbu"},{"post_id":"cjr64il5q000akds68w8am6x6","category_id":"cjr64il5v000hkds6x5ufltob","_id":"cjr64il670010kds6g0hekvsy"},{"post_id":"cjr64il5r000bkds6n0vv3a19","category_id":"cjr64il64000ukds6x7ckglyn","_id":"cjr64il6a0016kds66bparcy6"},{"post_id":"cjr64il5t000ekds6ziwogi2l","category_id":"cjr64il5v000hkds6x5ufltob","_id":"cjr64il6d001ckds6lmumg2ri"},{"post_id":"cjr64il5v000gkds6lhi891p4","category_id":"cjr64il5v000hkds6x5ufltob","_id":"cjr64il6g001ikds6z7htgadh"},{"post_id":"cjr64il6k001okds6l0pic3pg","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il6q001wkds67ix3zgvm"},{"post_id":"cjr64il63000tkds69a7kpsnd","category_id":"cjr64il6l001pkds6frig24sk","_id":"cjr64il6t0020kds61g7ka6kh"},{"post_id":"cjr64il6f001hkds6hthn6ndr","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7g0030kds644um2kg0"},{"post_id":"cjr64il6f001hkds6hthn6ndr","category_id":"cjr64il7e002ukds66gco04ok","_id":"cjr64il7g0032kds6i6y8gids"},{"post_id":"cjr64il5z000lkds6wwn2ufxg","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7h0034kds6q9migk26"},{"post_id":"cjr64il5z000lkds6wwn2ufxg","category_id":"cjr64il7f002wkds670skrwkh","_id":"cjr64il7i0037kds61pk6hjyr"},{"post_id":"cjr64il6g001jkds6lqbzmijn","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7j003akds69v9lpu44"},{"post_id":"cjr64il6g001jkds6lqbzmijn","category_id":"cjr64il7g0031kds6xkl15ua7","_id":"cjr64il7k003ckds69vsx3p45"},{"post_id":"cjr64il6i001mkds6236z0czv","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7k003ekds6sin677s3"},{"post_id":"cjr64il6i001mkds6236z0czv","category_id":"cjr64il7i0035kds6sy365n58","_id":"cjr64il7l003hkds603esg6rq"},{"post_id":"cjr64il61000qkds6bm3w0yr3","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7m003kkds6lnsqe5by"},{"post_id":"cjr64il61000qkds6bm3w0yr3","category_id":"cjr64il7j003bkds6jf70ykeh","_id":"cjr64il7m003mkds6trxooiui"},{"post_id":"cjr64il6m001skds6h4spkvbl","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7n003okds6pnkkqqsj"},{"post_id":"cjr64il6m001skds6h4spkvbl","category_id":"cjr64il7i0035kds6sy365n58","_id":"cjr64il7o003qkds62chjcw7n"},{"post_id":"cjr64il6r001ykds6cfmylfij","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7p003vkds62spfb5i3"},{"post_id":"cjr64il6r001ykds6cfmylfij","category_id":"cjr64il7f002wkds670skrwkh","_id":"cjr64il7q003zkds6uynmz19v"},{"post_id":"cjr64il65000xkds6t218xlmc","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7q0040kds6cpb15oik"},{"post_id":"cjr64il65000xkds6t218xlmc","category_id":"cjr64il7o003skds617x6edkx","_id":"cjr64il7r0043kds61md1b3ps"},{"post_id":"cjr64il6u0022kds6kfwodzvs","category_id":"cjr64il7r0042kds6rtz22kje","_id":"cjr64il7s0048kds6cke7uevn"},{"post_id":"cjr64il66000zkds6rkhsg2q1","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7u004dkds69s09p47v"},{"post_id":"cjr64il66000zkds6rkhsg2q1","category_id":"cjr64il7r0045kds6zscmi6qb","_id":"cjr64il7u004gkds6omixdry0"},{"post_id":"cjr64il6y0026kds6h7ogzobq","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7v004kkds6ll5c238r"},{"post_id":"cjr64il6y0026kds6h7ogzobq","category_id":"cjr64il7u004ekds6347qylxt","_id":"cjr64il7w004nkds6wjuvgfk7"},{"post_id":"cjr64il670013kds66mdg63fb","category_id":"cjr64il6x0025kds6wej55d6m","_id":"cjr64il7w004qkds6vdssph9y"},{"post_id":"cjr64il670013kds66mdg63fb","category_id":"cjr64il7v004ikds659xnigqr","_id":"cjr64il7x004ukds6j76lqfim"},{"post_id":"cjr64il6z0028kds6w3wx1qim","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il7z004xkds6klr7yumm"},{"post_id":"cjr64il6z0028kds6w3wx1qim","category_id":"cjr64il7w004mkds61kxfy985","_id":"cjr64il80004zkds6filf567v"},{"post_id":"cjr64il71002bkds64xilrdiq","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il800051kds6y5qthdoy"},{"post_id":"cjr64il71002bkds64xilrdiq","category_id":"cjr64il7x004skds61urppv8b","_id":"cjr64il800054kds6x98ia82s"},{"post_id":"cjr64il690015kds6xn9clzf4","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il810056kds6x11wrijf"},{"post_id":"cjr64il690015kds6xn9clzf4","category_id":"cjr64il7e002ukds66gco04ok","_id":"cjr64il810059kds67540ymau"},{"post_id":"cjr64il73002ekds695ls76j8","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il82005akds6gwjpqbpy"},{"post_id":"cjr64il73002ekds695ls76j8","category_id":"cjr64il800052kds66dpt18es","_id":"cjr64il83005ekds66guc1qvb"},{"post_id":"cjr64il76002hkds6ph9h19f0","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il83005gkds6tdgeyr16"},{"post_id":"cjr64il76002hkds6ph9h19f0","category_id":"cjr64il810058kds63rqhr79x","_id":"cjr64il83005jkds69mcetn5e"},{"post_id":"cjr64il6b0018kds6rabswpn5","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il84005kkds6n0rxlbnn"},{"post_id":"cjr64il6b0018kds6rabswpn5","category_id":"cjr64il7o003skds617x6edkx","_id":"cjr64il85005nkds6tcs945j4"},{"post_id":"cjr64il78002jkds67frr5j27","category_id":"cjr64il83005ikds6ht2qbj3p","_id":"cjr64il86005qkds6f0hjy3n7"},{"post_id":"cjr64il7a002mkds6r5rut60h","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il87005tkds6040y22cu"},{"post_id":"cjr64il7a002mkds6r5rut60h","category_id":"cjr64il7u004ekds6347qylxt","_id":"cjr64il87005wkds6u5s2pbem"},{"post_id":"cjr64il6c001akds68iyjbdqu","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il88005ykds6uhvu8j09"},{"post_id":"cjr64il6c001akds68iyjbdqu","category_id":"cjr64il7o003skds617x6edkx","_id":"cjr64il880062kds6v4wnyt5v"},{"post_id":"cjr64il7b002pkds6yb5q9rvc","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il890063kds64ad2vrw9"},{"post_id":"cjr64il7b002pkds6yb5q9rvc","category_id":"cjr64il7r0045kds6zscmi6qb","_id":"cjr64il8a0066kds6kml6w74d"},{"post_id":"cjr64il7d002skds6amh0oqla","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il8a0068kds6bxhyr8xa"},{"post_id":"cjr64il7d002skds6amh0oqla","category_id":"cjr64il7r0045kds6zscmi6qb","_id":"cjr64il8b006ckds6i284dpxj"},{"post_id":"cjr64il6d001ekds69ozuw8lz","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il8c006dkds6zymhj0zx"},{"post_id":"cjr64il6d001ekds69ozuw8lz","category_id":"cjr64il7j003bkds6jf70ykeh","_id":"cjr64il8c006gkds6jmhsjp8n"},{"post_id":"cjr64il6o001ukds6c9m0xsbf","category_id":"cjr64il6x0025kds6wej55d6m","_id":"cjr64il8d006ikds68w8ulg89"},{"post_id":"cjr64il6o001ukds6c9m0xsbf","category_id":"cjr64il7v004ikds659xnigqr","_id":"cjr64il8d006mkds64te1e208"},{"post_id":"cjr64il6t001zkds6fp374nl6","category_id":"cjr64il6x0025kds6wej55d6m","_id":"cjr64il8f006okds6x5ncbkq1"},{"post_id":"cjr64il6t001zkds6fp374nl6","category_id":"cjr64il8c006ekds6lxy0w0wl","_id":"cjr64il8g006qkds6gxzty7xl"},{"post_id":"cjr64il6w0024kds6n3nnkolc","category_id":"cjr64il6x0025kds6wej55d6m","_id":"cjr64il8g006rkds6okygvmsr"},{"post_id":"cjr64il6w0024kds6n3nnkolc","category_id":"cjr64il8d006jkds6jvpchpja","_id":"cjr64il8h006tkds6mgx698l8"},{"post_id":"cjr64il92007okds61bq4kojj","category_id":"cjr64il6d001dkds6amvdjg5j","_id":"cjr64il94007rkds66kejcz0x"},{"post_id":"cjr64il92007okds61bq4kojj","category_id":"cjr64il7o003skds617x6edkx","_id":"cjr64il94007skds6yehlvqks"},{"post_id":"cjr64ild4007tkds6yzh5e4li","category_id":"cjr64il5v000hkds6x5ufltob","_id":"cjr64ild9007vkds6gdkbtnxs"}],"PostTag":[{"post_id":"cjr64il5g0003kds6mch17hnp","tag_id":"cjr64il5o0007kds6ya85hez8","_id":"cjr64il5x000kkds6ep33amxw"},{"post_id":"cjr64il5g0003kds6mch17hnp","tag_id":"cjr64il5t000dkds6ax61lxcp","_id":"cjr64il60000nkds6tlwkr37v"},{"post_id":"cjr64il5x000jkds6yaf31ppb","tag_id":"cjr64il5w000ikds6oawdtek2","_id":"cjr64il62000rkds6g904i3yj"},{"post_id":"cjr64il5k0005kds6rj6ty7tb","tag_id":"cjr64il5w000ikds6oawdtek2","_id":"cjr64il66000ykds6c18zmcch"},{"post_id":"cjr64il5k0005kds6rj6ty7tb","tag_id":"cjr64il60000pkds62cs58npj","_id":"cjr64il670011kds669wsif15"},{"post_id":"cjr64il5p0009kds67lwkeun0","tag_id":"cjr64il65000wkds678geztul","_id":"cjr64il6d001bkds6bkzalywr"},{"post_id":"cjr64il5p0009kds67lwkeun0","tag_id":"cjr64il680014kds65stjfasm","_id":"cjr64il6e001fkds6rjey43jx"},{"post_id":"cjr64il5q000akds68w8am6x6","tag_id":"cjr64il680014kds65stjfasm","_id":"cjr64il6j001nkds6sb2s7pb4"},{"post_id":"cjr64il5q000akds68w8am6x6","tag_id":"cjr64il6e001gkds652mc5k89","_id":"cjr64il6l001qkds669fvoddj"},{"post_id":"cjr64il5r000bkds6n0vv3a19","tag_id":"cjr64il6i001lkds6pvxcdbnu","_id":"cjr64il6n001tkds6folv5jei"},{"post_id":"cjr64il5t000ekds6ziwogi2l","tag_id":"cjr64il680014kds65stjfasm","_id":"cjr64il700029kds66rhi41bu"},{"post_id":"cjr64il5t000ekds6ziwogi2l","tag_id":"cjr64il6q001xkds6cg84954c","_id":"cjr64il72002ckds6ekoxv3uc"},{"post_id":"cjr64il5t000ekds6ziwogi2l","tag_id":"cjr64il6v0023kds65bf6mqgv","_id":"cjr64il75002fkds64hw1ij71"},{"post_id":"cjr64il5v000gkds6lhi891p4","tag_id":"cjr64il6v0023kds65bf6mqgv","_id":"cjr64il79002kkds6zio84and"},{"post_id":"cjr64il5v000gkds6lhi891p4","tag_id":"cjr64il680014kds65stjfasm","_id":"cjr64il7b002nkds6zypj5mud"},{"post_id":"cjr64il5z000lkds6wwn2ufxg","tag_id":"cjr64il78002ikds6zj409uca","_id":"cjr64il7c002qkds6zzz6cudt"},{"post_id":"cjr64il61000qkds6bm3w0yr3","tag_id":"cjr64il7b002okds6qdyujwzo","_id":"cjr64il7f002xkds6u6xirx4h"},{"post_id":"cjr64il61000qkds6bm3w0yr3","tag_id":"cjr64il7e002tkds6g921g7yy","_id":"cjr64il7g002ykds6rklud3v2"},{"post_id":"cjr64il63000tkds69a7kpsnd","tag_id":"cjr64il7f002vkds6kfzf8nf0","_id":"cjr64il7i0036kds6pzazwus6"},{"post_id":"cjr64il63000tkds69a7kpsnd","tag_id":"cjr64il7g002zkds6r850mz6d","_id":"cjr64il7i0038kds6gicemtei"},{"post_id":"cjr64il65000xkds6t218xlmc","tag_id":"cjr64il7e002tkds6g921g7yy","_id":"cjr64il7k003fkds63yb2ksc2"},{"post_id":"cjr64il65000xkds6t218xlmc","tag_id":"cjr64il7j0039kds630i7ykht","_id":"cjr64il7l003ikds672hafcja"},{"post_id":"cjr64il66000zkds6rkhsg2q1","tag_id":"cjr64il7k003dkds6l9yb8mmd","_id":"cjr64il7p003tkds6p3rdevbd"},{"post_id":"cjr64il66000zkds6rkhsg2q1","tag_id":"cjr64il7l003jkds6whkt7roy","_id":"cjr64il7p003ukds6scs37zlv"},{"post_id":"cjr64il66000zkds6rkhsg2q1","tag_id":"cjr64il7n003nkds6ounukw26","_id":"cjr64il7q003ykds6fx4fyat5"},{"post_id":"cjr64il670013kds66mdg63fb","tag_id":"cjr64il7e002tkds6g921g7yy","_id":"cjr64il7s0046kds6dr7wfs9h"},{"post_id":"cjr64il670013kds66mdg63fb","tag_id":"cjr64il7p003wkds6rm6yk6ch","_id":"cjr64il7s0047kds6kc10yy09"},{"post_id":"cjr64il670013kds66mdg63fb","tag_id":"cjr64il7q0041kds66ktk58gb","_id":"cjr64il7t004bkds67r9ubjbh"},{"post_id":"cjr64il690015kds6xn9clzf4","tag_id":"cjr64il7r0044kds6g2dktepi","_id":"cjr64il7t004ckds6o4drtiiy"},{"post_id":"cjr64il6b0018kds6rabswpn5","tag_id":"cjr64il7s0049kds6nv4n8vjb","_id":"cjr64il7u004hkds6o46uw122"},{"post_id":"cjr64il6c001akds68iyjbdqu","tag_id":"cjr64il7u004fkds66g1dx5yf","_id":"cjr64il7w004okds65v04ne0j"},{"post_id":"cjr64il6c001akds68iyjbdqu","tag_id":"cjr64il7s0049kds6nv4n8vjb","_id":"cjr64il7w004pkds6lbsj08fl"},{"post_id":"cjr64il6c001akds68iyjbdqu","tag_id":"cjr64il5w000ikds6oawdtek2","_id":"cjr64il7x004tkds6v3e0d74c"},{"post_id":"cjr64il6d001ekds69ozuw8lz","tag_id":"cjr64il7b002okds6qdyujwzo","_id":"cjr64il7x004vkds65z67gcx1"},{"post_id":"cjr64il6f001hkds6hthn6ndr","tag_id":"cjr64il7r0044kds6g2dktepi","_id":"cjr64il800053kds6b8871ri3"},{"post_id":"cjr64il6f001hkds6hthn6ndr","tag_id":"cjr64il7z004wkds6glh1epy5","_id":"cjr64il810055kds63at1bi1a"},{"post_id":"cjr64il6g001jkds6lqbzmijn","tag_id":"cjr64il800050kds6h45g0fkl","_id":"cjr64il83005dkds6brts6zsx"},{"post_id":"cjr64il6g001jkds6lqbzmijn","tag_id":"cjr64il810057kds63z2dnht7","_id":"cjr64il83005fkds66f7mpqaz"},{"post_id":"cjr64il6i001mkds6236z0czv","tag_id":"cjr64il82005bkds6jr0fd9a1","_id":"cjr64il85005okds60t6tlqg4"},{"post_id":"cjr64il6i001mkds6236z0czv","tag_id":"cjr64il83005hkds6nydy80u6","_id":"cjr64il86005pkds63uq1x9te"},{"post_id":"cjr64il6k001okds6l0pic3pg","tag_id":"cjr64il84005lkds6s34q1002","_id":"cjr64il88005xkds6hbt7oqog"},{"post_id":"cjr64il6k001okds6l0pic3pg","tag_id":"cjr64il86005skds6jm99x7wz","_id":"cjr64il880060kds6dniqcmuk"},{"post_id":"cjr64il6m001skds6h4spkvbl","tag_id":"cjr64il87005vkds66ceqsg1t","_id":"cjr64il8a0067kds6ogqa6c6r"},{"post_id":"cjr64il6m001skds6h4spkvbl","tag_id":"cjr64il83005hkds6nydy80u6","_id":"cjr64il8b006akds6l0xuoul9"},{"post_id":"cjr64il6o001ukds6c9m0xsbf","tag_id":"cjr64il7q0041kds66ktk58gb","_id":"cjr64il8d006hkds6vq96vlo5"},{"post_id":"cjr64il6o001ukds6c9m0xsbf","tag_id":"cjr64il7e002tkds6g921g7yy","_id":"cjr64il8d006kkds6lm2a5a30"},{"post_id":"cjr64il6r001ykds6cfmylfij","tag_id":"cjr64il78002ikds6zj409uca","_id":"cjr64il8e006nkds6jxdadd0k"},{"post_id":"cjr64il6t001zkds6fp374nl6","tag_id":"cjr64il7q0041kds66ktk58gb","_id":"cjr64il8h006ukds6z0jbxc6n"},{"post_id":"cjr64il6t001zkds6fp374nl6","tag_id":"cjr64il8f006pkds6bjv989v5","_id":"cjr64il8h006vkds6wkob0ufr"},{"post_id":"cjr64il6u0022kds6kfwodzvs","tag_id":"cjr64il8g006skds6tph0j0sf","_id":"cjr64il8h006xkds63ef3m7lo"},{"post_id":"cjr64il6w0024kds6n3nnkolc","tag_id":"cjr64il7q0041kds66ktk58gb","_id":"cjr64il8i0070kds6rkxnt2c8"},{"post_id":"cjr64il6w0024kds6n3nnkolc","tag_id":"cjr64il8h006ykds6mowggfuk","_id":"cjr64il8i0071kds64ciw58nc"},{"post_id":"cjr64il6y0026kds6h7ogzobq","tag_id":"cjr64il8i006zkds6um81owwa","_id":"cjr64il8i0073kds6dfvcysqv"},{"post_id":"cjr64il6z0028kds6w3wx1qim","tag_id":"cjr64il8i0072kds646my19qj","_id":"cjr64il8j0075kds6mm0rhiv5"},{"post_id":"cjr64il71002bkds64xilrdiq","tag_id":"cjr64il8j0074kds6efntfo8i","_id":"cjr64il8k0077kds6ll6jbskv"},{"post_id":"cjr64il73002ekds695ls76j8","tag_id":"cjr64il8j0076kds687lx07jn","_id":"cjr64il8l007bkds633iiv4cm"},{"post_id":"cjr64il73002ekds695ls76j8","tag_id":"cjr64il8k0078kds6b7b63hs6","_id":"cjr64il8l007ckds6u5tb4clq"},{"post_id":"cjr64il73002ekds695ls76j8","tag_id":"cjr64il8k0079kds607g9g6e4","_id":"cjr64il8l007ekds6ica8knam"},{"post_id":"cjr64il76002hkds6ph9h19f0","tag_id":"cjr64il8k007akds60mmkqv3u","_id":"cjr64il8l007fkds6z9h0d211"},{"post_id":"cjr64il78002jkds67frr5j27","tag_id":"cjr64il8l007dkds6bhd3zn8i","_id":"cjr64il8m007hkds6sopur15t"},{"post_id":"cjr64il7a002mkds6r5rut60h","tag_id":"cjr64il8i006zkds6um81owwa","_id":"cjr64il8n007jkds68p639mcs"},{"post_id":"cjr64il7b002pkds6yb5q9rvc","tag_id":"cjr64il7k003dkds6l9yb8mmd","_id":"cjr64il8o007lkds6rnm9wwig"},{"post_id":"cjr64il7d002skds6amh0oqla","tag_id":"cjr64il7k003dkds6l9yb8mmd","_id":"cjr64il8o007mkds6ainffkmx"},{"post_id":"cjr64il92007okds61bq4kojj","tag_id":"cjr64il84005lkds6s34q1002","_id":"cjr64il93007pkds6gg5miul9"},{"post_id":"cjr64il92007okds61bq4kojj","tag_id":"cjr64il7e002tkds6g921g7yy","_id":"cjr64il94007qkds6ich3seif"},{"post_id":"cjr64ild4007tkds6yzh5e4li","tag_id":"cjr64il680014kds65stjfasm","_id":"cjr64ild9007wkds69jo98ej5"},{"post_id":"cjr64ild4007tkds6yzh5e4li","tag_id":"cjr64ild8007ukds6mkt3y4ct","_id":"cjr64ild9007xkds6s6siron4"}],"Tag":[{"name":"Hexo","_id":"cjr64il5o0007kds6ya85hez8"},{"name":"HelloWorld","_id":"cjr64il5t000dkds6ax61lxcp"},{"name":"linux","_id":"cjr64il5w000ikds6oawdtek2"},{"name":"JDK","_id":"cjr64il60000pkds62cs58npj"},{"name":"volley","_id":"cjr64il65000wkds678geztul"},{"name":"Android","_id":"cjr64il680014kds65stjfasm"},{"name":"eclipse小技巧","_id":"cjr64il6e001gkds652mc5k89"},{"name":"随笔","_id":"cjr64il6i001lkds6pvxcdbnu"},{"name":"svn","_id":"cjr64il6q001xkds6cg84954c"},{"name":"eclipse","_id":"cjr64il6v0023kds65bf6mqgv"},{"name":"elasticsearch","_id":"cjr64il78002ikds6zj409uca"},{"name":"oracle","_id":"cjr64il7b002okds6qdyujwzo"},{"name":"java","_id":"cjr64il7e002tkds6g921g7yy"},{"name":"win10","_id":"cjr64il7f002vkds6kfzf8nf0"},{"name":"系统","_id":"cjr64il7g002zkds6r850mz6d"},{"name":"JDK HashMap 源码探索","_id":"cjr64il7j0039kds630i7ykht"},{"name":"spring boot","_id":"cjr64il7k003dkds6l9yb8mmd"},{"name":"mybatis","_id":"cjr64il7l003jkds6whkt7roy"},{"name":"日志","_id":"cjr64il7n003nkds6ounukw26"},{"name":"多线程","_id":"cjr64il7p003wkds6rm6yk6ch"},{"name":"代码片段","_id":"cjr64il7q0041kds66ktk58gb"},{"name":"mysql","_id":"cjr64il7r0044kds6g2dktepi"},{"name":"dubbo","_id":"cjr64il7s0049kds6nv4n8vjb"},{"name":"zookeeper","_id":"cjr64il7u004fkds66g1dx5yf"},{"name":"Mac","_id":"cjr64il7z004wkds6glh1epy5"},{"name":"react","_id":"cjr64il800050kds6h45g0fkl"},{"name":"前端","_id":"cjr64il810057kds63z2dnht7"},{"name":"gitlab","_id":"cjr64il82005bkds6jr0fd9a1"},{"name":"devops","_id":"cjr64il83005hkds6nydy80u6"},{"name":"技术相关","_id":"cjr64il84005lkds6s34q1002"},{"name":"翻译","_id":"cjr64il86005skds6jm99x7wz"},{"name":"jenkins","_id":"cjr64il87005vkds66ceqsg1t"},{"name":"sql","_id":"cjr64il8f006pkds6bjv989v5"},{"name":"软件","_id":"cjr64il8g006skds6tph0j0sf"},{"name":"regex","_id":"cjr64il8h006ykds6mowggfuk"},{"name":"git","_id":"cjr64il8i006zkds6um81owwa"},{"name":"neo4j","_id":"cjr64il8i0072kds646my19qj"},{"name":"node","_id":"cjr64il8j0074kds6efntfo8i"},{"name":"kubernetes","_id":"cjr64il8j0076kds687lx07jn"},{"name":"docker","_id":"cjr64il8k0078kds6b7b63hs6"},{"name":"minikube","_id":"cjr64il8k0079kds607g9g6e4"},{"name":"nginx","_id":"cjr64il8k007akds60mmkqv3u"},{"name":"总结展望","_id":"cjr64il8l007dkds6bhd3zn8i"},{"name":"开源项目汇总","_id":"cjr64ild8007ukds6mkt3y4ct"}]}}